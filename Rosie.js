// Generated by Haxe 3.4.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["openfl"] = $hx_exports["openfl"] || {};
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	var display = new flixel_system_FlxPreloader();
	ApplicationMain.preloader = new openfl_display_Preloader(display);
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	var urls = [];
	var types = [];
	urls.push("assets/sounds/blocks-appear.ogg");
	types.push("SOUND");
	urls.push("assets/sounds/blocks-appear.wav");
	types.push("SOUND");
	urls.push("assets/sounds/clear-blocks.ogg");
	types.push("SOUND");
	urls.push("assets/sounds/clear-blocks.wav");
	types.push("SOUND");
	urls.push("assets/sounds/gate-move.ogg");
	types.push("SOUND");
	urls.push("assets/sounds/gate-move.wav");
	types.push("SOUND");
	urls.push("assets/sounds/high-score.ogg");
	types.push("SOUND");
	urls.push("assets/sounds/high-score.wav");
	types.push("SOUND");
	urls.push("assets/sounds/not-allowed.ogg");
	types.push("SOUND");
	urls.push("assets/sounds/not-allowed.wav");
	types.push("SOUND");
	urls.push("assets/sounds/time-running-out.ogg");
	types.push("SOUND");
	urls.push("assets/sounds/time-running-out.wav");
	types.push("SOUND");
	urls.push("assets/images/bg.png");
	types.push("IMAGE");
	urls.push("assets/images/logo.png");
	types.push("IMAGE");
	urls.push("assets/images/rosie.jpg");
	types.push("IMAGE");
	urls.push("assets/images/tile-environment.png");
	types.push("IMAGE");
	urls.push("assets/music/game-over-loop.ogg");
	types.push("MUSIC");
	urls.push("assets/music/game-over.ogg");
	types.push("MUSIC");
	urls.push("assets/music/music.ogg");
	types.push("MUSIC");
	urls.push("assets/credits.tmx");
	types.push("TEXT");
	urls.push("assets/gfx.json");
	types.push("TEXT");
	urls.push("assets/gfx.png");
	types.push("IMAGE");
	urls.push("assets/splash.tmx");
	types.push("TEXT");
	urls.push("assets/world.tmx");
	types.push("TEXT");
	urls.push("flixel/sounds/flixel.ogg");
	types.push("SOUND");
	urls.push("flixel/sounds/beep.ogg");
	types.push("SOUND");
	urls.push("Nokia Cellphone FC Small");
	types.push("FONT");
	urls.push("Monsterrat");
	types.push("FONT");
	urls.push("flixel/images/ui/button.png");
	types.push("IMAGE");
	urls.push("flixel/images/logo/default.png");
	types.push("IMAGE");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") {
				urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
			}
		}
	}
	ApplicationMain.preloader.load(urls,types);
	app.exec();
};
ApplicationMain.init = function() {
	var total = 0;
	ApplicationMain.preloader = null;
	if(total == 0) {
		ApplicationMain.start();
	}
};
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "1", company : "Corundum Games", file : "Rosie", fps : 60, name : "Rosie", orientation : "", packageName : "com.corundumgames.rosie", version : "0.0.1", windows : [{ antialiasing : 0, background : 0, borderless : false, depthBuffer : false, display : 0, fullscreen : true, hardware : false, height : 480, parameters : "{}", resizable : true, stencilBuffer : true, title : "Rosie", vsync : true, width : 640, x : null, y : null}]};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) {
		Reflect.field(entryPoint,"main").apply(entryPoint,[]);
	} else {
		Type.createInstance(DocumentClass,[]);
	}
	if(openfl_Lib.current.stage.window.__fullscreen) {
		openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
	}
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event("resize",false,false));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) {
		return 0;
	} else if(l1.priority > l2.priority) {
		return -1;
	} else {
		return 1;
	}
};
openfl_events_EventDispatcher.prototype = {
	__dispatching: null
	,__targetDispatcher: null
	,__eventMap: null
	,__newEventMap: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null ? _this.existsReserved(type) : _this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
		} else {
			var list1;
			var _this2 = this.__dispatching;
			if((__map_reserved[type] != null ? _this2.getReserved(type) : _this2.h[type]) == true) {
				var _this3 = this.__newEventMap;
				if(!(__map_reserved[type] != null ? _this3.existsReserved(type) : _this3.h.hasOwnProperty(type))) {
					var _this4 = this.__eventMap;
					list1 = (__map_reserved[type] != null ? _this4.getReserved(type) : _this4.h[type]).slice();
					var _this5 = this.__newEventMap;
					if(__map_reserved[type] != null) {
						_this5.setReserved(type,list1);
					} else {
						_this5.h[type] = list1;
					}
				} else {
					var _this6 = this.__newEventMap;
					if(__map_reserved[type] != null) {
						list1 = _this6.getReserved(type);
					} else {
						list1 = _this6.h[type];
					}
				}
			} else {
				var _this7 = this.__eventMap;
				if(__map_reserved[type] != null) {
					list1 = _this7.getReserved(type);
				} else {
					list1 = _this7.h[type];
				}
			}
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(Reflect.compareMethods(list1[i].callback,listener)) {
					return;
				}
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var tmp;
		var _this = this.__dispatching;
		if((__map_reserved[type] != null ? _this.getReserved(type) : _this.h[type]) == true) {
			var _this1 = this.__newEventMap;
			if(__map_reserved[type] != null) {
				tmp = _this1.existsReserved(type);
			} else {
				tmp = _this1.h.hasOwnProperty(type);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this2 = this.__newEventMap;
			return (__map_reserved[type] != null ? _this2.getReserved(type) : _this2.h[type]).length > 0;
		} else {
			var _this3 = this.__eventMap;
			if(__map_reserved[type] != null) {
				return _this3.existsReserved(type);
			} else {
				return _this3.h.hasOwnProperty(type);
			}
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null ? _this.getReserved(type) : _this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__dispatching;
		var dispatching = (__map_reserved[type] != null ? _this1.getReserved(type) : _this1.h[type]) == true;
		if(dispatching) {
			var _this2 = this.__newEventMap;
			if(!(__map_reserved[type] != null ? _this2.existsReserved(type) : _this2.h.hasOwnProperty(type))) {
				var _this3 = this.__eventMap;
				list = (__map_reserved[type] != null ? _this3.getReserved(type) : _this3.h[type]).slice();
				var _this4 = this.__newEventMap;
				if(__map_reserved[type] != null) {
					_this4.setReserved(type,list);
				} else {
					_this4.h[type] = list;
				}
			} else {
				var _this5 = this.__newEventMap;
				if(__map_reserved[type] != null) {
					list = _this5.getReserved(type);
				} else {
					list = _this5.h[type];
				}
			}
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				list.splice(i,1);
				break;
			}
		}
		if(!dispatching) {
			if(list.length == 0) {
				this.__eventMap.remove(type);
			}
			var _this6 = this.__eventMap;
			if(!new haxe_ds__$StringMap_StringMapIterator(_this6,_this6.arrayKeys()).hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
		}
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return false;
		}
		var type = event.type;
		var list;
		var _this = this.__dispatching;
		if((__map_reserved[type] != null ? _this.getReserved(type) : _this.h[type]) == true) {
			var _this1 = this.__newEventMap;
			if(__map_reserved[type] != null) {
				list = _this1.getReserved(type);
			} else {
				list = _this1.h[type];
			}
			if(list == null) {
				return false;
			}
			list = list.slice();
		} else {
			var _this2 = this.__eventMap;
			if(__map_reserved[type] != null) {
				list = _this2.getReserved(type);
			} else {
				list = _this2.h[type];
			}
			if(list == null) {
				return false;
			}
			var _this3 = this.__dispatching;
			if(__map_reserved[type] != null) {
				_this3.setReserved(type,true);
			} else {
				_this3.h[type] = true;
			}
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
			if(listener == list[index]) {
				++index;
			}
		}
		var tmp;
		if(this.__newEventMap != null) {
			var _this4 = this.__newEventMap;
			if(__map_reserved[type] != null) {
				tmp = _this4.existsReserved(type);
			} else {
				tmp = _this4.h.hasOwnProperty(type);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this5 = this.__newEventMap;
			var list1 = __map_reserved[type] != null ? _this5.getReserved(type) : _this5.h[type];
			if(list1.length > 0) {
				var _this6 = this.__eventMap;
				if(__map_reserved[type] != null) {
					_this6.setReserved(type,list1);
				} else {
					_this6.h[type] = list1;
				}
			} else {
				this.__eventMap.remove(type);
			}
			var _this7 = this.__eventMap;
			if(!new haxe_ds__$StringMap_StringMapIterator(_this7,_this7.arrayKeys()).hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			} else {
				this.__newEventMap.remove(type);
			}
		}
		var key = event.type;
		var _this8 = this.__dispatching;
		if(__map_reserved[key] != null) {
			_this8.setReserved(key,false);
		} else {
			_this8.h[key] = false;
		}
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__worldTransform: null
	,__renderCanvas: null
	,__updateChildren: null
	,__updateTransforms: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__offset = new openfl_geom_Point();
	this.__worldOffset = new openfl_geom_Point();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	blendMode: null
	,cacheAsBitmapBounds: null
	,loaderInfo: null
	,parent: null
	,shader: null
	,stage: null
	,__renderTransform: null
	,__worldColorTransform: null
	,__worldOffset: null
	,__worldTransform: null
	,__alpha: null
	,__blendMode: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__isMask: null
	,__mask: null
	,__maskGraphics: null
	,__maskCached: null
	,__name: null
	,__objectTransform: null
	,__offset: null
	,__renderable: null
	,__renderDirty: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scrollRect: null
	,__shader: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__cacheAsBitmap: null
	,__forceCacheAsBitmap: null
	,__updateCachedBitmap: null
	,__cachedBitmapBounds: null
	,__cachedFilterBounds: null
	,__updateFilters: null
	,globalToLocal: function(pos) {
		pos = pos.clone();
		var _this = this.__getWorldTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			pos.x = -_this.tx;
			pos.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - pos.y) + _this.d * (pos.x - _this.tx));
			pos.y = 1.0 / norm * (_this.a * (pos.y - _this.ty) + _this.b * (_this.tx - pos.x));
			pos.x = px;
		}
		return pos;
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return false;
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) {
					this.__update(true,false);
				}
			} else {
				while(current.parent != null) {
					list.push(current);
					current = current.parent;
					if(current.__transformDirty) {
						transformDirty = true;
					}
				}
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) {
				return true;
			}
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				var graphics = this.__graphics;
				if(graphics != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
					if(graphics.__canvas != null) {
						var context = renderSession.context;
						var scrollRect = this.get_scrollRect();
						if(graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
							if(this.__mask != null) {
								renderSession.maskManager.pushMask(this.__mask);
							}
							context.globalAlpha = this.__worldAlpha;
							var transform = this.__renderTransform;
							if(renderSession.roundPixels) {
								context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
							} else {
								context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
							}
							if(scrollRect == null) {
								context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y);
							} else {
								context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
							}
							if(this.__mask != null) {
								renderSession.maskManager.popMask();
							}
						}
					}
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) {
				if(this.stage.get_focus() == this) {
					this.stage.set_focus(null);
				}
				this.dispatchEvent(new openfl_events_Event("removedFromStage",false,false));
			}
			this.stage = stage;
			if(stage != null) {
				this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		this.__updateTransforms();
		if(this.parent != null && this.__isMask) {
			this.__maskCached = false;
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) {
				this.__maskGraphics = new openfl_display_Graphics();
			}
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) {
			this.__updateMask(maskGraphics);
		}
		if(!transformOnly && this.__cacheAsBitmap) {
			if(this.__updateCachedBitmap || this.__updateFilters) {
				if(this.__cachedBitmapBounds == null) {
					this.__cachedBitmapBounds = new openfl_geom_Rectangle();
				}
				if(this.cacheAsBitmapBounds != null) {
					this.__cachedBitmapBounds.copyFrom(this.cacheAsBitmapBounds);
				} else {
					this.__cachedBitmapBounds.setEmpty();
					this.__getRenderBounds(this.__cachedBitmapBounds,openfl_geom_Matrix.__identity);
				}
				if(this.__filters != null) {
					if(this.__cachedFilterBounds == null) {
						this.__cachedFilterBounds = new openfl_geom_Rectangle();
					}
					this.__cachedFilterBounds.setEmpty();
					openfl_filters_BitmapFilter.__expandBounds(this.__filters,this.__cachedFilterBounds,openfl_geom_Matrix.__identity);
					this.__cachedBitmapBounds.x += this.__cachedFilterBounds.x;
					this.__cachedBitmapBounds.y += this.__cachedFilterBounds.y;
				}
			}
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == 10) {
					this.__blendMode = this.parent.__blendMode;
				}
				if(this.shader == null) {
					this.__shader = this.parent.__shader;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
			}
			if(updateChildren && this.__renderDirty) {
				this.__renderDirty = false;
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) {
			return;
		}
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) {
				maskGraphics.__bounds = new openfl_geom_Rectangle();
			}
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform.clone() : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			this.__worldOffset.copyFrom(this.parent.__worldOffset);
		} else {
			this.__worldTransform.copyFrom(local);
			this.__worldOffset.setTo(0,0);
		}
		if(this.__scrollRect != null) {
			this.__offset = this.__worldTransform.deltaTransformPoint(this.__scrollRect.get_topLeft());
			this.__worldOffset.offset(this.__offset.x,this.__offset.y);
		} else {
			this.__offset.setTo(0,0);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
		this.__renderTransform.translate(-this.__worldOffset.x,-this.__worldOffset.y);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,set_blendMode: function(value) {
		this.__blendMode = value;
		return this.blendMode = value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			this.__forceCacheAsBitmap = true;
			this.__cacheAsBitmap = true;
			this.__updateFilters = true;
		} else {
			this.__filters = null;
			this.__forceCacheAsBitmap = false;
			this.__cacheAsBitmap = false;
			this.__updateFilters = false;
		}
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_Lib.current.stage.__mouseY;
		var _this = this.__getWorldTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_Lib.current.stage.__mouseY;
		var _this = this.__getWorldTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) {
			return this.__transform.a;
		} else {
			return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
		}
	}
	,set_scaleX: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) {
			return this.__transform.d;
		} else {
			return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
		}
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) {
			this.set_scaleX(value / bounds.width);
		} else {
			this.set_scaleX(1);
		}
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",get_transform:"get_transform",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",set_name:"set_name",get_name:"get_name",get_mask:"get_mask",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_blendMode:"set_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,tabIndex: null
	,__tabEnabled: null
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		if(child != null) {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) {
				child.__setStageReference(this.stage);
			}
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			HxOverrides.remove(this.__children,child);
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			child.parent = this;
			if(this.stage != null) {
				child.__setStageReference(this.stage);
			}
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__dispatchEvent(new openfl_events_Event("removed",true));
			if(this.stage != null) {
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) {
			event.target = this;
		}
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCanceled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCanceled) {
					return true;
				}
			}
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) {
				continue;
			}
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) {
				continue;
			}
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) {
			return false;
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) {
			renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		}
		if(this.__mask != null) {
			renderSession.maskManager.pushMask(this.__mask);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
		if(this.__mask != null) {
			renderSession.maskManager.popMask();
		}
		if(this.get_scrollRect() != null) {
			renderSession.maskManager.popRect();
		}
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) {
			renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		}
		if(this.__mask != null) {
			renderSession.maskManager.pushMask(this.__mask);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
		if(this.__mask != null) {
			renderSession.maskManager.popMask();
		}
		if(this.get_scrollRect() != null) {
			renderSession.maskManager.popRect();
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) {
				this.__dispatchEvent(new openfl_events_Event("removedFromStage",false,false));
			}
			this.stage = stage;
			if(stage != null) {
				this.__dispatchEvent(new openfl_events_Event("addedToStage",false,false));
			}
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) {
			return;
		}
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,hitArea: null
	,useHandCursor: null
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				return interactiveOnly;
			} else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(!this.__tabEnabled) {
			return this.buttonMode;
		} else {
			return true;
		}
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	openfl_display_Sprite.call(this);
	flixel_FlxG.signals.focusGained.add(function() {
		haxe_Log.trace("focusGained",{ fileName : "Main.hx", lineNumber : 25, className : "Main", methodName : "new"});
	});
	flixel_FlxG.signals.focusLost.add(function() {
		haxe_Log.trace("focusLost",{ fileName : "Main.hx", lineNumber : 26, className : "Main", methodName : "new"});
	});
	flixel_FlxG.signals.stateSwitched.add(function() {
		haxe_Log.trace("stateSwitched",{ fileName : "Main.hx", lineNumber : 27, className : "Main", methodName : "new"});
	});
	flixel_FlxG.signals.gameStarted.add(function() {
		flixel_FlxG.fixedTimestep = false;
		flixel_FlxG.cameras.useBufferLocking = true;
		flixel_FlxG.camera.pixelPerfectRender = true;
		flixel_FlxG.camera.filtersEnabled = false;
		flixel_FlxG.game.filtersEnabled = false;
		haxe_Log.trace("Render Mode: " + Std.string(flixel_FlxG.renderMethod),{ fileName : "Main.hx", lineNumber : 40, className : "Main", methodName : "new"});
		haxe_Log.trace("Mobile Device: " + Std.string(flixel_FlxG.html5.onMobile),{ fileName : "Main.hx", lineNumber : 41, className : "Main", methodName : "new"});
	});
	this.addChild(new flixel_FlxGame(320,240,states_SplashScreenState,2.0,60,60,true));
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: Main
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var lime_AssetLibrary = function() {
	this.onChange = new lime_app_Event_$Void_$Void();
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	onChange: null
	,exists: function(id,type) {
		return false;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) {
			return null;
		} else {
			return bytes.getString(0,bytes.length);
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf);
	var _this = this.path;
	if(__map_reserved["assets/sounds/blocks-appear.ogg"] != null) {
		_this.setReserved("assets/sounds/blocks-appear.ogg","assets/sounds/blocks-appear.ogg");
	} else {
		_this.h["assets/sounds/blocks-appear.ogg"] = "assets/sounds/blocks-appear.ogg";
	}
	var _this1 = this.type;
	var value = "SOUND";
	if(__map_reserved["assets/sounds/blocks-appear.ogg"] != null) {
		_this1.setReserved("assets/sounds/blocks-appear.ogg",value);
	} else {
		_this1.h["assets/sounds/blocks-appear.ogg"] = value;
	}
	var _this2 = this.path;
	if(__map_reserved["assets/sounds/blocks-appear.wav"] != null) {
		_this2.setReserved("assets/sounds/blocks-appear.wav","assets/sounds/blocks-appear.wav");
	} else {
		_this2.h["assets/sounds/blocks-appear.wav"] = "assets/sounds/blocks-appear.wav";
	}
	var _this3 = this.type;
	var value1 = "SOUND";
	if(__map_reserved["assets/sounds/blocks-appear.wav"] != null) {
		_this3.setReserved("assets/sounds/blocks-appear.wav",value1);
	} else {
		_this3.h["assets/sounds/blocks-appear.wav"] = value1;
	}
	var _this4 = this.path;
	if(__map_reserved["assets/sounds/clear-blocks.ogg"] != null) {
		_this4.setReserved("assets/sounds/clear-blocks.ogg","assets/sounds/clear-blocks.ogg");
	} else {
		_this4.h["assets/sounds/clear-blocks.ogg"] = "assets/sounds/clear-blocks.ogg";
	}
	var _this5 = this.type;
	var value2 = "SOUND";
	if(__map_reserved["assets/sounds/clear-blocks.ogg"] != null) {
		_this5.setReserved("assets/sounds/clear-blocks.ogg",value2);
	} else {
		_this5.h["assets/sounds/clear-blocks.ogg"] = value2;
	}
	var _this6 = this.path;
	if(__map_reserved["assets/sounds/clear-blocks.wav"] != null) {
		_this6.setReserved("assets/sounds/clear-blocks.wav","assets/sounds/clear-blocks.wav");
	} else {
		_this6.h["assets/sounds/clear-blocks.wav"] = "assets/sounds/clear-blocks.wav";
	}
	var _this7 = this.type;
	var value3 = "SOUND";
	if(__map_reserved["assets/sounds/clear-blocks.wav"] != null) {
		_this7.setReserved("assets/sounds/clear-blocks.wav",value3);
	} else {
		_this7.h["assets/sounds/clear-blocks.wav"] = value3;
	}
	var _this8 = this.path;
	if(__map_reserved["assets/sounds/gate-move.ogg"] != null) {
		_this8.setReserved("assets/sounds/gate-move.ogg","assets/sounds/gate-move.ogg");
	} else {
		_this8.h["assets/sounds/gate-move.ogg"] = "assets/sounds/gate-move.ogg";
	}
	var _this9 = this.type;
	var value4 = "SOUND";
	if(__map_reserved["assets/sounds/gate-move.ogg"] != null) {
		_this9.setReserved("assets/sounds/gate-move.ogg",value4);
	} else {
		_this9.h["assets/sounds/gate-move.ogg"] = value4;
	}
	var _this10 = this.path;
	if(__map_reserved["assets/sounds/gate-move.wav"] != null) {
		_this10.setReserved("assets/sounds/gate-move.wav","assets/sounds/gate-move.wav");
	} else {
		_this10.h["assets/sounds/gate-move.wav"] = "assets/sounds/gate-move.wav";
	}
	var _this11 = this.type;
	var value5 = "SOUND";
	if(__map_reserved["assets/sounds/gate-move.wav"] != null) {
		_this11.setReserved("assets/sounds/gate-move.wav",value5);
	} else {
		_this11.h["assets/sounds/gate-move.wav"] = value5;
	}
	var _this12 = this.path;
	if(__map_reserved["assets/sounds/high-score.ogg"] != null) {
		_this12.setReserved("assets/sounds/high-score.ogg","assets/sounds/high-score.ogg");
	} else {
		_this12.h["assets/sounds/high-score.ogg"] = "assets/sounds/high-score.ogg";
	}
	var _this13 = this.type;
	var value6 = "SOUND";
	if(__map_reserved["assets/sounds/high-score.ogg"] != null) {
		_this13.setReserved("assets/sounds/high-score.ogg",value6);
	} else {
		_this13.h["assets/sounds/high-score.ogg"] = value6;
	}
	var _this14 = this.path;
	if(__map_reserved["assets/sounds/high-score.wav"] != null) {
		_this14.setReserved("assets/sounds/high-score.wav","assets/sounds/high-score.wav");
	} else {
		_this14.h["assets/sounds/high-score.wav"] = "assets/sounds/high-score.wav";
	}
	var _this15 = this.type;
	var value7 = "SOUND";
	if(__map_reserved["assets/sounds/high-score.wav"] != null) {
		_this15.setReserved("assets/sounds/high-score.wav",value7);
	} else {
		_this15.h["assets/sounds/high-score.wav"] = value7;
	}
	var _this16 = this.path;
	if(__map_reserved["assets/sounds/not-allowed.ogg"] != null) {
		_this16.setReserved("assets/sounds/not-allowed.ogg","assets/sounds/not-allowed.ogg");
	} else {
		_this16.h["assets/sounds/not-allowed.ogg"] = "assets/sounds/not-allowed.ogg";
	}
	var _this17 = this.type;
	var value8 = "SOUND";
	if(__map_reserved["assets/sounds/not-allowed.ogg"] != null) {
		_this17.setReserved("assets/sounds/not-allowed.ogg",value8);
	} else {
		_this17.h["assets/sounds/not-allowed.ogg"] = value8;
	}
	var _this18 = this.path;
	if(__map_reserved["assets/sounds/not-allowed.wav"] != null) {
		_this18.setReserved("assets/sounds/not-allowed.wav","assets/sounds/not-allowed.wav");
	} else {
		_this18.h["assets/sounds/not-allowed.wav"] = "assets/sounds/not-allowed.wav";
	}
	var _this19 = this.type;
	var value9 = "SOUND";
	if(__map_reserved["assets/sounds/not-allowed.wav"] != null) {
		_this19.setReserved("assets/sounds/not-allowed.wav",value9);
	} else {
		_this19.h["assets/sounds/not-allowed.wav"] = value9;
	}
	var _this20 = this.path;
	if(__map_reserved["assets/sounds/time-running-out.ogg"] != null) {
		_this20.setReserved("assets/sounds/time-running-out.ogg","assets/sounds/time-running-out.ogg");
	} else {
		_this20.h["assets/sounds/time-running-out.ogg"] = "assets/sounds/time-running-out.ogg";
	}
	var _this21 = this.type;
	var value10 = "SOUND";
	if(__map_reserved["assets/sounds/time-running-out.ogg"] != null) {
		_this21.setReserved("assets/sounds/time-running-out.ogg",value10);
	} else {
		_this21.h["assets/sounds/time-running-out.ogg"] = value10;
	}
	var _this22 = this.path;
	if(__map_reserved["assets/sounds/time-running-out.wav"] != null) {
		_this22.setReserved("assets/sounds/time-running-out.wav","assets/sounds/time-running-out.wav");
	} else {
		_this22.h["assets/sounds/time-running-out.wav"] = "assets/sounds/time-running-out.wav";
	}
	var _this23 = this.type;
	var value11 = "SOUND";
	if(__map_reserved["assets/sounds/time-running-out.wav"] != null) {
		_this23.setReserved("assets/sounds/time-running-out.wav",value11);
	} else {
		_this23.h["assets/sounds/time-running-out.wav"] = value11;
	}
	var _this24 = this.path;
	if(__map_reserved["assets/images/bg.png"] != null) {
		_this24.setReserved("assets/images/bg.png","assets/images/bg.png");
	} else {
		_this24.h["assets/images/bg.png"] = "assets/images/bg.png";
	}
	var _this25 = this.type;
	var value12 = "IMAGE";
	if(__map_reserved["assets/images/bg.png"] != null) {
		_this25.setReserved("assets/images/bg.png",value12);
	} else {
		_this25.h["assets/images/bg.png"] = value12;
	}
	var _this26 = this.path;
	if(__map_reserved["assets/images/logo.png"] != null) {
		_this26.setReserved("assets/images/logo.png","assets/images/logo.png");
	} else {
		_this26.h["assets/images/logo.png"] = "assets/images/logo.png";
	}
	var _this27 = this.type;
	var value13 = "IMAGE";
	if(__map_reserved["assets/images/logo.png"] != null) {
		_this27.setReserved("assets/images/logo.png",value13);
	} else {
		_this27.h["assets/images/logo.png"] = value13;
	}
	var _this28 = this.path;
	if(__map_reserved["assets/images/rosie.jpg"] != null) {
		_this28.setReserved("assets/images/rosie.jpg","assets/images/rosie.jpg");
	} else {
		_this28.h["assets/images/rosie.jpg"] = "assets/images/rosie.jpg";
	}
	var _this29 = this.type;
	var value14 = "IMAGE";
	if(__map_reserved["assets/images/rosie.jpg"] != null) {
		_this29.setReserved("assets/images/rosie.jpg",value14);
	} else {
		_this29.h["assets/images/rosie.jpg"] = value14;
	}
	var _this30 = this.path;
	if(__map_reserved["assets/images/tile-environment.png"] != null) {
		_this30.setReserved("assets/images/tile-environment.png","assets/images/tile-environment.png");
	} else {
		_this30.h["assets/images/tile-environment.png"] = "assets/images/tile-environment.png";
	}
	var _this31 = this.type;
	var value15 = "IMAGE";
	if(__map_reserved["assets/images/tile-environment.png"] != null) {
		_this31.setReserved("assets/images/tile-environment.png",value15);
	} else {
		_this31.h["assets/images/tile-environment.png"] = value15;
	}
	var _this32 = this.path;
	if(__map_reserved["assets/music/game-over-loop.ogg"] != null) {
		_this32.setReserved("assets/music/game-over-loop.ogg","assets/music/game-over-loop.ogg");
	} else {
		_this32.h["assets/music/game-over-loop.ogg"] = "assets/music/game-over-loop.ogg";
	}
	var _this33 = this.type;
	var value16 = "MUSIC";
	if(__map_reserved["assets/music/game-over-loop.ogg"] != null) {
		_this33.setReserved("assets/music/game-over-loop.ogg",value16);
	} else {
		_this33.h["assets/music/game-over-loop.ogg"] = value16;
	}
	var _this34 = this.path;
	if(__map_reserved["assets/music/game-over.ogg"] != null) {
		_this34.setReserved("assets/music/game-over.ogg","assets/music/game-over.ogg");
	} else {
		_this34.h["assets/music/game-over.ogg"] = "assets/music/game-over.ogg";
	}
	var _this35 = this.type;
	var value17 = "MUSIC";
	if(__map_reserved["assets/music/game-over.ogg"] != null) {
		_this35.setReserved("assets/music/game-over.ogg",value17);
	} else {
		_this35.h["assets/music/game-over.ogg"] = value17;
	}
	var _this36 = this.path;
	if(__map_reserved["assets/music/music.ogg"] != null) {
		_this36.setReserved("assets/music/music.ogg","assets/music/music.ogg");
	} else {
		_this36.h["assets/music/music.ogg"] = "assets/music/music.ogg";
	}
	var _this37 = this.type;
	var value18 = "MUSIC";
	if(__map_reserved["assets/music/music.ogg"] != null) {
		_this37.setReserved("assets/music/music.ogg",value18);
	} else {
		_this37.h["assets/music/music.ogg"] = value18;
	}
	var _this38 = this.path;
	if(__map_reserved["assets/credits.tmx"] != null) {
		_this38.setReserved("assets/credits.tmx","assets/credits.tmx");
	} else {
		_this38.h["assets/credits.tmx"] = "assets/credits.tmx";
	}
	var _this39 = this.type;
	var value19 = "TEXT";
	if(__map_reserved["assets/credits.tmx"] != null) {
		_this39.setReserved("assets/credits.tmx",value19);
	} else {
		_this39.h["assets/credits.tmx"] = value19;
	}
	var _this40 = this.path;
	if(__map_reserved["assets/gfx.json"] != null) {
		_this40.setReserved("assets/gfx.json","assets/gfx.json");
	} else {
		_this40.h["assets/gfx.json"] = "assets/gfx.json";
	}
	var _this41 = this.type;
	var value20 = "TEXT";
	if(__map_reserved["assets/gfx.json"] != null) {
		_this41.setReserved("assets/gfx.json",value20);
	} else {
		_this41.h["assets/gfx.json"] = value20;
	}
	var _this42 = this.path;
	if(__map_reserved["assets/gfx.png"] != null) {
		_this42.setReserved("assets/gfx.png","assets/gfx.png");
	} else {
		_this42.h["assets/gfx.png"] = "assets/gfx.png";
	}
	var _this43 = this.type;
	var value21 = "IMAGE";
	if(__map_reserved["assets/gfx.png"] != null) {
		_this43.setReserved("assets/gfx.png",value21);
	} else {
		_this43.h["assets/gfx.png"] = value21;
	}
	var _this44 = this.path;
	if(__map_reserved["assets/splash.tmx"] != null) {
		_this44.setReserved("assets/splash.tmx","assets/splash.tmx");
	} else {
		_this44.h["assets/splash.tmx"] = "assets/splash.tmx";
	}
	var _this45 = this.type;
	var value22 = "TEXT";
	if(__map_reserved["assets/splash.tmx"] != null) {
		_this45.setReserved("assets/splash.tmx",value22);
	} else {
		_this45.h["assets/splash.tmx"] = value22;
	}
	var _this46 = this.path;
	if(__map_reserved["assets/world.tmx"] != null) {
		_this46.setReserved("assets/world.tmx","assets/world.tmx");
	} else {
		_this46.h["assets/world.tmx"] = "assets/world.tmx";
	}
	var _this47 = this.type;
	var value23 = "TEXT";
	if(__map_reserved["assets/world.tmx"] != null) {
		_this47.setReserved("assets/world.tmx",value23);
	} else {
		_this47.h["assets/world.tmx"] = value23;
	}
	var _this48 = this.path;
	if(__map_reserved["flixel/sounds/flixel.ogg"] != null) {
		_this48.setReserved("flixel/sounds/flixel.ogg","flixel/sounds/flixel.ogg");
	} else {
		_this48.h["flixel/sounds/flixel.ogg"] = "flixel/sounds/flixel.ogg";
	}
	var _this49 = this.type;
	var value24 = "SOUND";
	if(__map_reserved["flixel/sounds/flixel.ogg"] != null) {
		_this49.setReserved("flixel/sounds/flixel.ogg",value24);
	} else {
		_this49.h["flixel/sounds/flixel.ogg"] = value24;
	}
	var _this50 = this.path;
	if(__map_reserved["flixel/sounds/beep.ogg"] != null) {
		_this50.setReserved("flixel/sounds/beep.ogg","flixel/sounds/beep.ogg");
	} else {
		_this50.h["flixel/sounds/beep.ogg"] = "flixel/sounds/beep.ogg";
	}
	var _this51 = this.type;
	var value25 = "SOUND";
	if(__map_reserved["flixel/sounds/beep.ogg"] != null) {
		_this51.setReserved("flixel/sounds/beep.ogg",value25);
	} else {
		_this51.h["flixel/sounds/beep.ogg"] = value25;
	}
	var _this52 = this.className;
	var value26 = _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf;
	if(__map_reserved["flixel/fonts/nokiafc22.ttf"] != null) {
		_this52.setReserved("flixel/fonts/nokiafc22.ttf",value26);
	} else {
		_this52.h["flixel/fonts/nokiafc22.ttf"] = value26;
	}
	var _this53 = this.type;
	var value27 = "FONT";
	if(__map_reserved["flixel/fonts/nokiafc22.ttf"] != null) {
		_this53.setReserved("flixel/fonts/nokiafc22.ttf",value27);
	} else {
		_this53.h["flixel/fonts/nokiafc22.ttf"] = value27;
	}
	var _this54 = this.className;
	var value28 = _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf;
	if(__map_reserved["flixel/fonts/monsterrat.ttf"] != null) {
		_this54.setReserved("flixel/fonts/monsterrat.ttf",value28);
	} else {
		_this54.h["flixel/fonts/monsterrat.ttf"] = value28;
	}
	var _this55 = this.type;
	var value29 = "FONT";
	if(__map_reserved["flixel/fonts/monsterrat.ttf"] != null) {
		_this55.setReserved("flixel/fonts/monsterrat.ttf",value29);
	} else {
		_this55.h["flixel/fonts/monsterrat.ttf"] = value29;
	}
	var _this56 = this.path;
	if(__map_reserved["flixel/images/ui/button.png"] != null) {
		_this56.setReserved("flixel/images/ui/button.png","flixel/images/ui/button.png");
	} else {
		_this56.h["flixel/images/ui/button.png"] = "flixel/images/ui/button.png";
	}
	var _this57 = this.type;
	var value30 = "IMAGE";
	if(__map_reserved["flixel/images/ui/button.png"] != null) {
		_this57.setReserved("flixel/images/ui/button.png",value30);
	} else {
		_this57.h["flixel/images/ui/button.png"] = value30;
	}
	var _this58 = this.path;
	if(__map_reserved["flixel/images/logo/default.png"] != null) {
		_this58.setReserved("flixel/images/logo/default.png","flixel/images/logo/default.png");
	} else {
		_this58.h["flixel/images/logo/default.png"] = "flixel/images/logo/default.png";
	}
	var _this59 = this.type;
	var value31 = "IMAGE";
	if(__map_reserved["flixel/images/logo/default.png"] != null) {
		_this59.setReserved("flixel/images/logo/default.png",value31);
	} else {
		_this59.h["flixel/images/logo/default.png"] = value31;
	}
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) {
		assetsPrefix = ApplicationMain.config.assetsPrefix;
	}
	if(assetsPrefix != null) {
		var k = this.path.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var _this60 = this.path;
			var value32 = assetsPrefix + (__map_reserved[k1] != null ? _this60.getReserved(k1) : _this60.h[k1]);
			var _this61 = this.path;
			if(__map_reserved[k1] != null) {
				_this61.setReserved(k1,value32);
			} else {
				_this61.h[k1] = value32;
			}
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	className: null
	,path: null
	,type: null
	,exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var _this = this.type;
		var assetType = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getBytes: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		var _this1 = lime_app_Preloader.loaders;
		var loader = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
		if(loader == null) {
			return null;
		}
		var bytes = loader.bytes;
		if(bytes != null) {
			return bytes;
		} else {
			return null;
		}
	}
	,getFont: function(id) {
		var _this = this.className;
		return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id],[]) , lime_text_Font);
	}
	,getImage: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		var _this1 = lime_app_Preloader.images;
		return lime_graphics_Image.fromImageElement(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]);
	}
	,getPath: function(id) {
		var _this = this.path;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getText: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		var _this1 = lime_app_Preloader.loaders;
		var loader = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
		if(loader == null) {
			return null;
		}
		var bytes = loader.bytes;
		if(bytes != null) {
			return bytes.getString(0,bytes.length);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		if(type != null) {
			js_Boot.__cast(type , String);
		}
		return true;
	}
	,list: function(type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var items = [];
		var id = this.type.keys();
		while(id.hasNext()) {
			var id1 = id.next();
			if(requestedType == null || this.exists(id1,type)) {
				items.push(id1);
			}
		}
		return items;
	}
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.prototype = {
	name: null
	,src: null
	,__fontPath: null
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Nokia Cellphone FC Small";
};
$hxClasses["__ASSET__flixel_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.__name__ = ["__ASSET__flixel_fonts_nokiafc22_ttf"];
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Monsterrat";
};
$hxClasses["__ASSET__flixel_fonts_monsterrat_ttf"] = _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf;
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.__name__ = ["__ASSET__flixel_fonts_monsterrat_ttf"];
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.registerFont = function(font) {
	var instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
	}
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	__class__: openfl_text_Font
});
var _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf = function() {
	var font = new _$_$ASSET_$_$flixel_$fonts_$nokiafc22_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf"] = _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.__name__ = ["__ASSET__OPENFL__flixel_fonts_nokiafc22_ttf"];
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$nokiafc22_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf = function() {
	var font = new _$_$ASSET_$_$flixel_$fonts_$monsterrat_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__flixel_fonts_monsterrat_ttf"] = _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.__name__ = ["__ASSET__OPENFL__flixel_fonts_monsterrat_ttf"];
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$flixel_$fonts_$monsterrat_$ttf
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var IntIterator = function(min,max) {
	this.min = min;
	this.max = max;
};
$hxClasses["IntIterator"] = IntIterator;
IntIterator.__name__ = ["IntIterator"];
IntIterator.prototype = {
	min: null
	,max: null
	,hasNext: function() {
		return this.min < this.max;
	}
	,next: function() {
		return this.min++;
	}
	,__class__: IntIterator
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = ["Lambda"];
Lambda.array = function(it) {
	var a = [];
	var i = $iterator(it)();
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
Math.__name__ = ["Math"];
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var y = this.getHeight() / 2 - 3.5;
	var width = this.getWidth() - 60;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,7);
	this.outline.set_x(30);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - 4,3);
	this.progress.set_x(32);
	this.progress.set_y(y + 2);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	outline: null
	,progress: null
	,getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		return 480;
	}
	,getWidth: function() {
		return 640;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) {
			percentLoaded = 1;
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.hasField = function(o,field) {
	return Object.prototype.hasOwnProperty.call(o,field);
};
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.setField = function(o,field,value) {
	o[field] = value;
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.callMethod = function(o,func,args) {
	return func.apply(o,args);
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0;
	var _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std["is"] = function(v,t) {
	return js_Boot.__instanceof(v,t);
};
Std.instance = function(value,c) {
	if((value instanceof c)) {
		return value;
	} else {
		return null;
	}
};
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std["int"] = function(x) {
	return x | 0;
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.parseFloat = function(x) {
	return parseFloat(x);
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.urlEncode = function(s) {
	return encodeURIComponent(s);
};
StringTools.urlDecode = function(s) {
	return decodeURIComponent(s.split("+").join(" "));
};
StringTools.htmlEscape = function(s,quotes) {
	s = s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
	if(quotes) {
		return s.split("\"").join("&quot;").split("'").join("&#039;");
	} else {
		return s;
	}
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return HxOverrides.substr(s,slen - elen,elen) == end;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s = c + s;
	return s;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	while(s.length < l) s += c;
	return s;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
StringTools.fastCodeAt = function(s,index) {
	return s.charCodeAt(index);
};
StringTools.isEof = function(c) {
	return c != c;
};
StringTools.quoteUnixArg = function(argument) {
	if(argument == "") {
		return "''";
	}
	if(!new EReg("[^a-zA-Z0-9_@%+=:,./-]","").match(argument)) {
		return argument;
	}
	return "'" + StringTools.replace(argument,"'","'\"'\"'") + "'";
};
StringTools.quoteWinArg = function(argument,escapeMetaCharacters) {
	var result_b;
	var result_b1;
	if(!new EReg("^[^ \t\\\\\"]+$","").match(argument)) {
		result_b1 = "";
		var needquote = argument.indexOf(" ") != -1 || argument.indexOf("\t") != -1 || argument == "";
		if(needquote) {
			result_b1 = "\"";
		}
		var bs_buf = new StringBuf();
		var _g1 = 0;
		var _g = argument.length;
		while(_g1 < _g) {
			var i = _g1++;
			var _g2 = HxOverrides.cca(argument,i);
			if(_g2 == null) {
				if(bs_buf.b.length > 0) {
					result_b1 += Std.string(bs_buf.b);
					bs_buf = new StringBuf();
				}
				result_b1 += String.fromCharCode(_g2);
			} else {
				switch(_g2) {
				case 34:
					var bs = bs_buf.b;
					result_b1 += bs == null ? "null" : "" + bs;
					result_b1 += bs == null ? "null" : "" + bs;
					bs_buf = new StringBuf();
					result_b1 += "\\\"";
					break;
				case 92:
					bs_buf.b += "\\";
					break;
				default:
					if(bs_buf.b.length > 0) {
						result_b1 += Std.string(bs_buf.b);
						bs_buf = new StringBuf();
					}
					result_b1 += String.fromCharCode(_g2);
				}
			}
		}
		result_b1 += Std.string(bs_buf.b);
		if(needquote) {
			result_b1 += Std.string(bs_buf.b);
			result_b1 += "\"";
		}
		argument = result_b1;
	}
	if(escapeMetaCharacters) {
		result_b = "";
		var _g11 = 0;
		var _g3 = argument.length;
		while(_g11 < _g3) {
			var i1 = _g11++;
			var c = HxOverrides.cca(argument,i1);
			if(StringTools.winMetaCharacters.indexOf(c) >= 0) {
				result_b += "^";
			}
			result_b += String.fromCharCode(c);
		}
		return result_b;
	} else {
		return argument;
	}
};
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) {
		return null;
	} else {
		return js_Boot.getClass(o);
	}
};
Type.getEnum = function(o) {
	if(o == null) {
		return null;
	}
	return o.__enum__;
};
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type.getEnumConstructs = function(e) {
	return e.__constructs__.slice();
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		return false;
	}
	return true;
};
Type.enumConstructor = function(e) {
	return e[0];
};
Type.enumParameters = function(e) {
	return e.slice(2);
};
Type.enumIndex = function(e) {
	return e[1];
};
Type.allEnums = function(e) {
	return e.__empty_constructs__;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var de_polygonal_Printf = function() { };
$hxClasses["de.polygonal.Printf"] = de_polygonal_Printf;
de_polygonal_Printf.__name__ = ["de","polygonal","Printf"];
de_polygonal_Printf._tokenList = null;
de_polygonal_Printf._padChars = null;
de_polygonal_Printf.init = function() {
	de_polygonal_Printf._tokenList = [];
	var this1 = new Array(40);
	de_polygonal_Printf._padChars = this1;
	var _g = 0;
	while(_g < 20) {
		var i = _g++;
		de_polygonal_Printf._padChars[i] = StringTools.rpad("","0",i);
	}
	var _g1 = 0;
	while(_g1 < 20) {
		var i1 = _g1++;
		de_polygonal_Printf._padChars[i1 + 20] = StringTools.rpad(""," ",i1);
	}
};
de_polygonal_Printf.format = function(fmt,args) {
	if(!de_polygonal_Printf._initialized) {
		de_polygonal_Printf._initialized = true;
		de_polygonal_Printf.init();
	}
	var output_b = "";
	var argIndex = 0;
	var tokens = [];
	var _g1 = 0;
	var _g = de_polygonal_Printf.tokenize(fmt,tokens);
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = tokens[i];
		switch(_g2[1]) {
		case 0:
			var string = _g2[2];
			output_b += string == null ? "null" : "" + string;
			break;
		case 1:
			var tagArgs = _g2[3];
			var type = _g2[2];
			if(tagArgs.width == null) {
				if(!js_Boot.__instanceof(args[argIndex],Int)) {
					throw new js__$Boot_HaxeError(new de_polygonal_PrintfError("invalid 'width' argument"));
				}
				tagArgs.width = args[argIndex++];
			}
			if(tagArgs.precision == null) {
				if(!js_Boot.__instanceof(args[argIndex],Int)) {
					throw new js__$Boot_HaxeError(new de_polygonal_PrintfError("invalid 'precision' argument"));
				}
				tagArgs.precision = args[argIndex++];
			}
			var f;
			switch(type[1]) {
			case 0:
				var intType = type[2];
				switch(intType[1]) {
				case 0:
					f = de_polygonal_Printf.formatCharacter;
					break;
				case 1:
					f = de_polygonal_Printf.formatSignedDecimal;
					break;
				case 2:
					f = de_polygonal_Printf.formatUnsignedDecimal;
					break;
				case 3:
					f = de_polygonal_Printf.formatOctal;
					break;
				case 4:
					f = de_polygonal_Printf.formatHexadecimal;
					break;
				case 5:
					f = de_polygonal_Printf.formatBinary;
					break;
				}
				break;
			case 1:
				var floatType = type[2];
				switch(floatType[1]) {
				case 0:
					f = de_polygonal_Printf.formatFloat;
					break;
				case 1:
					f = de_polygonal_Printf.formatScientific;
					break;
				case 2:
					f = de_polygonal_Printf.formatNaturalFloat;
					break;
				}
				break;
			case 2:
				f = de_polygonal_Printf.formatString;
				break;
			case 3:
				throw new js__$Boot_HaxeError(new de_polygonal_PrintfError("specifier 'p' is not supported"));
				break;
			case 4:
				throw new js__$Boot_HaxeError(new de_polygonal_PrintfError("specifier 'n' is not supported"));
				break;
			}
			var value;
			if(tagArgs.pos > -1) {
				if(tagArgs.pos > args.length - 1) {
					throw new js__$Boot_HaxeError(new de_polygonal_PrintfError("argument index out of range"));
				}
				value = args[tagArgs.pos];
			} else {
				value = args[argIndex++];
			}
			if(value == null) {
				value = "null";
			}
			output_b += Std.string(f(value,tagArgs));
			break;
		case 2:
			var name = _g2[2];
			if(!Object.prototype.hasOwnProperty.call(args[0],name)) {
				throw new js__$Boot_HaxeError(new de_polygonal_PrintfError("no field named \"" + name + "\" found"));
			}
			output_b += Std.string(Std.string(Reflect.field(args[0],name)));
			++argIndex;
			break;
		case 3:
			throw new js__$Boot_HaxeError(new de_polygonal_PrintfError("invalid format specifier"));
			break;
		}
	}
	return output_b;
};
de_polygonal_Printf.tokenize = function(fmt,output) {
	var i = 0;
	var c = 0;
	var n = 0;
	var buf = new StringBuf();
	var k = fmt.length;
	while(i < k) {
		c = fmt.charCodeAt(i++);
		if(c == 37) {
			c = fmt.charCodeAt(i++);
			if(c == 37) {
				buf.b += String.fromCharCode(c);
				continue;
			}
			if(buf.b.length > 0) {
				output[n++] = de_polygonal__$Printf_FormatToken.Raw(buf.b);
				buf = new StringBuf();
			}
			var token;
			if(c == 40) {
				var endPos = fmt.indexOf(")",i);
				if(endPos == -1) {
					token = de_polygonal__$Printf_FormatToken.Unknown("named parameter",i);
				} else {
					var paramName = HxOverrides.substr(fmt,i,endPos - i);
					i = endPos + 1;
					token = de_polygonal__$Printf_FormatToken.Property(paramName);
				}
			} else {
				var params = new de_polygonal__$Printf_FormatArgs(0,-1,-1,-1);
				try {
					while(c >= 32 && c <= 48) switch(c) {
					case 32:
						c = fmt.charCodeAt(i++);
						params.flags |= 4;
						break;
					case 35:
						c = fmt.charCodeAt(i++);
						params.flags |= 8;
						break;
					case 43:
						c = fmt.charCodeAt(i++);
						params.flags |= 2;
						break;
					case 45:
						c = fmt.charCodeAt(i++);
						params.flags |= 1;
						break;
					case 48:
						c = fmt.charCodeAt(i++);
						params.flags |= 16;
						break;
					default:
						throw "__break__";
					}
				} catch( e ) { if( e != "__break__" ) throw e; }
				if((params.flags & 1) != 0 && (params.flags & 16) != 0) {
					params.flags &= 268435439;
				}
				if((params.flags & 4) != 0 && (params.flags & 2) != 0) {
					params.flags &= 268435451;
				}
				if(c == 42) {
					params.width = null;
					c = fmt.charCodeAt(i++);
				} else if(c >= 48 && c <= 57) {
					var w = 0;
					while(c >= 48 && c <= 57) {
						w = c - 48 + w * 10;
						c = fmt.charCodeAt(i++);
					}
					params.width = w;
					if(c == 36) {
						params.pos = w - 1;
						params.width = -1;
						c = fmt.charCodeAt(i++);
						if(c == 42) {
							params.width = null;
							c = fmt.charCodeAt(i++);
						} else if(c >= 48 && c <= 57) {
							var w1 = 0;
							while(c >= 48 && c <= 57) {
								w1 = c - 48 + w1 * 10;
								c = fmt.charCodeAt(i++);
							}
							params.width = w1;
						}
					}
				}
				if(c == 46) {
					c = fmt.charCodeAt(i++);
					if(c == 42) {
						params.precision = null;
						c = fmt.charCodeAt(i++);
					} else {
						var p = 0;
						if(c >= 48 && c <= 57) {
							while(c >= 48 && c <= 57) {
								p = c - 48 + p * 10;
								c = fmt.charCodeAt(i++);
							}
						}
						params.precision = p;
					}
				}
				try {
					while(c >= 76 && c <= 108) switch(c) {
					case 76:
						c = fmt.charCodeAt(i++);
						params.flags |= 64;
						break;
					case 104:
						c = fmt.charCodeAt(i++);
						params.flags |= 32;
						break;
					case 108:
						c = fmt.charCodeAt(i++);
						params.flags |= 128;
						break;
					default:
						throw "__break__";
					}
				} catch( e ) { if( e != "__break__" ) throw e; }
				if(c >= 69 && c <= 120) {
					var type;
					switch(c) {
					case 69:
						params.flags |= 256;
						type = de_polygonal__$Printf_FormatDataType.FmtFloat(de_polygonal__$Printf_FloatType.FScientific);
						break;
					case 71:
						params.flags |= 256;
						type = de_polygonal__$Printf_FormatDataType.FmtFloat(de_polygonal__$Printf_FloatType.FNatural);
						break;
					case 88:
						params.flags |= 256;
						type = de_polygonal__$Printf_FormatDataType.FmtInt(de_polygonal__$Printf_IntType.IHex);
						break;
					case 98:
						type = de_polygonal__$Printf_FormatDataType.FmtInt(de_polygonal__$Printf_IntType.IBin);
						break;
					case 99:
						type = de_polygonal__$Printf_FormatDataType.FmtInt(de_polygonal__$Printf_IntType.ICharacter);
						break;
					case 100:
						type = de_polygonal__$Printf_FormatDataType.FmtInt(de_polygonal__$Printf_IntType.ISignedDecimal);
						break;
					case 101:
						type = de_polygonal__$Printf_FormatDataType.FmtFloat(de_polygonal__$Printf_FloatType.FScientific);
						break;
					case 102:
						type = de_polygonal__$Printf_FormatDataType.FmtFloat(de_polygonal__$Printf_FloatType.FNormal);
						break;
					case 103:
						type = de_polygonal__$Printf_FormatDataType.FmtFloat(de_polygonal__$Printf_FloatType.FNatural);
						break;
					case 105:
						type = de_polygonal__$Printf_FormatDataType.FmtInt(de_polygonal__$Printf_IntType.ISignedDecimal);
						break;
					case 110:
						type = de_polygonal__$Printf_FormatDataType.FmtNothing;
						break;
					case 111:
						type = de_polygonal__$Printf_FormatDataType.FmtInt(de_polygonal__$Printf_IntType.IOctal);
						break;
					case 112:
						type = de_polygonal__$Printf_FormatDataType.FmtPointer;
						break;
					case 115:
						type = de_polygonal__$Printf_FormatDataType.FmtString;
						break;
					case 117:
						type = de_polygonal__$Printf_FormatDataType.FmtInt(de_polygonal__$Printf_IntType.IUnsignedDecimal);
						break;
					case 120:
						type = de_polygonal__$Printf_FormatDataType.FmtInt(de_polygonal__$Printf_IntType.IHex);
						break;
					default:
						type = null;
					}
					if(type == null) {
						token = de_polygonal__$Printf_FormatToken.Unknown(String.fromCharCode(c),i);
					} else {
						token = de_polygonal__$Printf_FormatToken.Tag(type,params);
					}
				} else {
					token = de_polygonal__$Printf_FormatToken.Unknown(String.fromCharCode(c),i);
				}
			}
			output[n++] = token;
		} else {
			buf.b += String.fromCharCode(c);
		}
	}
	if(buf.b.length > 0) {
		output[n++] = de_polygonal__$Printf_FormatToken.Raw(buf.b);
	}
	return n;
};
de_polygonal_Printf.formatBinary = function(value,args) {
	var s = "";
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = 1;
	}
	var w = args.width;
	if(value != 0) {
		if((f & 32) != 0) {
			value &= 65535;
		}
		while(true) {
			s = ((value & 1) > 0 ? "1" : "0") + s;
			value >>>= 1;
			if(!(value > 0)) {
				break;
			}
		}
		if((f & 8) != 0) {
			s = "b" + s;
		}
		if(p > 1 && s.length < p) {
			var c = p - s.length;
			if(c < 1) {
				s = s;
			} else {
				var t;
				if(c > 30) {
					t = "0";
					var _g1 = 0;
					var _g = c - 1;
					while(_g1 < _g) {
						++_g1;
						t += "0";
					}
				} else {
					t = de_polygonal_Printf._padChars[c];
				}
				s = t + s;
			}
		}
	}
	if(w > s.length) {
		if((f & 1) != 0) {
			var c1 = w - s.length;
			if(c1 < 1) {
				s = s;
			} else {
				var t1;
				if(c1 > 30) {
					t1 = " ";
					var _g11 = 0;
					var _g2 = c1 - 1;
					while(_g11 < _g2) {
						++_g11;
						t1 += " ";
					}
				} else {
					t1 = de_polygonal_Printf._padChars[20 + c1];
				}
				s += t1;
			}
		} else if((f & 16) != 0) {
			var c2 = w - s.length;
			if(c2 < 1) {
				s = s;
			} else {
				var t2;
				if(c2 > 30) {
					t2 = "0";
					var _g12 = 0;
					var _g3 = c2 - 1;
					while(_g12 < _g3) {
						++_g12;
						t2 += "0";
					}
				} else {
					t2 = de_polygonal_Printf._padChars[c2];
				}
				s = t2 + s;
			}
		} else {
			var c3 = w - s.length;
			if(c3 < 1) {
				s = s;
			} else {
				var t3;
				if(c3 > 30) {
					t3 = " ";
					var _g13 = 0;
					var _g4 = c3 - 1;
					while(_g13 < _g4) {
						++_g13;
						t3 += " ";
					}
				} else {
					t3 = de_polygonal_Printf._padChars[20 + c3];
				}
				s = t3 + s;
			}
		}
	}
	return s;
};
de_polygonal_Printf.formatOctal = function(value,args) {
	var s = "";
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = 1;
	}
	var w = args.width;
	if(value != 0) {
		if((f & 32) != 0) {
			value &= 65535;
		}
		while(true) {
			s = (value & 7) + s;
			value >>>= 3;
			if(!(value > 0)) {
				break;
			}
		}
		if((f & 8) != 0) {
			s = "0" + s;
		}
		if(p > 1 && s.length < p) {
			var c = p - s.length;
			if(c < 1) {
				s = s;
			} else {
				var t;
				if(c > 30) {
					t = "0";
					var _g1 = 0;
					var _g = c - 1;
					while(_g1 < _g) {
						++_g1;
						t += "0";
					}
				} else {
					t = de_polygonal_Printf._padChars[c];
				}
				s = t + s;
			}
		}
	}
	if(w > s.length) {
		if((f & 1) != 0) {
			var c1 = w - s.length;
			if(c1 < 1) {
				s = s;
			} else {
				var t1;
				if(c1 > 30) {
					t1 = " ";
					var _g11 = 0;
					var _g2 = c1 - 1;
					while(_g11 < _g2) {
						++_g11;
						t1 += " ";
					}
				} else {
					t1 = de_polygonal_Printf._padChars[20 + c1];
				}
				s += t1;
			}
		} else {
			var type = (f & 16) != 0 ? 0 : 20;
			var c2 = w - s.length;
			if(c2 < 1) {
				s = s;
			} else {
				var t2;
				if(c2 > 30) {
					var $char = type == 0 ? "0" : " ";
					t2 = $char;
					var _g12 = 0;
					var _g3 = c2 - 1;
					while(_g12 < _g3) {
						++_g12;
						t2 += $char;
					}
				} else {
					t2 = de_polygonal_Printf._padChars[type + c2];
				}
				s = t2 + s;
			}
		}
	}
	return s;
};
de_polygonal_Printf.formatHexadecimal = function(value,args) {
	var s = "";
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = 1;
	}
	var w = args.width;
	if(value != 0) {
		if((f & 32) != 0) {
			value &= 65535;
		}
		while(true) {
			s = "0123456789ABCDEF".charAt(value & 15) + s;
			value >>>= 4;
			if(!(value > 0)) {
				break;
			}
		}
		if((f & 8) != 0) {
			if((f & 256) != 0) {
				s = "0X" + s;
			} else {
				s = "0x" + s;
			}
		}
		if(p > 1 && s.length < p) {
			var c = p - s.length;
			if(c < 1) {
				s = s;
			} else {
				var t;
				if(c > 30) {
					t = "0";
					var _g1 = 0;
					var _g = c - 1;
					while(_g1 < _g) {
						++_g1;
						t += "0";
					}
				} else {
					t = de_polygonal_Printf._padChars[c];
				}
				s = t + s;
			}
		}
		if((f & 256) != 0) {
			s = s;
		} else {
			s = s.toLowerCase();
		}
	}
	if(w > s.length) {
		if((f & 1) != 0) {
			var c1 = w - s.length;
			if(c1 < 1) {
				s = s;
			} else {
				var t1;
				if(c1 > 30) {
					t1 = " ";
					var _g11 = 0;
					var _g2 = c1 - 1;
					while(_g11 < _g2) {
						++_g11;
						t1 += " ";
					}
				} else {
					t1 = de_polygonal_Printf._padChars[20 + c1];
				}
				s += t1;
			}
		} else if((f & 16) != 0) {
			var c2 = w - s.length;
			if(c2 < 1) {
				s = s;
			} else {
				var t2;
				if(c2 > 30) {
					t2 = "0";
					var _g12 = 0;
					var _g3 = c2 - 1;
					while(_g12 < _g3) {
						++_g12;
						t2 += "0";
					}
				} else {
					t2 = de_polygonal_Printf._padChars[c2];
				}
				s = t2 + s;
			}
		} else {
			var c3 = w - s.length;
			if(c3 < 1) {
				s = s;
			} else {
				var t3;
				if(c3 > 30) {
					t3 = " ";
					var _g13 = 0;
					var _g4 = c3 - 1;
					while(_g13 < _g4) {
						++_g13;
						t3 += " ";
					}
				} else {
					t3 = de_polygonal_Printf._padChars[20 + c3];
				}
				s = t3 + s;
			}
		}
	}
	return s;
};
de_polygonal_Printf.formatSignedDecimal = function(value,args) {
	var f = args.flags;
	var p = args.precision;
	var w = args.width;
	if(p == 0 && value == 0) {
		return "";
	}
	if((f & 32) != 0) {
		value &= 65535;
	}
	var s = Std.string(value < 0 ? -value : value);
	if(p > 1) {
		var c = p - s.length;
		if(c < 1) {
			s = s;
		} else {
			var t;
			if(c > 30) {
				t = "0";
				var _g1 = 0;
				var _g = c - 1;
				while(_g1 < _g) {
					++_g1;
					t += "0";
				}
			} else {
				t = de_polygonal_Printf._padChars[c];
			}
			s = t + s;
		}
	}
	if((f & 16) != 0) {
		var c1 = (value < 0 ? w - 1 : w) - s.length;
		if(c1 < 1) {
			s = s;
		} else {
			var t1;
			if(c1 > 30) {
				t1 = "0";
				var _g11 = 0;
				var _g2 = c1 - 1;
				while(_g11 < _g2) {
					++_g11;
					t1 += "0";
				}
			} else {
				t1 = de_polygonal_Printf._padChars[c1];
			}
			s = t1 + s;
		}
	}
	if(value < 0) {
		s = "-" + s;
	}
	if(value >= 0) {
		if((f & 2) != 0) {
			s = "+" + s;
		} else if((f & 4) != 0) {
			s = " " + s;
		}
	}
	var c2 = w - s.length;
	if(c2 < 1) {
		return s;
	} else {
		var t2;
		if(c2 > 30) {
			t2 = " ";
			var _g12 = 0;
			var _g3 = c2 - 1;
			while(_g12 < _g3) {
				++_g12;
				t2 += " ";
			}
		} else {
			t2 = de_polygonal_Printf._padChars[20 + c2];
		}
		if(((f & 1) != 0 ? 1 : -1) > 0) {
			return s + t2;
		} else {
			return t2 + s;
		}
	}
};
de_polygonal_Printf.formatUnsignedDecimal = function(value,args) {
	if(value >= 0) {
		return de_polygonal_Printf.formatSignedDecimal(value,args);
	}
	var s;
	var x = new haxe__$Int64__$_$_$Int64(0,value);
	s = haxe__$Int64_Int64_$Impl_$.toString(x);
	var p = args.precision;
	if(p > 1) {
		var c = p - s.length;
		if(c < 1) {
			s = s;
		} else {
			var t;
			if(c > 30) {
				t = " ";
				var _g1 = 0;
				var _g = c - 1;
				while(_g1 < _g) {
					++_g1;
					t += " ";
				}
			} else {
				t = de_polygonal_Printf._padChars[20 + c];
			}
			s = t + s;
		}
	}
	var f = args.flags;
	var w = args.width;
	if((f & 16) != 0) {
		var c1 = w - s.length;
		if(c1 < 1) {
			s = s;
		} else {
			var t1;
			if(c1 > 30) {
				t1 = "0";
				var _g11 = 0;
				var _g2 = c1 - 1;
				while(_g11 < _g2) {
					++_g11;
					t1 += "0";
				}
			} else {
				t1 = de_polygonal_Printf._padChars[c1];
			}
			s = t1 + s;
		}
	}
	if((f & 2) != 0) {
		s = "+" + s;
	} else if((f & 4) != 0) {
		s = " " + s;
	}
	var c2 = w - s.length;
	if(c2 < 1) {
		s = s;
	} else {
		var t2;
		if(c2 > 30) {
			t2 = " ";
			var _g12 = 0;
			var _g3 = c2 - 1;
			while(_g12 < _g3) {
				++_g12;
				t2 += " ";
			}
		} else {
			t2 = de_polygonal_Printf._padChars[20 + c2];
		}
		if(((f & 1) != 0 ? 1 : -1) > 0) {
			s += t2;
		} else {
			s = t2 + s;
		}
	}
	return s;
};
de_polygonal_Printf.formatNaturalFloat = function(value,args) {
	args.precision = 0;
	var formatedFloat = de_polygonal_Printf.formatFloat(value,args);
	var formatedScientific = de_polygonal_Printf.formatScientific(value,args);
	if((args.flags & 8) != 0) {
		if(formatedFloat.indexOf(".") != -1) {
			var pos = formatedFloat.length - 1;
			while(HxOverrides.cca(formatedFloat,pos) == 48) --pos;
			formatedFloat = HxOverrides.substr(formatedFloat,0,pos);
		}
	}
	if(formatedFloat.length <= formatedScientific.length) {
		return formatedFloat;
	} else {
		return formatedScientific;
	}
};
de_polygonal_Printf.formatScientific = function(value,args) {
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = de_polygonal_Printf.DEFAULT_PRECISION;
	}
	var sign;
	var exponent;
	var s = "";
	if(value == 0) {
		sign = 0;
		exponent = 0;
		s = "0";
		if(p > 0) {
			s = "0" + ".";
			var _g1 = 0;
			var _g = p;
			while(_g1 < _g) {
				++_g1;
				s += "0";
			}
		}
	} else {
		var m = Math;
		if(value > 0.) {
			sign = 1;
		} else if(value < 0.) {
			sign = -1;
		} else {
			sign = 0;
		}
		value = m.abs(value);
		exponent = m.floor(Math.log(value) / 2.302585092994046);
		value /= m.pow(10,exponent);
		var y = m.pow(0.1,p);
		value = Math.round(value / y) * y;
	}
	if(value != 0) {
		s += HxOverrides.substr(value == null ? "null" : "" + value,0,p + 2);
	}
	s += (f & 256) != 0 ? "E" : "e";
	s += exponent >= 0 ? "+" : "-";
	var s1 = Std.string(exponent < 0 ? -exponent : exponent);
	var c = de_polygonal_Printf.DEFAULT_NUM_EXP_DIGITS - s1.length;
	var s2;
	if(c < 1) {
		s2 = s1;
	} else {
		var t;
		if(c > 30) {
			t = "0";
			var _g11 = 0;
			var _g2 = c - 1;
			while(_g11 < _g2) {
				++_g11;
				t += "0";
			}
		} else {
			t = de_polygonal_Printf._padChars[c];
		}
		s2 = t + s1;
	}
	s += s2;
	var printSign = sign == -1 || ((f & 2) != 0 || (f & 4) != 0);
	if(printSign && (f & 16) == 0) {
		s = (sign == -1 ? "-" : (f & 2) != 0 ? "+" : " ") + s;
	}
	if(args.width > 0) {
		var w = args.width;
		if(printSign && (f & 16) != 0) {
			--w;
		}
		var type = (f & 16) != 0 ? 0 : 20;
		var c1 = w - s.length;
		if(c1 < 1) {
			s = s;
		} else {
			var t1;
			if(c1 > 30) {
				var $char = type == 0 ? "0" : " ";
				t1 = $char;
				var _g12 = 0;
				var _g3 = c1 - 1;
				while(_g12 < _g3) {
					++_g12;
					t1 += $char;
				}
			} else {
				t1 = de_polygonal_Printf._padChars[type + c1];
			}
			s = t1 + s;
		}
	}
	if(printSign && (f & 16) != 0) {
		s = (sign == -1 ? "-" : (f & 2) != 0 ? "+" : " ") + s;
	}
	return s;
};
de_polygonal_Printf.formatFloat = function(value,args) {
	var f = args.flags;
	var p = args.precision;
	if(p == -1) {
		p = de_polygonal_Printf.DEFAULT_PRECISION;
	}
	var w = args.width;
	var s;
	if(p == 0) {
		var x = Math.round(value);
		s = Std.string(x < 0 ? -x : x);
		if((f & 1 << de_polygonal__$Printf_FormatFlag.Sharp[1]) != 0) {
			s += ".";
		}
	} else {
		s = value.toFixed(p);
	}
	if((f & 1 << de_polygonal__$Printf_FormatFlag.Zero[1]) != 0) {
		if(value < 0 || (f & 1 << de_polygonal__$Printf_FormatFlag.Plus[1]) != 0) {
			--w;
		}
		if(value > 0 && (f & 1 << de_polygonal__$Printf_FormatFlag.Space[1]) != 0) {
			--w;
		}
		var c = w - s.length;
		if(c < 1) {
			s = s;
		} else {
			var t;
			if(c > 30) {
				var $char = "0";
				t = $char;
				var _g1 = 0;
				var _g = c - 1;
				while(_g1 < _g) {
					var i = _g1++;
					t += $char;
				}
			} else {
				t = de_polygonal_Printf._padChars[c];
			}
			s = t + s;
		}
	}
	if(value >= 0) {
		if((f & 1 << de_polygonal__$Printf_FormatFlag.Plus[1]) != 0) {
			s = "+" + s;
		} else if((f & 1 << de_polygonal__$Printf_FormatFlag.Space[1]) != 0) {
			s = " " + s;
		}
	}
	var c1 = w - s.length;
	if(c1 < 1) {
		return s;
	} else {
		var t1;
		if(c1 > 30) {
			var char1 = " ";
			t1 = char1;
			var _g11 = 0;
			var _g2 = c1 - 1;
			while(_g11 < _g2) {
				var i1 = _g11++;
				t1 += char1;
			}
		} else {
			t1 = de_polygonal_Printf._padChars[20 + c1];
		}
		if(((f & 1 << de_polygonal__$Printf_FormatFlag.Minus[1]) != 0 ? 1 : -1) > 0) {
			return s + t1;
		} else {
			return t1 + s;
		}
	}
};
de_polygonal_Printf.formatCharacter = function(x,args) {
	var s = String.fromCharCode(x);
	if(args.width > 1) {
		var dir = (args.flags & 1) != 0 ? 1 : -1;
		var c = args.width - s.length;
		if(c < 1) {
			s = s;
		} else {
			var t;
			if(c > 30) {
				t = " ";
				var _g1 = 0;
				var _g = c - 1;
				while(_g1 < _g) {
					++_g1;
					t += " ";
				}
			} else {
				t = de_polygonal_Printf._padChars[20 + c];
			}
			if(dir > 0) {
				s += t;
			} else {
				s = t + s;
			}
		}
	}
	return s;
};
de_polygonal_Printf.formatString = function(value,args) {
	var s = value;
	if(args.precision > 0) {
		s = HxOverrides.substr(value,0,args.precision);
	}
	if(args.width > 0) {
		var dir = (args.flags & 1) != 0 ? 1 : -1;
		var c = args.width - s.length;
		if(c < 1) {
			s = s;
		} else {
			var t;
			if(c > 30) {
				t = " ";
				var _g1 = 0;
				var _g = c - 1;
				while(_g1 < _g) {
					++_g1;
					t += " ";
				}
			} else {
				t = de_polygonal_Printf._padChars[20 + c];
			}
			if(dir > 0) {
				s += t;
			} else {
				s = t + s;
			}
		}
	}
	return s;
};
var de_polygonal_PrintfError = function(message) {
	this.message = message;
};
$hxClasses["de.polygonal.PrintfError"] = de_polygonal_PrintfError;
de_polygonal_PrintfError.__name__ = ["de","polygonal","PrintfError"];
de_polygonal_PrintfError.prototype = {
	message: null
	,toString: function() {
		return this.message;
	}
	,__class__: de_polygonal_PrintfError
};
var de_polygonal__$Printf_FormatArgs = function(flags,pos,width,precision) {
	this.flags = flags;
	this.pos = pos;
	this.width = width;
	this.precision = precision;
};
$hxClasses["de.polygonal._Printf.FormatArgs"] = de_polygonal__$Printf_FormatArgs;
de_polygonal__$Printf_FormatArgs.__name__ = ["de","polygonal","_Printf","FormatArgs"];
de_polygonal__$Printf_FormatArgs.prototype = {
	flags: null
	,pos: null
	,width: null
	,precision: null
	,__class__: de_polygonal__$Printf_FormatArgs
};
var de_polygonal__$Printf_FormatFlag = $hxClasses["de.polygonal._Printf.FormatFlag"] = { __ename__ : ["de","polygonal","_Printf","FormatFlag"], __constructs__ : ["Minus","Plus","Space","Sharp","Zero","LengthH","LengthUpperCaseL","LengthLowerCaseL","UpperCase"] };
de_polygonal__$Printf_FormatFlag.Minus = ["Minus",0];
de_polygonal__$Printf_FormatFlag.Minus.toString = $estr;
de_polygonal__$Printf_FormatFlag.Minus.__enum__ = de_polygonal__$Printf_FormatFlag;
de_polygonal__$Printf_FormatFlag.Plus = ["Plus",1];
de_polygonal__$Printf_FormatFlag.Plus.toString = $estr;
de_polygonal__$Printf_FormatFlag.Plus.__enum__ = de_polygonal__$Printf_FormatFlag;
de_polygonal__$Printf_FormatFlag.Space = ["Space",2];
de_polygonal__$Printf_FormatFlag.Space.toString = $estr;
de_polygonal__$Printf_FormatFlag.Space.__enum__ = de_polygonal__$Printf_FormatFlag;
de_polygonal__$Printf_FormatFlag.Sharp = ["Sharp",3];
de_polygonal__$Printf_FormatFlag.Sharp.toString = $estr;
de_polygonal__$Printf_FormatFlag.Sharp.__enum__ = de_polygonal__$Printf_FormatFlag;
de_polygonal__$Printf_FormatFlag.Zero = ["Zero",4];
de_polygonal__$Printf_FormatFlag.Zero.toString = $estr;
de_polygonal__$Printf_FormatFlag.Zero.__enum__ = de_polygonal__$Printf_FormatFlag;
de_polygonal__$Printf_FormatFlag.LengthH = ["LengthH",5];
de_polygonal__$Printf_FormatFlag.LengthH.toString = $estr;
de_polygonal__$Printf_FormatFlag.LengthH.__enum__ = de_polygonal__$Printf_FormatFlag;
de_polygonal__$Printf_FormatFlag.LengthUpperCaseL = ["LengthUpperCaseL",6];
de_polygonal__$Printf_FormatFlag.LengthUpperCaseL.toString = $estr;
de_polygonal__$Printf_FormatFlag.LengthUpperCaseL.__enum__ = de_polygonal__$Printf_FormatFlag;
de_polygonal__$Printf_FormatFlag.LengthLowerCaseL = ["LengthLowerCaseL",7];
de_polygonal__$Printf_FormatFlag.LengthLowerCaseL.toString = $estr;
de_polygonal__$Printf_FormatFlag.LengthLowerCaseL.__enum__ = de_polygonal__$Printf_FormatFlag;
de_polygonal__$Printf_FormatFlag.UpperCase = ["UpperCase",8];
de_polygonal__$Printf_FormatFlag.UpperCase.toString = $estr;
de_polygonal__$Printf_FormatFlag.UpperCase.__enum__ = de_polygonal__$Printf_FormatFlag;
de_polygonal__$Printf_FormatFlag.__empty_constructs__ = [de_polygonal__$Printf_FormatFlag.Minus,de_polygonal__$Printf_FormatFlag.Plus,de_polygonal__$Printf_FormatFlag.Space,de_polygonal__$Printf_FormatFlag.Sharp,de_polygonal__$Printf_FormatFlag.Zero,de_polygonal__$Printf_FormatFlag.LengthH,de_polygonal__$Printf_FormatFlag.LengthUpperCaseL,de_polygonal__$Printf_FormatFlag.LengthLowerCaseL,de_polygonal__$Printf_FormatFlag.UpperCase];
var de_polygonal__$Printf_FormatToken = $hxClasses["de.polygonal._Printf.FormatToken"] = { __ename__ : ["de","polygonal","_Printf","FormatToken"], __constructs__ : ["Raw","Tag","Property","Unknown"] };
de_polygonal__$Printf_FormatToken.Raw = function(string) { var $x = ["Raw",0,string]; $x.__enum__ = de_polygonal__$Printf_FormatToken; $x.toString = $estr; return $x; };
de_polygonal__$Printf_FormatToken.Tag = function(type,args) { var $x = ["Tag",1,type,args]; $x.__enum__ = de_polygonal__$Printf_FormatToken; $x.toString = $estr; return $x; };
de_polygonal__$Printf_FormatToken.Property = function(name) { var $x = ["Property",2,name]; $x.__enum__ = de_polygonal__$Printf_FormatToken; $x.toString = $estr; return $x; };
de_polygonal__$Printf_FormatToken.Unknown = function(string,pos) { var $x = ["Unknown",3,string,pos]; $x.__enum__ = de_polygonal__$Printf_FormatToken; $x.toString = $estr; return $x; };
de_polygonal__$Printf_FormatToken.__empty_constructs__ = [];
var de_polygonal__$Printf_FormatDataType = $hxClasses["de.polygonal._Printf.FormatDataType"] = { __ename__ : ["de","polygonal","_Printf","FormatDataType"], __constructs__ : ["FmtInt","FmtFloat","FmtString","FmtPointer","FmtNothing"] };
de_polygonal__$Printf_FormatDataType.FmtInt = function(type) { var $x = ["FmtInt",0,type]; $x.__enum__ = de_polygonal__$Printf_FormatDataType; $x.toString = $estr; return $x; };
de_polygonal__$Printf_FormatDataType.FmtFloat = function(floatType) { var $x = ["FmtFloat",1,floatType]; $x.__enum__ = de_polygonal__$Printf_FormatDataType; $x.toString = $estr; return $x; };
de_polygonal__$Printf_FormatDataType.FmtString = ["FmtString",2];
de_polygonal__$Printf_FormatDataType.FmtString.toString = $estr;
de_polygonal__$Printf_FormatDataType.FmtString.__enum__ = de_polygonal__$Printf_FormatDataType;
de_polygonal__$Printf_FormatDataType.FmtPointer = ["FmtPointer",3];
de_polygonal__$Printf_FormatDataType.FmtPointer.toString = $estr;
de_polygonal__$Printf_FormatDataType.FmtPointer.__enum__ = de_polygonal__$Printf_FormatDataType;
de_polygonal__$Printf_FormatDataType.FmtNothing = ["FmtNothing",4];
de_polygonal__$Printf_FormatDataType.FmtNothing.toString = $estr;
de_polygonal__$Printf_FormatDataType.FmtNothing.__enum__ = de_polygonal__$Printf_FormatDataType;
de_polygonal__$Printf_FormatDataType.__empty_constructs__ = [de_polygonal__$Printf_FormatDataType.FmtString,de_polygonal__$Printf_FormatDataType.FmtPointer,de_polygonal__$Printf_FormatDataType.FmtNothing];
var de_polygonal__$Printf_IntType = $hxClasses["de.polygonal._Printf.IntType"] = { __ename__ : ["de","polygonal","_Printf","IntType"], __constructs__ : ["ICharacter","ISignedDecimal","IUnsignedDecimal","IOctal","IHex","IBin"] };
de_polygonal__$Printf_IntType.ICharacter = ["ICharacter",0];
de_polygonal__$Printf_IntType.ICharacter.toString = $estr;
de_polygonal__$Printf_IntType.ICharacter.__enum__ = de_polygonal__$Printf_IntType;
de_polygonal__$Printf_IntType.ISignedDecimal = ["ISignedDecimal",1];
de_polygonal__$Printf_IntType.ISignedDecimal.toString = $estr;
de_polygonal__$Printf_IntType.ISignedDecimal.__enum__ = de_polygonal__$Printf_IntType;
de_polygonal__$Printf_IntType.IUnsignedDecimal = ["IUnsignedDecimal",2];
de_polygonal__$Printf_IntType.IUnsignedDecimal.toString = $estr;
de_polygonal__$Printf_IntType.IUnsignedDecimal.__enum__ = de_polygonal__$Printf_IntType;
de_polygonal__$Printf_IntType.IOctal = ["IOctal",3];
de_polygonal__$Printf_IntType.IOctal.toString = $estr;
de_polygonal__$Printf_IntType.IOctal.__enum__ = de_polygonal__$Printf_IntType;
de_polygonal__$Printf_IntType.IHex = ["IHex",4];
de_polygonal__$Printf_IntType.IHex.toString = $estr;
de_polygonal__$Printf_IntType.IHex.__enum__ = de_polygonal__$Printf_IntType;
de_polygonal__$Printf_IntType.IBin = ["IBin",5];
de_polygonal__$Printf_IntType.IBin.toString = $estr;
de_polygonal__$Printf_IntType.IBin.__enum__ = de_polygonal__$Printf_IntType;
de_polygonal__$Printf_IntType.__empty_constructs__ = [de_polygonal__$Printf_IntType.ICharacter,de_polygonal__$Printf_IntType.ISignedDecimal,de_polygonal__$Printf_IntType.IUnsignedDecimal,de_polygonal__$Printf_IntType.IOctal,de_polygonal__$Printf_IntType.IHex,de_polygonal__$Printf_IntType.IBin];
var de_polygonal__$Printf_FloatType = $hxClasses["de.polygonal._Printf.FloatType"] = { __ename__ : ["de","polygonal","_Printf","FloatType"], __constructs__ : ["FNormal","FScientific","FNatural"] };
de_polygonal__$Printf_FloatType.FNormal = ["FNormal",0];
de_polygonal__$Printf_FloatType.FNormal.toString = $estr;
de_polygonal__$Printf_FloatType.FNormal.__enum__ = de_polygonal__$Printf_FloatType;
de_polygonal__$Printf_FloatType.FScientific = ["FScientific",1];
de_polygonal__$Printf_FloatType.FScientific.toString = $estr;
de_polygonal__$Printf_FloatType.FScientific.__enum__ = de_polygonal__$Printf_FloatType;
de_polygonal__$Printf_FloatType.FNatural = ["FNatural",2];
de_polygonal__$Printf_FloatType.FNatural.toString = $estr;
de_polygonal__$Printf_FloatType.FNatural.__enum__ = de_polygonal__$Printf_FloatType;
de_polygonal__$Printf_FloatType.__empty_constructs__ = [de_polygonal__$Printf_FloatType.FNormal,de_polygonal__$Printf_FloatType.FScientific,de_polygonal__$Printf_FloatType.FNatural];
var de_polygonal_ds_Hashable = function() { };
$hxClasses["de.polygonal.ds.Hashable"] = de_polygonal_ds_Hashable;
de_polygonal_ds_Hashable.__name__ = ["de","polygonal","ds","Hashable"];
var de_polygonal_ds_Collection = function() { };
$hxClasses["de.polygonal.ds.Collection"] = de_polygonal_ds_Collection;
de_polygonal_ds_Collection.__name__ = ["de","polygonal","ds","Collection"];
de_polygonal_ds_Collection.__interfaces__ = [de_polygonal_ds_Hashable];
de_polygonal_ds_Collection.prototype = {
	__class__: de_polygonal_ds_Collection
};
var de_polygonal_ds_Array2Cell = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["de.polygonal.ds.Array2Cell"] = de_polygonal_ds_Array2Cell;
de_polygonal_ds_Array2Cell.__name__ = ["de","polygonal","ds","Array2Cell"];
de_polygonal_ds_Array2Cell.prototype = {
	x: null
	,y: null
	,__class__: de_polygonal_ds_Array2Cell
};
var de_polygonal_ds_Array2_$entities_$Block = function(width,height,source) {
	if(true != (width >= 2 && height >= 2)) {
		throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("invalid size (width:" + width + ", height:" + height + ")" + " (width >= 2 && height >= 2)",{ fileName : "Array2.hx", lineNumber : 135, className : "de.polygonal.ds.Array2", methodName : "new"}));
	}
	if(source != null) {
		if(true != source.length >= 4) {
			throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("invalid source" + " (source.length >= 4)",{ fileName : "Array2.hx", lineNumber : 139, className : "de.polygonal.ds.Array2", methodName : "new"}));
		}
		this.mW = width;
		this.mH = height;
		var len = this.mW * this.mH;
		var d = this.mData = new Array(len);
		var _g1 = 0;
		var _g = this.mW * this.mH;
		while(_g1 < _g) {
			var i = _g1++;
			d[i] = source[i];
		}
	} else {
		if(true != (width >= 2 && height >= 2)) {
			throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("invalid size (width:" + width + ", height:" + height + ")" + " (width >= 2 && height >= 2)",{ fileName : "Array2.hx", lineNumber : 148, className : "de.polygonal.ds.Array2", methodName : "new"}));
		}
		this.mW = width;
		this.mH = height;
		var len1 = this.mW * this.mH;
		this.mData = new Array(len1);
	}
};
$hxClasses["de.polygonal.ds.Array2_entities_Block"] = de_polygonal_ds_Array2_$entities_$Block;
de_polygonal_ds_Array2_$entities_$Block.__name__ = ["de","polygonal","ds","Array2_entities_Block"];
de_polygonal_ds_Array2_$entities_$Block.__interfaces__ = [de_polygonal_ds_Collection];
de_polygonal_ds_Array2_$entities_$Block.prototype = {
	mData: null
	,mW: null
	,mH: null
	,remove: function(val) {
		var found = false;
		var d = this.mData;
		var _g1 = 0;
		var _g = this.mW * this.mH;
		while(_g1 < _g) {
			var i = _g1++;
			if(d[i] == val) {
				d[i] = null;
				found = true;
			}
		}
		return found;
	}
	,__class__: de_polygonal_ds_Array2_$entities_$Block
};
var de_polygonal_ds_Queue = function() { };
$hxClasses["de.polygonal.ds.Queue"] = de_polygonal_ds_Queue;
de_polygonal_ds_Queue.__name__ = ["de","polygonal","ds","Queue"];
de_polygonal_ds_Queue.__interfaces__ = [de_polygonal_ds_Collection];
var de_polygonal_ds_ArrayedQueue_$entities_$Block = function(initialCapacity,source,fixed) {
	if(initialCapacity == null) {
		initialCapacity = 16;
	}
	this.mFront = 0;
	this.mSize = 0;
	this.growthRate = -2;
	this.mInitialCapacity = 1 > initialCapacity ? 1 : initialCapacity;
	this.capacity = this.mInitialCapacity;
	if(source != null) {
		this.mSize = source.length;
		var x = this.mSize;
		var y = this.capacity;
		this.capacity = x > y ? x : y;
	}
	var len = this.capacity;
	this.mData = new Array(len);
	if(source != null) {
		var _g1 = 0;
		var _g = this.mSize;
		while(_g1 < _g) {
			var i = _g1++;
			this.mData[i] = source[i];
		}
	}
	if(fixed) {
		this.growthRate = 0;
	}
};
$hxClasses["de.polygonal.ds.ArrayedQueue_entities_Block"] = de_polygonal_ds_ArrayedQueue_$entities_$Block;
de_polygonal_ds_ArrayedQueue_$entities_$Block.__name__ = ["de","polygonal","ds","ArrayedQueue_entities_Block"];
de_polygonal_ds_ArrayedQueue_$entities_$Block.__interfaces__ = [de_polygonal_ds_Queue];
de_polygonal_ds_ArrayedQueue_$entities_$Block.prototype = {
	capacity: null
	,growthRate: null
	,mData: null
	,mInitialCapacity: null
	,mSize: null
	,mFront: null
	,grow: function() {
		var t = this.capacity;
		this.capacity = de_polygonal_ds_tools_GrowthRate.compute(this.growthRate,this.capacity);
		this.resizeContainer(t,this.capacity);
	}
	,resizeContainer: function(oldSize,newSize) {
		var dst = new Array(newSize);
		if(oldSize < newSize) {
			if(this.mFront + this.mSize > oldSize) {
				var n1 = oldSize - this.mFront;
				var n2 = oldSize - n1;
				de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,this.mFront,dst,0,n1);
				de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,0,dst,n1,n2);
			} else {
				de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,this.mFront,dst,0,this.mSize);
			}
		} else if(this.mFront + this.mSize > oldSize) {
			var n11 = oldSize - this.mFront;
			var n21 = this.mSize - this.mFront;
			de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,this.mFront,dst,0,n11);
			de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,0,dst,this.mFront,n21);
		} else {
			de_polygonal_ds_tools_NativeArrayTools.blit(this.mData,this.mFront,dst,0,this.mSize);
		}
		this.mData = dst;
		this.mFront = 0;
	}
	,__class__: de_polygonal_ds_ArrayedQueue_$entities_$Block
};
var de_polygonal_ds_tools_AssertError = function(message,info) {
	var _this_r;
	if(message == null) {
		message = "";
	}
	this.message = message;
	var stack = haxe_CallStack.toString(haxe_CallStack.callStack());
	_this_r = new RegExp("\nCalled from de\\.polygonal\\.ds\\.tools\\.AssertError.*$","m".split("u").join(""));
	stack = stack.replace(_this_r,"");
	this.message = "Assertation " + message + " failed in file " + info.fileName + ", line " + info.lineNumber + ", " + info.className + ":: " + info.methodName + "\nCall stack:" + stack;
};
$hxClasses["de.polygonal.ds.tools.AssertError"] = de_polygonal_ds_tools_AssertError;
de_polygonal_ds_tools_AssertError.__name__ = ["de","polygonal","ds","tools","AssertError"];
de_polygonal_ds_tools_AssertError.prototype = {
	message: null
	,toString: function() {
		return this.message;
	}
	,__class__: de_polygonal_ds_tools_AssertError
};
var de_polygonal_ds_tools_GrowthRate = function() { };
$hxClasses["de.polygonal.ds.tools.GrowthRate"] = de_polygonal_ds_tools_GrowthRate;
de_polygonal_ds_tools_GrowthRate.__name__ = ["de","polygonal","ds","tools","GrowthRate"];
de_polygonal_ds_tools_GrowthRate.compute = function(rate,capacity) {
	if(true != rate >= -3) {
		throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("invalid growth rate" + " (rate >= -3)",{ fileName : "GrowthRate.hx", lineNumber : 52, className : "de.polygonal.ds.tools.GrowthRate", methodName : "compute"}));
	}
	if(rate > 0) {
		capacity += rate;
	} else {
		switch(rate) {
		case -3:
			capacity <<= 1;
			break;
		case -2:
			capacity = (capacity * 3 >> 1) + 1;
			break;
		case -1:
			var newSize = capacity + 1;
			capacity = (newSize >> 3) + (newSize < 9 ? 3 : 6);
			capacity += newSize;
			break;
		case 0:
			throw new js__$Boot_HaxeError("out of space");
			break;
		}
	}
	return capacity;
};
var de_polygonal_ds_tools_NativeArrayTools = function() { };
$hxClasses["de.polygonal.ds.tools.NativeArrayTools"] = de_polygonal_ds_tools_NativeArrayTools;
de_polygonal_ds_tools_NativeArrayTools.__name__ = ["de","polygonal","ds","tools","NativeArrayTools"];
de_polygonal_ds_tools_NativeArrayTools.blit = function(src,srcPos,dst,dstPos,n) {
	if(n > 0) {
		if(true != srcPos < src.length) {
			throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("srcPos out of range" + " (srcPos < size(src))",{ fileName : "NativeArrayTools.hx", lineNumber : 188, className : "de.polygonal.ds.tools.NativeArrayTools", methodName : "blit"}));
		}
		if(true != dstPos < dst.length) {
			throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("dstPos out of range" + " (dstPos < size(dst))",{ fileName : "NativeArrayTools.hx", lineNumber : 189, className : "de.polygonal.ds.tools.NativeArrayTools", methodName : "blit"}));
		}
		if(true != (srcPos + n <= src.length && dstPos + n <= dst.length)) {
			throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("n out of range" + " (srcPos + n <= size(src) && dstPos + n <= size(dst))",{ fileName : "NativeArrayTools.hx", lineNumber : 190, className : "de.polygonal.ds.tools.NativeArrayTools", methodName : "blit"}));
		}
		if(src == dst) {
			if(srcPos < dstPos) {
				var i = srcPos + n;
				var j = dstPos + n;
				var _g1 = 0;
				while(_g1 < n) {
					++_g1;
					--i;
					--j;
					src[j] = src[i];
				}
			} else if(srcPos > dstPos) {
				var i1 = srcPos;
				var j1 = dstPos;
				var _g11 = 0;
				while(_g11 < n) {
					++_g11;
					src[j1] = src[i1];
					++i1;
					++j1;
				}
			}
		} else if(srcPos == 0 && dstPos == 0) {
			var _g12 = 0;
			while(_g12 < n) {
				var i2 = _g12++;
				dst[i2] = src[i2];
			}
		} else if(srcPos == 0) {
			var _g13 = 0;
			while(_g13 < n) {
				var i3 = _g13++;
				dst[dstPos + i3] = src[i3];
			}
		} else if(dstPos == 0) {
			var _g14 = 0;
			while(_g14 < n) {
				var i4 = _g14++;
				dst[i4] = src[srcPos + i4];
			}
		} else {
			var _g15 = 0;
			while(_g15 < n) {
				var i5 = _g15++;
				dst[dstPos + i5] = src[srcPos + i5];
			}
		}
	}
};
var flixel_util_IFlxDestroyable = function() { };
$hxClasses["flixel.util.IFlxDestroyable"] = flixel_util_IFlxDestroyable;
flixel_util_IFlxDestroyable.__name__ = ["flixel","util","IFlxDestroyable"];
flixel_util_IFlxDestroyable.prototype = {
	destroy: null
	,__class__: flixel_util_IFlxDestroyable
};
var flixel_FlxBasic = function() {
	this.flixelType = 0;
	this.exists = true;
	this.alive = true;
	this.visible = true;
	this.active = true;
	this.ID = -1;
};
$hxClasses["flixel.FlxBasic"] = flixel_FlxBasic;
flixel_FlxBasic.__name__ = ["flixel","FlxBasic"];
flixel_FlxBasic.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_FlxBasic.prototype = {
	ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,flixelType: null
	,_cameras: null
	,destroy: function() {
		this.set_exists(false);
		this._cameras = null;
	}
	,kill: function() {
		this.set_alive(false);
		this.set_exists(false);
	}
	,revive: function() {
		this.set_alive(true);
		this.set_exists(true);
	}
	,update: function(elapsed) {
		flixel_FlxBasic.activeCount++;
	}
	,draw: function() {
		flixel_FlxBasic.visibleCount++;
	}
	,toString: function() {
		var value = this.active;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "active";
		_this.value = value;
		var value1 = this.visible;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "visible";
		_this1.value = value1;
		var value2 = this.alive;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "alive";
		_this2.value = value2;
		var value3 = this.exists;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "exists";
		_this3.value = value3;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,set_visible: function(Value) {
		return this.visible = Value;
	}
	,set_active: function(Value) {
		return this.active = Value;
	}
	,set_exists: function(Value) {
		return this.exists = Value;
	}
	,set_alive: function(Value) {
		return this.alive = Value;
	}
	,get_camera: function() {
		if(this._cameras == null || this._cameras.length == 0) {
			return flixel_FlxCamera.defaultCameras[0];
		} else {
			return this._cameras[0];
		}
	}
	,set_camera: function(Value) {
		if(this._cameras == null) {
			this._cameras = [Value];
		} else {
			this._cameras[0] = Value;
		}
		return Value;
	}
	,get_cameras: function() {
		if(this._cameras == null) {
			return flixel_FlxCamera.defaultCameras;
		} else {
			return this._cameras;
		}
	}
	,set_cameras: function(Value) {
		return this._cameras = Value;
	}
	,__class__: flixel_FlxBasic
	,__properties__: {set_cameras:"set_cameras",get_cameras:"get_cameras",set_camera:"set_camera",get_camera:"get_camera",set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var flixel_util_IFlxPooled = function() { };
$hxClasses["flixel.util.IFlxPooled"] = flixel_util_IFlxPooled;
flixel_util_IFlxPooled.__name__ = ["flixel","util","IFlxPooled"];
flixel_util_IFlxPooled.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_IFlxPooled.prototype = {
	put: null
	,_inPool: null
	,__class__: flixel_util_IFlxPooled
};
var flixel_util_IFlxPool = function() { };
$hxClasses["flixel.util.IFlxPool"] = flixel_util_IFlxPool;
flixel_util_IFlxPool.__name__ = ["flixel","util","IFlxPool"];
flixel_util_IFlxPool.prototype = {
	preAllocate: null
	,clear: null
	,__class__: flixel_util_IFlxPool
};
var flixel_util_FlxPool_$flixel_$math_$FlxRect = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_math_FlxRect"] = flixel_util_FlxPool_$flixel_$math_$FlxRect;
flixel_util_FlxPool_$flixel_$math_$FlxRect.__name__ = ["flixel","util","FlxPool_flixel_math_FlxRect"];
flixel_util_FlxPool_$flixel_$math_$FlxRect.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$math_$FlxRect.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$math_$FlxRect
	,__properties__: {get_length:"get_length"}
};
var flixel_math_FlxRect = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._inPool = false;
	this._weak = false;
	this.x = X;
	this.y = Y;
	this.width = Width;
	this.height = Height;
};
$hxClasses["flixel.math.FlxRect"] = flixel_math_FlxRect;
flixel_math_FlxRect.__name__ = ["flixel","math","FlxRect"];
flixel_math_FlxRect.__interfaces__ = [flixel_util_IFlxPooled];
flixel_math_FlxRect.__properties__ = {get_pool:"get_pool"}
flixel_math_FlxRect.get = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = X;
	_this.y = Y;
	_this.width = Width;
	_this.height = Height;
	_this._inPool = false;
	return _this;
};
flixel_math_FlxRect.weak = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = X;
	_this.y = Y;
	_this.width = Width;
	_this.height = Height;
	_this._inPool = false;
	_this._weak = true;
	return _this;
};
flixel_math_FlxRect.get_pool = function() {
	return flixel_math_FlxRect._pool;
};
flixel_math_FlxRect.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,isEmpty: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) {
			if(!this._inPool) {
				this._inPool = true;
				this._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(this);
			}
		}
	}
	,setSize: function(Width,Height) {
		this.width = Width;
		this.height = Height;
		return this;
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,set: function(X,Y,Width,Height) {
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		return this;
	}
	,copyFrom: function(Rect) {
		this.x = Rect.x;
		this.y = Rect.y;
		this.width = Rect.width;
		this.height = Rect.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return this;
	}
	,copyTo: function(Rect) {
		Rect.x = this.x;
		Rect.y = this.y;
		Rect.width = this.width;
		Rect.height = this.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return Rect;
	}
	,copyFromFlash: function(FlashRect) {
		this.x = FlashRect.x;
		this.y = FlashRect.y;
		this.width = FlashRect.width;
		this.height = FlashRect.height;
		return this;
	}
	,copyToFlash: function(FlashRect) {
		if(FlashRect == null) {
			FlashRect = new openfl_geom_Rectangle();
		}
		FlashRect.x = this.x;
		FlashRect.y = this.y;
		FlashRect.width = this.width;
		FlashRect.height = this.height;
		return FlashRect;
	}
	,overlaps: function(Rect) {
		var result = Rect.x + Rect.width > this.x && Rect.x < this.x + this.width && Rect.y + Rect.height > this.y && Rect.y < this.y + this.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		return result;
	}
	,containsPoint: function(Point) {
		var result = flixel_math_FlxMath.pointInFlxRect(Point.x,Point.y,this);
		if(Point._weak) {
			Point.put();
		}
		return result;
	}
	,union: function(Rect) {
		var minX = Math.min(this.x,Rect.x);
		var minY = Math.min(this.y,Rect.y);
		var maxX = Math.max(this.x + this.width,Rect.x + Rect.width);
		var maxY = Math.max(this.y + this.height,Rect.y + Rect.height);
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		this.x = minX;
		this.y = minY;
		this.width = maxX - minX;
		this.height = maxY - minY;
		return this;
	}
	,floor: function() {
		this.x = Math.floor(this.x);
		this.y = Math.floor(this.y);
		this.width = Math.floor(this.width);
		this.height = Math.floor(this.height);
		return this;
	}
	,ceil: function() {
		this.x = Math.ceil(this.x);
		this.y = Math.ceil(this.y);
		this.width = Math.ceil(this.width);
		this.height = Math.ceil(this.height);
		return this;
	}
	,round: function() {
		this.x = Math.round(this.x);
		this.y = Math.round(this.y);
		this.width = Math.round(this.width);
		this.height = Math.round(this.height);
		return this;
	}
	,fromTwoPoints: function(Point1,Point2) {
		var minX = Math.min(Point1.x,Point2.x);
		var minY = Math.min(Point1.y,Point2.y);
		var maxX = Math.max(Point1.x,Point2.x);
		var maxY = Math.max(Point1.y,Point2.y);
		if(Point1._weak) {
			Point1.put();
		}
		if(Point2._weak) {
			Point2.put();
		}
		this.x = minX;
		this.y = minY;
		this.width = maxX - minX;
		this.height = maxY - minY;
		return this;
	}
	,unionWithPoint: function(Point) {
		var minX = Math.min(this.x,Point.x);
		var minY = Math.min(this.y,Point.y);
		var maxX = Math.max(this.x + this.width,Point.x);
		var maxY = Math.max(this.y + this.height,Point.y);
		if(Point._weak) {
			Point.put();
		}
		this.x = minX;
		this.y = minY;
		this.width = maxX - minX;
		this.height = maxY - minY;
		return this;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
		return this;
	}
	,destroy: function() {
	}
	,equals: function(rect) {
		var result = Math.abs(this.x - rect.x) <= 0.0000001 && Math.abs(this.y - rect.y) <= 0.0000001 && Math.abs(this.width - rect.width) <= 0.0000001 && Math.abs(this.height - rect.height) <= 0.0000001;
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		return result;
	}
	,intersection: function(rect,result) {
		if(result == null) {
			var _this = flixel_math_FlxRect._pool.get();
			_this.x = 0;
			_this.y = 0;
			_this.width = 0;
			_this.height = 0;
			_this._inPool = false;
			result = _this;
		}
		var x0 = this.x < rect.x ? rect.x : this.x;
		var x1 = this.x + this.width > rect.x + rect.width ? rect.x + rect.width : this.x + this.width;
		if(x1 <= x0) {
			if(rect._weak) {
				if(!rect._inPool) {
					rect._inPool = true;
					rect._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(rect);
				}
			}
			return result;
		}
		var y0 = this.y < rect.y ? rect.y : this.y;
		var y1 = this.y + this.height > rect.y + rect.height ? rect.y + rect.height : this.y + this.height;
		if(y1 <= y0) {
			if(rect._weak) {
				if(!rect._inPool) {
					rect._inPool = true;
					rect._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(rect);
				}
			}
			return result;
		}
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value1 = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value1;
		var value2 = this.width;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "w";
		_this2.value = value2;
		var value3 = this.height;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "h";
		_this3.value = value3;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(Value) {
		this.width -= Value - this.x;
		return this.x = Value;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(Value) {
		this.width = Value - this.x;
		return Value;
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(Value) {
		this.height -= Value - this.y;
		return this.y = Value;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(Value) {
		this.height = Value - this.y;
		return Value;
	}
	,get_isEmpty: function() {
		if(this.width != 0) {
			return this.height == 0;
		} else {
			return true;
		}
	}
	,__class__: flixel_math_FlxRect
	,__properties__: {get_isEmpty:"get_isEmpty",set_bottom:"set_bottom",get_bottom:"get_bottom",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left"}
};
var flixel_FlxObject = function(X,Y,Width,Height) {
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this._rect = _this;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._point = point;
	this.path = null;
	this.ignoreDrawDebug = false;
	this.debugBoundingBoxColorPartial = -16744448;
	this.debugBoundingBoxColorNotSolid = -16776961;
	this.debugBoundingBoxColorSolid = -65536;
	this.debugBoundingBoxColor = null;
	this.collisonXDrag = true;
	this.allowCollisions = 4369;
	this.wasTouching = 0;
	this.touching = 0;
	this.health = 1;
	this.maxAngular = 10000;
	this.angularDrag = 0;
	this.angularAcceleration = 0;
	this.angularVelocity = 0;
	this.elasticity = 0;
	this.mass = 1;
	this.immovable = false;
	this.moves = true;
	this.angle = 0;
	this.pixelPerfectPosition = true;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width);
	this.set_height(Height);
	this.initVars();
};
$hxClasses["flixel.FlxObject"] = flixel_FlxObject;
flixel_FlxObject.__name__ = ["flixel","FlxObject"];
flixel_FlxObject.separate = function(Object1,Object2) {
	var separatedX = flixel_FlxObject.separateX(Object1,Object2);
	var separatedY = flixel_FlxObject.separateY(Object1,Object2);
	if(!separatedX) {
		return separatedY;
	} else {
		return true;
	}
};
flixel_FlxObject.updateTouchingFlags = function(Object1,Object2) {
	var touchingX = flixel_FlxObject.updateTouchingFlagsX(Object1,Object2);
	var touchingY = flixel_FlxObject.updateTouchingFlagsY(Object1,Object2);
	if(!touchingX) {
		return touchingY;
	} else {
		return true;
	}
};
flixel_FlxObject.computeOverlapX = function(Object1,Object2,checkMaxOverlap) {
	if(checkMaxOverlap == null) {
		checkMaxOverlap = true;
	}
	var overlap = 0;
	var obj1delta = Object1.x - Object1.last.x;
	var obj2delta = Object2.x - Object2.last.x;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0 ? obj1delta : -obj1delta;
		var obj2deltaAbs = obj2delta > 0 ? obj2delta : -obj2delta;
		var _this = flixel_FlxObject._firstSeparateFlxRect;
		var X = Object1.x - (obj1delta > 0 ? obj1delta : 0);
		var Y = Object1.last.y;
		var Width = Object1.get_width() + obj1deltaAbs;
		var Height = Object1.get_height();
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this1 = flixel_FlxObject._secondSeparateFlxRect;
		var X1 = Object2.x - (obj2delta > 0 ? obj2delta : 0);
		var Y1 = Object2.last.y;
		var Width1 = Object2.get_width() + obj2deltaAbs;
		var Height1 = Object2.get_height();
		_this1.x = X1;
		_this1.y = Y1;
		_this1.width = Width1;
		_this1.height = Height1;
		if(_this.x + _this.width > _this1.x && _this.x < _this1.x + _this1.width && _this.y + _this.height > _this1.y && _this.y < _this1.y + _this1.height) {
			var maxOverlap = checkMaxOverlap ? obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS : 0;
			if(obj1delta > obj2delta) {
				overlap = Object1.x + Object1.get_width() - Object2.x;
				if(checkMaxOverlap && overlap > maxOverlap || (Object1.allowCollisions & 16) == 0 || (Object2.allowCollisions & 1) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 16;
					Object2.touching |= 1;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.x - Object2.get_width() - Object2.x;
				if(checkMaxOverlap && -overlap > maxOverlap || (Object1.allowCollisions & 1) == 0 || (Object2.allowCollisions & 16) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 1;
					Object2.touching |= 16;
				}
			}
		}
	}
	return overlap;
};
flixel_FlxObject.separateX = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) {
		return false;
	}
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.separateX);
	}
	if(Object2.flixelType == 3) {
		var tilemap1 = Object2;
		return tilemap1.overlapsWithCallback(Object1,flixel_FlxObject.separateX,true);
	}
	var overlap = flixel_FlxObject.computeOverlapX(Object1,Object2);
	if(overlap != 0) {
		var obj1v = Object1.velocity.x;
		var obj2v = Object2.velocity.x;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_x(Object1.x - overlap);
			Object2.set_x(Object2.x + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0 ? 1 : -1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0 ? 1 : -1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_x(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_x(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_x(Object1.x - overlap);
			Object1.velocity.set_x(obj2v - obj1v * Object1.elasticity);
		} else if(!obj2immovable) {
			Object2.set_x(Object2.x + overlap);
			Object2.velocity.set_x(obj1v - obj2v * Object2.elasticity);
		}
		return true;
	}
	return false;
};
flixel_FlxObject.updateTouchingFlagsX = function(Object1,Object2) {
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.updateTouchingFlagsX);
	}
	if(Object2.flixelType == 3) {
		var tilemap1 = Object2;
		return tilemap1.overlapsWithCallback(Object1,flixel_FlxObject.updateTouchingFlagsX,true);
	}
	return flixel_FlxObject.computeOverlapX(Object1,Object2,false) != 0;
};
flixel_FlxObject.computeOverlapY = function(Object1,Object2,checkMaxOverlap) {
	if(checkMaxOverlap == null) {
		checkMaxOverlap = true;
	}
	var overlap = 0;
	var obj1delta = Object1.y - Object1.last.y;
	var obj2delta = Object2.y - Object2.last.y;
	if(obj1delta != obj2delta) {
		var obj1deltaAbs = obj1delta > 0 ? obj1delta : -obj1delta;
		var obj2deltaAbs = obj2delta > 0 ? obj2delta : -obj2delta;
		var _this = flixel_FlxObject._firstSeparateFlxRect;
		var X = Object1.x;
		var Y = Object1.y - (obj1delta > 0 ? obj1delta : 0);
		var Width = Object1.get_width();
		var Height = Object1.get_height() + obj1deltaAbs;
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		var _this1 = flixel_FlxObject._secondSeparateFlxRect;
		var X1 = Object2.x;
		var Y1 = Object2.y - (obj2delta > 0 ? obj2delta : 0);
		var Width1 = Object2.get_width();
		var Height1 = Object2.get_height() + obj2deltaAbs;
		_this1.x = X1;
		_this1.y = Y1;
		_this1.width = Width1;
		_this1.height = Height1;
		if(_this.x + _this.width > _this1.x && _this.x < _this1.x + _this1.width && _this.y + _this.height > _this1.y && _this.y < _this1.y + _this1.height) {
			var maxOverlap = checkMaxOverlap ? obj1deltaAbs + obj2deltaAbs + flixel_FlxObject.SEPARATE_BIAS : 0;
			if(obj1delta > obj2delta) {
				overlap = Object1.y + Object1.get_height() - Object2.y;
				if(checkMaxOverlap && overlap > maxOverlap || (Object1.allowCollisions & 4096) == 0 || (Object2.allowCollisions & 256) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 4096;
					Object2.touching |= 256;
				}
			} else if(obj1delta < obj2delta) {
				overlap = Object1.y - Object2.get_height() - Object2.y;
				if(checkMaxOverlap && -overlap > maxOverlap || (Object1.allowCollisions & 256) == 0 || (Object2.allowCollisions & 4096) == 0) {
					overlap = 0;
				} else {
					Object1.touching |= 256;
					Object2.touching |= 4096;
				}
			}
		}
	}
	return overlap;
};
flixel_FlxObject.separateY = function(Object1,Object2) {
	var obj1immovable = Object1.immovable;
	var obj2immovable = Object2.immovable;
	if(obj1immovable && obj2immovable) {
		return false;
	}
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.separateY);
	}
	if(Object2.flixelType == 3) {
		var tilemap1 = Object2;
		return tilemap1.overlapsWithCallback(Object1,flixel_FlxObject.separateY,true);
	}
	var overlap = flixel_FlxObject.computeOverlapY(Object1,Object2);
	if(overlap != 0) {
		var obj1delta = Object1.y - Object1.last.y;
		var obj2delta = Object2.y - Object2.last.y;
		var obj1v = Object1.velocity.y;
		var obj2v = Object2.velocity.y;
		if(!obj1immovable && !obj2immovable) {
			overlap *= 0.5;
			Object1.set_y(Object1.y - overlap);
			Object2.set_y(Object2.y + overlap);
			var obj1velocity = Math.sqrt(obj2v * obj2v * Object2.mass / Object1.mass) * (obj2v > 0 ? 1 : -1);
			var obj2velocity = Math.sqrt(obj1v * obj1v * Object1.mass / Object2.mass) * (obj1v > 0 ? 1 : -1);
			var average = (obj1velocity + obj2velocity) * 0.5;
			obj1velocity -= average;
			obj2velocity -= average;
			Object1.velocity.set_y(average + obj1velocity * Object1.elasticity);
			Object2.velocity.set_y(average + obj2velocity * Object2.elasticity);
		} else if(!obj1immovable) {
			Object1.set_y(Object1.y - overlap);
			Object1.velocity.set_y(obj2v - obj1v * Object1.elasticity);
			if(Object1.collisonXDrag && Object2.active && Object2.moves && obj1delta > obj2delta) {
				Object1.set_x(Object1.x + (Object2.x - Object2.last.x));
			}
		} else if(!obj2immovable) {
			Object2.set_y(Object2.y + overlap);
			Object2.velocity.set_y(obj1v - obj2v * Object2.elasticity);
			if(Object2.collisonXDrag && Object1.active && Object1.moves && obj1delta < obj2delta) {
				Object2.set_x(Object2.x + (Object1.x - Object1.last.x));
			}
		}
		return true;
	}
	return false;
};
flixel_FlxObject.updateTouchingFlagsY = function(Object1,Object2) {
	if(Object1.flixelType == 3) {
		var tilemap = Object1;
		return tilemap.overlapsWithCallback(Object2,flixel_FlxObject.updateTouchingFlagsY);
	}
	if(Object2.flixelType == 3) {
		var tilemap1 = Object2;
		return tilemap1.overlapsWithCallback(Object1,flixel_FlxObject.updateTouchingFlagsY,true);
	}
	return flixel_FlxObject.computeOverlapY(Object1,Object2,false) != 0;
};
flixel_FlxObject.__super__ = flixel_FlxBasic;
flixel_FlxObject.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,width: null
	,height: null
	,pixelPerfectRender: null
	,pixelPerfectPosition: null
	,angle: null
	,moves: null
	,immovable: null
	,scrollFactor: null
	,velocity: null
	,acceleration: null
	,drag: null
	,maxVelocity: null
	,last: null
	,mass: null
	,elasticity: null
	,angularVelocity: null
	,angularAcceleration: null
	,angularDrag: null
	,maxAngular: null
	,health: null
	,touching: null
	,wasTouching: null
	,allowCollisions: null
	,collisonXDrag: null
	,debugBoundingBoxColor: null
	,debugBoundingBoxColorSolid: null
	,debugBoundingBoxColorNotSolid: null
	,debugBoundingBoxColorPartial: null
	,ignoreDrawDebug: null
	,path: null
	,_point: null
	,_rect: null
	,initVars: function() {
		this.flixelType = 1;
		var X = this.x;
		var Y = this.y;
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.last = point;
		var point1 = flixel_math_FlxPoint._pool.get().set(1,1);
		point1._inPool = false;
		this.scrollFactor = point1;
		this.pixelPerfectPosition = flixel_FlxObject.defaultPixelPerfectPosition;
		var point2 = flixel_math_FlxPoint._pool.get().set(0,0);
		point2._inPool = false;
		this.velocity = point2;
		var point3 = flixel_math_FlxPoint._pool.get().set(0,0);
		point3._inPool = false;
		this.acceleration = point3;
		var point4 = flixel_math_FlxPoint._pool.get().set(0,0);
		point4._inPool = false;
		this.drag = point4;
		var point5 = flixel_math_FlxPoint._pool.get().set(10000,10000);
		point5._inPool = false;
		this.maxVelocity = point5;
	}
	,initMotionVars: function() {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		this.acceleration = point1;
		var point2 = flixel_math_FlxPoint._pool.get().set(0,0);
		point2._inPool = false;
		this.drag = point2;
		var point3 = flixel_math_FlxPoint._pool.get().set(10000,10000);
		point3._inPool = false;
		this.maxVelocity = point3;
	}
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		this.velocity = flixel_util_FlxDestroyUtil.put(this.velocity);
		this.acceleration = flixel_util_FlxDestroyUtil.put(this.acceleration);
		this.drag = flixel_util_FlxDestroyUtil.put(this.drag);
		this.maxVelocity = flixel_util_FlxDestroyUtil.put(this.maxVelocity);
		this.scrollFactor = flixel_util_FlxDestroyUtil.put(this.scrollFactor);
		this.last = flixel_util_FlxDestroyUtil.put(this.last);
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this._rect = flixel_util_FlxDestroyUtil.put(this._rect);
	}
	,update: function(elapsed) {
		flixel_FlxBasic.prototype.update.call(this,elapsed);
		this.last.set(this.x,this.y);
		if(this.path != null && this.path.active) {
			this.path.update(elapsed);
		}
		if(this.moves) {
			this.updateMotion(elapsed);
		}
		this.wasTouching = this.touching;
		this.touching = 0;
	}
	,updateMotion: function(elapsed) {
		var velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.angularVelocity,this.angularAcceleration,this.angularDrag,this.maxAngular,elapsed) - this.angularVelocity);
		this.angularVelocity += velocityDelta;
		var _g = this;
		_g.set_angle(_g.angle + this.angularVelocity * elapsed);
		this.angularVelocity += velocityDelta;
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.velocity.x,this.acceleration.x,this.drag.x,this.maxVelocity.x,elapsed) - this.velocity.x);
		var _g1 = this.velocity;
		_g1.set_x(_g1.x + velocityDelta);
		var delta = this.velocity.x * elapsed;
		var _g2 = this.velocity;
		_g2.set_x(_g2.x + velocityDelta);
		var _g3 = this;
		_g3.set_x(_g3.x + delta);
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.velocity.y,this.acceleration.y,this.drag.y,this.maxVelocity.y,elapsed) - this.velocity.y);
		var _g4 = this.velocity;
		_g4.set_y(_g4.y + velocityDelta);
		delta = this.velocity.y * elapsed;
		var _g5 = this.velocity;
		_g5.set_y(_g5.y + velocityDelta);
		var _g6 = this;
		_g6.set_y(_g6.y + delta);
	}
	,draw: function() {
		flixel_FlxBasic.prototype.draw.call(this);
		if(flixel_FlxG["debugger"].drawDebug) {
			this.drawDebug();
		}
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.overlapsCallback),group,0,0,InScreenSpace,Camera);
		}
		if(ObjectOrGroup.flixelType == 3) {
			var tilemap = ObjectOrGroup;
			return tilemap.overlaps(this,InScreenSpace,Camera);
		}
		var object = ObjectOrGroup;
		if(!InScreenSpace) {
			if(object.x + object.get_width() > this.x && object.x < this.x + this.get_width() && object.y + object.get_height() > this.y) {
				return object.y < this.y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var objectScreenPos = object.getScreenPosition(null,Camera);
		this.getScreenPosition(this._point,Camera);
		if(objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y) {
			return objectScreenPos.y < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,overlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.overlapsAtCallback),group,X,Y,InScreenSpace,Camera);
		}
		if(ObjectOrGroup.flixelType == 3) {
			var tilemap = ObjectOrGroup;
			return tilemap.overlapsAt(tilemap.x - (X - this.x),tilemap.y - (Y - this.y),this,InScreenSpace,Camera);
		}
		var object = ObjectOrGroup;
		if(!InScreenSpace) {
			if(object.x + object.get_width() > X && object.x < X + this.get_width() && object.y + object.get_height() > Y) {
				return object.y < Y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var objectScreenPos = object.getScreenPosition(null,Camera);
		this.getScreenPosition(this._point,Camera);
		if(objectScreenPos.x + object.get_width() > this._point.x && objectScreenPos.x < this._point.x + this.get_width() && objectScreenPos.y + object.get_height() > this._point.y) {
			return objectScreenPos.y < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,overlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		if(!InScreenSpace) {
			if(point.x >= this.x && point.x < this.x + this.get_width() && point.y >= this.y) {
				return point.y < this.y + this.get_height();
			} else {
				return false;
			}
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var xPos = point.x - Camera.scroll.x;
		var yPos = point.y - Camera.scroll.y;
		this.getScreenPosition(this._point,Camera);
		if(point._weak) {
			point.put();
		}
		if(xPos >= this._point.x && xPos < this._point.x + this.get_width() && yPos >= this._point.y) {
			return yPos < this._point.y + this.get_height();
		} else {
			return false;
		}
	}
	,inWorldBounds: function() {
		var tmp;
		var tmp1;
		if(this.x + this.get_width() > flixel_FlxG.worldBounds.x) {
			var _this = flixel_FlxG.worldBounds;
			tmp1 = this.x < _this.x + _this.width;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = this.y + this.get_height() > flixel_FlxG.worldBounds.y;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = flixel_FlxG.worldBounds;
			return this.y < _this1.y + _this1.height;
		} else {
			return false;
		}
	}
	,getScreenPosition: function(point,Camera) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		point.set(this.x,this.y);
		if(this.pixelPerfectPosition) {
			point.set_x(Math.floor(point.x));
			point.set_y(Math.floor(point.y));
		}
		var Y = Camera.scroll.y * this.scrollFactor.y;
		var _g = point;
		_g.set_x(_g.x - Camera.scroll.x * this.scrollFactor.x);
		var _g1 = point;
		_g1.set_y(_g1.y - Y);
		return point;
	}
	,getPosition: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x,this.y);
	}
	,getMidpoint: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x + this.get_width() * 0.5,this.y + this.get_height() * 0.5);
	}
	,getHitbox: function(rect) {
		if(rect == null) {
			var _this = flixel_math_FlxRect._pool.get();
			_this.x = 0;
			_this.y = 0;
			_this.width = 0;
			_this.height = 0;
			_this._inPool = false;
			rect = _this;
		}
		var X = this.x;
		var Y = this.y;
		var Width = this.get_width();
		var Height = this.get_height();
		rect.x = X;
		rect.y = Y;
		rect.width = Width;
		rect.height = Height;
		return rect;
	}
	,reset: function(X,Y) {
		this.touching = 0;
		this.wasTouching = 0;
		this.setPosition(X,Y);
		this.last.set(this.x,this.y);
		this.velocity.set();
		this.revive();
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.getScreenPosition(this._point,Camera);
		if(this._point.x + this.get_width() > 0 && this._point.x < Camera.width && this._point.y + this.get_height() > 0) {
			return this._point.y < Camera.height;
		} else {
			return false;
		}
	}
	,isPixelPerfectRender: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(this.pixelPerfectRender == null) {
			return Camera.pixelPerfectRender;
		} else {
			return this.pixelPerfectRender;
		}
	}
	,isTouching: function(Direction) {
		return (this.touching & Direction) > 0;
	}
	,justTouched: function(Direction) {
		if((this.touching & Direction) > 0) {
			return (this.wasTouching & Direction) <= 0;
		} else {
			return false;
		}
	}
	,hurt: function(Damage) {
		this.health -= Damage;
		if(this.health <= 0) {
			this.kill();
		}
	}
	,screenCenter: function(axes) {
		if(axes == null) {
			axes = flixel_util_FlxAxes.XY;
		}
		if(axes != flixel_util_FlxAxes.Y) {
			this.set_x(flixel_FlxG.width / 2 - this.get_width() / 2);
		}
		if(axes != flixel_util_FlxAxes.X) {
			this.set_y(flixel_FlxG.height / 2 - this.get_height() / 2);
		}
		return this;
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,drawDebug: function() {
		if(this.ignoreDrawDebug) {
			return;
		}
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			this.drawDebugOnCamera(camera);
			if(this.path != null && !this.path.ignoreDrawDebug) {
				this.path.drawDebug();
			}
		}
	}
	,drawDebugOnCamera: function(camera) {
		if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) {
			return;
		}
		var rect = this.getBoundingBox(camera);
		var gfx;
		if(flixel_FlxG.renderBlit) {
			flixel_util_FlxSpriteUtil.flashGfx.clear();
			gfx = flixel_util_FlxSpriteUtil.flashGfx;
		} else {
			gfx = camera.debugLayer.get_graphics();
		}
		this.drawDebugBoundingBox(gfx,rect,this.allowCollisions,this.immovable);
		if(flixel_FlxG.renderBlit) {
			camera.buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
		}
	}
	,drawDebugBoundingBox: function(gfx,rect,allowCollisions,partial) {
		var color = this.debugBoundingBoxColor;
		if(color == null) {
			if(allowCollisions != 0) {
				if(partial) {
					color = this.debugBoundingBoxColorPartial;
				} else {
					color = this.debugBoundingBoxColorSolid;
				}
			} else {
				color = this.debugBoundingBoxColorNotSolid;
			}
		}
		gfx.lineStyle(1,color,0.5);
		gfx.drawRect(rect.x,rect.y,rect.width,rect.height);
	}
	,beginDrawDebug: function(camera) {
		if(flixel_FlxG.renderBlit) {
			flixel_util_FlxSpriteUtil.flashGfx.clear();
			return flixel_util_FlxSpriteUtil.flashGfx;
		} else {
			return camera.debugLayer.get_graphics();
		}
	}
	,endDrawDebug: function(camera) {
		if(flixel_FlxG.renderBlit) {
			camera.buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
		}
	}
	,getBoundingBox: function(camera) {
		this.getScreenPosition(this._point,camera);
		var _this = this._rect;
		var X = this._point.x;
		var Y = this._point.y;
		var Width = this.get_width();
		var Height = this.get_height();
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		if(this.isPixelPerfectRender(camera)) {
			var _this1 = this._rect;
			_this1.x = Math.floor(_this1.x);
			_this1.y = Math.floor(_this1.y);
			_this1.width = Math.floor(_this1.width);
			_this1.height = Math.floor(_this1.height);
		}
		return this._rect;
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value1 = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value1;
		var value2 = this.get_width();
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "w";
		_this2.value = value2;
		var value3 = this.get_height();
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "h";
		_this3.value = value3;
		var value4 = this.visible;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "visible";
		_this4.value = value4;
		var value5 = this.velocity;
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "velocity";
		_this5.value = value5;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);
	}
	,set_x: function(NewX) {
		return this.x = NewX;
	}
	,set_y: function(NewY) {
		return this.y = NewY;
	}
	,set_width: function(Width) {
		if(Width < 0) {
			flixel_FlxG.log.advanced("An object's width cannot be smaller than 0. Use offset for sprites to control the hitbox position!",flixel_system_debug_log_LogStyle.WARNING,true);
			return Width;
		}
		return this.width = Width;
	}
	,set_height: function(Height) {
		if(Height < 0) {
			flixel_FlxG.log.advanced("An object's height cannot be smaller than 0. Use offset for sprites to control the hitbox position!",flixel_system_debug_log_LogStyle.WARNING,true);
			return Height;
		}
		return this.height = Height;
	}
	,get_width: function() {
		return this.width;
	}
	,get_height: function() {
		return this.height;
	}
	,get_solid: function() {
		return (this.allowCollisions & 4369) > 0;
	}
	,set_solid: function(Solid) {
		this.set_allowCollisions(Solid ? 4369 : 0);
		return Solid;
	}
	,set_angle: function(Value) {
		return this.angle = Value;
	}
	,set_moves: function(Value) {
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		return this.immovable = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		return this.pixelPerfectRender = Value;
	}
	,set_allowCollisions: function(Value) {
		return this.allowCollisions = Value;
	}
	,set_debugBoundingBoxColorSolid: function(color) {
		return this.debugBoundingBoxColorSolid = color;
	}
	,set_debugBoundingBoxColorNotSolid: function(color) {
		return this.debugBoundingBoxColorNotSolid = color;
	}
	,set_debugBoundingBoxColorPartial: function(color) {
		return this.debugBoundingBoxColorPartial = color;
	}
	,set_path: function(path) {
		if(this.path == path) {
			return path;
		}
		if(this.path != null) {
			this.path.object = null;
		}
		if(path != null) {
			path.object = this;
		}
		return this.path = path;
	}
	,__class__: flixel_FlxObject
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_path:"set_path",set_debugBoundingBoxColorPartial:"set_debugBoundingBoxColorPartial",set_debugBoundingBoxColorNotSolid:"set_debugBoundingBoxColorNotSolid",set_debugBoundingBoxColorSolid:"set_debugBoundingBoxColorSolid",set_allowCollisions:"set_allowCollisions",set_solid:"set_solid",get_solid:"get_solid",set_immovable:"set_immovable",set_moves:"set_moves",set_angle:"set_angle",set_pixelPerfectRender:"set_pixelPerfectRender",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",set_x:"set_x"})
});
var flixel_FlxSprite = function(X,Y,SimpleGraphic) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._facingFlip = new haxe_ds_IntMap();
	this._angleChanged = true;
	this._cosAngle = 1;
	this._sinAngle = 0;
	this._facingVerticalMult = 1;
	this._facingHorizontalMult = 1;
	this.useColorTransform = false;
	this.color = 16777215;
	this.flipY = false;
	this.flipX = false;
	this.facing = 16;
	this.alpha = 1.0;
	this.bakedRotationAngle = 0;
	this.numFrames = 0;
	this.frameHeight = 0;
	this.frameWidth = 0;
	this.dirty = true;
	this.antialiasing = false;
	this.useFramePixels = true;
	flixel_FlxObject.call(this,X,Y);
	this.set_useFramePixels(flixel_FlxG.renderBlit);
	if(SimpleGraphic != null) {
		this.loadGraphic(SimpleGraphic);
	}
};
$hxClasses["flixel.FlxSprite"] = flixel_FlxSprite;
flixel_FlxSprite.__name__ = ["flixel","FlxSprite"];
flixel_FlxSprite.__super__ = flixel_FlxObject;
flixel_FlxSprite.prototype = $extend(flixel_FlxObject.prototype,{
	animation: null
	,framePixels: null
	,useFramePixels: null
	,antialiasing: null
	,dirty: null
	,frame: null
	,frameWidth: null
	,frameHeight: null
	,numFrames: null
	,frames: null
	,graphic: null
	,bakedRotationAngle: null
	,alpha: null
	,facing: null
	,flipX: null
	,flipY: null
	,origin: null
	,offset: null
	,scale: null
	,blend: null
	,color: null
	,colorTransform: null
	,useColorTransform: null
	,clipRect: null
	,shader: null
	,_frame: null
	,_frameGraphic: null
	,_facingHorizontalMult: null
	,_facingVerticalMult: null
	,_flashPoint: null
	,_flashRect: null
	,_flashRect2: null
	,_flashPointZero: null
	,_matrix: null
	,_halfSize: null
	,_sinAngle: null
	,_cosAngle: null
	,_angleChanged: null
	,_facingFlip: null
	,initVars: function() {
		flixel_FlxObject.prototype.initVars.call(this);
		this.animation = new flixel_animation_FlxAnimationController(this);
		this._flashPoint = new openfl_geom_Point();
		this._flashRect = new openfl_geom_Rectangle();
		this._flashRect2 = new openfl_geom_Rectangle();
		this._flashPointZero = new openfl_geom_Point();
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.offset = point;
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		this.origin = point1;
		var point2 = flixel_math_FlxPoint._pool.get().set(1,1);
		point2._inPool = false;
		this.scale = point2;
		var point3 = flixel_math_FlxPoint._pool.get().set(0,0);
		point3._inPool = false;
		this._halfSize = point3;
		this._matrix = new flixel_math_FlxMatrix();
		this.colorTransform = new openfl_geom_ColorTransform();
	}
	,destroy: function() {
		flixel_FlxObject.prototype.destroy.call(this);
		this.animation = flixel_util_FlxDestroyUtil.destroy(this.animation);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.put(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.put(this.scale);
		this._halfSize = flixel_util_FlxDestroyUtil.put(this._halfSize);
		this.framePixels = flixel_util_FlxDestroyUtil.dispose(this.framePixels);
		this._flashPoint = null;
		this._flashRect = null;
		this._flashRect2 = null;
		this._flashPointZero = null;
		this._matrix = null;
		this.colorTransform = null;
		this.set_blend(null);
		this.set_frames(null);
		this.set_graphic(null);
		this._frame = flixel_util_FlxDestroyUtil.destroy(this._frame);
		this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
		this.shader = null;
	}
	,clone: function() {
		return new flixel_FlxSprite().loadGraphicFromSprite(this);
	}
	,loadGraphicFromSprite: function(Sprite) {
		this.set_frames(Sprite.frames);
		this.bakedRotationAngle = Sprite.bakedRotationAngle;
		if(this.bakedRotationAngle > 0) {
			this.set_width(Sprite.get_width());
			this.set_height(Sprite.get_height());
			this.centerOffsets();
		}
		this.set_antialiasing(Sprite.antialiasing);
		this.animation.copyFrom(Sprite.animation);
		this.graphicLoaded();
		this.set_clipRect(Sprite.clipRect);
		return this;
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		var graph = flixel_FlxG.bitmap.add(Graphic,Unique,Key);
		if(graph == null) {
			return this;
		}
		if(Width == 0) {
			if(Animated) {
				Width = graph.height;
			} else {
				Width = graph.width;
			}
			if(Width > graph.width) {
				Width = graph.width;
			} else {
				Width = Width;
			}
		}
		if(Height == 0) {
			if(Animated) {
				Height = Width;
			} else {
				Height = graph.height;
			}
			if(Height > graph.height) {
				Height = graph.height;
			} else {
				Height = Height;
			}
		}
		if(Animated) {
			var point = flixel_math_FlxPoint._pool.get().set(Width,Height);
			point._inPool = false;
			this.set_frames(flixel_graphics_frames_FlxTileFrames.fromGraphic(graph,point));
		} else {
			this.set_frames(graph.get_imageFrame());
		}
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Frame == null) {
			Frame = -1;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		var brushGraphic = flixel_FlxG.bitmap.add(Graphic,false,Key);
		if(brushGraphic == null) {
			return this;
		}
		var brush = brushGraphic.bitmap;
		var key = brushGraphic.key;
		if(Frame >= 0) {
			var brushSize = brush.height;
			var framesNum = brush.width / brushSize | 0;
			if(framesNum > Frame) {
				Frame = Frame;
			} else {
				Frame %= framesNum;
			}
			key += ":" + Frame;
			var full = brush;
			brush = new openfl_display_BitmapData(brushSize,brushSize,true,0);
			this._flashRect.setTo(Frame * brushSize,0,brushSize,brushSize);
			brush.copyPixels(full,this._flashRect,this._flashPointZero);
		}
		key += ":" + Rotations + ":" + (AutoBuffer == null ? "null" : "" + AutoBuffer);
		var tempGraph = flixel_FlxG.bitmap._cache.get(key);
		if(tempGraph == null) {
			var bitmap = flixel_util_FlxBitmapDataUtil.generateRotations(brush,Rotations,AntiAliasing,AutoBuffer);
			tempGraph = flixel_graphics_FlxGraphic.fromBitmapData(bitmap,false,key);
		}
		var max = brush.height > brush.width ? brush.height : brush.width;
		if(AutoBuffer) {
			max = max * 1.5 | 0;
		} else {
			max = max;
		}
		var point = flixel_math_FlxPoint._pool.get().set(max,max);
		point._inPool = false;
		this.set_frames(flixel_graphics_frames_FlxTileFrames.fromGraphic(tempGraph,point));
		if(AutoBuffer) {
			this.set_width(brush.width);
			this.set_height(brush.height);
			this.centerOffsets();
		}
		this.bakedRotationAngle = 360 / Rotations;
		this.animation.createPrerotated();
		return this;
	}
	,loadRotatedFrame: function(Frame,Rotations,AntiAliasing,AutoBuffer) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		var key = Frame.parent.key;
		if(Frame.name != null) {
			key += ":" + Frame.name;
		} else {
			var _this = Frame.frame;
			var value = _this.x;
			var _this1 = flixel_util_LabelValuePair._pool.get();
			_this1.label = "x";
			_this1.value = value;
			var value1 = _this.y;
			var _this2 = flixel_util_LabelValuePair._pool.get();
			_this2.label = "y";
			_this2.value = value1;
			var value2 = _this.width;
			var _this3 = flixel_util_LabelValuePair._pool.get();
			_this3.label = "w";
			_this3.value = value2;
			var value3 = _this.height;
			var _this4 = flixel_util_LabelValuePair._pool.get();
			_this4.label = "h";
			_this4.value = value3;
			key += ":" + flixel_util_FlxStringUtil.getDebugString([_this1,_this2,_this3,_this4]);
		}
		var graphic = flixel_FlxG.bitmap._cache.get(key);
		if(graphic == null) {
			graphic = flixel_graphics_FlxGraphic.fromBitmapData(Frame.paint(),false,key);
		}
		return this.loadRotatedGraphic(graphic,Rotations,-1,AntiAliasing,AutoBuffer);
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Color == null) {
			Color = -1;
		}
		var graph = flixel_FlxG.bitmap.create(Width,Height,Color,Unique,Key);
		this.set_frames(graph.get_imageFrame());
		return this;
	}
	,graphicLoaded: function() {
	}
	,resetSize: function() {
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetFrameSize: function() {
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
		}
		this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
	}
	,resetSizeFromFrame: function() {
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
	}
	,resetFrame: function() {
		this.set_frame(this.frame);
	}
	,setGraphicSize: function(Width,Height) {
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Width <= 0 && Height <= 0) {
			return;
		}
		var newScaleX = Width / this.frameWidth;
		var newScaleY = Height / this.frameHeight;
		this.scale.set(newScaleX,newScaleY);
		if(Width <= 0) {
			this.scale.set_x(newScaleY);
		} else if(Height <= 0) {
			this.scale.set_y(newScaleX);
		}
	}
	,updateHitbox: function() {
		this.set_width(Math.abs(this.scale.x) * this.frameWidth);
		this.set_height(Math.abs(this.scale.y) * this.frameHeight);
		this.offset.set(-0.5 * (this.get_width() - this.frameWidth),-0.5 * (this.get_height() - this.frameHeight));
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,resetHelpers: function() {
		if(this.frame != null) {
			this.frameWidth = this.frame.sourceSize.x | 0;
			this.frameHeight = this.frame.sourceSize.y | 0;
		}
		this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
		this._flashRect.x = 0;
		this._flashRect.y = 0;
		this._flashRect.width = this.frameWidth;
		this._flashRect.height = this.frameHeight;
		this.set_width(this.frameWidth);
		this.set_height(this.frameHeight);
		this._flashRect2.x = 0;
		this._flashRect2.y = 0;
		if(this.graphic != null) {
			this._flashRect2.width = this.graphic.width;
			this._flashRect2.height = this.graphic.height;
		}
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
			this.updateFramePixels();
		}
	}
	,update: function(elapsed) {
		flixel_FlxObject.prototype.update.call(this,elapsed);
		this.updateAnimation(elapsed);
	}
	,updateAnimation: function(elapsed) {
		this.animation.update(elapsed);
	}
	,checkEmptyFrame: function() {
		if(this._frame == null) {
			this.loadGraphic("flixel/images/logo/default.png");
		}
	}
	,draw: function() {
		this.checkEmptyFrame();
		if(this.alpha == 0 || this._frame.type == 2) {
			return;
		}
		if(this.dirty) {
			this.calcFrame(this.useFramePixels);
		}
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) {
				continue;
			}
			this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
			if(this.isSimpleRender(camera)) {
				this.drawSimple(camera);
			} else {
				this.drawComplex(camera);
			}
			flixel_FlxBasic.visibleCount++;
		}
		if(flixel_FlxG["debugger"].drawDebug) {
			this.drawDebug();
		}
	}
	,drawSimple: function(camera) {
		if(this.isPixelPerfectRender(camera)) {
			var _this = this._point;
			_this.set_x(Math.floor(_this.x));
			_this.set_y(Math.floor(_this.y));
		}
		var _this1 = this._point;
		var FlashPoint = this._flashPoint;
		if(FlashPoint == null) {
			FlashPoint = new openfl_geom_Point();
		}
		FlashPoint.x = _this1.x;
		FlashPoint.y = _this1.y;
		camera.copyPixels(this._frame,this.framePixels,this._flashRect,this._flashPoint,this.colorTransform,this.blend,this.antialiasing);
	}
	,drawComplex: function(camera) {
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipY = this.flipY != this._frame.flipY;
		this._frame.prepareMatrix(this._matrix,0,this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX,this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY);
		this._matrix.translate(-this.origin.x,-this.origin.y);
		this._matrix.scale(this.scale.x,this.scale.y);
		if(this.bakedRotationAngle <= 0) {
			if(this._angleChanged) {
				var radians = this.angle * (Math.PI / 180);
				this._sinAngle = Math.sin(radians);
				this._cosAngle = Math.cos(radians);
				this._angleChanged = false;
			}
			if(this.angle != 0) {
				var _this = this._matrix;
				var cos = this._cosAngle;
				var sin = this._sinAngle;
				var a1 = _this.a * cos - _this.b * sin;
				_this.b = _this.a * sin + _this.b * cos;
				_this.a = a1;
				var c1 = _this.c * cos - _this.d * sin;
				_this.d = _this.c * sin + _this.d * cos;
				_this.c = c1;
				var tx1 = _this.tx * cos - _this.ty * sin;
				_this.ty = _this.tx * sin + _this.ty * cos;
				_this.tx = tx1;
			}
		}
		var _this1 = this._point;
		var Y = this.origin.y;
		_this1.set_x(_this1.x + this.origin.x);
		_this1.set_y(_this1.y + Y);
		this._matrix.translate(this._point.x,this._point.y);
		if(this.isPixelPerfectRender(camera)) {
			this._matrix.tx = Math.floor(this._matrix.tx);
			this._matrix.ty = Math.floor(this._matrix.ty);
		}
		camera.drawPixels(this._frame,this.framePixels,this._matrix,this.colorTransform,this.blend,this.antialiasing,this.shader);
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		Brush.drawFrame();
		if(this.graphic == null || Brush.graphic == null) {
			throw new js__$Boot_HaxeError("Cannot stamp to or from a FlxSprite with no graphics.");
		}
		var bitmapData = Brush.framePixels;
		if(this.isSimpleRenderBlit()) {
			this._flashPoint.x = X + this.frame.frame.x;
			this._flashPoint.y = Y + this.frame.frame.y;
			this._flashRect2.width = bitmapData.width;
			this._flashRect2.height = bitmapData.height;
			this.graphic.bitmap.copyPixels(bitmapData,this._flashRect2,this._flashPoint,null,null,true);
			this._flashRect2.width = this.graphic.bitmap.width;
			this._flashRect2.height = this.graphic.bitmap.height;
		} else {
			this._matrix.identity();
			this._matrix.translate(-Brush.origin.x,-Brush.origin.y);
			this._matrix.scale(Brush.scale.x,Brush.scale.y);
			if(Brush.angle != 0) {
				this._matrix.rotate(Brush.angle * (Math.PI / 180));
			}
			this._matrix.translate(X + this.frame.frame.x + Brush.origin.x,Y + this.frame.frame.y + Brush.origin.y);
			var brushBlend = Brush.blend;
			this.graphic.bitmap.draw(bitmapData,this._matrix,null,brushBlend,null,Brush.antialiasing);
		}
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
			this.calcFrame();
		}
	}
	,drawFrame: function(Force) {
		if(Force == null) {
			Force = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(Force || this.dirty) {
				this.dirty = true;
				this.calcFrame();
			}
		} else {
			this.dirty = true;
			this.calcFrame(true);
		}
	}
	,centerOffsets: function(AdjustPosition) {
		if(AdjustPosition == null) {
			AdjustPosition = false;
		}
		this.offset.set_x((this.frameWidth - this.get_width()) * 0.5);
		this.offset.set_y((this.frameHeight - this.get_height()) * 0.5);
		if(AdjustPosition) {
			var _g = this;
			_g.set_x(_g.x + this.offset.x);
			var _g1 = this;
			_g1.set_y(_g1.y + this.offset.y);
		}
	}
	,centerOrigin: function() {
		this.origin.set(this.frameWidth * 0.5,this.frameHeight * 0.5);
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) {
			FetchPositions = false;
		}
		var positions = flixel_util_FlxBitmapDataUtil.replaceColor(this.graphic.bitmap,Color,NewColor,FetchPositions);
		if(positions != null) {
			this.dirty = true;
		}
		return positions;
	}
	,setColorTransform: function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
		if(alphaOffset == null) {
			alphaOffset = 0;
		}
		if(blueOffset == null) {
			blueOffset = 0;
		}
		if(greenOffset == null) {
			greenOffset = 0;
		}
		if(redOffset == null) {
			redOffset = 0;
		}
		if(alphaMultiplier == null) {
			alphaMultiplier = 1.0;
		}
		if(blueMultiplier == null) {
			blueMultiplier = 1.0;
		}
		if(greenMultiplier == null) {
			greenMultiplier = 1.0;
		}
		if(redMultiplier == null) {
			redMultiplier = 1.0;
		}
		var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
		var Value = Math.round(redMultiplier * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(greenMultiplier * 255);
		color &= -65281;
		color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(blueMultiplier * 255);
		color &= -256;
		color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(255);
		color &= 16777215;
		color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		this.set_color(color & 16777215);
		this.set_alpha(alphaMultiplier);
		flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		flixel_util_FlxColorTransformUtil.setOffsets(this.colorTransform,redOffset,greenOffset,blueOffset,alphaOffset);
		this.useColorTransform = this.alpha != 1 || this.color != 16777215 || flixel_util_FlxColorTransformUtil.hasRGBOffsets(this.colorTransform);
		this.dirty = true;
	}
	,updateColorTransform: function() {
		if(this.colorTransform == null) {
			this.colorTransform = new openfl_geom_ColorTransform();
		}
		this.useColorTransform = this.alpha != 1 || this.color != 16777215;
		if(this.useColorTransform) {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,(this.color >> 16 & 255) / 255,(this.color >> 8 & 255) / 255,(this.color & 255) / 255,this.alpha);
		} else {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,1,1,1,1);
		}
		this.dirty = true;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) {
			Mask = 255;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.getScreenPosition(this._point,Camera);
		this._point.subtractPoint(this.offset);
		this._flashPoint.x = point.x - Camera.scroll.x - this._point.x;
		this._flashPoint.y = point.y - Camera.scroll.y - this._point.y;
		if(point._weak) {
			point.put();
		}
		if(this._flashPoint.x < 0 || this._flashPoint.x > this.frameWidth || this._flashPoint.y < 0 || this._flashPoint.y > this.frameHeight) {
			return false;
		} else {
			var frameData = this.updateFramePixels();
			var pixelColor = frameData.getPixel32(this._flashPoint.x | 0,this._flashPoint.y | 0);
			return (pixelColor >> 24 & 255) * this.alpha >= Mask;
		}
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		this.checkEmptyFrame();
		if(flixel_FlxG.renderTile && !RunOnCpp) {
			return;
		}
		this.updateFramePixels();
	}
	,updateFramePixels: function() {
		if(this._frame == null || !this.dirty) {
			return this.framePixels;
		}
		if(flixel_FlxG.renderTile && this._frameGraphic != null) {
			this.dirty = false;
			return this.framePixels;
		}
		var doFlipX = this.flipX != this._frame.flipX;
		var doFlipX1 = this.animation._curAnim != null ? doFlipX != this.animation._curAnim.flipX : doFlipX;
		var doFlipY = this.flipY != this._frame.flipY;
		var doFlipY1 = this.animation._curAnim != null ? doFlipY != this.animation._curAnim.flipY : doFlipY;
		if(!doFlipX1 && !doFlipY1 && this._frame.type == 0) {
			this.framePixels = this._frame.paint(this.framePixels,this._flashPointZero,false,true);
		} else {
			this.framePixels = this._frame.paintRotatedAndFlipped(this.framePixels,this._flashPointZero,0,doFlipX1,doFlipY1,false,true);
		}
		if(this.useColorTransform) {
			this.framePixels.colorTransform(this._flashRect,this.colorTransform);
		}
		if(flixel_FlxG.renderTile && this.useFramePixels) {
			this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
			this._frameGraphic = flixel_graphics_FlxGraphic.fromBitmapData(this.framePixels,false,null,false);
			this._frame = this._frameGraphic.get_imageFrame().get_frame().copyTo(this._frame);
		}
		this.dirty = false;
		return this.framePixels;
	}
	,getGraphicMidpoint: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x + this.frameWidth * 0.5,this.y + this.frameHeight * 0.5);
	}
	,isOnScreen: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var minX = this.x - this.offset.x - Camera.scroll.x * this.scrollFactor.x;
		var minY = this.y - this.offset.y - Camera.scroll.y * this.scrollFactor.y;
		if((this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1) {
			if(minX > Camera.width || minX + this.frameWidth < 0) {
				return false;
			}
			if(minY > Camera.height || minY + this.frameHeight < 0) {
				return false;
			}
		} else {
			var radiusX = this._halfSize.x;
			var radiusY = this._halfSize.y;
			var ox = this.origin.x;
			if(ox != radiusX) {
				var x1 = Math.abs(ox);
				var x2 = Math.abs(this.frameWidth - ox);
				radiusX = Math.max(x2,x1);
			}
			var oy = this.origin.y;
			if(oy != radiusY) {
				var y1 = Math.abs(oy);
				var y2 = Math.abs(this.frameHeight - oy);
				radiusY = Math.max(y2,y1);
			}
			radiusX *= Math.abs(this.scale.x);
			radiusY *= Math.abs(this.scale.y);
			var radius = Math.max(radiusX,radiusY);
			radius *= 1.41421356237;
			minX += ox;
			var maxX = minX + radius;
			minX -= radius;
			if(maxX < 0 || minX > Camera.width) {
				return false;
			}
			minY += oy;
			var maxY = minY + radius;
			minY -= radius;
			if(maxY < 0 || minY > Camera.height) {
				return false;
			}
		}
		return true;
	}
	,isSimpleRender: function(camera) {
		if(flixel_FlxG.renderTile) {
			return false;
		}
		return this.isSimpleRenderBlit(camera);
	}
	,isSimpleRenderBlit: function(camera) {
		var result = (this.angle == 0 || this.bakedRotationAngle > 0) && this.scale.x == 1 && this.scale.y == 1 && this.blend == null;
		if(result) {
			if(camera != null) {
				result = this.isPixelPerfectRender(camera);
			} else {
				result = this.pixelPerfectRender;
			}
		} else {
			result = false;
		}
		return result;
	}
	,setFacingFlip: function(Direction,FlipX,FlipY) {
		this._facingFlip.h[Direction] = { x : FlipX, y : FlipY};
	}
	,setFrames: function(Frames,saveAnimations) {
		if(saveAnimations == null) {
			saveAnimations = true;
		}
		if(saveAnimations) {
			var animations = this.animation._animations;
			var reverse = false;
			var index = 0;
			var frameIndex = this.animation.frameIndex;
			var currName = null;
			if(this.animation._curAnim != null) {
				reverse = this.animation._curAnim.reversed;
				index = this.animation._curAnim.curFrame;
				currName = this.animation._curAnim.name;
			}
			this.animation._animations = null;
			this.set_frames(Frames);
			this.set_frame(this.frames.frames[frameIndex]);
			this.animation._animations = animations;
			if(currName != null) {
				this.animation.play(currName,false,reverse,index);
			}
		} else {
			this.set_frames(Frames);
		}
		return this;
	}
	,get_pixels: function() {
		if(this.graphic == null) {
			return null;
		} else {
			return this.graphic.bitmap;
		}
	}
	,set_pixels: function(Pixels) {
		var key = flixel_FlxG.bitmap.findKeyForBitmap(Pixels);
		if(key == null) {
			key = flixel_FlxG.bitmap.getUniqueKey();
			this.set_graphic(flixel_FlxG.bitmap.add(Pixels,false,key));
		} else {
			this.set_graphic(flixel_FlxG.bitmap._cache.get(key));
		}
		this.set_frames(this.graphic.get_imageFrame());
		return Pixels;
	}
	,set_frame: function(Value) {
		this.frame = Value;
		if(this.frame != null) {
			if(this.frame != null) {
				this.frameWidth = this.frame.sourceSize.x | 0;
				this.frameHeight = this.frame.sourceSize.y | 0;
			}
			this._halfSize.set(0.5 * this.frameWidth,0.5 * this.frameHeight);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = this.frameWidth;
			this._flashRect.height = this.frameHeight;
			this.dirty = true;
		} else if(this.frames != null && this.frames.frames != null && this.numFrames > 0) {
			this.frame = this.frames.frames[0];
			this.dirty = true;
		} else {
			return null;
		}
		if(flixel_FlxG.renderTile) {
			this._frameGraphic = flixel_util_FlxDestroyUtil.destroy(this._frameGraphic);
		}
		if(this.clipRect != null) {
			this._frame = this.frame.clipTo(this.clipRect,this._frame);
		} else {
			this._frame = this.frame.copyTo(this._frame);
		}
		return this.frame;
	}
	,set_facing: function(Direction) {
		var flip = this._facingFlip.h[Direction];
		if(flip != null) {
			this.set_flipX(flip.x);
			this.set_flipY(flip.y);
		}
		return this.facing = Direction;
	}
	,set_alpha: function(Alpha) {
		if(this.alpha == Alpha) {
			return Alpha;
		}
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		this.alpha = lowerBound > 1 ? 1 : lowerBound;
		this.updateColorTransform();
		return this.alpha;
	}
	,set_color: function(Color) {
		if(this.color == Color) {
			return Color;
		}
		this.color = Color;
		this.updateColorTransform();
		return this.color;
	}
	,set_angle: function(Value) {
		var newAngle = this.angle != Value;
		var ret = flixel_FlxObject.prototype.set_angle.call(this,Value);
		if(newAngle) {
			this._angleChanged = true;
			this.animation.update(0);
		}
		return ret;
	}
	,updateTrig: function() {
		if(this._angleChanged) {
			var radians = this.angle * (Math.PI / 180);
			this._sinAngle = Math.sin(radians);
			this._cosAngle = Math.cos(radians);
			this._angleChanged = false;
		}
	}
	,set_blend: function(Value) {
		return this.blend = Value;
	}
	,set_graphic: function(Value) {
		var oldGraphic = this.graphic;
		if(this.graphic != Value && Value != null) {
			var _g1 = Value.get_useCount();
			Value.set_useCount(_g1 + 1);
		}
		if(oldGraphic != null && oldGraphic != Value) {
			var _g11 = oldGraphic.get_useCount();
			oldGraphic.set_useCount(_g11 - 1);
		}
		return this.graphic = Value;
	}
	,set_clipRect: function(rect) {
		if(rect != null) {
			rect.x = Math.round(rect.x);
			rect.y = Math.round(rect.y);
			rect.width = Math.round(rect.width);
			rect.height = Math.round(rect.height);
			this.clipRect = rect;
		} else {
			this.clipRect = null;
		}
		if(this.frames != null) {
			this.set_frame(this.frames.frames[this.animation.frameIndex]);
		}
		return rect;
	}
	,set_frames: function(Frames) {
		if(this.animation != null) {
			this.animation.destroyAnimations();
		}
		if(Frames != null) {
			this.set_graphic(Frames.parent);
			this.frames = Frames;
			this.set_frame(this.frames.frames[0]);
			this.numFrames = this.frames.frames.length;
			this.resetHelpers();
			this.bakedRotationAngle = 0;
			this.animation.set_frameIndex(0);
			this.graphicLoaded();
		} else {
			this.frames = null;
			this.set_frame(null);
			this.set_graphic(null);
		}
		this.set_clipRect(null);
		return Frames;
	}
	,set_flipX: function(Value) {
		if(flixel_FlxG.renderTile) {
			this._facingHorizontalMult = Value ? -1 : 1;
		}
		this.dirty = this.flipX != Value || this.dirty;
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(flixel_FlxG.renderTile) {
			this._facingVerticalMult = Value ? -1 : 1;
		}
		this.dirty = this.flipY != Value || this.dirty;
		return this.flipY = Value;
	}
	,set_antialiasing: function(value) {
		return this.antialiasing = value;
	}
	,set_useFramePixels: function(value) {
		if(flixel_FlxG.renderTile) {
			if(value != this.useFramePixels) {
				this.useFramePixels = value;
				this.set_frame(this.frame);
				if(value) {
					this.updateFramePixels();
				}
			}
			return value;
		} else {
			this.useFramePixels = true;
			return true;
		}
	}
	,checkFlipX: function() {
		var doFlipX = this.flipX != this._frame.flipX;
		if(this.animation._curAnim != null) {
			return doFlipX != this.animation._curAnim.flipX;
		}
		return doFlipX;
	}
	,checkFlipY: function() {
		var doFlipY = this.flipY != this._frame.flipY;
		if(this.animation._curAnim != null) {
			return doFlipY != this.animation._curAnim.flipY;
		}
		return doFlipY;
	}
	,__class__: flixel_FlxSprite
	,__properties__: $extend(flixel_FlxObject.prototype.__properties__,{set_clipRect:"set_clipRect",set_color:"set_color",set_blend:"set_blend",set_flipY:"set_flipY",set_flipX:"set_flipX",set_facing:"set_facing",set_alpha:"set_alpha",set_graphic:"set_graphic",set_frames:"set_frames",set_frame:"set_frame",set_pixels:"set_pixels",get_pixels:"get_pixels",set_antialiasing:"set_antialiasing",set_useFramePixels:"set_useFramePixels"})
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null ? i.fileName + ":" + i.lineNumber + ": " : "";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe__$Int64_Int64_$Impl_$ = {};
$hxClasses["haxe._Int64.Int64_Impl_"] = haxe__$Int64_Int64_$Impl_$;
haxe__$Int64_Int64_$Impl_$.__name__ = ["haxe","_Int64","Int64_Impl_"];
haxe__$Int64_Int64_$Impl_$.toString = function(this1) {
	var i = this1;
	var b = new haxe__$Int64__$_$_$Int64(0,0);
	if(i.high == b.high && i.low == b.low) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var ten = new haxe__$Int64__$_$_$Int64(0,10);
	while(true) {
		var b1 = new haxe__$Int64__$_$_$Int64(0,0);
		if(!(i.high != b1.high || i.low != b1.low)) {
			break;
		}
		var r = haxe__$Int64_Int64_$Impl_$.divMod(i,ten);
		if(r.modulus.high < 0) {
			var x = r.modulus;
			var high = ~x.high;
			var low = -x.low;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			str = new haxe__$Int64__$_$_$Int64(high,low).low + str;
			var x1 = r.quotient;
			var high1 = ~x1.high;
			var low1 = -x1.low;
			if(low1 == 0) {
				++high1;
				high1 = high1 | 0;
			}
			i = new haxe__$Int64__$_$_$Int64(high1,low1);
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe__$Int64_Int64_$Impl_$.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		var _g = divisor.low;
		switch(_g) {
		case 0:
			throw new js__$Boot_HaxeError("divide by zero");
			break;
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = -dividend.low;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high1 = ~divisor.high;
		var low1 = -divisor.low;
		if(low1 == 0) {
			++high1;
			high1 = high1 | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high1,low1);
	} else {
		divisor = divisor;
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high << 1 | divisor.low >>> 31,divisor.low << 1);
		mask = new haxe__$Int64__$_$_$Int64(mask.high << 1 | mask.low >>> 31,mask.low << 1);
		if(cmp >= 0) {
			break;
		}
	}
	while(true) {
		var b = new haxe__$Int64__$_$_$Int64(0,0);
		if(!(mask.high != b.high || mask.low != b.low)) {
			break;
		}
		var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
		if((v1 != 0 ? v1 : haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high2 = modulus.high - divisor.high | 0;
			var low2 = modulus.low - divisor.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
				--high2;
				high2 = high2 | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high2,low2);
		}
		mask = new haxe__$Int64__$_$_$Int64(mask.high >>> 1,mask.high << 31 | mask.low >>> 1);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high >>> 1,divisor.high << 31 | divisor.low >>> 1);
	}
	if(divSign) {
		var high3 = ~quotient.high;
		var low3 = -quotient.low;
		if(low3 == 0) {
			++high3;
			high3 = high3 | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high3,low3);
	}
	if(dividend.high < 0) {
		var high4 = ~modulus.high;
		var low4 = -modulus.low;
		if(low4 == 0) {
			++high4;
			high4 = high4 | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high4,low4);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int32_Int32_$Impl_$ = {};
$hxClasses["haxe._Int32.Int32_Impl_"] = haxe__$Int32_Int32_$Impl_$;
haxe__$Int32_Int32_$Impl_$.__name__ = ["haxe","_Int32","Int32_Impl_"];
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var entities_Block = function(x,y,sprites,blockColor) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	flixel_FlxSprite.call(this,x,y);
	this.set_frames(sprites);
	this.set_frame(sprites.framesHash.get(blockColor));
	this.blockColor = blockColor;
	this.set_frame(this.frames.framesHash.get(blockColor));
	this.updateHitbox();
	this.set_width(this.frameWidth);
	this.set_height(this.frameHeight);
	this.pixelPerfectPosition = false;
	this.animation.addByNames("appear",entities_Block.BLOCK_APPEAR_FRAME_NAMES,60,false);
	this.animation.addByNames("vanish",entities_Block.BLOCK_VANISH_FRAME_NAMES,15,false);
	this.set_immovable(true);
	this.set_solid(false);
};
$hxClasses["entities.Block"] = entities_Block;
entities_Block.__name__ = ["entities","Block"];
entities_Block.__super__ = flixel_FlxSprite;
entities_Block.prototype = $extend(flixel_FlxSprite.prototype,{
	blockColor: null
	,destroy: function() {
		flixel_FlxSprite.prototype.destroy.call(this);
		flixel_input_mouse_FlxMouseEventManager.remove(this);
	}
	,toString: function() {
		var letter = Std.string(this.blockColor).charAt(5).toUpperCase();
		return "" + letter + "-" + this.ID;
	}
	,__class__: entities_Block
});
var entities__$BlockColor_BlockColor_$Impl_$ = {};
$hxClasses["entities._BlockColor.BlockColor_Impl_"] = entities__$BlockColor_BlockColor_$Impl_$;
entities__$BlockColor_BlockColor_$Impl_$.__name__ = ["entities","_BlockColor","BlockColor_Impl_"];
var flixel_group_FlxTypedSpriteGroup = function(X,Y,MaxSize) {
	if(MaxSize == null) {
		MaxSize = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._skipTransformChildren = false;
	flixel_FlxSprite.call(this,X,Y);
	this.group = new flixel_group_FlxTypedGroup(MaxSize);
	this._sprites = this.group.members;
};
$hxClasses["flixel.group.FlxTypedSpriteGroup"] = flixel_group_FlxTypedSpriteGroup;
flixel_group_FlxTypedSpriteGroup.__name__ = ["flixel","group","FlxTypedSpriteGroup"];
flixel_group_FlxTypedSpriteGroup.__super__ = flixel_FlxSprite;
flixel_group_FlxTypedSpriteGroup.prototype = $extend(flixel_FlxSprite.prototype,{
	transformChildren_openfl_display_BlendMode: function(Function,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function(sprite,Value);
			}
		}
	}
	,transformChildren_Int: function(Function,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function(sprite,Value);
			}
		}
	}
	,transformChildren_Float: function(Function,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function(sprite,Value);
			}
		}
	}
	,transformChildren_Bool: function(Function,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function(sprite,Value);
			}
		}
	}
	,transformChildren_Array_flixel_FlxCamera: function(Function,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function(sprite,Value);
			}
		}
	}
	,multiTransformChildren_Float: function(FunctionArray,ValueArray) {
		if(this.group == null) {
			return;
		}
		var numProps = FunctionArray.length;
		if(numProps > ValueArray.length) {
			return;
		}
		var lambda;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists) {
				var _g3 = 0;
				while(_g3 < numProps) {
					var i = _g3++;
					lambda = FunctionArray[i];
					lambda(sprite,ValueArray[i]);
				}
			}
		}
	}
	,transformChildren_flixel_math_FlxPoint: function(Function,Value) {
		if(this.group == null) {
			return;
		}
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				Function(sprite,Value);
			}
		}
	}
	,group: null
	,members: null
	,length: null
	,_skipTransformChildren: null
	,_sprites: null
	,initVars: function() {
		this.flixelType = 4;
		this.offset = new flixel_math_FlxCallbackPoint($bind(this,this.offsetCallback));
		this.origin = new flixel_math_FlxCallbackPoint($bind(this,this.originCallback));
		this.scale = new flixel_math_FlxCallbackPoint($bind(this,this.scaleCallback));
		this.scrollFactor = new flixel_math_FlxCallbackPoint($bind(this,this.scrollFactorCallback));
		this.scale.set(1,1);
		this.scrollFactor.set(1,1);
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		this.velocity = point;
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		this.acceleration = point1;
		var point2 = flixel_math_FlxPoint._pool.get().set(0,0);
		point2._inPool = false;
		this.drag = point2;
		var point3 = flixel_math_FlxPoint._pool.get().set(10000,10000);
		point3._inPool = false;
		this.maxVelocity = point3;
	}
	,destroy: function() {
		this.offset = flixel_util_FlxDestroyUtil.destroy(this.offset);
		this.origin = flixel_util_FlxDestroyUtil.destroy(this.origin);
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		this.scrollFactor = flixel_util_FlxDestroyUtil.destroy(this.scrollFactor);
		this.group = flixel_util_FlxDestroyUtil.destroy(this.group);
		this._sprites = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,clone: function() {
		var newGroup = new flixel_group_FlxTypedSpriteGroup(this.x,this.y,this.group.maxSize);
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				newGroup.add(sprite.clone());
			}
		}
		return newGroup;
	}
	,isOnScreen: function(Camera) {
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible && sprite.isOnScreen(Camera)) {
				return true;
			}
		}
		return false;
	}
	,overlapsPoint: function(point,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) {
				if(!result) {
					result = sprite.overlapsPoint(point,InScreenSpace,Camera);
				} else {
					result = true;
				}
			}
		}
		return result;
	}
	,pixelsOverlapPoint: function(point,Mask,Camera) {
		if(Mask == null) {
			Mask = 255;
		}
		var result = false;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null && sprite.exists && sprite.visible) {
				if(!result) {
					result = sprite.pixelsOverlapPoint(point,Mask,Camera);
				} else {
					result = true;
				}
			}
		}
		return result;
	}
	,update: function(elapsed) {
		this.group.update(elapsed);
		if(this.moves) {
			this.updateMotion(elapsed);
		}
	}
	,draw: function() {
		this.group.draw();
		if(flixel_FlxG["debugger"].drawDebug) {
			this.drawDebug();
		}
	}
	,replaceColor: function(Color,NewColor,FetchPositions) {
		if(FetchPositions == null) {
			FetchPositions = false;
		}
		var positions = null;
		if(FetchPositions) {
			positions = [];
		}
		var spritePositions;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				spritePositions = sprite.replaceColor(Color,NewColor,FetchPositions);
				if(FetchPositions) {
					positions = positions.concat(spritePositions);
				}
			}
		}
		return positions;
	}
	,add: function(Sprite) {
		var sprite = Sprite;
		sprite.set_x(sprite.x + this.x);
		sprite.set_y(sprite.y + this.y);
		sprite.set_alpha(sprite.alpha * this.alpha);
		var _this = sprite.scrollFactor;
		var point = this.scrollFactor;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		sprite.set_cameras(this._cameras);
		return this.group.add(Sprite);
	}
	,recycle: function(ObjectClass,ObjectFactory,Force) {
		if(Force == null) {
			Force = false;
		}
		return this.group.recycle(ObjectClass,ObjectFactory,Force);
	}
	,remove: function(Sprite,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		var sprite = Sprite;
		sprite.set_x(sprite.x - this.x);
		sprite.set_y(sprite.y - this.y);
		sprite.set_cameras(null);
		return this.group.remove(Sprite,Splice);
	}
	,replace: function(OldObject,NewObject) {
		return this.group.replace(OldObject,NewObject);
	}
	,sort: function(Function,Order) {
		if(Order == null) {
			Order = -1;
		}
		var f = Function;
		var a1 = Order;
		var tmp = function(a2,a3) {
			return f(a1,a2,a3);
		};
		this.group.members.sort(tmp);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) {
			Force = false;
		}
		return this.group.getFirstAvailable(ObjectClass,Force);
	}
	,getFirstNull: function() {
		return this.group.getFirstNull();
	}
	,getFirstExisting: function() {
		return this.group.getFirstExisting();
	}
	,getFirstAlive: function() {
		return this.group.getFirstAlive();
	}
	,getFirstDead: function() {
		return this.group.getFirstDead();
	}
	,countLiving: function() {
		return this.group.countLiving();
	}
	,countDead: function() {
		return this.group.countDead();
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) {
			Length = 0;
		}
		if(StartIndex == null) {
			StartIndex = 0;
		}
		return this.group.getRandom(StartIndex,Length);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.group.members,filter);
	}
	,forEach: function(Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEach(Function,Recurse);
	}
	,forEachAlive: function(Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachAlive(Function,Recurse);
	}
	,forEachDead: function(Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachDead(Function,Recurse);
	}
	,forEachExists: function(Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachExists(Function,Recurse);
	}
	,forEachOfType: function(ObjectClass,Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		this.group.forEachOfType(ObjectClass,Function,Recurse);
	}
	,clear: function() {
		this.group.clear();
	}
	,kill: function() {
		flixel_FlxSprite.prototype.kill.call(this);
		this.group.kill();
	}
	,revive: function() {
		flixel_FlxSprite.prototype.revive.call(this);
		this.group.revive();
	}
	,reset: function(X,Y) {
		this.revive();
		this.setPosition(X,Y);
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			if(sprite != null) {
				sprite.reset(X,Y);
			}
		}
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var dx = X - this.x;
		var dy = Y - this.y;
		this.multiTransformChildren_Float([$bind(this,this.xTransform),$bind(this,this.yTransform)],[dx,dy]);
		this._skipTransformChildren = true;
		this.set_x(X);
		this.set_y(Y);
		this._skipTransformChildren = false;
	}
	,set_cameras: function(Value) {
		if(this.get_cameras() != Value) {
			this.transformChildren_Array_flixel_FlxCamera($bind(this,this.camerasTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_cameras.call(this,Value);
	}
	,set_exists: function(Value) {
		if(this.exists != Value) {
			this.transformChildren_Bool($bind(this,this.existsTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_exists.call(this,Value);
	}
	,set_visible: function(Value) {
		if(this.exists && this.visible != Value) {
			this.transformChildren_Bool($bind(this,this.visibleTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_visible.call(this,Value);
	}
	,set_active: function(Value) {
		if(this.exists && this.active != Value) {
			this.transformChildren_Bool($bind(this,this.activeTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_active.call(this,Value);
	}
	,set_alive: function(Value) {
		if(this.alive != Value) {
			this.transformChildren_Bool($bind(this,this.aliveTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_alive.call(this,Value);
	}
	,set_x: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.x != Value) {
			var offset = Value - this.x;
			this.transformChildren_Float($bind(this,this.xTransform),offset);
		}
		return this.x = Value;
	}
	,set_y: function(Value) {
		if(!this._skipTransformChildren && this.exists && this.y != Value) {
			var offset = Value - this.y;
			this.transformChildren_Float($bind(this,this.yTransform),offset);
		}
		return this.y = Value;
	}
	,set_angle: function(Value) {
		if(this.exists && this.angle != Value) {
			var offset = Value - this.angle;
			this.transformChildren_Float($bind(this,this.angleTransform),offset);
		}
		return this.angle = Value;
	}
	,set_alpha: function(Value) {
		var lowerBound = Value < 0 ? 0 : Value;
		if(lowerBound > 1) {
			Value = 1;
		} else {
			Value = lowerBound;
		}
		if(this.exists && this.alpha != Value) {
			var factor = this.alpha > 0 ? Value / this.alpha : 0;
			this.transformChildren_Float($bind(this,this.alphaTransform),factor);
		}
		return this.alpha = Value;
	}
	,set_facing: function(Value) {
		if(this.exists && this.facing != Value) {
			this.transformChildren_Int($bind(this,this.facingTransform),Value);
		}
		return this.facing = Value;
	}
	,set_flipX: function(Value) {
		if(this.exists && this.flipX != Value) {
			this.transformChildren_Bool($bind(this,this.flipXTransform),Value);
		}
		return this.flipX = Value;
	}
	,set_flipY: function(Value) {
		if(this.exists && this.flipY != Value) {
			this.transformChildren_Bool($bind(this,this.flipYTransform),Value);
		}
		return this.flipY = Value;
	}
	,set_moves: function(Value) {
		if(this.exists && this.moves != Value) {
			this.transformChildren_Bool($bind(this,this.movesTransform),Value);
		}
		return this.moves = Value;
	}
	,set_immovable: function(Value) {
		if(this.exists && this.immovable != Value) {
			this.transformChildren_Bool($bind(this,this.immovableTransform),Value);
		}
		return this.immovable = Value;
	}
	,set_solid: function(Value) {
		if(this.exists && (this.allowCollisions & 4369) > 0 != Value) {
			this.transformChildren_Bool($bind(this,this.solidTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_solid.call(this,Value);
	}
	,set_color: function(Value) {
		if(this.exists && this.color != Value) {
			this.transformChildren_Int($bind(this,this.gColorTransform),Value);
		}
		return this.color = Value;
	}
	,set_blend: function(Value) {
		if(this.exists && this.blend != Value) {
			this.transformChildren_openfl_display_BlendMode($bind(this,this.blendTransform),Value);
		}
		return this.blend = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		if(this.exists && this.pixelPerfectRender != Value) {
			this.transformChildren_Bool($bind(this,this.pixelPerfectTransform),Value);
		}
		return flixel_FlxSprite.prototype.set_pixelPerfectRender.call(this,Value);
	}
	,set_width: function(Value) {
		return Value;
	}
	,get_width: function() {
		if(this.group.length == 0) {
			return 0;
		}
		var minX = Infinity;
		var maxX = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			var minMemberX = member.x;
			var maxMemberX = minMemberX + member.get_width();
			if(maxMemberX > maxX) {
				maxX = maxMemberX;
			}
			if(minMemberX < minX) {
				minX = minMemberX;
			}
		}
		return maxX - minX;
	}
	,set_height: function(Value) {
		return Value;
	}
	,get_height: function() {
		if(this.group.length == 0) {
			return 0;
		}
		var minY = Infinity;
		var maxY = -Infinity;
		var _g = 0;
		var _g1 = this._sprites;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			var minMemberY = member.y;
			var maxMemberY = minMemberY + member.get_height();
			if(maxMemberY > maxY) {
				maxY = maxMemberY;
			}
			if(minMemberY < minY) {
				minY = minMemberY;
			}
		}
		return maxY - minY;
	}
	,get_length: function() {
		return this.group.length;
	}
	,get_maxSize: function() {
		return this.group.maxSize;
	}
	,set_maxSize: function(Size) {
		return this.group.set_maxSize(Size);
	}
	,get_members: function() {
		return this.group.members;
	}
	,xTransform: function(Sprite,X) {
		Sprite.set_x(Sprite.x + X);
	}
	,yTransform: function(Sprite,Y) {
		Sprite.set_y(Sprite.y + Y);
	}
	,angleTransform: function(Sprite,Angle) {
		Sprite.set_angle(Sprite.angle + Angle);
	}
	,alphaTransform: function(Sprite,Alpha) {
		Sprite.set_alpha(Sprite.alpha * Alpha);
	}
	,facingTransform: function(Sprite,Facing) {
		Sprite.set_facing(Facing);
	}
	,flipXTransform: function(Sprite,FlipX) {
		Sprite.set_flipX(FlipX);
	}
	,flipYTransform: function(Sprite,FlipY) {
		Sprite.set_flipY(FlipY);
	}
	,movesTransform: function(Sprite,Moves) {
		Sprite.set_moves(Moves);
	}
	,pixelPerfectTransform: function(Sprite,PixelPerfect) {
		Sprite.set_pixelPerfectRender(PixelPerfect);
	}
	,gColorTransform: function(Sprite,Color) {
		Sprite.set_color(Color);
	}
	,blendTransform: function(Sprite,Blend) {
		Sprite.set_blend(Blend);
	}
	,immovableTransform: function(Sprite,Immovable) {
		Sprite.set_immovable(Immovable);
	}
	,visibleTransform: function(Sprite,Visible) {
		Sprite.set_visible(Visible);
	}
	,activeTransform: function(Sprite,Active) {
		Sprite.set_active(Active);
	}
	,solidTransform: function(Sprite,Solid) {
		Sprite.set_solid(Solid);
	}
	,aliveTransform: function(Sprite,Alive) {
		Sprite.set_alive(Alive);
	}
	,existsTransform: function(Sprite,Exists) {
		Sprite.set_exists(Exists);
	}
	,camerasTransform: function(Sprite,Cameras) {
		Sprite.set_cameras(Cameras);
	}
	,offsetTransform: function(Sprite,Offset) {
		var _this = Sprite.offset;
		_this.set_x(Offset.x);
		_this.set_y(Offset.y);
		if(Offset._weak) {
			Offset.put();
		}
	}
	,originTransform: function(Sprite,Origin) {
		var _this = Sprite.origin;
		_this.set_x(Origin.x);
		_this.set_y(Origin.y);
		if(Origin._weak) {
			Origin.put();
		}
	}
	,scaleTransform: function(Sprite,Scale) {
		var _this = Sprite.scale;
		_this.set_x(Scale.x);
		_this.set_y(Scale.y);
		if(Scale._weak) {
			Scale.put();
		}
	}
	,scrollFactorTransform: function(Sprite,ScrollFactor) {
		var _this = Sprite.scrollFactor;
		_this.set_x(ScrollFactor.x);
		_this.set_y(ScrollFactor.y);
		if(ScrollFactor._weak) {
			ScrollFactor.put();
		}
	}
	,offsetCallback: function(Offset) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.offsetTransform),Offset);
	}
	,originCallback: function(Origin) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.originTransform),Origin);
	}
	,scaleCallback: function(Scale) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.scaleTransform),Scale);
	}
	,scrollFactorCallback: function(ScrollFactor) {
		this.transformChildren_flixel_math_FlxPoint($bind(this,this.scrollFactorTransform),ScrollFactor);
	}
	,loadGraphicFromSprite: function(Sprite) {
		throw new js__$Boot_HaxeError("This function is not supported in FlxSpriteGroup");
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		return this;
	}
	,loadRotatedGraphic: function(Graphic,Rotations,Frame,AntiAliasing,AutoBuffer,Key) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(AntiAliasing == null) {
			AntiAliasing = false;
		}
		if(Frame == null) {
			Frame = -1;
		}
		if(Rotations == null) {
			Rotations = 16;
		}
		throw new js__$Boot_HaxeError("This function is not supported in FlxSpriteGroup");
	}
	,makeGraphic: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Color == null) {
			Color = -1;
		}
		throw new js__$Boot_HaxeError("This function is not supported in FlxSpriteGroup");
	}
	,set_pixels: function(Value) {
		return Value;
	}
	,set_frame: function(Value) {
		return Value;
	}
	,get_pixels: function() {
		return null;
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
	}
	,resetHelpers: function() {
	}
	,stamp: function(Brush,X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
	}
	,set_frames: function(Frames) {
		return Frames;
	}
	,updateColorTransform: function() {
	}
	,__class__: flixel_group_FlxTypedSpriteGroup
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_maxSize:"set_maxSize",get_maxSize:"get_maxSize",get_length:"get_length",get_members:"get_members"})
});
var entities_BlockGrid = function(x,y,size,sprites) {
	flixel_group_FlxTypedSpriteGroup.call(this,x,y,0);
	this.OnSuccessfulClick = new flixel_util__$FlxSignal_FlxSignal1();
	this.OnBadClick = new flixel_util__$FlxSignal_FlxSignal1();
	this.OnStartMoving = new flixel_util__$FlxSignal_FlxSignal0();
	this.OnStopMoving = new flixel_util__$FlxSignal_FlxSignal0();
	this.OnNoMoreMoves = new flixel_util__$FlxSignal_FlxSignal0();
	this.OnBeforeBlocksGenerated = new flixel_util__$FlxSignal_FlxSignal0();
	this.OnBlocksGenerated = new flixel_util__$FlxSignal_FlxSignal1();
	this.OnSuccessfulClick.add(function(blocks) {
		haxe_Log.trace("OnSuccessfulClick(" + Std.string(blocks) + ")",{ fileName : "BlockGrid.hx", lineNumber : 87, className : "entities.BlockGrid", methodName : "new"});
	});
	this.OnBadClick.add(function(blocks1) {
		haxe_Log.trace("OnBadClick(" + Std.string(blocks1) + ")",{ fileName : "BlockGrid.hx", lineNumber : 88, className : "entities.BlockGrid", methodName : "new"});
	});
	this.OnStartMoving.add(function() {
		haxe_Log.trace("OnStartMoving",{ fileName : "BlockGrid.hx", lineNumber : 89, className : "entities.BlockGrid", methodName : "new"});
	});
	this.OnStopMoving.add(function() {
		haxe_Log.trace("OnStopMoving",{ fileName : "BlockGrid.hx", lineNumber : 90, className : "entities.BlockGrid", methodName : "new"});
	});
	this.OnNoMoreMoves.add(function() {
		haxe_Log.trace("OnNoMoreMoves",{ fileName : "BlockGrid.hx", lineNumber : 91, className : "entities.BlockGrid", methodName : "new"});
	});
	this.OnBeforeBlocksGenerated.add(function() {
		haxe_Log.trace("OnBeforeBlocksGenerated",{ fileName : "BlockGrid.hx", lineNumber : 92, className : "entities.BlockGrid", methodName : "new"});
	});
	this.OnBlocksGenerated.add(function(blocks2) {
		haxe_Log.trace("OnBlocksGenerated(" + Std.string(blocks2) + ")",{ fileName : "BlockGrid.hx", lineNumber : 93, className : "entities.BlockGrid", methodName : "new"});
	});
	this._frames = sprites;
	this.readyForInput = false;
	this._blockGrid = new de_polygonal_ds_Array2_$entities_$Block(size,size);
	this.gravity = 0;
	this.gridSize = size;
	this._blocksMoving = 0;
	this._blocksCreated = 0;
	this.set_immovable(true);
	this.set_numColors(4);
	this.OnStopMoving.add($bind(this,this._blocksDoneMoving));
	this.OnNoMoreMoves.add(this.OnBeforeBlocksGenerated.dispatch);
	this.OnNoMoreMoves.add($bind(this,this._noMoreMoves));
	this.OnBadClick.add($bind(this,this._shakeBlocks));
	this.OnSuccessfulClick.add($bind(this,this._handleSuccessfulClick));
	this._generateBlocks();
};
$hxClasses["entities.BlockGrid"] = entities_BlockGrid;
entities_BlockGrid.__name__ = ["entities","BlockGrid"];
entities_BlockGrid.__super__ = flixel_group_FlxTypedSpriteGroup;
entities_BlockGrid.prototype = $extend(flixel_group_FlxTypedSpriteGroup.prototype,{
	_blockGrid: null
	,_blocksMoving: null
	,_blocksCreated: null
	,_frames: null
	,gridSize: null
	,gravity: null
	,readyForInput: null
	,numColors: null
	,OnSuccessfulClick: null
	,OnBadClick: null
	,OnStartMoving: null
	,OnStopMoving: null
	,OnNoMoreMoves: null
	,OnBeforeBlocksGenerated: null
	,OnBlocksGenerated: null
	,update: function(elapsed) {
		if(!this.readyForInput && this._blocksMoving == 0) {
			this.OnStopMoving.dispatch();
		}
		flixel_group_FlxTypedSpriteGroup.prototype.update.call(this,elapsed);
	}
	,_handleSuccessfulClick: function(blocks) {
		this.readyForInput = false;
		var _g = 0;
		while(_g < blocks.length) {
			var block = [blocks[_g]];
			++_g;
			flixel_input_mouse_FlxMouseEventManager.setObjectMouseEnabled(block[0],false);
			block[0].set_alive(false);
			this._blockGrid.remove(block[0]);
			block[0].animation.finishCallback = (function(block1) {
				return function(_) {
					block1[0].animation.finishCallback = null;
					block1[0].kill();
				};
			})(block);
			block[0].animation.play("vanish");
		}
		this._startMovingBlocks();
		var tmp;
		switch(this.gravity) {
		case 0:
			tmp = 90;
			break;
		case 90:
			tmp = 180;
			break;
		case 180:
			tmp = 270;
			break;
		case 270:
			tmp = 0;
			break;
		}
		this.gravity = tmp;
	}
	,set_numColors: function(numColors) {
		this.numColors = numColors > entities__$BlockColor_BlockColor_$Impl_$.All.length ? entities__$BlockColor_BlockColor_$Impl_$.All.length : numColors <= 0 ? 1 : numColors;
		return this.numColors;
	}
	,_anyGroupsRemaining: function() {
		var _g = [];
		var _g1 = 0;
		var _g2 = this.group.members;
		while(_g1 < _g2.length) {
			var block = _g2[_g1];
			++_g1;
			if(block != null && block.alive) {
				_g.push(block);
			}
		}
		while(_g.length > 0) {
			var group = this.getBlockGroup(_g.pop());
			if(group.length >= 3) {
				return true;
			}
			var _g11 = 0;
			while(_g11 < group.length) {
				var b = group[_g11];
				++_g11;
				HxOverrides.remove(_g,b);
			}
		}
		return false;
	}
	,getBlockGroup: function(clicked) {
		var blocks = [];
		if(clicked == null || !clicked.alive || !clicked.exists) {
			return blocks;
		}
		var cell = new de_polygonal_ds_Array2Cell();
		var queue = new de_polygonal_ds_ArrayedQueue_$entities_$Block();
		if(queue.capacity == queue.mSize) {
			queue.grow();
		}
		queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = clicked;
		while(queue.mSize != 0) {
			if(true != queue.mSize > 0) {
				throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("queue is empty" + " (size > 0)",{ fileName : "ArrayedQueue.hx", lineNumber : 164, className : "de.polygonal.ds.ArrayedQueue", methodName : "dequeue"}));
			}
			var x = queue.mData[queue.mFront++];
			if(queue.mFront == queue.capacity) {
				queue.mFront = 0;
			}
			queue.mSize--;
			if(x.blockColor == clicked.blockColor) {
				if(!Lambda.has(blocks,x)) {
					blocks.push(x);
				}
				var x1 = Math.round(x.x / x.frameWidth) * x.frameWidth;
				var y = Math.round(x.y / x.frameHeight) * x.frameHeight;
				x1 -= this.x | 0;
				y -= this.y | 0;
				x1 = Math.round(x1 / x.frameWidth);
				y = Math.round(y / x.frameHeight);
				cell.x = x1;
				cell.y = y;
				var x2 = cell.x;
				var y1 = cell.y;
				var west;
				var _this = this._blockGrid;
				var x3 = x2 - 1;
				if(x3 >= 0 && x3 < _this.mW && y1 >= 0 && y1 < _this.mH) {
					var _this1 = this._blockGrid;
					var x4 = x2 - 1;
					if(true != (x4 >= 0 && x4 < _this1.mW)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + x4 + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 160, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					if(true != (y1 >= 0 && y1 < _this1.mH)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + y1 + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 161, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					west = _this1.mData[y1 * _this1.mW + x4];
				} else {
					west = null;
				}
				var east;
				var _this2 = this._blockGrid;
				var x5 = x2 + 1;
				if(x5 >= 0 && x5 < _this2.mW && y1 >= 0 && y1 < _this2.mH) {
					var _this3 = this._blockGrid;
					var x6 = x2 + 1;
					if(true != (x6 >= 0 && x6 < _this3.mW)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + x6 + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 160, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					if(true != (y1 >= 0 && y1 < _this3.mH)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + y1 + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 161, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					east = _this3.mData[y1 * _this3.mW + x6];
				} else {
					east = null;
				}
				var north;
				var _this4 = this._blockGrid;
				var y2 = y1 - 1;
				if(x2 >= 0 && x2 < _this4.mW && y2 >= 0 && y2 < _this4.mH) {
					var _this5 = this._blockGrid;
					var y3 = y1 - 1;
					if(true != (x2 >= 0 && x2 < _this5.mW)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + x2 + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 160, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					if(true != (y3 >= 0 && y3 < _this5.mH)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + y3 + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 161, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					north = _this5.mData[y3 * _this5.mW + x2];
				} else {
					north = null;
				}
				var south;
				var _this6 = this._blockGrid;
				var y4 = y1 + 1;
				if(x2 >= 0 && x2 < _this6.mW && y4 >= 0 && y4 < _this6.mH) {
					var _this7 = this._blockGrid;
					var y5 = y1 + 1;
					if(true != (x2 >= 0 && x2 < _this7.mW)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + x2 + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 160, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					if(true != (y5 >= 0 && y5 < _this7.mH)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + y5 + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 161, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					south = _this7.mData[y5 * _this7.mW + x2];
				} else {
					south = null;
				}
				if(west != null && !Lambda.has(blocks,west)) {
					if(queue.capacity == queue.mSize) {
						queue.grow();
					}
					queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = west;
				}
				if(east != null && !Lambda.has(blocks,east)) {
					if(queue.capacity == queue.mSize) {
						queue.grow();
					}
					queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = east;
				}
				if(north != null && !Lambda.has(blocks,north)) {
					if(queue.capacity == queue.mSize) {
						queue.grow();
					}
					queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = north;
				}
				if(south != null && !Lambda.has(blocks,south)) {
					if(queue.capacity == queue.mSize) {
						queue.grow();
					}
					queue.mData[(queue.mSize++ + queue.mFront) % queue.capacity] = south;
				}
			}
		}
		return blocks;
	}
	,handleBlockGroup: function(blocks) {
		if(blocks != null) {
			var _g1 = 0;
			var _g = blocks.length;
			while(_g1 < _g) {
				var i = _g1++;
				var array = this.group.members;
				var a = this.group.members.length - i - 1;
				var b = this.group.members.indexOf(blocks[i]);
				if(true != (array != null)) {
					throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("array != null",{ fileName : "ArrayTools.hx", lineNumber : 7, className : "util.ArrayTools", methodName : "swap"}));
				}
				if(true != (0 <= a && a < array.length)) {
					throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("0 <= a && a < array.length",{ fileName : "ArrayTools.hx", lineNumber : 8, className : "util.ArrayTools", methodName : "swap"}));
				}
				if(true != (0 <= b && b < array.length)) {
					throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("0 <= b && b < array.length",{ fileName : "ArrayTools.hx", lineNumber : 9, className : "util.ArrayTools", methodName : "swap"}));
				}
				if(a != b) {
					var x = array[a];
					array[a] = array[b];
					array[b] = x;
				}
			}
			if(blocks.length >= 3) {
				this.OnSuccessfulClick.dispatch(blocks);
			} else {
				this.OnBadClick.dispatch(blocks);
			}
		}
	}
	,_stopMovingBlock: function(_) {
		this._blocksMoving--;
		if(true != this._blocksMoving >= 0) {
			throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("this._blocksMoving >= 0",{ fileName : "BlockGrid.hx", lineNumber : 286, className : "entities.BlockGrid", methodName : "_stopMovingBlock"}));
		}
		if(true != this._blocksMoving <= this.group.length) {
			throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("this._blocksMoving <= this.group.length",{ fileName : "BlockGrid.hx", lineNumber : 287, className : "entities.BlockGrid", methodName : "_stopMovingBlock"}));
		}
	}
	,_startMovingBlocks: function() {
		var _g_i;
		var _g_i1;
		var _g_i2;
		var _g2_i;
		var newGrid = new de_polygonal_ds_Array2_$entities_$Block(this.gridSize,this.gridSize);
		var _g = this.gravity;
		switch(_g) {
		case 0:
			var _g1 = 0;
			var _g2 = this.gridSize;
			while(_g1 < _g2) {
				var c = _g1++;
				var bottom = this.gridSize - 1;
				_g2_i = this.gridSize - 1;
				while(_g2_i >= 0) {
					var r = _g2_i--;
					var _this = this._blockGrid;
					if(true != (c >= 0 && c < _this.mW)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + c + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 160, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					if(true != (r >= 0 && r < _this.mH)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + r + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 161, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					var block = _this.mData[r * _this.mW + c];
					if(block != null) {
						if(true != (c >= 0 && c < newGrid.mW)) {
							throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + c + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 183, className : "de.polygonal.ds.Array2", methodName : "set"}));
						}
						if(true != (bottom >= 0 && bottom < newGrid.mH)) {
							throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + bottom + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 184, className : "de.polygonal.ds.Array2", methodName : "set"}));
						}
						newGrid.mData[bottom * newGrid.mW + c] = block;
						var X = this.x + c * 16;
						var Y = this.y + bottom * 16;
						var point = flixel_math_FlxPoint._pool.get().set(X,Y);
						point._inPool = false;
						point._weak = true;
						var _this1 = block.getPosition();
						var result = Math.abs(_this1.x - point.x) <= 0.0000001 && Math.abs(_this1.y - point.y) <= 0.0000001;
						if(point._weak) {
							point.put();
						}
						if(!result) {
							flixel_tweens_FlxTween.linearMotion(block,block.x,block.y,point.x,point.y,0.5,true,{ ease : flixel_tweens_FlxEase.quadIn, type : 8, onComplete : $bind(this,this._stopMovingBlock)});
							this._blocksMoving++;
						}
						--bottom;
					}
				}
			}
			break;
		case 90:
			var _g11 = 0;
			var _g3 = this.gridSize;
			while(_g11 < _g3) {
				var r1 = _g11++;
				var left = 0;
				var _g31 = 0;
				var _g21 = this.gridSize;
				while(_g31 < _g21) {
					var c1 = _g31++;
					var _this2 = this._blockGrid;
					if(true != (c1 >= 0 && c1 < _this2.mW)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + c1 + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 160, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					if(true != (r1 >= 0 && r1 < _this2.mH)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + r1 + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 161, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					var block1 = _this2.mData[r1 * _this2.mW + c1];
					if(block1 != null) {
						if(true != (left >= 0 && left < newGrid.mW)) {
							throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + left + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 183, className : "de.polygonal.ds.Array2", methodName : "set"}));
						}
						if(true != (r1 >= 0 && r1 < newGrid.mH)) {
							throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + r1 + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 184, className : "de.polygonal.ds.Array2", methodName : "set"}));
						}
						newGrid.mData[r1 * newGrid.mW + left] = block1;
						var X1 = this.x + left * 16;
						var Y1 = this.y + r1 * 16;
						var point1 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
						point1._inPool = false;
						point1._weak = true;
						var _this3 = block1.getPosition();
						var result1 = Math.abs(_this3.x - point1.x) <= 0.0000001 && Math.abs(_this3.y - point1.y) <= 0.0000001;
						if(point1._weak) {
							point1.put();
						}
						if(!result1) {
							flixel_tweens_FlxTween.linearMotion(block1,block1.x,block1.y,point1.x,point1.y,0.5,true,{ ease : flixel_tweens_FlxEase.quadIn, type : 8, onComplete : $bind(this,this._stopMovingBlock)});
							this._blocksMoving++;
						}
						++left;
					}
				}
			}
			break;
		case 180:
			_g_i2 = this.gridSize - 1;
			while(_g_i2 >= 0) {
				var c2 = _g_i2--;
				var top = 0;
				var _g12 = 0;
				var _g4 = this.gridSize;
				while(_g12 < _g4) {
					var r2 = _g12++;
					var _this4 = this._blockGrid;
					if(true != (c2 >= 0 && c2 < _this4.mW)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + c2 + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 160, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					if(true != (r2 >= 0 && r2 < _this4.mH)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + r2 + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 161, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					var block2 = _this4.mData[r2 * _this4.mW + c2];
					if(block2 != null) {
						if(true != (c2 >= 0 && c2 < newGrid.mW)) {
							throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + c2 + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 183, className : "de.polygonal.ds.Array2", methodName : "set"}));
						}
						if(true != (top >= 0 && top < newGrid.mH)) {
							throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + top + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 184, className : "de.polygonal.ds.Array2", methodName : "set"}));
						}
						newGrid.mData[top * newGrid.mW + c2] = block2;
						var X2 = this.x + c2 * 16;
						var Y2 = this.y + top * 16;
						var point2 = flixel_math_FlxPoint._pool.get().set(X2,Y2);
						point2._inPool = false;
						point2._weak = true;
						var _this5 = block2.getPosition();
						var result2 = Math.abs(_this5.x - point2.x) <= 0.0000001 && Math.abs(_this5.y - point2.y) <= 0.0000001;
						if(point2._weak) {
							point2.put();
						}
						if(!result2) {
							flixel_tweens_FlxTween.linearMotion(block2,block2.x,block2.y,point2.x,point2.y,0.5,true,{ ease : flixel_tweens_FlxEase.quadIn, type : 8, onComplete : $bind(this,this._stopMovingBlock)});
							this._blocksMoving++;
						}
						++top;
					}
				}
			}
			break;
		case 270:
			_g_i1 = this.gridSize - 1;
			while(_g_i1 >= 0) {
				var r3 = _g_i1--;
				var right = this.gridSize - 1;
				_g_i = this.gridSize - 1;
				while(_g_i >= 0) {
					var c3 = _g_i--;
					var _this6 = this._blockGrid;
					if(true != (c3 >= 0 && c3 < _this6.mW)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + c3 + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 160, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					if(true != (r3 >= 0 && r3 < _this6.mH)) {
						throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + r3 + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 161, className : "de.polygonal.ds.Array2", methodName : "get"}));
					}
					var block3 = _this6.mData[r3 * _this6.mW + c3];
					if(block3 != null) {
						if(true != (right >= 0 && right < newGrid.mW)) {
							throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("x index out of range (" + right + ")" + " (x >= 0 && x < cols)",{ fileName : "Array2.hx", lineNumber : 183, className : "de.polygonal.ds.Array2", methodName : "set"}));
						}
						if(true != (r3 >= 0 && r3 < newGrid.mH)) {
							throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("y index out of range (" + r3 + ")" + " (y >= 0 && y < rows)",{ fileName : "Array2.hx", lineNumber : 184, className : "de.polygonal.ds.Array2", methodName : "set"}));
						}
						newGrid.mData[r3 * newGrid.mW + right] = block3;
						var X3 = this.x + right * 16;
						var Y3 = this.y + r3 * 16;
						var point3 = flixel_math_FlxPoint._pool.get().set(X3,Y3);
						point3._inPool = false;
						point3._weak = true;
						var _this7 = block3.getPosition();
						var result3 = Math.abs(_this7.x - point3.x) <= 0.0000001 && Math.abs(_this7.y - point3.y) <= 0.0000001;
						if(point3._weak) {
							point3.put();
						}
						if(!result3) {
							flixel_tweens_FlxTween.linearMotion(block3,block3.x,block3.y,point3.x,point3.y,0.5,true,{ ease : flixel_tweens_FlxEase.quadIn, type : 8, onComplete : $bind(this,this._stopMovingBlock)});
							this._blocksMoving++;
						}
						--right;
					}
				}
			}
			break;
		}
		this._blockGrid = newGrid;
		this.OnStartMoving.dispatch();
	}
	,_blocksDoneMoving: function() {
		if(!this._anyGroupsRemaining()) {
			this.OnNoMoreMoves.dispatch();
		}
		this.readyForInput = true;
	}
	,_noMoreMoves: function() {
		var _g = 0;
		var _g1 = this.group.members;
		while(_g < _g1.length) {
			var block = _g1[_g];
			++_g;
			block != null && block.exists;
		}
		this.OnBlocksGenerated.dispatch(this._generateBlocks());
	}
	,_handleClickedBlock: function(block) {
		if(this.readyForInput) {
			this.handleBlockGroup(this.getBlockGroup(block));
		}
	}
	,_createBlock: function() {
		var block = new entities_Block(0,0,this._frames,"tile-red.png");
		block.ID = this._blocksCreated++;
		flixel_input_mouse_FlxMouseEventManager.add(block,$bind(this,this._handleClickedBlock),null,null,null,false,true,false);
		haxe_Log.trace("New Block " + Std.string(block) + " created",{ fileName : "BlockGrid.hx", lineNumber : 429, className : "entities.BlockGrid", methodName : "_createBlock"});
		return block;
	}
	,_generateBlocks: function() {
		var _gthis = this;
		var created = [];
		this.readyForInput = false;
		var _this = this._blockGrid;
		var d = _this.mData;
		var _g1 = 0;
		var _g = _this.mW * _this.mH;
		while(_g1 < _g) {
			var i = _g1++;
			var blockInGrid = d[i];
			var gridX = i % _this.mW;
			var gridY = i / _this.mW | 0;
			var val;
			if(blockInGrid == null) {
				var block = _gthis.group.recycle(entities_Block,$bind(_gthis,_gthis._createBlock),false);
				created.push(block);
				var blockColor = entities__$BlockColor_BlockColor_$Impl_$.All[Std.random(_gthis.numColors)];
				block.blockColor = blockColor;
				block.set_frame(block.frames.framesHash.get(blockColor));
				block.setPosition(gridX * block.frameWidth,gridY * block.frameHeight);
				_gthis.add(block);
				val = block;
			} else {
				val = blockInGrid;
			}
			d[i] = val;
		}
		return created;
	}
	,destroy: function() {
		flixel_group_FlxTypedSpriteGroup.prototype.destroy.call(this);
		flixel_util_FlxDestroyUtil.destroyArray(this.OnBadClick.handlers);
		flixel_util_FlxDestroyUtil.destroyArray(this.OnBlocksGenerated.handlers);
		flixel_util_FlxDestroyUtil.destroyArray(this.OnStartMoving.handlers);
		flixel_util_FlxDestroyUtil.destroyArray(this.OnStopMoving.handlers);
		flixel_util_FlxDestroyUtil.destroyArray(this.OnSuccessfulClick.handlers);
		flixel_util_FlxDestroyUtil.destroyArray(this.OnBeforeBlocksGenerated.handlers);
		flixel_util_FlxDestroyUtil.destroyArray(this.OnNoMoreMoves.handlers);
		this._blockGrid = null;
		this._frames = null;
		this.OnBadClick = null;
		this.OnBlocksGenerated = null;
		this.OnStartMoving = null;
		this.OnStopMoving = null;
		this.OnSuccessfulClick = null;
		this.OnBeforeBlocksGenerated = null;
		this.OnNoMoreMoves = null;
	}
	,_shakeBlocks_onComplete: function(_) {
		this._blocksMoving--;
		this.readyForInput = true;
	}
	,_shakeBlocks_onStart: function(_) {
		this._blocksMoving++;
		this.readyForInput = false;
	}
	,_shakeBlocks: function(blocks) {
		var tweenOptions = { type : 8, onComplete : $bind(this,this._shakeBlocks_onComplete), onStart : $bind(this,this._shakeBlocks_onStart)};
		var _g = 0;
		while(_g < blocks.length) {
			var block = blocks[_g];
			++_g;
			var point = block.getPosition();
			var X = block.x + block.get_width() / 4;
			var Y = block.y;
			var point1 = flixel_math_FlxPoint._pool.get().set(X,Y);
			point1._inPool = false;
			point1._weak = true;
			var X1 = block.x - block.get_width() / 4;
			var Y1 = block.y;
			var point2 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point2._inPool = false;
			point2._weak = true;
			flixel_tweens_FlxTween.linearPath(block,[point,point1,point,point2,point],0.25,true,tweenOptions);
		}
	}
	,__class__: entities_BlockGrid
	,__properties__: $extend(flixel_group_FlxTypedSpriteGroup.prototype.__properties__,{set_numColors:"set_numColors"})
});
var entities__$GravityIndicator_GravityIndicator_$Impl_$ = {};
$hxClasses["entities._GravityIndicator.GravityIndicator_Impl_"] = entities__$GravityIndicator_GravityIndicator_$Impl_$;
entities__$GravityIndicator_GravityIndicator_$Impl_$.__name__ = ["entities","_GravityIndicator","GravityIndicator_Impl_"];
entities__$GravityIndicator_GravityIndicator_$Impl_$._new = function(x,y,sprites) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var __obj_init_tmp = new flixel_FlxSprite(x,y);
	__obj_init_tmp.set_frames(sprites);
	__obj_init_tmp.set_frame(sprites.framesHash.get("gravity-indicator-h-00.png"));
	__obj_init_tmp.animation.addByStringIndices("horizontal","gravity-indicator-h-",["00","01","02","02","02","02","01","00","00","00"],".png",4);
	__obj_init_tmp.animation.addByStringIndices("vertical","gravity-indicator-v-",["00","01","02","02","02","02","01","00","00","00"],".png",4);
	return __obj_init_tmp;
};
var flixel_addons_display_FlxNestedSprite = function(X,Y,SimpleGraphic) {
	this._parentBlue = 1;
	this._parentGreen = 1;
	this._parentRed = 1;
	this.children = [];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.relativeAcceleration = point;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	this.relativeVelocity = point1;
	var point2 = flixel_math_FlxPoint._pool.get().set(1,1);
	point2._inPool = false;
	this.relativeScale = point2;
	this.relativeAlpha = 1;
	this.relativeAngularAcceleration = 0;
	this.relativeAngularVelocity = 0;
	this.relativeAngle = 0;
	this.relativeY = 0;
	this.relativeX = 0;
	flixel_FlxSprite.call(this,X,Y,SimpleGraphic);
};
$hxClasses["flixel.addons.display.FlxNestedSprite"] = flixel_addons_display_FlxNestedSprite;
flixel_addons_display_FlxNestedSprite.__name__ = ["flixel","addons","display","FlxNestedSprite"];
flixel_addons_display_FlxNestedSprite.__super__ = flixel_FlxSprite;
flixel_addons_display_FlxNestedSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	relativeX: null
	,relativeY: null
	,relativeAngle: null
	,relativeAngularVelocity: null
	,relativeAngularAcceleration: null
	,relativeAlpha: null
	,relativeScale: null
	,relativeVelocity: null
	,relativeAcceleration: null
	,children: null
	,_parentRed: null
	,_parentGreen: null
	,_parentBlue: null
	,destroy: function() {
		flixel_FlxSprite.prototype.destroy.call(this);
		this.relativeScale = flixel_util_FlxDestroyUtil.put(this.relativeScale);
		this.relativeVelocity = flixel_util_FlxDestroyUtil.put(this.relativeVelocity);
		this.relativeAcceleration = flixel_util_FlxDestroyUtil.put(this.relativeAcceleration);
		this.children = flixel_util_FlxDestroyUtil.destroyArray(this.children);
	}
	,add: function(Child) {
		if(this.children.indexOf(Child) != -1) {
			return Child;
		}
		this.children.push(Child);
		Child.velocity.set(0,0);
		Child.acceleration.set(0,0);
		var _this = Child.scrollFactor;
		var point = this.scrollFactor;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		Child.set_alpha(Child.relativeAlpha * this.alpha);
		Child._parentRed = (this.color >> 16 & 255) / 255;
		Child._parentGreen = (this.color >> 8 & 255) / 255;
		Child._parentBlue = (this.color & 255) / 255;
		Child.set_color(Child.color);
		return Child;
	}
	,remove: function(Child) {
		var index = this.children.indexOf(Child);
		if(index >= 0) {
			this.children.splice(index,1);
		}
		return Child;
	}
	,removeAt: function(Index) {
		if(Index == null) {
			Index = 0;
		}
		if(this.children.length < Index || Index < 0) {
			return null;
		}
		return this.remove(this.children[Index]);
	}
	,removeAll: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			this.remove(child);
		}
	}
	,preUpdate: function(elapsed) {
		flixel_FlxBasic.activeCount++;
		this.last.set(this.x,this.y);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.active && child.exists) {
				child.preUpdate(elapsed);
			}
		}
	}
	,update: function(elapsed) {
		this.preUpdate(elapsed);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.active && child.exists) {
				child.update(elapsed);
			}
		}
		this.postUpdate(elapsed);
	}
	,postUpdate: function(elapsed) {
		if(this.moves) {
			this.updateMotion(elapsed);
		}
		this.wasTouching = this.touching;
		this.touching = 0;
		this.animation.update(elapsed);
		var delta;
		var velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.relativeAngularVelocity,this.relativeAngularAcceleration,this.angularDrag,this.maxAngular,elapsed) - this.relativeAngularVelocity);
		this.relativeAngularVelocity += velocityDelta;
		this.relativeAngle += this.relativeAngularVelocity * elapsed;
		this.relativeAngularVelocity += velocityDelta;
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.relativeVelocity.x,this.relativeAcceleration.x,this.drag.x,this.maxVelocity.x,elapsed) - this.relativeVelocity.x);
		var _g = this.relativeVelocity;
		_g.set_x(_g.x + velocityDelta);
		delta = this.relativeVelocity.x * elapsed;
		var _g1 = this.relativeVelocity;
		_g1.set_x(_g1.x + velocityDelta);
		this.relativeX += delta;
		velocityDelta = 0.5 * (flixel_math_FlxVelocity.computeVelocity(this.relativeVelocity.y,this.relativeAcceleration.y,this.drag.y,this.maxVelocity.y,elapsed) - this.relativeVelocity.y);
		var _g2 = this.relativeVelocity;
		_g2.set_y(_g2.y + velocityDelta);
		delta = this.relativeVelocity.y * elapsed;
		var _g3 = this.relativeVelocity;
		_g3.set_y(_g3.y + velocityDelta);
		this.relativeY += delta;
		var _g4 = 0;
		var _g11 = this.children;
		while(_g4 < _g11.length) {
			var child = _g11[_g4];
			++_g4;
			if(child.active && child.exists) {
				child.velocity.set_x(child.velocity.set_y(0));
				child.acceleration.set_x(child.acceleration.set_y(0));
				child.angularVelocity = child.angularAcceleration = 0;
				child.postUpdate(elapsed);
				if(this.isSimpleRender(this.get_camera())) {
					child.set_x(this.x + child.relativeX - this.offset.x);
					child.set_y(this.y + child.relativeY - this.offset.y);
				} else {
					var radians = this.angle * (Math.PI / 180);
					var cos = Math.cos(radians);
					var sin = Math.sin(radians);
					var dx = this.get_width() / 2 - child.get_width() / 2 - this.offset.x;
					dx += this.scale.x * cos * (child.relativeX - this.get_width() / 2 + child.get_width() / 2);
					dx -= this.scale.y * sin * (child.relativeY - this.get_height() / 2 + child.get_height() / 2);
					var dy = this.get_height() / 2 - child.get_height() / 2 - this.offset.y;
					dy += this.scale.y * cos * (child.relativeY - this.get_height() / 2 + child.get_height() / 2);
					dy += this.scale.x * sin * (child.relativeX - this.get_width() / 2 + child.get_width() / 2);
					child.set_x(this.x + dx);
					child.set_y(this.y + dy);
				}
				child.set_angle(this.angle + child.relativeAngle);
				child.scale.set_x(this.scale.x * child.relativeScale.x);
				child.scale.set_y(this.scale.y * child.relativeScale.y);
				child.velocity.set_x(this.velocity.x);
				child.velocity.set_y(this.velocity.y);
				child.acceleration.set_x(this.acceleration.x);
				child.acceleration.set_y(this.acceleration.y);
			}
		}
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.exists && child.visible) {
				child.draw();
			}
		}
	}
	,drawDebug: function() {
		flixel_FlxSprite.prototype.drawDebug.call(this);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.exists && child.visible) {
				child.drawDebug();
			}
		}
	}
	,set_alpha: function(Alpha) {
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		if(lowerBound > 1) {
			Alpha = 1;
		} else {
			Alpha = lowerBound;
		}
		if(Alpha == this.alpha) {
			return this.alpha;
		}
		this.alpha = Alpha * this.relativeAlpha;
		if(this.alpha != 1 || this.color != 16777215) {
			var red = (this.color >> 16) * this._parentRed / 255;
			var green = (this.color >> 8 & 255) * this._parentGreen / 255;
			var blue = (this.color & 255) * this._parentBlue / 255;
			if(this.colorTransform == null) {
				this.colorTransform = new openfl_geom_ColorTransform(red,green,blue,this.alpha);
			} else {
				this.colorTransform.redMultiplier = red;
				this.colorTransform.greenMultiplier = green;
				this.colorTransform.blueMultiplier = blue;
				this.colorTransform.alphaMultiplier = this.alpha;
			}
			this.useColorTransform = true;
		} else {
			if(this.colorTransform != null) {
				this.colorTransform.redMultiplier = 1;
				this.colorTransform.greenMultiplier = 1;
				this.colorTransform.blueMultiplier = 1;
				this.colorTransform.alphaMultiplier = 1;
			}
			this.useColorTransform = false;
		}
		this.dirty = true;
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.set_alpha(this.alpha);
			}
		}
		return this.alpha;
	}
	,set_color: function(Color) {
		Color = Color & 16777215;
		var combinedRed = (Color >> 16) * this._parentRed / 255;
		var combinedGreen = (Color >> 8 & 255) * this._parentGreen / 255;
		var combinedBlue = (Color & 255) * this._parentBlue / 255;
		var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
		var Value = Math.round(combinedRed * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(combinedGreen * 255);
		color &= -65281;
		color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(combinedBlue * 255);
		color &= -256;
		color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(0);
		color &= 16777215;
		color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		var combinedColor = color;
		if(this.color == combinedColor) {
			return this.color;
		}
		this.color = combinedColor;
		if(this.alpha != 1 || this.color != 16777215) {
			if(this.colorTransform == null) {
				this.colorTransform = new openfl_geom_ColorTransform(combinedRed,combinedGreen,combinedBlue,this.alpha);
			} else {
				this.colorTransform.redMultiplier = combinedRed;
				this.colorTransform.greenMultiplier = combinedGreen;
				this.colorTransform.blueMultiplier = combinedBlue;
				this.colorTransform.alphaMultiplier = this.alpha;
			}
			this.useColorTransform = true;
		} else {
			if(this.colorTransform != null) {
				this.colorTransform.redMultiplier = 1;
				this.colorTransform.greenMultiplier = 1;
				this.colorTransform.blueMultiplier = 1;
				this.colorTransform.alphaMultiplier = 1;
			}
			this.useColorTransform = false;
		}
		this.dirty = true;
		if(flixel_FlxG.renderTile) {
			var Value4 = Math.round(combinedRed * 255);
			this.color &= -16711681;
			this.color |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
			var Value5 = Math.round(combinedGreen * 255);
			this.color &= -65281;
			this.color |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
			var Value6 = Math.round(combinedBlue * 255);
			this.color &= -256;
			this.color |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			var childColor = child.color;
			var childRed = (childColor >> 16) / (255 * child._parentRed);
			var childGreen = (childColor >> 8 & 255) / (255 * child._parentGreen);
			var childBlue = (childColor & 255) / (255 * child._parentBlue);
			var color1 = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
			var Value7 = Math.round(childRed * 255);
			color1 &= -16711681;
			color1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 16;
			var Value8 = Math.round(childGreen * 255);
			color1 &= -65281;
			color1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 8;
			var Value9 = Math.round(childBlue * 255);
			color1 &= -256;
			color1 |= Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9;
			var Value10 = Math.round(0);
			color1 &= 16777215;
			color1 |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 24;
			child.set_color(color1);
			child._parentRed = combinedRed;
			child._parentGreen = combinedGreen;
			child._parentBlue = combinedBlue;
		}
		return this.color;
	}
	,set_facing: function(Direction) {
		flixel_FlxSprite.prototype.set_facing.call(this,Direction);
		if(this.children != null) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(child.exists && child.active) {
					child.set_facing(Direction);
				}
			}
		}
		return Direction;
	}
	,get_count: function() {
		return this.children.length;
	}
	,__class__: flixel_addons_display_FlxNestedSprite
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_count:"get_count"})
});
var entities_Rosie = function(x,y,sprites,tilemap) {
	flixel_addons_display_FlxNestedSprite.call(this,x,y);
	this.tilemap = tilemap;
	this.set_frames(sprites);
	this._facingFlip.set(1,{ x : true, y : false});
	this._facingFlip.set(16,{ x : false, y : false});
	this.set_facing(16);
	this.animation.addByNames("idle",entities_Rosie.IDLE_FRAMES,6,true);
	this.animation.addByNames("run",entities_Rosie.RUN_FRAMES,12,true);
	this.set_frame(sprites.framesHash.get(entities_Rosie.IDLE_FRAMES[0]));
	this.fsm = new flixel_addons_util_FlxFSM(this);
	this.fsm.transitions.add(entities__$Rosie_RosieIdleState,entities__$Rosie_RosieRunState,entities_Rosie._switchBetweenIdleAndRun).add(entities__$Rosie_RosieRunState,entities__$Rosie_RosieIdleState,entities_Rosie._switchBetweenIdleAndRun).start(entities__$Rosie_RosieIdleState);
	this.elasticity = 0.5;
	this.set_width(this.frameWidth);
	this.set_height(this.frameHeight);
	this.updateHitbox();
	var __obj_init_tmp = new entities_RosieEmote(x,y,this.frames);
	__obj_init_tmp.relativeX = 5;
	__obj_init_tmp.relativeY = -this.get_height() / 2;
	this.emote = __obj_init_tmp;
	this.add(this.emote);
};
$hxClasses["entities.Rosie"] = entities_Rosie;
entities_Rosie.__name__ = ["entities","Rosie"];
entities_Rosie._switchBetweenIdleAndRun = function(rosie) {
	var frame = rosie.animation._curAnim.curFrame;
	if(rosie.fsm.age >= 1.0 && Math.round(frame) == 4) {
		return Math.random() < 0.1;
	} else {
		return false;
	}
};
entities_Rosie.__super__ = flixel_addons_display_FlxNestedSprite;
entities_Rosie.prototype = $extend(flixel_addons_display_FlxNestedSprite.prototype,{
	fsm: null
	,tilemap: null
	,emote: null
	,update: function(elapsed) {
		this.fsm.update(elapsed);
		flixel_addons_display_FlxNestedSprite.prototype.update.call(this,elapsed);
	}
	,destroy: function() {
		this.fsm.destroy();
		this.fsm = null;
		this.removeAll();
		this.emote.destroy();
		this.emote = null;
		flixel_addons_display_FlxNestedSprite.prototype.destroy.call(this);
	}
	,__class__: entities_Rosie
});
var flixel_addons_util_FlxFSMState = function() {
};
$hxClasses["flixel.addons.util.FlxFSMState"] = flixel_addons_util_FlxFSMState;
flixel_addons_util_FlxFSMState.__name__ = ["flixel","addons","util","FlxFSMState"];
flixel_addons_util_FlxFSMState.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_util_FlxFSMState.prototype = {
	enter: function(owner,fsm) {
	}
	,update: function(elapsed,owner,fsm) {
	}
	,exit: function(owner) {
	}
	,destroy: function() {
	}
	,__class__: flixel_addons_util_FlxFSMState
};
var entities__$Rosie_RosieIdleState = function() {
	flixel_addons_util_FlxFSMState.call(this);
};
$hxClasses["entities._Rosie.RosieIdleState"] = entities__$Rosie_RosieIdleState;
entities__$Rosie_RosieIdleState.__name__ = ["entities","_Rosie","RosieIdleState"];
entities__$Rosie_RosieIdleState.__super__ = flixel_addons_util_FlxFSMState;
entities__$Rosie_RosieIdleState.prototype = $extend(flixel_addons_util_FlxFSMState.prototype,{
	enter: function(owner,fsm) {
		owner.animation.play("idle");
		owner.velocity.set_x(0);
	}
	,update: function(elapsed,owner,fsm) {
	}
	,__class__: entities__$Rosie_RosieIdleState
});
var entities__$Rosie_RosieRunState = function() {
	flixel_addons_util_FlxFSMState.call(this);
};
$hxClasses["entities._Rosie.RosieRunState"] = entities__$Rosie_RosieRunState;
entities__$Rosie_RosieRunState.__name__ = ["entities","_Rosie","RosieRunState"];
entities__$Rosie_RosieRunState.__super__ = flixel_addons_util_FlxFSMState;
entities__$Rosie_RosieRunState.prototype = $extend(flixel_addons_util_FlxFSMState.prototype,{
	enter: function(owner,fsm) {
		owner.animation.play("run");
		owner.velocity.set_x(((owner.facing & 16) != 0 ? 1 : -1) * 32.0);
	}
	,update: function(elapsed,owner,fsm) {
		if(owner.x <= 0 || flixel_FlxObject.separateX(owner,owner.tilemap)) {
			owner.velocity.set_x((owner.touching & 16) != 0 ? -32. : 32.0);
			owner.set_facing(owner.velocity.x > 0 ? 16 : 1);
		}
	}
	,__class__: entities__$Rosie_RosieRunState
});
var entities__$Rosie_RosieJumpState = function() {
	flixel_addons_util_FlxFSMState.call(this);
};
$hxClasses["entities._Rosie.RosieJumpState"] = entities__$Rosie_RosieJumpState;
entities__$Rosie_RosieJumpState.__name__ = ["entities","_Rosie","RosieJumpState"];
entities__$Rosie_RosieJumpState.__super__ = flixel_addons_util_FlxFSMState;
entities__$Rosie_RosieJumpState.prototype = $extend(flixel_addons_util_FlxFSMState.prototype,{
	enter: function(owner,fsm) {
	}
	,update: function(elapsed,owner,fsm) {
	}
	,__class__: entities__$Rosie_RosieJumpState
});
var entities_RosieEmote = function(x,y,sprites) {
	var _gthis = this;
	flixel_addons_display_FlxNestedSprite.call(this,x,y);
	this.set_frames(sprites);
	this.set_frame(sprites.framesHash.get("emotes/happy-00.png"));
	this.set_pixelPerfectRender(true);
	this.pixelPerfectPosition = false;
	this.set_width(this.frameWidth);
	this.set_height(this.frameHeight);
	this.updateHitbox();
	var tmp = this.animation;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 4) {
		++_g1;
		_g.push("emotes/happy-00.png");
	}
	tmp.addByNames("happy",_g,1,false);
	var tmp1 = this.animation;
	var _g11 = [];
	var _g2 = 0;
	while(_g2 < 4) {
		++_g2;
		_g11.push("emotes/neutral-00.png");
	}
	tmp1.addByNames("neutral",_g11,1,false);
	var tmp2 = this.animation;
	var _g21 = [];
	var _g3 = 0;
	while(_g3 < 4) {
		++_g3;
		_g21.push("emotes/worried-00.png");
	}
	tmp2.addByNames("worried",_g21,1,false);
	var tmp3 = this.animation;
	var _g31 = [];
	var _g4 = 0;
	while(_g4 < 4) {
		++_g4;
		_g31.push("emotes/huh.png");
	}
	tmp3.addByNames("huh",_g31,1,false);
	var tmp4 = this.animation;
	var _g41 = [];
	var _g5 = 0;
	while(_g5 < 4) {
		++_g5;
		_g41.push("emotes/sad-00.png");
	}
	tmp4.addByNames("sad",_g41,1,false);
	this.animation.addByStringIndices("bored","emotes/bored-",["00","01","00","01","00","00"],".png",1,false);
	this.animation.addByStringIndices("confused","emotes/confused-",["00","01","00","01","00","00"],".png",1,false);
	this.animation.addByStringIndices("doh","emotes/doh-",["00","01","00","01","00","01","00","01","00","00","00","00"],".png",1,false);
	this.animation.addByStringIndices("angry","emotes/angry-",["00","01","00","01","00","00"],".png",1,false);
	this.animation.addByStringIndices("very-happy","emotes/very-happy-",["00","01","00","01","00","01","00","01","00","00","00","00"],".png",2,false);
	this.animation.finishCallback = function(_) {
		var s = "none";
		if(_gthis.state != s) {
			_gthis.animation.stop();
		}
		_gthis.state = s;
		_gthis.set_visible(_gthis.state != "none");
	};
	var s1 = "none";
	if(this.state != s1) {
		this.animation.stop();
	}
	this.state = s1;
	this.set_visible(this.state != "none");
	this.set_solid(false);
	this.set_immovable(true);
};
$hxClasses["entities.RosieEmote"] = entities_RosieEmote;
entities_RosieEmote.__name__ = ["entities","RosieEmote"];
entities_RosieEmote.__super__ = flixel_addons_display_FlxNestedSprite;
entities_RosieEmote.prototype = $extend(flixel_addons_display_FlxNestedSprite.prototype,{
	state: null
	,__class__: entities_RosieEmote
});
var flixel_IFlxBasic = function() { };
$hxClasses["flixel.IFlxBasic"] = flixel_IFlxBasic;
flixel_IFlxBasic.__name__ = ["flixel","IFlxBasic"];
flixel_IFlxBasic.prototype = {
	set_active: null
	,set_visible: null
	,set_alive: null
	,set_exists: null
	,ID: null
	,active: null
	,visible: null
	,alive: null
	,exists: null
	,draw: null
	,update: null
	,destroy: null
	,kill: null
	,revive: null
	,toString: null
	,__class__: flixel_IFlxBasic
	,__properties__: {set_exists:"set_exists",set_alive:"set_alive",set_visible:"set_visible",set_active:"set_active"}
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = ["openfl","VectorData"];
openfl_VectorData.prototype = {
	data: null
	,fixed: null
	,length: null
	,__class__: openfl_VectorData
};
var flixel_util_FlxPool_$flixel_$math_$FlxPoint = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_math_FlxPoint"] = flixel_util_FlxPool_$flixel_$math_$FlxPoint;
flixel_util_FlxPool_$flixel_$math_$FlxPoint.__name__ = ["flixel","util","FlxPool_flixel_math_FlxPoint"];
flixel_util_FlxPool_$flixel_$math_$FlxPoint.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$math_$FlxPoint.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$math_$FlxPoint
	,__properties__: {get_length:"get_length"}
};
var flixel_math_FlxPoint = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._inPool = false;
	this._weak = false;
	this.y = 0;
	this.x = 0;
	this.set(X,Y);
};
$hxClasses["flixel.math.FlxPoint"] = flixel_math_FlxPoint;
flixel_math_FlxPoint.__name__ = ["flixel","math","FlxPoint"];
flixel_math_FlxPoint.__interfaces__ = [flixel_util_IFlxPooled];
flixel_math_FlxPoint.__properties__ = {get_pool:"get_pool"}
flixel_math_FlxPoint.get = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_math_FlxPoint.weak = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	point._weak = true;
	return point;
};
flixel_math_FlxPoint.get_pool = function() {
	return flixel_math_FlxPoint._pool;
};
flixel_math_FlxPoint.prototype = {
	x: null
	,y: null
	,_weak: null
	,_inPool: null
	,put: function() {
		if(!this._inPool) {
			this._inPool = true;
			this._weak = false;
			flixel_math_FlxPoint._pool.putUnsafe(this);
		}
	}
	,putWeak: function() {
		if(this._weak) {
			this.put();
		}
	}
	,set: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
		return this;
	}
	,add: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = this;
		_g.set_x(_g.x + X);
		var _g1 = this;
		_g1.set_y(_g1.y + Y);
		return this;
	}
	,addPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x + point.x);
		var _g1 = this;
		_g1.set_y(_g1.y + point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,subtract: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		var _g = this;
		_g.set_x(_g.x - X);
		var _g1 = this;
		_g1.set_y(_g1.y - Y);
		return this;
	}
	,subtractPoint: function(point) {
		var _g = this;
		_g.set_x(_g.x - point.x);
		var _g1 = this;
		_g1.set_y(_g1.y - point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,scale: function(k) {
		var _g = this;
		_g.set_x(_g.x * k);
		var _g1 = this;
		_g1.set_y(_g1.y * k);
		return this;
	}
	,copyFrom: function(point) {
		this.set_x(point.x);
		this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		return this;
	}
	,copyTo: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		point.set_x(this.x);
		point.set_y(this.y);
		return point;
	}
	,copyFromFlash: function(FlashPoint) {
		this.set_x(FlashPoint.x);
		this.set_y(FlashPoint.y);
		return this;
	}
	,copyToFlash: function(FlashPoint) {
		if(FlashPoint == null) {
			FlashPoint = new openfl_geom_Point();
		}
		FlashPoint.x = this.x;
		FlashPoint.y = this.y;
		return FlashPoint;
	}
	,addToFlash: function(FlashPoint) {
		FlashPoint.x += this.x;
		FlashPoint.y += this.y;
		return FlashPoint;
	}
	,subtractFromFlash: function(FlashPoint) {
		FlashPoint.x -= this.x;
		FlashPoint.y -= this.y;
		return FlashPoint;
	}
	,inCoords: function(RectX,RectY,RectWidth,RectHeight) {
		return flixel_math_FlxMath.pointInCoordinates(this.x,this.y,RectX,RectY,RectWidth,RectHeight);
	}
	,inRect: function(Rect) {
		return flixel_math_FlxMath.pointInFlxRect(this.x,this.y,Rect);
	}
	,distanceTo: function(point) {
		var dx = this.x - point.x;
		var dy = this.y - point.y;
		if(point._weak) {
			point.put();
		}
		return Math.sqrt(dx * dx + dy * dy);
	}
	,floor: function() {
		this.set_x(Math.floor(this.x));
		this.set_y(Math.floor(this.y));
		return this;
	}
	,ceil: function() {
		this.set_x(Math.ceil(this.x));
		this.set_y(Math.ceil(this.y));
		return this;
	}
	,round: function() {
		this.set_x(Math.round(this.x));
		this.set_y(Math.round(this.y));
		return this;
	}
	,rotate: function(Pivot,Angle) {
		var radians = Angle * (Math.PI / 180);
		var n = radians;
		n = radians * 0.3183098862;
		if(n > 1) {
			n -= Math.ceil(n) >> 1 << 1;
		} else if(n < -1) {
			n += Math.ceil(-n) >> 1 << 1;
		}
		var sin = n > 0 ? n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6))) : n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
		var n1 = radians + 1.570796327;
		n1 *= 0.3183098862;
		if(n1 > 1) {
			n1 -= Math.ceil(n1) >> 1 << 1;
		} else if(n1 < -1) {
			n1 += Math.ceil(-n1) >> 1 << 1;
		}
		var cos = n1 > 0 ? n1 * (3.1 + n1 * (0.5 + n1 * (-7.2 + n1 * 3.6))) : n1 * (3.1 - n1 * (0.5 + n1 * (7.2 + n1 * 3.6)));
		var dx = this.x - Pivot.x;
		var dy = this.y - Pivot.y;
		this.set_x(cos * dx - sin * dy + Pivot.x);
		this.set_y(sin * dx + cos * dy + Pivot.y);
		if(Pivot._weak) {
			Pivot.put();
		}
		return this;
	}
	,angleBetween: function(point) {
		var x = point.x - this.x;
		var y = point.y - this.y;
		var angle = 0;
		if(x != 0 || y != 0) {
			var c1 = Math.PI * 0.25;
			var c2 = 3 * c1;
			var ay = y < 0 ? -y : y;
			if(x >= 0) {
				angle = c1 - c1 * ((x - ay) / (x + ay));
			} else {
				angle = c2 - c1 * ((x + ay) / (ay - x));
			}
			angle = (y < 0 ? -angle : angle) * (180 / Math.PI);
			if(angle > 90) {
				angle -= 270;
			} else {
				angle += 90;
			}
		}
		if(point._weak) {
			point.put();
		}
		return angle;
	}
	,equals: function(point) {
		var result = Math.abs(this.x - point.x) <= 0.0000001 && Math.abs(this.y - point.y) <= 0.0000001;
		if(point._weak) {
			point.put();
		}
		return result;
	}
	,destroy: function() {
	}
	,transform: function(matrix) {
		var x1 = this.x * matrix.a + this.y * matrix.c + matrix.tx;
		var y1 = this.x * matrix.b + this.y * matrix.d + matrix.ty;
		return this.set(x1,y1);
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value1 = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value1;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,set_x: function(Value) {
		return this.x = Value;
	}
	,set_y: function(Value) {
		return this.y = Value;
	}
	,__class__: flixel_math_FlxPoint
	,__properties__: {set_y:"set_y",set_x:"set_x"}
};
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,loader: null
	,parameters: null
	,uncaughtErrorEvents: null
	,url: null
	,__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,__toLimeVector2: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,__class__: openfl_geom_Point
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__toLimeColorMatrix: function() {
		var array = [this.redMultiplier,0,0,0,this.redOffset / 255,0,this.greenMultiplier,0,0,this.greenOffset / 255,0,0,this.blueMultiplier,0,this.blueOffset / 255,0,0,0,this.alphaMultiplier,this.alphaOffset / 255];
		var this1;
		if(array != null) {
			this1 = new Float32Array(array);
		} else {
			this1 = null;
		}
		return this1;
	}
	,__class__: openfl_geom_ColorTransform
};
var flixel_FlxCamera = function(X,Y,Width,Height,Zoom) {
	if(Zoom == null) {
		Zoom = 0;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._helperMatrix = new flixel_math_FlxMatrix();
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this._bounds = _this;
	this._scrollRect = new openfl_display_Sprite();
	this.initialZoom = 1;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._point = point;
	this._fxShakeAxes = flixel_util_FlxAxes.XY;
	this._fxShakeDuration = 0;
	this._fxShakeIntensity = 0;
	this._fxFadeAlpha = 0;
	this._fxFadeCompleted = true;
	this._fxFadeComplete = null;
	this._fxFadeIn = false;
	this._fxFadeDuration = 0;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	this._scrollTarget = point1;
	this._fxFadeColor = 0;
	this._fxFlashAlpha = 0;
	this._fxFlashComplete = null;
	this._fxFlashDuration = 0;
	this._fxFlashColor = 0;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,0);
	point2._inPool = false;
	this._flashOffset = point2;
	this._flashPoint = new openfl_geom_Point();
	this.filtersEnabled = true;
	var point3 = flixel_math_FlxPoint._pool.get().set(0,0);
	point3._inPool = false;
	this.followLead = point3;
	this.antialiasing = false;
	this.color = -1;
	this.angle = 0;
	this.alpha = 1;
	this.height = 0;
	this.width = 0;
	this.flashSprite = new openfl_display_Sprite();
	this.useBgAlphaBlending = false;
	this.regen = false;
	var point4 = flixel_math_FlxPoint._pool.get().set(0,0);
	point4._inPool = false;
	this.scroll = point4;
	this.followLerp = 60 / flixel_FlxG.updateFramerate;
	var point5 = flixel_math_FlxPoint._pool.get().set(0,0);
	point5._inPool = false;
	this.targetOffset = point5;
	this.y = 0;
	this.x = 0;
	flixel_FlxBasic.call(this);
	this.set_x(X);
	this.set_y(Y);
	this.set_width(Width <= 0 ? flixel_FlxG.width : Width);
	this.set_height(Height <= 0 ? flixel_FlxG.height : Height);
	this._flashRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
	this.flashSprite.addChild(this._scrollRect);
	this._scrollRect.set_scrollRect(new openfl_geom_Rectangle());
	this.pixelPerfectRender = flixel_FlxG.renderBlit;
	if(flixel_FlxG.renderBlit) {
		this.screen = new flixel_FlxSprite();
		this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
		this.screen.set_pixels(this.buffer);
		this.screen.origin.set();
		this._flashBitmap = new openfl_display_Bitmap(this.buffer);
		this._scrollRect.addChild(this._flashBitmap);
		this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
	} else {
		this.canvas = new openfl_display_Sprite();
		this._scrollRect.addChild(this.canvas);
		this._transform = new openfl_geom_Matrix();
		this.debugLayer = new openfl_display_Sprite();
		this._scrollRect.addChild(this.debugLayer);
	}
	this.set_color(-1);
	this.set_zoom(Zoom);
	this.initialZoom = this.zoom;
	this.updateScrollRect();
	this.updateFlashOffset();
	this.updateFlashSpritePosition();
	this.updateInternalSpritePositions();
	this.bgColor = flixel_FlxG.cameras.get_bgColor();
};
$hxClasses["flixel.FlxCamera"] = flixel_FlxCamera;
flixel_FlxCamera.__name__ = ["flixel","FlxCamera"];
flixel_FlxCamera.defaultZoom = null;
flixel_FlxCamera.defaultCameras = null;
flixel_FlxCamera._storageTilesHead = null;
flixel_FlxCamera._storageTrianglesHead = null;
flixel_FlxCamera.__super__ = flixel_FlxBasic;
flixel_FlxCamera.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,totalScaleX: null
	,totalScaleY: null
	,style: null
	,target: null
	,targetOffset: null
	,followLerp: null
	,deadzone: null
	,minScrollX: null
	,maxScrollX: null
	,minScrollY: null
	,maxScrollY: null
	,scroll: null
	,buffer: null
	,regen: null
	,bgColor: null
	,screen: null
	,useBgAlphaBlending: null
	,flashSprite: null
	,pixelPerfectRender: null
	,width: null
	,height: null
	,zoom: null
	,alpha: null
	,angle: null
	,color: null
	,antialiasing: null
	,followLead: null
	,filtersEnabled: null
	,_flashRect: null
	,_flashPoint: null
	,_flashOffset: null
	,_fxFlashColor: null
	,_fxFlashDuration: null
	,_fxFlashComplete: null
	,_fxFlashAlpha: null
	,_fxFadeColor: null
	,_lastTargetPosition: null
	,_scrollTarget: null
	,_fxFadeDuration: null
	,_fxFadeIn: null
	,_fxFadeComplete: null
	,_fxFadeCompleted: null
	,_fxFadeAlpha: null
	,_fxShakeIntensity: null
	,_fxShakeDuration: null
	,_fxShakeComplete: null
	,_fxShakeAxes: null
	,_point: null
	,_filters: null
	,initialZoom: null
	,_fill: null
	,_flashBitmap: null
	,_scrollRect: null
	,_bounds: null
	,canvas: null
	,debugLayer: null
	,_transform: null
	,_helperMatrix: null
	,_currentDrawItem: null
	,_headOfDrawStack: null
	,_headTiles: null
	,_headTriangles: null
	,startQuadBatch: function(graphic,colored,hasColorOffsets,blend,smooth,shader) {
		if(smooth == null) {
			smooth = false;
		}
		if(hasColorOffsets == null) {
			hasColorOffsets = false;
		}
		var itemToReturn = null;
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(this._currentDrawItem != null && this._currentDrawItem.type == flixel_graphics_tile_FlxDrawItemType.TILES && this._headTiles.graphics == graphic && this._headTiles.colored == colored && this._headTiles.hasColorOffsets == hasColorOffsets && this._headTiles.blending == blendInt && this._headTiles.antialiasing == smooth && this._headTiles.shader == shader) {
			return this._headTiles;
		}
		if(flixel_FlxCamera._storageTilesHead != null) {
			itemToReturn = flixel_FlxCamera._storageTilesHead;
			var newHead = flixel_FlxCamera._storageTilesHead.nextTyped;
			itemToReturn.reset();
			flixel_FlxCamera._storageTilesHead = newHead;
		} else {
			itemToReturn = new flixel_graphics_tile_FlxDrawTilesItem();
		}
		itemToReturn.graphics = graphic;
		itemToReturn.antialiasing = smooth;
		itemToReturn.colored = colored;
		itemToReturn.hasColorOffsets = hasColorOffsets;
		itemToReturn.blending = blendInt;
		itemToReturn.shader = shader;
		itemToReturn.nextTyped = this._headTiles;
		this._headTiles = itemToReturn;
		if(this._headOfDrawStack == null) {
			this._headOfDrawStack = itemToReturn;
		}
		if(this._currentDrawItem != null) {
			this._currentDrawItem.next = itemToReturn;
		}
		this._currentDrawItem = itemToReturn;
		return itemToReturn;
	}
	,startTrianglesBatch: function(graphic,smoothing,isColored,blend) {
		if(isColored == null) {
			isColored = false;
		}
		if(smoothing == null) {
			smoothing = false;
		}
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(this._currentDrawItem != null && this._currentDrawItem.type == flixel_graphics_tile_FlxDrawItemType.TRIANGLES && this._headTriangles.graphics == graphic && this._headTriangles.antialiasing == smoothing && this._headTriangles.colored == isColored && this._headTriangles.blending == blendInt) {
			return this._headTriangles;
		}
		return this.getNewDrawTrianglesItem(graphic,smoothing,isColored,blend);
	}
	,getNewDrawTrianglesItem: function(graphic,smoothing,isColored,blend) {
		if(isColored == null) {
			isColored = false;
		}
		if(smoothing == null) {
			smoothing = false;
		}
		var itemToReturn = null;
		var blendInt = flixel_graphics_tile_FlxDrawBaseItem.blendToInt(blend);
		if(flixel_FlxCamera._storageTrianglesHead != null) {
			itemToReturn = flixel_FlxCamera._storageTrianglesHead;
			var newHead = flixel_FlxCamera._storageTrianglesHead.nextTyped;
			itemToReturn.reset();
			flixel_FlxCamera._storageTrianglesHead = newHead;
		} else {
			itemToReturn = new flixel_graphics_tile_FlxDrawTrianglesItem();
		}
		itemToReturn.graphics = graphic;
		itemToReturn.antialiasing = smoothing;
		itemToReturn.colored = isColored;
		itemToReturn.blending = blendInt;
		itemToReturn.nextTyped = this._headTriangles;
		this._headTriangles = itemToReturn;
		if(this._headOfDrawStack == null) {
			this._headOfDrawStack = itemToReturn;
		}
		if(this._currentDrawItem != null) {
			this._currentDrawItem.next = itemToReturn;
		}
		this._currentDrawItem = itemToReturn;
		return itemToReturn;
	}
	,clearDrawStack: function() {
		var currTiles = this._headTiles;
		var newTilesHead;
		while(currTiles != null) {
			newTilesHead = currTiles.nextTyped;
			currTiles.reset();
			currTiles.nextTyped = flixel_FlxCamera._storageTilesHead;
			flixel_FlxCamera._storageTilesHead = currTiles;
			currTiles = newTilesHead;
		}
		var currTriangles = this._headTriangles;
		var newTrianglesHead;
		while(currTriangles != null) {
			newTrianglesHead = currTriangles.nextTyped;
			currTriangles.reset();
			currTriangles.nextTyped = flixel_FlxCamera._storageTrianglesHead;
			flixel_FlxCamera._storageTrianglesHead = currTriangles;
			currTriangles = newTrianglesHead;
		}
		this._currentDrawItem = null;
		this._headOfDrawStack = null;
		this._headTiles = null;
		this._headTriangles = null;
	}
	,render: function() {
		var currItem = this._headOfDrawStack;
		while(currItem != null) {
			currItem.render(this);
			currItem = currItem.next;
		}
	}
	,drawPixels: function(frame,pixels,matrix,transform,blend,smoothing,shader) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(flixel_FlxG.renderBlit) {
			this.buffer.draw(pixels,matrix,null,blend,null,smoothing || this.antialiasing);
		} else {
			var isColored = transform != null && flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform);
			var hasColorOffsets = transform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(transform);
			var drawItem = this.startQuadBatch(frame.parent,isColored,hasColorOffsets,blend,smoothing,shader);
			drawItem.addQuad(frame,matrix,transform);
		}
	}
	,copyPixels: function(frame,pixels,sourceRect,destPoint,transform,blend,smoothing,shader) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(pixels != null) {
				this.buffer.copyPixels(pixels,sourceRect,destPoint,null,null,true);
			} else if(frame != null) {
				frame.paint(this.buffer,destPoint,true);
			}
		} else {
			this._helperMatrix.identity();
			this._helperMatrix.translate(destPoint.x + frame.offset.x,destPoint.y + frame.offset.y);
			var isColored = transform != null && flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform);
			var hasColorOffsets = transform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(transform);
			var drawItem = this.startQuadBatch(frame.parent,isColored,hasColorOffsets,blend,smoothing,shader);
			drawItem.addQuad(frame,this._helperMatrix,transform);
		}
	}
	,drawTriangles: function(graphic,vertices,indices,uvtData,colors,position,blend,repeat,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(repeat == null) {
			repeat = false;
		}
		if(flixel_FlxG.renderBlit) {
			if(position == null) {
				position = flixel_FlxCamera.renderPoint.set();
			}
			var _this = this._bounds;
			_this.x = 0;
			_this.y = 0;
			_this.width = this.width;
			_this.height = this.height;
			var verticesLength = vertices.length;
			var currentVertexPosition = 0;
			var tempX;
			var tempY;
			var i = 0;
			var _this1 = flixel_FlxCamera.renderRect;
			_this1.x = 0;
			_this1.y = 0;
			_this1.width = 0;
			_this1.height = 0;
			var bounds = _this1;
			var this1 = flixel_FlxCamera.drawVertices;
			var pos = 0;
			var len = flixel_FlxCamera.drawVertices.length;
			if(pos < 0) {
				pos += this1.length;
			}
			if(pos + len > this1.length) {
				len = this1.length - pos;
			}
			if(len < 0) {
				len = 0;
			}
			var vectorData = new openfl_VectorData();
			vectorData.length = len;
			vectorData.fixed = false;
			var this2 = new Array(len);
			vectorData.data = this2;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,len);
			if(len > 0) {
				this1.length -= len;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
			}
			while(i < verticesLength) {
				tempX = position.x + vertices[i];
				tempY = position.y + vertices[i + 1];
				var this3 = flixel_FlxCamera.drawVertices;
				var key = currentVertexPosition++;
				if(!this3.fixed) {
					if(key >= this3.length) {
						this3.length = key + 1;
					}
					if(this3.data.length < this3.length) {
						var length = this3.data.length + 10;
						var this4 = new Array(length);
						var data = this4;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
						this3.data = data;
					}
				}
				this3.data[key] = tempX;
				var this5 = flixel_FlxCamera.drawVertices;
				var key1 = currentVertexPosition++;
				if(!this5.fixed) {
					if(key1 >= this5.length) {
						this5.length = key1 + 1;
					}
					if(this5.data.length < this5.length) {
						var length1 = this5.data.length + 10;
						var this6 = new Array(length1);
						var data1 = this6;
						haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data1,0,this5.data.length);
						this5.data = data1;
					}
				}
				this5.data[key1] = tempY;
				if(i == 0) {
					bounds.x = tempX;
					bounds.y = tempY;
					bounds.width = 0;
					bounds.height = 0;
				} else {
					if(tempX < bounds.x) {
						bounds.width += bounds.x - tempX;
						bounds.x = tempX;
					}
					if(tempY < bounds.y) {
						bounds.height += bounds.y - tempY;
						bounds.y = tempY;
					}
					if(tempX > bounds.x + bounds.width) {
						bounds.width = tempX - bounds.x;
					}
					if(tempY > bounds.y + bounds.height) {
						bounds.height = tempY - bounds.y;
					}
				}
				i += 2;
			}
			if(position._weak) {
				position.put();
			}
			var _this2 = this._bounds;
			var result = bounds.x + bounds.width > _this2.x && bounds.x < _this2.x + _this2.width && bounds.y + bounds.height > _this2.y && bounds.y < _this2.y + _this2.height;
			if(bounds._weak) {
				if(!bounds._inPool) {
					bounds._inPool = true;
					bounds._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(bounds);
				}
			}
			if(!result) {
				var this7 = flixel_FlxCamera.drawVertices;
				var pos1 = flixel_FlxCamera.drawVertices.length - verticesLength;
				var len1 = verticesLength;
				if(pos1 < 0) {
					pos1 += this7.length;
				}
				if(pos1 + len1 > this7.length) {
					len1 = this7.length - pos1;
				}
				if(len1 < 0) {
					len1 = 0;
				}
				var vectorData1 = new openfl_VectorData();
				vectorData1.length = len1;
				vectorData1.fixed = false;
				var this8 = new Array(len1);
				vectorData1.data = this8;
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,pos1,vectorData1.data,0,len1);
				if(len1 > 0) {
					this7.length -= len1;
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,pos1 + len1,this7.data,pos1,this7.length - pos1);
				}
			} else {
				flixel_FlxCamera.trianglesSprite.get_graphics().clear();
				flixel_FlxCamera.trianglesSprite.get_graphics().beginBitmapFill(graphic.bitmap,null,repeat,smoothing);
				var tmp = flixel_FlxCamera.trianglesSprite.get_graphics();
				var tmp1 = flixel_FlxCamera.drawVertices;
				var vectorData2 = new openfl_VectorData();
				vectorData2.length = indices.length;
				vectorData2.fixed = true;
				vectorData2.data = indices.slice(0);
				var vectorData3 = new openfl_VectorData();
				vectorData3.length = uvtData.length;
				vectorData3.fixed = true;
				vectorData3.data = uvtData.slice(0);
				tmp.drawTriangles(tmp1,vectorData2,vectorData3);
				flixel_FlxCamera.trianglesSprite.get_graphics().endFill();
				this.buffer.draw(flixel_FlxCamera.trianglesSprite);
				if(flixel_FlxG["debugger"].drawDebug) {
					var gfx = flixel_util_FlxSpriteUtil.flashGfx;
					gfx.clear();
					gfx.lineStyle(1,-16776961,0.5);
					var tmp2 = flixel_FlxCamera.drawVertices;
					var vectorData4 = new openfl_VectorData();
					vectorData4.length = indices.length;
					vectorData4.fixed = true;
					vectorData4.data = indices.slice(0);
					gfx.drawTriangles(tmp2,vectorData4);
					this.get_camera().buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
				}
			}
			if(!bounds._inPool) {
				bounds._inPool = true;
				bounds._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(bounds);
			}
		} else {
			var _this3 = this._bounds;
			_this3.x = 0;
			_this3.y = 0;
			_this3.width = this.width;
			_this3.height = this.height;
			var isColored = colors != null && colors.length != 0;
			var drawItem = this.startTrianglesBatch(graphic,smoothing,isColored,blend);
			drawItem.addTriangles(vertices,indices,uvtData,colors,position,this._bounds);
		}
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.removeChild(this.flashSprite,this._scrollRect);
		if(flixel_FlxG.renderBlit) {
			flixel_util_FlxDestroyUtil.removeChild(this._scrollRect,this._flashBitmap);
			this.screen = flixel_util_FlxDestroyUtil.destroy(this.screen);
			this.buffer = null;
			this._flashBitmap = null;
			this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
		} else {
			flixel_util_FlxDestroyUtil.removeChild(this._scrollRect,this.debugLayer);
			this.debugLayer = null;
			flixel_util_FlxDestroyUtil.removeChild(this._scrollRect,this.canvas);
			if(this.canvas != null) {
				var _g1 = 0;
				var _g = this.canvas.get_numChildren();
				while(_g1 < _g) {
					++_g1;
					this.canvas.removeChildAt(0);
				}
				this.canvas = null;
			}
			if(this._headOfDrawStack != null) {
				this.clearDrawStack();
			}
			this._transform = null;
			this._helperMatrix = null;
		}
		this._bounds = null;
		this.scroll = flixel_util_FlxDestroyUtil.put(this.scroll);
		this.targetOffset = flixel_util_FlxDestroyUtil.put(this.targetOffset);
		this.deadzone = flixel_util_FlxDestroyUtil.put(this.deadzone);
		this.target = null;
		this.flashSprite = null;
		this._scrollRect = null;
		this._flashRect = null;
		this._flashPoint = null;
		this._fxFlashComplete = null;
		this._fxFadeComplete = null;
		this._fxShakeComplete = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		if(this.target != null) {
			this.updateFollow();
		}
		this.updateScroll();
		this.updateFlash(elapsed);
		this.updateFade(elapsed);
		this.flashSprite.set_filters(this.filtersEnabled ? this._filters : null);
		this.updateFlashSpritePosition();
		this.updateShake(elapsed);
	}
	,updateScroll: function() {
		var zoom = this.zoom / flixel_FlxG.initialZoom;
		var minX = this.minScrollX == null ? null : this.minScrollX - (zoom - 1) * this.width / (2 * zoom);
		var maxX = this.maxScrollX == null ? null : this.maxScrollX + (zoom - 1) * this.width / (2 * zoom);
		var minY = this.minScrollY == null ? null : this.minScrollY - (zoom - 1) * this.height / (2 * zoom);
		var maxY = this.maxScrollY == null ? null : this.maxScrollY + (zoom - 1) * this.height / (2 * zoom);
		var Value = this.scroll.x;
		var Max = maxX != null ? maxX - this.width : null;
		var lowerBound = minX != null && Value < minX ? minX : Value;
		this.scroll.set_x(Max != null && lowerBound > Max ? Max : lowerBound);
		var Value1 = this.scroll.y;
		var Max1 = maxY != null ? maxY - this.height : null;
		var lowerBound1 = minY != null && Value1 < minY ? minY : Value1;
		this.scroll.set_y(Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1);
	}
	,updateFollow: function() {
		if(this.deadzone == null) {
			this.target.getMidpoint(this._point);
			this._point.addPoint(this.targetOffset);
			var point = this._point;
			this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
			if(point._weak) {
				point.put();
			}
		} else {
			var edge;
			var targetX = this.target.x + this.targetOffset.x;
			var targetY = this.target.y + this.targetOffset.y;
			if(this.style == flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN) {
				if(targetX >= this.scroll.x + this.width) {
					var _g = this._scrollTarget;
					_g.set_x(_g.x + this.width);
				} else if(targetX < this.scroll.x) {
					var _g1 = this._scrollTarget;
					_g1.set_x(_g1.x - this.width);
				}
				if(targetY >= this.scroll.y + this.height) {
					var _g2 = this._scrollTarget;
					_g2.set_y(_g2.y + this.height);
				} else if(targetY < this.scroll.y) {
					var _g3 = this._scrollTarget;
					_g3.set_y(_g3.y - this.height);
				}
			} else {
				edge = targetX - this.deadzone.x;
				if(this._scrollTarget.x > edge) {
					this._scrollTarget.set_x(edge);
				}
				edge = targetX + this.target.get_width() - this.deadzone.x - this.deadzone.width;
				if(this._scrollTarget.x < edge) {
					this._scrollTarget.set_x(edge);
				}
				edge = targetY - this.deadzone.y;
				if(this._scrollTarget.y > edge) {
					this._scrollTarget.set_y(edge);
				}
				edge = targetY + this.target.get_height() - this.deadzone.y - this.deadzone.height;
				if(this._scrollTarget.y < edge) {
					this._scrollTarget.set_y(edge);
				}
			}
			if(js_Boot.__instanceof(this.target,flixel_FlxSprite)) {
				if(this._lastTargetPosition == null) {
					var X = this.target.x;
					var Y = this.target.y;
					var point1 = flixel_math_FlxPoint._pool.get().set(X,Y);
					point1._inPool = false;
					this._lastTargetPosition = point1;
				}
				var _g4 = this._scrollTarget;
				_g4.set_x(_g4.x + (this.target.x - this._lastTargetPosition.x) * this.followLead.x);
				var _g5 = this._scrollTarget;
				_g5.set_y(_g5.y + (this.target.y - this._lastTargetPosition.y) * this.followLead.y);
				this._lastTargetPosition.set_x(this.target.x);
				this._lastTargetPosition.set_y(this.target.y);
			}
			if(this.followLerp >= 60 / flixel_FlxG.updateFramerate) {
				var _this = this.scroll;
				var point2 = this._scrollTarget;
				_this.set_x(point2.x);
				_this.set_y(point2.y);
				if(point2._weak) {
					point2.put();
				}
			} else {
				var _g6 = this.scroll;
				_g6.set_x(_g6.x + (this._scrollTarget.x - this.scroll.x) * this.followLerp * flixel_FlxG.updateFramerate / 60);
				var _g7 = this.scroll;
				_g7.set_y(_g7.y + (this._scrollTarget.y - this.scroll.y) * this.followLerp * flixel_FlxG.updateFramerate / 60);
			}
		}
	}
	,updateFlash: function(elapsed) {
		if(this._fxFlashAlpha > 0.0) {
			this._fxFlashAlpha -= elapsed / this._fxFlashDuration;
			if(this._fxFlashAlpha <= 0 && this._fxFlashComplete != null) {
				this._fxFlashComplete();
			}
		}
	}
	,updateFade: function(elapsed) {
		if(this._fxFadeCompleted) {
			return;
		}
		if(this._fxFadeIn) {
			this._fxFadeAlpha -= elapsed / this._fxFadeDuration;
			if(this._fxFadeAlpha <= 0.0) {
				this._fxFadeAlpha = 0.0;
				this.completeFade();
			}
		} else {
			this._fxFadeAlpha += elapsed / this._fxFadeDuration;
			if(this._fxFadeAlpha >= 1.0) {
				this._fxFadeAlpha = 1.0;
				this.completeFade();
			}
		}
	}
	,completeFade: function() {
		this._fxFadeCompleted = true;
		if(this._fxFadeComplete != null) {
			this._fxFadeComplete();
		}
	}
	,updateShake: function(elapsed) {
		if(this._fxShakeDuration > 0) {
			this._fxShakeDuration -= elapsed;
			if(this._fxShakeDuration <= 0) {
				if(this._fxShakeComplete != null) {
					this._fxShakeComplete();
				}
			} else {
				if(this._fxShakeAxes != flixel_util_FlxAxes.Y) {
					var _g = this.flashSprite;
					_g.set_x(_g.get_x() + flixel_FlxG.random["float"](-this._fxShakeIntensity * this.width,this._fxShakeIntensity * this.width) * this.zoom * flixel_FlxG.scaleMode.scale.x);
				}
				if(this._fxShakeAxes != flixel_util_FlxAxes.X) {
					var _g1 = this.flashSprite;
					_g1.set_y(_g1.get_y() + flixel_FlxG.random["float"](-this._fxShakeIntensity * this.height,this._fxShakeIntensity * this.height) * this.zoom * flixel_FlxG.scaleMode.scale.y);
				}
			}
		}
	}
	,updateFlashSpritePosition: function() {
		if(this.flashSprite != null) {
			this.flashSprite.set_x(this.x * flixel_FlxG.scaleMode.scale.x + this._flashOffset.x);
			this.flashSprite.set_y(this.y * flixel_FlxG.scaleMode.scale.y + this._flashOffset.y);
		}
	}
	,updateFlashOffset: function() {
		this._flashOffset.set_x(this.width * 0.5 * flixel_FlxG.scaleMode.scale.x * this.initialZoom);
		this._flashOffset.set_y(this.height * 0.5 * flixel_FlxG.scaleMode.scale.y * this.initialZoom);
	}
	,updateScrollRect: function() {
		var rect = this._scrollRect != null ? this._scrollRect.get_scrollRect() : null;
		if(rect != null) {
			rect.x = rect.y = 0;
			rect.width = this.width * this.initialZoom * flixel_FlxG.scaleMode.scale.x;
			rect.height = this.height * this.initialZoom * flixel_FlxG.scaleMode.scale.y;
			this._scrollRect.set_scrollRect(rect);
			this._scrollRect.set_x(-0.5 * rect.width);
			this._scrollRect.set_y(-0.5 * rect.height);
		}
	}
	,updateInternalSpritePositions: function() {
		if(flixel_FlxG.renderBlit) {
			if(this._flashBitmap != null) {
				this.regen = this.regen || this.width != this.buffer.width || this.height != this.buffer.height;
				this._flashBitmap.set_x(-0.5 * this.width * (this.scaleX - this.initialZoom) * flixel_FlxG.scaleMode.scale.x);
				this._flashBitmap.set_y(-0.5 * this.height * (this.scaleY - this.initialZoom) * flixel_FlxG.scaleMode.scale.y);
			}
		} else if(this.canvas != null) {
			this.canvas.set_x(-0.5 * this.width * (this.scaleX - this.initialZoom) * flixel_FlxG.scaleMode.scale.x);
			this.canvas.set_y(-0.5 * this.height * (this.scaleY - this.initialZoom) * flixel_FlxG.scaleMode.scale.y);
			this.canvas.set_scaleX(this.totalScaleX);
			this.canvas.set_scaleY(this.totalScaleY);
			if(this.debugLayer != null) {
				this.debugLayer.set_x(this.canvas.get_x());
				this.debugLayer.set_y(this.canvas.get_y());
				this.debugLayer.set_scaleX(this.totalScaleX);
				this.debugLayer.set_scaleY(this.totalScaleY);
			}
		}
	}
	,follow: function(Target,Style,Lerp) {
		if(Style == null) {
			Style = flixel_FlxCameraFollowStyle.LOCKON;
		}
		if(Lerp == null) {
			Lerp = 60 / flixel_FlxG.updateFramerate;
		}
		this.style = Style;
		this.target = Target;
		this.set_followLerp(Lerp);
		var helper;
		var w = 0;
		var h = 0;
		this._lastTargetPosition = null;
		switch(Style[1]) {
		case 0:
			if(this.target != null) {
				w = this.target.get_width();
				h = this.target.get_height();
			}
			var X = (this.width - w) / 2;
			var Y = (this.height - h) / 2 - h * 0.25;
			var _this = flixel_math_FlxRect._pool.get();
			_this.x = X;
			_this.y = Y;
			_this.width = w;
			_this.height = h;
			_this._inPool = false;
			this.deadzone = _this;
			break;
		case 1:
			var w1 = this.width / 8;
			var h1 = this.height / 3;
			var X1 = (this.width - w1) / 2;
			var Y1 = (this.height - h1) / 2 - h1 * 0.25;
			var _this1 = flixel_math_FlxRect._pool.get();
			_this1.x = X1;
			_this1.y = Y1;
			_this1.width = w1;
			_this1.height = h1;
			_this1._inPool = false;
			this.deadzone = _this1;
			break;
		case 2:
			helper = Math.max(this.width,this.height) / 4;
			var X2 = (this.width - helper) / 2;
			var Y2 = (this.height - helper) / 2;
			var _this2 = flixel_math_FlxRect._pool.get();
			_this2.x = X2;
			_this2.y = Y2;
			_this2.width = helper;
			_this2.height = helper;
			_this2._inPool = false;
			this.deadzone = _this2;
			break;
		case 3:
			helper = Math.max(this.width,this.height) / 8;
			var X3 = (this.width - helper) / 2;
			var Y3 = (this.height - helper) / 2;
			var _this3 = flixel_math_FlxRect._pool.get();
			_this3.x = X3;
			_this3.y = Y3;
			_this3.width = helper;
			_this3.height = helper;
			_this3._inPool = false;
			this.deadzone = _this3;
			break;
		case 4:
			var Width = this.width;
			var Height = this.height;
			var _this4 = flixel_math_FlxRect._pool.get();
			_this4.x = 0;
			_this4.y = 0;
			_this4.width = Width;
			_this4.height = Height;
			_this4._inPool = false;
			this.deadzone = _this4;
			break;
		case 5:
			this.deadzone = null;
			break;
		}
	}
	,snapToTarget: function() {
		this.updateFollow();
		var _this = this.scroll;
		var point = this._scrollTarget;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
	}
	,focusOn: function(point) {
		this.scroll.set(point.x - this.width * 0.5,point.y - this.height * 0.5);
		if(point._weak) {
			point.put();
		}
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -1;
		}
		if(!Force && this._fxFlashAlpha > 0.0) {
			return;
		}
		this._fxFlashColor = Color;
		if(Duration <= 0) {
			Duration = 0.000001;
		}
		this._fxFlashDuration = Duration;
		this._fxFlashComplete = OnComplete;
		this._fxFlashAlpha = 1.0;
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(FadeIn == null) {
			FadeIn = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -16777216;
		}
		if(!this._fxFadeCompleted && !Force) {
			return;
		}
		this._fxFadeColor = Color;
		if(Duration <= 0) {
			Duration = 0.000001;
		}
		this._fxFadeIn = FadeIn;
		this._fxFadeDuration = Duration;
		this._fxFadeComplete = OnComplete;
		this._fxFadeAlpha = this._fxFadeIn ? 0.999999 : 0.000001;
		this._fxFadeCompleted = false;
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Axes) {
		if(Force == null) {
			Force = true;
		}
		if(Duration == null) {
			Duration = 0.5;
		}
		if(Intensity == null) {
			Intensity = 0.05;
		}
		if(Axes == null) {
			Axes = flixel_util_FlxAxes.XY;
		}
		if(!Force && this._fxShakeDuration > 0) {
			return;
		}
		this._fxShakeIntensity = Intensity;
		this._fxShakeDuration = Duration;
		this._fxShakeComplete = OnComplete;
		this._fxShakeAxes = Axes;
	}
	,stopFX: function() {
		this._fxFlashAlpha = 0.0;
		this._fxFadeAlpha = 0.0;
		this._fxShakeDuration = 0;
		this.updateFlashSpritePosition();
	}
	,setFilters: function(filters) {
		this._filters = filters;
	}
	,copyFrom: function(Camera) {
		this.setScrollBounds(Camera.minScrollX,Camera.maxScrollX,Camera.minScrollY,Camera.maxScrollY);
		this.target = Camera.target;
		if(this.target != null) {
			if(Camera.deadzone == null) {
				this.deadzone = null;
			} else {
				if(this.deadzone == null) {
					var _this = flixel_math_FlxRect._pool.get();
					_this.x = 0;
					_this.y = 0;
					_this.width = 0;
					_this.height = 0;
					_this._inPool = false;
					this.deadzone = _this;
				}
				var _this1 = this.deadzone;
				var Rect = Camera.deadzone;
				_this1.x = Rect.x;
				_this1.y = Rect.y;
				_this1.width = Rect.width;
				_this1.height = Rect.height;
				if(Rect._weak) {
					if(!Rect._inPool) {
						Rect._inPool = true;
						Rect._weak = false;
						flixel_math_FlxRect._pool.putUnsafe(Rect);
					}
				}
			}
		}
		return this;
	}
	,fill: function(Color,BlendAlpha,FxAlpha,graphics) {
		if(FxAlpha == null) {
			FxAlpha = 1.0;
		}
		if(BlendAlpha == null) {
			BlendAlpha = true;
		}
		if(flixel_FlxG.renderBlit) {
			if(BlendAlpha) {
				this._fill.fillRect(this._flashRect,Color);
				this.buffer.copyPixels(this._fill,this._flashRect,this._flashPoint,null,null,BlendAlpha);
			} else {
				this.buffer.fillRect(this._flashRect,Color);
			}
		} else {
			var targetGraphics = graphics == null ? this.canvas.get_graphics() : graphics;
			targetGraphics.beginFill(Color,FxAlpha);
			targetGraphics.drawRect(-1,-1,this.width + 2,this.height + 2);
			targetGraphics.endFill();
		}
	}
	,drawFX: function() {
		var alphaComponent;
		if(this._fxFlashAlpha > 0.0) {
			alphaComponent = this._fxFlashColor >> 24 & 255;
			if(flixel_FlxG.renderBlit) {
				this.fill((((alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFlashAlpha | 0) << 24) + (this._fxFlashColor & 16777215));
			} else {
				this.fill(this._fxFlashColor & 16777215,true,(alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFlashAlpha / 255,this.canvas.get_graphics());
			}
		}
		if(this._fxFadeAlpha > 0.0) {
			alphaComponent = this._fxFadeColor >> 24 & 255;
			if(flixel_FlxG.renderBlit) {
				this.fill((((alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFadeAlpha | 0) << 24) + (this._fxFadeColor & 16777215));
			} else {
				this.fill(this._fxFadeColor & 16777215,true,(alphaComponent <= 0 ? 255 : alphaComponent) * this._fxFadeAlpha / 255,this.canvas.get_graphics());
			}
		}
	}
	,checkResize: function() {
		if(!flixel_FlxG.renderBlit && !this.regen) {
			return;
		}
		if(this.width != this.buffer.width || this.height != this.buffer.height) {
			var oldBuffer = this.screen.graphic;
			this.buffer = new openfl_display_BitmapData(this.width,this.height,true,0);
			this.screen.set_pixels(this.buffer);
			this.screen.origin.set();
			this._flashBitmap.bitmapData = this.buffer;
			this._flashRect.width = this.width;
			this._flashRect.height = this.height;
			this._fill = flixel_util_FlxDestroyUtil.dispose(this._fill);
			this._fill = new openfl_display_BitmapData(this.width,this.height,true,0);
			flixel_FlxG.bitmap.removeIfNoUse(oldBuffer);
		}
		this.regen = false;
	}
	,setSize: function(Width,Height) {
		this.set_width(Width);
		this.set_height(Height);
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
	}
	,setScrollBoundsRect: function(X,Y,Width,Height,UpdateWorld) {
		if(UpdateWorld == null) {
			UpdateWorld = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		if(UpdateWorld) {
			var _this = flixel_FlxG.worldBounds;
			_this.x = X;
			_this.y = Y;
			_this.width = Width;
			_this.height = Height;
		}
		this.setScrollBounds(X,X + Width,Y,Y + Height);
	}
	,setScrollBounds: function(MinX,MaxX,MinY,MaxY) {
		this.minScrollX = MinX;
		this.maxScrollX = MaxX;
		this.minScrollY = MinY;
		this.maxScrollY = MaxY;
		this.updateScroll();
	}
	,setScale: function(X,Y) {
		this.scaleX = X;
		this.scaleY = Y;
		this.totalScaleX = this.scaleX * flixel_FlxG.scaleMode.scale.x;
		this.totalScaleY = this.scaleY * flixel_FlxG.scaleMode.scale.y;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.set_scaleX(this.totalScaleX);
			this._flashBitmap.set_scaleY(this.totalScaleY);
		} else {
			this._transform.identity();
			this._transform.scale(this.totalScaleX,this.totalScaleY);
		}
		this.updateFlashSpritePosition();
		this.updateScrollRect();
		this.updateInternalSpritePositions();
	}
	,onResize: function() {
		this.updateFlashOffset();
		this.setScale(this.scaleX,this.scaleY);
	}
	,set_followLerp: function(Value) {
		var Max = 60 / flixel_FlxG.updateFramerate;
		var lowerBound = Value < 0 ? 0 : Value;
		return this.followLerp = Max != null && lowerBound > Max ? Max : lowerBound;
	}
	,set_width: function(Value) {
		if(this.width != Value && Value > 0) {
			this.width = Value;
			this.updateFlashOffset();
			this.updateScrollRect();
			this.updateInternalSpritePositions();
			flixel_FlxG.cameras.cameraResized.dispatch(this);
		}
		return Value;
	}
	,set_height: function(Value) {
		if(this.height != Value && Value > 0) {
			this.height = Value;
			this.updateFlashOffset();
			this.updateScrollRect();
			this.updateInternalSpritePositions();
			flixel_FlxG.cameras.cameraResized.dispatch(this);
		}
		return Value;
	}
	,set_zoom: function(Zoom) {
		this.zoom = Zoom == 0 ? flixel_FlxCamera.defaultZoom : Zoom;
		this.setScale(this.zoom,this.zoom);
		return this.zoom;
	}
	,set_alpha: function(Alpha) {
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		this.alpha = lowerBound > 1 ? 1 : lowerBound;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.set_alpha(Alpha);
		} else {
			this.canvas.set_alpha(Alpha);
		}
		return Alpha;
	}
	,set_angle: function(Angle) {
		this.angle = Angle;
		this.flashSprite.set_rotation(Angle);
		return Angle;
	}
	,set_color: function(Color) {
		this.color = Color;
		var colorTransform;
		if(flixel_FlxG.renderBlit) {
			if(this._flashBitmap == null) {
				return Color;
			}
			colorTransform = this._flashBitmap.get_transform().get_colorTransform();
		} else {
			colorTransform = this.canvas.get_transform().get_colorTransform();
		}
		colorTransform.redMultiplier = (this.color >> 16 & 255) / 255;
		colorTransform.greenMultiplier = (this.color >> 8 & 255) / 255;
		colorTransform.blueMultiplier = (this.color & 255) / 255;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.get_transform().set_colorTransform(colorTransform);
		} else {
			this.canvas.get_transform().set_colorTransform(colorTransform);
		}
		return Color;
	}
	,set_antialiasing: function(Antialiasing) {
		this.antialiasing = Antialiasing;
		if(flixel_FlxG.renderBlit) {
			this._flashBitmap.smoothing = Antialiasing;
		}
		return Antialiasing;
	}
	,set_x: function(x) {
		this.x = x;
		this.updateFlashSpritePosition();
		return x;
	}
	,set_y: function(y) {
		this.y = y;
		this.updateFlashSpritePosition();
		return y;
	}
	,set_visible: function(visible) {
		if(this.flashSprite != null) {
			this.flashSprite.set_visible(visible);
		}
		return this.visible = visible;
	}
	,__class__: flixel_FlxCamera
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_antialiasing:"set_antialiasing",set_color:"set_color",set_angle:"set_angle",set_alpha:"set_alpha",set_zoom:"set_zoom",set_height:"set_height",set_width:"set_width",set_followLerp:"set_followLerp",set_y:"set_y",set_x:"set_x"})
});
var flixel_FlxCameraFollowStyle = $hxClasses["flixel.FlxCameraFollowStyle"] = { __ename__ : ["flixel","FlxCameraFollowStyle"], __constructs__ : ["LOCKON","PLATFORMER","TOPDOWN","TOPDOWN_TIGHT","SCREEN_BY_SCREEN","NO_DEAD_ZONE"] };
flixel_FlxCameraFollowStyle.LOCKON = ["LOCKON",0];
flixel_FlxCameraFollowStyle.LOCKON.toString = $estr;
flixel_FlxCameraFollowStyle.LOCKON.__enum__ = flixel_FlxCameraFollowStyle;
flixel_FlxCameraFollowStyle.PLATFORMER = ["PLATFORMER",1];
flixel_FlxCameraFollowStyle.PLATFORMER.toString = $estr;
flixel_FlxCameraFollowStyle.PLATFORMER.__enum__ = flixel_FlxCameraFollowStyle;
flixel_FlxCameraFollowStyle.TOPDOWN = ["TOPDOWN",2];
flixel_FlxCameraFollowStyle.TOPDOWN.toString = $estr;
flixel_FlxCameraFollowStyle.TOPDOWN.__enum__ = flixel_FlxCameraFollowStyle;
flixel_FlxCameraFollowStyle.TOPDOWN_TIGHT = ["TOPDOWN_TIGHT",3];
flixel_FlxCameraFollowStyle.TOPDOWN_TIGHT.toString = $estr;
flixel_FlxCameraFollowStyle.TOPDOWN_TIGHT.__enum__ = flixel_FlxCameraFollowStyle;
flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN = ["SCREEN_BY_SCREEN",4];
flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN.toString = $estr;
flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN.__enum__ = flixel_FlxCameraFollowStyle;
flixel_FlxCameraFollowStyle.NO_DEAD_ZONE = ["NO_DEAD_ZONE",5];
flixel_FlxCameraFollowStyle.NO_DEAD_ZONE.toString = $estr;
flixel_FlxCameraFollowStyle.NO_DEAD_ZONE.__enum__ = flixel_FlxCameraFollowStyle;
flixel_FlxCameraFollowStyle.__empty_constructs__ = [flixel_FlxCameraFollowStyle.LOCKON,flixel_FlxCameraFollowStyle.PLATFORMER,flixel_FlxCameraFollowStyle.TOPDOWN,flixel_FlxCameraFollowStyle.TOPDOWN_TIGHT,flixel_FlxCameraFollowStyle.SCREEN_BY_SCREEN,flixel_FlxCameraFollowStyle.NO_DEAD_ZONE];
var flixel_system_FlxVersion = function(Major,Minor,Patch) {
	this.major = Major;
	this.minor = Minor;
	this.patch = Patch;
};
$hxClasses["flixel.system.FlxVersion"] = flixel_system_FlxVersion;
flixel_system_FlxVersion.__name__ = ["flixel","system","FlxVersion"];
flixel_system_FlxVersion.prototype = {
	major: null
	,minor: null
	,patch: null
	,toString: function() {
		var sha = flixel_system_FlxVersion.sha;
		if(sha != "") {
			sha = "@" + sha.substring(0,7);
		}
		return "HaxeFlixel " + this.major + "." + this.minor + "." + this.patch + sha;
	}
	,__class__: flixel_system_FlxVersion
};
var flixel_system_frontEnds_BitmapFrontEnd = function() {
	this._lastUniqueKeyIndex = 0;
	this.reset();
};
$hxClasses["flixel.system.frontEnds.BitmapFrontEnd"] = flixel_system_frontEnds_BitmapFrontEnd;
flixel_system_frontEnds_BitmapFrontEnd.__name__ = ["flixel","system","frontEnds","BitmapFrontEnd"];
flixel_system_frontEnds_BitmapFrontEnd.prototype = {
	_cache: null
	,_whitePixel: null
	,_lastUniqueKeyIndex: null
	,onAssetsReload: function(_) {
		var key = this._cache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this._cache;
			var obj = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
			if(obj != null && (obj.assetsClass != null || obj.assetsKey != null)) {
				obj.onAssetsReload();
			}
		}
	}
	,onContext: function() {
		var key = this._cache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this._cache;
			var obj = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
			if(obj != null && obj.isDumped) {
				obj.onContext();
			}
		}
	}
	,dumpCache: function() {
	}
	,undumpCache: function() {
	}
	,checkCache: function(Key) {
		return this._cache.get(Key) != null;
	}
	,create: function(Width,Height,Color,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		return flixel_graphics_FlxGraphic.fromRectangle(Width,Height,Color,Unique,Key);
	}
	,add: function(Graphic,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(js_Boot.__instanceof(Graphic,flixel_graphics_FlxGraphic)) {
			return flixel_graphics_FlxGraphic.fromGraphic(Graphic,Unique,Key);
		} else if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData)) {
			return flixel_graphics_FlxGraphic.fromBitmapData(Graphic,Unique,Key);
		}
		return flixel_graphics_FlxGraphic.fromAssetKey(Std.string(Graphic),Unique,Key);
	}
	,addGraphic: function(graphic) {
		var key = graphic.key;
		var _this = this._cache;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,graphic);
		} else {
			_this.h[key] = graphic;
		}
		return graphic;
	}
	,get: function(key) {
		var _this = this._cache;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,findKeyForBitmap: function(bmd) {
		var key = this._cache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this._cache;
			if((__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]).bitmap == bmd) {
				return key1;
			}
		}
		return null;
	}
	,getKeyForClass: function(source) {
		return Type.getClassName(source);
	}
	,generateKey: function(systemKey,userKey,unique) {
		if(unique == null) {
			unique = false;
		}
		var key = userKey;
		if(userKey == null) {
			key = systemKey;
		}
		if(unique || key == null) {
			key = this.getUniqueKey(key);
		}
		return key;
	}
	,getUniqueKey: function(baseKey) {
		if(baseKey == null) {
			baseKey = "pixels";
		}
		if(this._cache.get(baseKey) == null) {
			return baseKey;
		}
		var i = this._lastUniqueKeyIndex;
		var uniqueKey;
		while(true) {
			++i;
			uniqueKey = baseKey + i;
			if(!(this._cache.get(uniqueKey) != null)) {
				break;
			}
		}
		this._lastUniqueKeyIndex = i;
		return uniqueKey;
	}
	,getKeyWithSpacesAndBorders: function(baseKey,frameSize,frameSpacing,frameBorder,region) {
		var result = baseKey;
		if(region != null) {
			result = baseKey + ("_Region:" + region.x + "_" + region.y + "_" + region.width + "_" + region.height);
		}
		if(frameSize != null) {
			result += "_FrameSize:" + frameSize.x + "_" + frameSize.y;
		}
		if(frameSpacing != null) {
			result += "_Spaces:" + frameSpacing.x + "_" + frameSpacing.y;
		}
		if(frameBorder != null) {
			result += "_Border:" + frameBorder.x + "_" + frameBorder.y;
		}
		return result;
	}
	,remove: function(graphic) {
		if(graphic != null) {
			this.removeByKey(graphic.key);
		}
	}
	,removeByKey: function(key) {
		var tmp;
		if(key != null) {
			var _this = this._cache;
			if(__map_reserved[key] != null) {
				tmp = _this.existsReserved(key);
			} else {
				tmp = _this.h.hasOwnProperty(key);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this._cache;
			var obj = __map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key];
			openfl_Assets.cache.removeBitmapData(key);
			this._cache.remove(key);
			obj.destroy();
		}
	}
	,removeIfNoUse: function(graphic) {
		if(graphic != null && graphic.get_useCount() == 0 && !graphic.persist) {
			this.remove(graphic);
		}
	}
	,clearCache: function() {
		if(this._cache == null) {
			this._cache = new haxe_ds_StringMap();
		}
		var key = this._cache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this._cache;
			var obj = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
			if(obj != null && !obj.persist && obj.get_useCount() <= 0) {
				this.removeByKey(key1);
			}
		}
	}
	,reset: function() {
		if(this._cache == null) {
			this._cache = new haxe_ds_StringMap();
		}
		var key = this._cache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this._cache;
			var obj = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
			if(obj != null) {
				this.removeByKey(key1);
			}
		}
	}
	,clearUnused: function() {
		var key = this._cache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var _this = this._cache;
			var obj = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
			if(obj != null && obj.get_useCount() <= 0 && !obj.persist && obj.get_destroyOnNoUse()) {
				this.removeByKey(key1);
			}
		}
	}
	,get_maxTextureSize: function() {
		return lime_graphics_opengl_GL.context.getParameter(3379);
	}
	,get_whitePixel: function() {
		if(this._whitePixel == null) {
			var bd = new openfl_display_BitmapData(10,10,true,-1);
			var graphic = flixel_FlxG.bitmap.add(bd,true,"whitePixels");
			graphic.persist = true;
			this._whitePixel = graphic.get_imageFrame().get_frame();
		}
		return this._whitePixel;
	}
	,__class__: flixel_system_frontEnds_BitmapFrontEnd
	,__properties__: {get_whitePixel:"get_whitePixel",get_maxTextureSize:"get_maxTextureSize"}
};
var flixel_system_frontEnds_BitmapLogFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.BitmapLogFrontEnd"] = flixel_system_frontEnds_BitmapLogFrontEnd;
flixel_system_frontEnds_BitmapLogFrontEnd.__name__ = ["flixel","system","frontEnds","BitmapLogFrontEnd"];
flixel_system_frontEnds_BitmapLogFrontEnd.prototype = {
	add: function(Data,Name) {
		if(Name == null) {
			Name = "";
		}
		flixel_FlxG.game["debugger"].bitmapLog.add(Data,Name);
	}
	,clear: function() {
		flixel_FlxG.game["debugger"].bitmapLog.clear();
	}
	,clearAt: function(Index) {
		if(Index == null) {
			Index = -1;
		}
		flixel_FlxG.game["debugger"].bitmapLog.clearAt(Index);
	}
	,viewCache: function() {
		flixel_FlxG.game["debugger"].bitmapLog.clear();
		var _this = flixel_FlxG.bitmap._cache;
		var cachedGraphic = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(cachedGraphic.hasNext()) {
			var cachedGraphic1 = cachedGraphic.next();
			flixel_FlxG.game["debugger"].bitmapLog.add(cachedGraphic1.bitmap,cachedGraphic1.key);
		}
	}
	,__class__: flixel_system_frontEnds_BitmapLogFrontEnd
};
var flixel_system_frontEnds_CameraFrontEnd = function() {
	this._cameraRect = new openfl_geom_Rectangle();
	this.useBufferLocking = false;
	this.cameraResized = new flixel_util__$FlxSignal_FlxSignal1();
	this.cameraRemoved = new flixel_util__$FlxSignal_FlxSignal1();
	this.cameraAdded = new flixel_util__$FlxSignal_FlxSignal1();
	this.list = [];
	flixel_FlxCamera.defaultCameras = this.list;
};
$hxClasses["flixel.system.frontEnds.CameraFrontEnd"] = flixel_system_frontEnds_CameraFrontEnd;
flixel_system_frontEnds_CameraFrontEnd.__name__ = ["flixel","system","frontEnds","CameraFrontEnd"];
flixel_system_frontEnds_CameraFrontEnd.prototype = {
	list: null
	,cameraAdded: null
	,cameraRemoved: null
	,cameraResized: null
	,useBufferLocking: null
	,_cameraRect: null
	,add: function(NewCamera) {
		flixel_FlxG.game.addChildAt(NewCamera.flashSprite,flixel_FlxG.game.getChildIndex(flixel_FlxG.game._inputContainer));
		flixel_FlxG.cameras.list.push(NewCamera);
		NewCamera.ID = flixel_FlxG.cameras.list.length - 1;
		this.cameraAdded.dispatch(NewCamera);
		return NewCamera;
	}
	,remove: function(Camera,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		var index = this.list.indexOf(Camera);
		if(Camera != null && index != -1) {
			flixel_FlxG.game.removeChild(Camera.flashSprite);
			this.list.splice(index,1);
		} else {
			flixel_FlxG.log.advanced("FlxG.cameras.remove(): The camera you attempted to remove is not a part of the game.",flixel_system_debug_log_LogStyle.WARNING,true);
			return;
		}
		if(flixel_FlxG.renderTile) {
			var _g1 = 0;
			var _g = this.list.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.list[i].ID = i;
			}
		}
		if(Destroy) {
			Camera.destroy();
		}
		this.cameraRemoved.dispatch(Camera);
	}
	,reset: function(NewCamera) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			this.remove(camera);
		}
		this.list.splice(0,this.list.length);
		if(NewCamera == null) {
			NewCamera = new flixel_FlxCamera(0,0,flixel_FlxG.width,flixel_FlxG.height);
		}
		flixel_FlxG.camera = this.add(NewCamera);
		NewCamera.ID = 0;
		flixel_FlxCamera.defaultCameras = this.list;
	}
	,flash: function(Color,Duration,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -1;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.flash(Color,Duration,OnComplete,Force);
		}
	}
	,fade: function(Color,Duration,FadeIn,OnComplete,Force) {
		if(Force == null) {
			Force = false;
		}
		if(FadeIn == null) {
			FadeIn = false;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(Color == null) {
			Color = -16777216;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.fade(Color,Duration,FadeIn,OnComplete,Force);
		}
	}
	,shake: function(Intensity,Duration,OnComplete,Force,Axes) {
		if(Force == null) {
			Force = true;
		}
		if(Duration == null) {
			Duration = 0.5;
		}
		if(Intensity == null) {
			Intensity = 0.05;
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.shake(Intensity,Duration,OnComplete,Force,Axes);
		}
	}
	,lock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			if(flixel_FlxG.renderBlit) {
				camera.checkResize();
			}
			if(flixel_FlxG.renderTile) {
				camera.clearDrawStack();
				camera.canvas.get_graphics().clear();
				camera.debugLayer.get_graphics().clear();
			}
			if(flixel_FlxG.renderBlit) {
				camera.fill(camera.bgColor,camera.useBgAlphaBlending);
				camera.screen.dirty = true;
			} else {
				camera.fill(camera.bgColor & 16777215,camera.useBgAlphaBlending,(camera.bgColor >> 24 & 255) / 255);
			}
		}
	}
	,render: function() {
		if(flixel_FlxG.renderTile) {
			var _g = 0;
			var _g1 = this.list;
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				if(camera != null && camera.exists && camera.visible) {
					camera.render();
				}
			}
		}
	}
	,unlock: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			camera.drawFX();
			if(flixel_FlxG.renderBlit) {
				camera.screen.dirty = true;
			}
		}
	}
	,update: function(elapsed) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera != null && camera.exists && camera.active) {
				camera.update(elapsed);
			}
		}
	}
	,resize: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.onResize();
		}
	}
	,get_bgColor: function() {
		if(flixel_FlxG.camera == null) {
			return -16777216;
		} else {
			return flixel_FlxG.camera.bgColor;
		}
	}
	,set_bgColor: function(Color) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.bgColor = Color;
		}
		return Color;
	}
	,__class__: flixel_system_frontEnds_CameraFrontEnd
	,__properties__: {set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"}
};
var flixel_system_frontEnds_ConsoleFrontEnd = function() {
	this.stepAfterCommand = true;
	this.autoPause = true;
};
$hxClasses["flixel.system.frontEnds.ConsoleFrontEnd"] = flixel_system_frontEnds_ConsoleFrontEnd;
flixel_system_frontEnds_ConsoleFrontEnd.__name__ = ["flixel","system","frontEnds","ConsoleFrontEnd"];
flixel_system_frontEnds_ConsoleFrontEnd.prototype = {
	autoPause: null
	,stepAfterCommand: null
	,registerFunction: function(FunctionAlias,Function) {
		var _this = flixel_FlxG.game["debugger"].console;
		_this.registeredFunctions.set(FunctionAlias,Function);
		flixel_system_debug_console_ConsoleUtil.registerFunction(FunctionAlias,Function);
	}
	,registerObject: function(ObjectAlias,AnyObject) {
		flixel_FlxG.game["debugger"].console.registeredObjects.set(ObjectAlias,AnyObject);
		flixel_system_debug_console_ConsoleUtil.registerObject(ObjectAlias,AnyObject);
	}
	,registerClass: function(cl) {
		var _this = flixel_FlxG.game["debugger"].console;
		var objectAlias = flixel_util_FlxStringUtil.getClassName(cl,true);
		_this.registeredObjects.set(objectAlias,cl);
		flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias,cl);
	}
	,__class__: flixel_system_frontEnds_ConsoleFrontEnd
};
var flixel_system_frontEnds_DebuggerFrontEnd = function() {
	this.visible = false;
	this.visibilityChanged = new flixel_util__$FlxSignal_FlxSignal0();
	this.drawDebugChanged = new flixel_util__$FlxSignal_FlxSignal0();
	this.drawDebug = false;
	this.toggleKeys = [113,192,220];
	this.precision = 3;
};
$hxClasses["flixel.system.frontEnds.DebuggerFrontEnd"] = flixel_system_frontEnds_DebuggerFrontEnd;
flixel_system_frontEnds_DebuggerFrontEnd.__name__ = ["flixel","system","frontEnds","DebuggerFrontEnd"];
flixel_system_frontEnds_DebuggerFrontEnd.prototype = {
	precision: null
	,toggleKeys: null
	,drawDebug: null
	,drawDebugChanged: null
	,visibilityChanged: null
	,visible: null
	,setLayout: function(Layout) {
		var _this = flixel_FlxG.game["debugger"];
		_this._layout = Layout;
		_this.resetLayout();
	}
	,resetLayout: function() {
		flixel_FlxG.game["debugger"].resetLayout();
	}
	,addButton: function(Alignment,Icon,UpHandler,ToggleMode,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = true;
		}
		if(ToggleMode == null) {
			ToggleMode = false;
		}
		return flixel_FlxG.game["debugger"].addButton(Alignment,Icon,UpHandler,ToggleMode,UpdateLayout);
	}
	,track: function(ObjectOrClass,WindowTitle) {
		if(flixel_system_debug_watch_Tracker.objectsBeingTracked.indexOf(ObjectOrClass) != -1) {
			return null;
		}
		var profile = flixel_system_debug_watch_Tracker.findProfile(ObjectOrClass);
		if(profile == null) {
			flixel_FlxG.log.advanced("Could not find a tracking profile for object of class '" + flixel_util_FlxStringUtil.getClassName(ObjectOrClass,true) + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
			return null;
		} else {
			var _this = flixel_FlxG.game["debugger"];
			var $window = new flixel_system_debug_watch_Tracker(profile,ObjectOrClass,WindowTitle);
			_this._windows.push($window);
			_this.addChild($window);
			if(_this._screenBounds != null) {
				_this.updateBounds();
				$window.bound();
			}
			return $window;
		}
	}
	,addTrackerProfile: function(Profile) {
		if(Profile != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile);
		}
	}
	,removeButton: function(Button,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = true;
		}
		flixel_FlxG.game["debugger"].removeButton(Button,UpdateLayout);
	}
	,set_drawDebug: function(Value) {
		if(this.drawDebug == Value) {
			return this.drawDebug;
		}
		this.drawDebug = Value;
		this.drawDebugChanged.dispatch();
		return this.drawDebug;
	}
	,set_visible: function(Value) {
		if(this.visible == Value) {
			return this.visible;
		}
		this.visible = Value;
		flixel_FlxG.game["debugger"].set_visible(Value);
		if(!Value) {
			openfl_Lib.current.stage.set_focus(null);
			flixel_FlxG.game.onFocus(null);
		}
		this.visibilityChanged.dispatch();
		return this.visible;
	}
	,__class__: flixel_system_frontEnds_DebuggerFrontEnd
	,__properties__: {set_visible:"set_visible",set_drawDebug:"set_drawDebug"}
};
var flixel_system_frontEnds_HTML5FrontEnd = function() {
	this.browser = this.getBrowser();
	this.platform = this.getPlatform();
	this.onMobile = this.getOnMobile();
};
$hxClasses["flixel.system.frontEnds.HTML5FrontEnd"] = flixel_system_frontEnds_HTML5FrontEnd;
flixel_system_frontEnds_HTML5FrontEnd.__name__ = ["flixel","system","frontEnds","HTML5FrontEnd"];
flixel_system_frontEnds_HTML5FrontEnd.prototype = {
	browser: null
	,platform: null
	,onMobile: null
	,browserPosition: null
	,getBrowser: function() {
		if(this.userAgentContains(" OPR/")) {
			return flixel_system_frontEnds_FlxBrowser.OPERA;
		} else if(this.userAgentContains("chrome",true)) {
			return flixel_system_frontEnds_FlxBrowser.CHROME;
		} else if(window.navigator.appName == "Netscape") {
			return flixel_system_frontEnds_FlxBrowser.FIREFOX;
		} else if(!(!document.documentMode)) {
			return flixel_system_frontEnds_FlxBrowser.INTERNET_EXPLORER;
		} else if(Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor") > 0) {
			return flixel_system_frontEnds_FlxBrowser.SAFARI;
		}
		return flixel_system_frontEnds_FlxBrowser.UNKNOWN;
	}
	,getPlatform: function() {
		if(this.userAgentContains("Win")) {
			return flixel_system_frontEnds_FlxPlatform.WINDOWS;
		} else if(this.userAgentContains("Mac") && !this.userAgentContains("iPad")) {
			return flixel_system_frontEnds_FlxPlatform.MAC;
		} else if(this.userAgentContains("Linux") && !this.userAgentContains("Android")) {
			return flixel_system_frontEnds_FlxPlatform.LINUX;
		} else if(this.userAgentContains("IEMobile")) {
			return flixel_system_frontEnds_FlxPlatform.WINDOWS_PHONE;
		} else if(this.userAgentContains("Android")) {
			return flixel_system_frontEnds_FlxPlatform.ANDROID;
		} else if(this.userAgentContains("BlackBerry")) {
			return flixel_system_frontEnds_FlxPlatform.BLACKBERRY;
		} else if(this.userAgentContains("iPhone")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPHONE);
		} else if(this.userAgentContains("iPad")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPAD);
		} else if(this.userAgentContains("iPod")) {
			return flixel_system_frontEnds_FlxPlatform.IOS(flixel_system_frontEnds_FlxIOSDevice.IPOD);
		} else {
			return flixel_system_frontEnds_FlxPlatform.UNKNOWN;
		}
	}
	,getOnMobile: function() {
		var _g = this.platform;
		switch(_g[1]) {
		case 3:case 4:case 5:case 6:
			return true;
		default:
			return false;
		}
	}
	,userAgentContains: function(substring,toLowerCase) {
		if(toLowerCase == null) {
			toLowerCase = false;
		}
		var userAgent = window.navigator.userAgent;
		if(toLowerCase) {
			userAgent = userAgent.toLowerCase();
		}
		return userAgent.indexOf(substring) != -1;
	}
	,get_browserPosition: function() {
		if(this.browserPosition == null) {
			var point = flixel_math_FlxPoint._pool.get().set(0,0);
			point._inPool = false;
			this.browserPosition = point;
		}
		this.browserPosition.set(window.screenX,window.screenY);
		return this.browserPosition;
	}
	,get_browserWidth: function() {
		return window.innerWidth;
	}
	,get_browserHeight: function() {
		return window.innerHeight;
	}
	,__class__: flixel_system_frontEnds_HTML5FrontEnd
	,__properties__: {get_browserPosition:"get_browserPosition",get_browserHeight:"get_browserHeight",get_browserWidth:"get_browserWidth"}
};
var flixel_system_frontEnds_InputFrontEnd = function() {
	this.resetOnStateSwitch = true;
	this.list = [];
};
$hxClasses["flixel.system.frontEnds.InputFrontEnd"] = flixel_system_frontEnds_InputFrontEnd;
flixel_system_frontEnds_InputFrontEnd.__name__ = ["flixel","system","frontEnds","InputFrontEnd"];
flixel_system_frontEnds_InputFrontEnd.prototype = {
	replace_flixel_input_mouse_FlxMouse: function(Old,New) {
		var i = 0;
		var success = false;
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(input == Old) {
				this.list[i] = New;
				success = true;
				break;
			}
			++i;
		}
		if(success) {
			return New;
		}
		return null;
	}
	,add_flixel_input_touch_FlxTouchManager: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_mouse_FlxMouse: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,add_flixel_input_keyboard_FlxKeyboard: function(Input) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Input,true) == flixel_util_FlxStringUtil.getClassName(input,true)) {
				return Input;
			}
		}
		this.list.push(Input);
		return Input;
	}
	,list: null
	,resetOnStateSwitch: null
	,reset: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.reset();
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,onFocus: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,onStateSwitch: function() {
		if(this.resetOnStateSwitch) {
			this.reset();
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input = flixel_util_FlxDestroyUtil.destroy(input);
		}
	}
	,__class__: flixel_system_frontEnds_InputFrontEnd
};
var flixel_system_frontEnds_LogFrontEnd = function() {
	this.redirectTraces = false;
	this._standardTraceFunction = haxe_Log.trace;
};
$hxClasses["flixel.system.frontEnds.LogFrontEnd"] = flixel_system_frontEnds_LogFrontEnd;
flixel_system_frontEnds_LogFrontEnd.__name__ = ["flixel","system","frontEnds","LogFrontEnd"];
flixel_system_frontEnds_LogFrontEnd.prototype = {
	redirectTraces: null
	,_standardTraceFunction: null
	,add: function(Data) {
		this.advanced(Data,flixel_system_debug_log_LogStyle.NORMAL);
	}
	,warn: function(Data) {
		this.advanced(Data,flixel_system_debug_log_LogStyle.WARNING,true);
	}
	,error: function(Data) {
		this.advanced(Data,flixel_system_debug_log_LogStyle.ERROR,true);
	}
	,notice: function(Data) {
		this.advanced(Data,flixel_system_debug_log_LogStyle.NOTICE);
	}
	,advanced: function(Data,Style,FireOnce) {
		if(FireOnce == null) {
			FireOnce = false;
		}
		if(flixel_FlxG.game["debugger"] == null) {
			this._standardTraceFunction(Data);
			return;
		}
		if(Style == null) {
			Style = flixel_system_debug_log_LogStyle.NORMAL;
		}
		if(!((Data instanceof Array) && Data.__enum__ == null)) {
			Data = [Data];
		}
		if(flixel_FlxG.game["debugger"].log.add(Data,Style,FireOnce)) {
			if(Style.errorSound != null) {
				var extension = "";
				extension = ".ogg";
				var sound = openfl_Assets.getSound(Style.errorSound + extension);
				if(sound != null) {
					flixel_FlxG.sound.load(sound).play();
				}
			}
			if(Style.openConsole) {
				flixel_FlxG["debugger"].set_visible(true);
			}
			if(Style.callbackFunction != null) {
				Style.callbackFunction();
			}
		}
	}
	,clear: function() {
		flixel_FlxG.game["debugger"].log.clear();
	}
	,set_redirectTraces: function(Redirect) {
		haxe_Log.trace = Redirect ? $bind(this,this.processTraceData) : this._standardTraceFunction;
		return this.redirectTraces = Redirect;
	}
	,processTraceData: function(Data,Info) {
		var paramArray = [Data];
		if(Info.customParams != null) {
			var _g = 0;
			var _g1 = Info.customParams;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				paramArray.push(i);
			}
		}
		this.advanced(paramArray,flixel_system_debug_log_LogStyle.NORMAL);
	}
	,__class__: flixel_system_frontEnds_LogFrontEnd
	,__properties__: {set_redirectTraces:"set_redirectTraces"}
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var flixel_math_FlxRandom = function(InitialSeed) {
	this.internalSeed = 1;
	this._floatNormalRho = 0;
	this._twoPI = Math.PI * 2;
	this._floatNormalRand2 = 0;
	this._floatNormalRand1 = 0;
	this._hasFloatNormalSpare = false;
	this.initialSeed = 1;
	if(InitialSeed != null) {
		var lowerBound = InitialSeed < 1 ? 1 : InitialSeed;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound1 = NewSeed < 1 ? 1 : NewSeed;
		this.initialSeed = (this.internalSeed = (lowerBound1 > 2147483646 ? 2147483646 : lowerBound1) | 0) | 0;
	} else {
		var Value = Math.random() * 2147483647 | 0;
		var lowerBound2 = Value < 1 ? 1 : Value;
		var NewSeed1 = (lowerBound2 > 2147483646 ? 2147483646 : lowerBound2) | 0;
		var lowerBound3 = NewSeed1 < 1 ? 1 : NewSeed1;
		var NewSeed2 = (lowerBound3 > 2147483646 ? 2147483646 : lowerBound3) | 0;
		var lowerBound4 = NewSeed2 < 1 ? 1 : NewSeed2;
		this.initialSeed = (this.internalSeed = (lowerBound4 > 2147483646 ? 2147483646 : lowerBound4) | 0) | 0;
	}
};
$hxClasses["flixel.math.FlxRandom"] = flixel_math_FlxRandom;
flixel_math_FlxRandom.__name__ = ["flixel","math","FlxRandom"];
flixel_math_FlxRandom.rangeBound = function(Value) {
	var lowerBound = Value < 1 ? 1 : Value;
	return (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
};
flixel_math_FlxRandom.prototype = {
	getObject_entities_EmoteState: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g2 = 0;
				var _g1 = Objects.length;
				while(_g2 < _g1) {
					++_g2;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max1 = Objects.length - 1;
			var lowerBound1 = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g3 = [];
			var _g21 = StartIndex;
			var _g11 = EndIndex + 1;
			while(_g21 < _g11) {
				var i = _g21++;
				_g3.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g3;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,getObject_flixel_group_FlxTypedGroup_T: function(Objects,WeightsArray,StartIndex,EndIndex) {
		if(StartIndex == null) {
			StartIndex = 0;
		}
		var selected = null;
		if(Objects.length != 0) {
			if(WeightsArray == null) {
				var _g = [];
				var _g2 = 0;
				var _g1 = Objects.length;
				while(_g2 < _g1) {
					++_g2;
					_g.push(1);
				}
				WeightsArray = _g;
			}
			if(EndIndex == null) {
				EndIndex = Objects.length - 1;
			}
			var Max = Objects.length - 1;
			var lowerBound = StartIndex < 0 ? 0 : StartIndex;
			StartIndex = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
			var Max1 = Objects.length - 1;
			var lowerBound1 = EndIndex < 0 ? 0 : EndIndex;
			EndIndex = (Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1) | 0;
			if(EndIndex < StartIndex) {
				StartIndex += EndIndex;
				EndIndex = StartIndex - EndIndex;
				StartIndex -= EndIndex;
			}
			if(EndIndex > WeightsArray.length - 1) {
				EndIndex = WeightsArray.length - 1;
			}
			var _g3 = [];
			var _g21 = StartIndex;
			var _g11 = EndIndex + 1;
			while(_g21 < _g11) {
				var i = _g21++;
				_g3.push(WeightsArray[i]);
			}
			flixel_math_FlxRandom._arrayFloatHelper = _g3;
			selected = Objects[StartIndex + this.weightedPick(flixel_math_FlxRandom._arrayFloatHelper)];
		}
		return selected;
	}
	,initialSeed: null
	,resetInitialSeed: function() {
		var Value = Math.random() * 2147483647 | 0;
		var lowerBound = Value < 1 ? 1 : Value;
		var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound1 = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed1 = (lowerBound1 > 2147483646 ? 2147483646 : lowerBound1) | 0;
		var lowerBound2 = NewSeed1 < 1 ? 1 : NewSeed1;
		return this.initialSeed = (this.internalSeed = (lowerBound2 > 2147483646 ? 2147483646 : lowerBound2) | 0) | 0;
	}
	,'int': function(Min,Max,Excludes) {
		if(Max == null) {
			Max = 2147483647;
		}
		if(Min == null) {
			Min = 0;
		}
		if(Min == 0 && Max == 2147483647 && Excludes == null) {
			return (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) | 0;
		} else if(Min == Max) {
			return Min;
		} else {
			if(Min > Max) {
				Min += Max;
				Max = Min - Max;
				Min -= Max;
			}
			if(Excludes == null) {
				return Math.floor(Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min + 1));
			} else {
				var result = 0;
				while(true) {
					result = Math.floor(Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min + 1));
					if(!(Excludes.indexOf(result) >= 0)) {
						break;
					}
				}
				return result;
			}
		}
	}
	,'float': function(Min,Max,Excludes) {
		if(Max == null) {
			Max = 1;
		}
		if(Min == null) {
			Min = 0;
		}
		var result = 0;
		if(Min == 0 && Max == 1 && Excludes == null) {
			return (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647;
		} else if(Min == Max) {
			result = Min;
		} else {
			if(Min > Max) {
				Min += Max;
				Max = Min - Max;
				Min -= Max;
			}
			if(Excludes == null) {
				result = Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min);
			} else {
				while(true) {
					result = Min + (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647 * (Max - Min);
					if(!(Excludes.indexOf(result) >= 0)) {
						break;
					}
				}
			}
		}
		return result;
	}
	,_hasFloatNormalSpare: null
	,_floatNormalRand1: null
	,_floatNormalRand2: null
	,_twoPI: null
	,_floatNormalRho: null
	,floatNormal: function(Mean,StdDev) {
		if(StdDev == null) {
			StdDev = 1;
		}
		if(Mean == null) {
			Mean = 0;
		}
		if(this._hasFloatNormalSpare) {
			this._hasFloatNormalSpare = false;
			var scale = StdDev * this._floatNormalRho;
			return Mean + scale * this._floatNormalRand2;
		}
		this._hasFloatNormalSpare = true;
		var theta = this._twoPI * ((this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647);
		this._floatNormalRho = Math.sqrt(-2 * Math.log(1 - (this.internalSeed = this.internalSeed * 48271.0 % 2147483647) / 2147483647));
		var scale1 = StdDev * this._floatNormalRho;
		this._floatNormalRand1 = Math.cos(theta);
		this._floatNormalRand2 = Math.sin(theta);
		return Mean + scale1 * this._floatNormalRand1;
	}
	,bool: function(Chance) {
		if(Chance == null) {
			Chance = 50;
		}
		return this["float"](0,100) < Chance;
	}
	,sign: function(Chance) {
		if(Chance == null) {
			Chance = 50;
		}
		if(this["float"](0,100) < Chance) {
			return 1;
		} else {
			return -1;
		}
	}
	,weightedPick: function(WeightsArray) {
		var totalWeight = 0;
		var pick = 0;
		var _g = 0;
		while(_g < WeightsArray.length) {
			var i = WeightsArray[_g];
			++_g;
			totalWeight += i;
		}
		totalWeight = this["float"](0,totalWeight);
		var _g1 = 0;
		var _g2 = WeightsArray.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			if(totalWeight < WeightsArray[i1]) {
				pick = i1;
				break;
			}
			totalWeight -= WeightsArray[i1];
		}
		return pick;
	}
	,color: function(Min,Max,Alpha,GreyScale) {
		if(GreyScale == null) {
			GreyScale = false;
		}
		var red;
		var green;
		var blue;
		var alpha;
		if(Min == null && Max == null) {
			red = this["int"](0,255);
			green = this["int"](0,255);
			blue = this["int"](0,255);
			if(Alpha == null) {
				alpha = this["int"](0,255);
			} else {
				alpha = Alpha;
			}
		} else if(Max == null) {
			red = this["int"](Min >> 16 & 255,255);
			if(GreyScale) {
				green = red;
			} else {
				green = this["int"](Min >> 8 & 255,255);
			}
			if(GreyScale) {
				blue = red;
			} else {
				blue = this["int"](Min & 255,255);
			}
			if(Alpha == null) {
				alpha = this["int"](Min >> 24 & 255,255);
			} else {
				alpha = Alpha;
			}
		} else if(Min == null) {
			red = this["int"](0,Max >> 16 & 255);
			if(GreyScale) {
				green = red;
			} else {
				green = this["int"](0,Max >> 8 & 255);
			}
			if(GreyScale) {
				blue = red;
			} else {
				blue = this["int"](0,Max & 255);
			}
			if(Alpha == null) {
				alpha = this["int"](0,Max >> 24 & 255);
			} else {
				alpha = Alpha;
			}
		} else {
			red = this["int"](Min >> 16 & 255,Max >> 16 & 255);
			if(GreyScale) {
				green = red;
			} else {
				green = this["int"](Min >> 8 & 255,Max >> 8 & 255);
			}
			if(GreyScale) {
				blue = red;
			} else {
				blue = this["int"](Min & 255,Max & 255);
			}
			if(Alpha == null) {
				alpha = this["int"](Min >> 24 & 255,Max >> 24 & 255);
			} else {
				alpha = Alpha;
			}
		}
		var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
		color &= -16711681;
		color |= (red > 255 ? 255 : red < 0 ? 0 : red) << 16;
		color &= -65281;
		color |= (green > 255 ? 255 : green < 0 ? 0 : green) << 8;
		color &= -256;
		color |= blue > 255 ? 255 : blue < 0 ? 0 : blue;
		color &= 16777215;
		color |= (alpha > 255 ? 255 : alpha < 0 ? 0 : alpha) << 24;
		return color;
	}
	,generate: function() {
		return this.internalSeed = this.internalSeed * 48271.0 % 2147483647;
	}
	,internalSeed: null
	,set_initialSeed: function(NewSeed) {
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		var NewSeed1 = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
		var lowerBound1 = NewSeed1 < 1 ? 1 : NewSeed1;
		return this.initialSeed = (this.internalSeed = (lowerBound1 > 2147483646 ? 2147483646 : lowerBound1) | 0) | 0;
	}
	,get_currentSeed: function() {
		return this.internalSeed | 0;
	}
	,set_currentSeed: function(NewSeed) {
		var lowerBound = NewSeed < 1 ? 1 : NewSeed;
		return (this.internalSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0) | 0;
	}
	,__class__: flixel_math_FlxRandom
	,__properties__: {set_currentSeed:"set_currentSeed",get_currentSeed:"get_currentSeed",set_initialSeed:"set_initialSeed"}
};
var flixel_util_FlxSave = function() {
	this._closeRequested = false;
};
$hxClasses["flixel.util.FlxSave"] = flixel_util_FlxSave;
flixel_util_FlxSave.__name__ = ["flixel","util","FlxSave"];
flixel_util_FlxSave.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_FlxSave.prototype = {
	data: null
	,name: null
	,_sharedObject: null
	,_onComplete: null
	,_closeRequested: null
	,destroy: function() {
		this._sharedObject = null;
		this.name = null;
		this.data = null;
		this._onComplete = null;
		this._closeRequested = false;
	}
	,bind: function(Name) {
		this.destroy();
		this.name = Name;
		try {
			this._sharedObject = openfl_net_SharedObject.getLocal(this.name);
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				flixel_FlxG.log.advanced("There was a problem binding to\nthe shared object data from FlxSave.",flixel_system_debug_log_LogStyle.ERROR,true);
				this.destroy();
				return false;
			} else throw(e);
		}
		this.data = this._sharedObject.data;
		return true;
	}
	,close: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) {
			MinFileSize = 0;
		}
		this._closeRequested = true;
		return this.flush(MinFileSize,OnComplete);
	}
	,flush: function(MinFileSize,OnComplete) {
		if(MinFileSize == null) {
			MinFileSize = 0;
		}
		if(!this.checkBinding()) {
			return false;
		}
		this._onComplete = OnComplete;
		var result = null;
		try {
			result = this._sharedObject.flush();
		} catch( _ ) {
			if (_ instanceof js__$Boot_HaxeError) _ = _.val;
			if( js_Boot.__instanceof(_,openfl_errors_Error) ) {
				return this.onDone(flixel_util_FlxSaveStatus.ERROR);
			} else throw(_);
		}
		return this.onDone(result == 0 ? flixel_util_FlxSaveStatus.SUCCESS : flixel_util_FlxSaveStatus.PENDING);
	}
	,erase: function() {
		if(!this.checkBinding()) {
			return false;
		}
		this._sharedObject.clear();
		this.data = { };
		return true;
	}
	,onDone: function(Result) {
		switch(Result[1]) {
		case 1:
			flixel_FlxG.log.advanced("FlxSave is requesting extra storage space.",flixel_system_debug_log_LogStyle.WARNING,true);
			break;
		case 2:
			flixel_FlxG.log.advanced("There was a problem flushing\nthe shared object data from FlxSave.",flixel_system_debug_log_LogStyle.ERROR,true);
			break;
		default:
		}
		if(this._onComplete != null) {
			this._onComplete(Result == flixel_util_FlxSaveStatus.SUCCESS);
		}
		if(this._closeRequested) {
			this.destroy();
		}
		return Result == flixel_util_FlxSaveStatus.SUCCESS;
	}
	,checkBinding: function() {
		if(this._sharedObject == null) {
			flixel_FlxG.log.advanced("You must call FlxSave.bind()\nbefore you can read or write data.",flixel_system_debug_log_LogStyle.WARNING,true);
			return false;
		}
		return true;
	}
	,__class__: flixel_util_FlxSave
};
var flixel_system_scaleModes_BaseScaleMode = function() {
	this.verticalAlign = flixel_util_FlxVerticalAlign.CENTER;
	this.horizontalAlign = flixel_util_FlxHorizontalAlign.CENTER;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.deviceSize = point;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	this.gameSize = point1;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,0);
	point2._inPool = false;
	this.scale = point2;
	var point3 = flixel_math_FlxPoint._pool.get().set(0,0);
	point3._inPool = false;
	this.offset = point3;
};
$hxClasses["flixel.system.scaleModes.BaseScaleMode"] = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_BaseScaleMode.__name__ = ["flixel","system","scaleModes","BaseScaleMode"];
flixel_system_scaleModes_BaseScaleMode.prototype = {
	deviceSize: null
	,gameSize: null
	,scale: null
	,offset: null
	,horizontalAlign: null
	,verticalAlign: null
	,onMeasure: function(Width,Height) {
		flixel_FlxG.width = flixel_FlxG.initialWidth;
		flixel_FlxG.height = flixel_FlxG.initialHeight;
		this.updateGameSize(Width,Height);
		this.updateDeviceSize(Width,Height);
		this.updateScaleOffset();
		this.updateGamePosition();
	}
	,updateGameSize: function(Width,Height) {
		this.gameSize.set(Width,Height);
	}
	,updateDeviceSize: function(Width,Height) {
		this.deviceSize.set(Width,Height);
	}
	,updateScaleOffset: function() {
		this.scale.set_x(this.gameSize.x / (flixel_FlxG.width * flixel_FlxG.initialZoom));
		this.scale.set_y(this.gameSize.y / (flixel_FlxG.height * flixel_FlxG.initialZoom));
		this.updateOffsetX();
		this.updateOffsetY();
	}
	,updateOffsetX: function() {
		var _g = this.horizontalAlign;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = 0;
			break;
		case 1:
			tmp = Math.ceil((this.deviceSize.x - this.gameSize.x) * 0.5);
			break;
		case 2:
			tmp = this.deviceSize.x - this.gameSize.x;
			break;
		}
		this.offset.set_x(tmp);
	}
	,updateOffsetY: function() {
		var _g = this.verticalAlign;
		var tmp;
		switch(_g[1]) {
		case 0:
			tmp = 0;
			break;
		case 1:
			tmp = Math.ceil((this.deviceSize.y - this.gameSize.y) * 0.5);
			break;
		case 2:
			tmp = this.deviceSize.y - this.gameSize.y;
			break;
		}
		this.offset.set_y(tmp);
	}
	,updateGamePosition: function() {
		if(flixel_FlxG.game == null) {
			return;
		}
		flixel_FlxG.game.set_x(this.offset.x);
		flixel_FlxG.game.set_y(this.offset.y);
	}
	,set_horizontalAlign: function(value) {
		this.horizontalAlign = value;
		if(this.offset != null) {
			this.updateOffsetX();
			this.updateGamePosition();
		}
		return value;
	}
	,set_verticalAlign: function(value) {
		this.verticalAlign = value;
		if(this.offset != null) {
			this.updateOffsetY();
			this.updateGamePosition();
		}
		return value;
	}
	,__class__: flixel_system_scaleModes_BaseScaleMode
	,__properties__: {set_verticalAlign:"set_verticalAlign",set_horizontalAlign:"set_horizontalAlign"}
};
var flixel_system_scaleModes_RatioScaleMode = function(fillScreen) {
	if(fillScreen == null) {
		fillScreen = false;
	}
	flixel_system_scaleModes_BaseScaleMode.call(this);
	this.fillScreen = fillScreen;
};
$hxClasses["flixel.system.scaleModes.RatioScaleMode"] = flixel_system_scaleModes_RatioScaleMode;
flixel_system_scaleModes_RatioScaleMode.__name__ = ["flixel","system","scaleModes","RatioScaleMode"];
flixel_system_scaleModes_RatioScaleMode.__super__ = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_RatioScaleMode.prototype = $extend(flixel_system_scaleModes_BaseScaleMode.prototype,{
	fillScreen: null
	,updateGameSize: function(Width,Height) {
		var ratio = flixel_FlxG.width / flixel_FlxG.height;
		var realRatio = Width / Height;
		var scaleY = realRatio < ratio;
		if(this.fillScreen) {
			scaleY = !scaleY;
		}
		if(scaleY) {
			this.gameSize.set_x(Width);
			this.gameSize.set_y(Math.floor(this.gameSize.x / ratio));
		} else {
			this.gameSize.set_y(Height);
			this.gameSize.set_x(Math.floor(this.gameSize.y * ratio));
		}
	}
	,__class__: flixel_system_scaleModes_RatioScaleMode
});
var flixel_system_frontEnds_SignalFrontEnd = function() {
	this.focusLost = new flixel_util__$FlxSignal_FlxSignal0();
	this.focusGained = new flixel_util__$FlxSignal_FlxSignal0();
	this.postDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.preDraw = new flixel_util__$FlxSignal_FlxSignal0();
	this.postUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.preUpdate = new flixel_util__$FlxSignal_FlxSignal0();
	this.gameStarted = new flixel_util__$FlxSignal_FlxSignal0();
	this.postGameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.preGameReset = new flixel_util__$FlxSignal_FlxSignal0();
	this.gameResized = new flixel_util__$FlxSignal_FlxSignal2();
	this.preStateCreate = new flixel_util__$FlxSignal_FlxSignal1();
	this.stateSwitched = new flixel_util__$FlxSignal_FlxSignal0();
};
$hxClasses["flixel.system.frontEnds.SignalFrontEnd"] = flixel_system_frontEnds_SignalFrontEnd;
flixel_system_frontEnds_SignalFrontEnd.__name__ = ["flixel","system","frontEnds","SignalFrontEnd"];
flixel_system_frontEnds_SignalFrontEnd.prototype = {
	stateSwitched: null
	,preStateCreate: null
	,gameResized: null
	,preGameReset: null
	,postGameReset: null
	,gameStarted: null
	,preUpdate: null
	,postUpdate: null
	,preDraw: null
	,postDraw: null
	,focusGained: null
	,focusLost: null
	,__class__: flixel_system_frontEnds_SignalFrontEnd
};
var flixel_system_frontEnds_WatchFrontEnd = function() {
};
$hxClasses["flixel.system.frontEnds.WatchFrontEnd"] = flixel_system_frontEnds_WatchFrontEnd;
flixel_system_frontEnds_WatchFrontEnd.__name__ = ["flixel","system","frontEnds","WatchFrontEnd"];
flixel_system_frontEnds_WatchFrontEnd.prototype = {
	add: function(object,field,displayName) {
		flixel_FlxG.game["debugger"].watch.add(displayName,flixel_system_debug_watch_WatchEntryData.FIELD(object,field));
	}
	,remove: function(object,field) {
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(object,field));
	}
	,addQuick: function(displayName,value) {
		flixel_FlxG.game["debugger"].watch.add(displayName,flixel_system_debug_watch_WatchEntryData.QUICK(value));
	}
	,removeQuick: function(displayName) {
		flixel_FlxG.game["debugger"].watch.remove(displayName,flixel_system_debug_watch_WatchEntryData.QUICK(null));
	}
	,addExpression: function(expression,displayName) {
		flixel_FlxG.game["debugger"].watch.add(displayName,flixel_system_debug_watch_WatchEntryData.EXPRESSION(expression));
	}
	,removeExpression: function(expression) {
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.EXPRESSION(expression));
	}
	,addMouse: function() {
		flixel_FlxG.game["debugger"].watch.add("Mouse Position",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_FlxG,"mouse"));
	}
	,removeMouse: function() {
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_FlxG,"mouse"));
	}
	,__class__: flixel_system_frontEnds_WatchFrontEnd
};
var flixel_FlxG = function() { };
$hxClasses["flixel.FlxG"] = flixel_FlxG;
flixel_FlxG.__name__ = ["flixel","FlxG"];
flixel_FlxG.__properties__ = {set_mouse:"set_mouse",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_scaleMode:"set_scaleMode",get_onMobile:"get_onMobile",set_drawFramerate:"set_drawFramerate",set_updateFramerate:"set_updateFramerate",get_state:"get_state",get_stage:"get_stage"}
flixel_FlxG.camera = null;
flixel_FlxG.game = null;
flixel_FlxG.updateFramerate = null;
flixel_FlxG.drawFramerate = null;
flixel_FlxG.renderMethod = null;
flixel_FlxG.renderBlit = null;
flixel_FlxG.renderTile = null;
flixel_FlxG.width = null;
flixel_FlxG.height = null;
flixel_FlxG.mouse = null;
flixel_FlxG.touches = null;
flixel_FlxG.keys = null;
flixel_FlxG.vcr = null;
flixel_FlxG.plugins = null;
flixel_FlxG.sound = null;
flixel_FlxG.resizeGame = function(Width,Height) {
	flixel_FlxG.scaleMode.onMeasure(Width,Height);
};
flixel_FlxG.resizeWindow = function(Width,Height) {
};
flixel_FlxG.resetGame = function() {
	flixel_FlxG.game._resetGame = true;
};
flixel_FlxG.switchState = function(nextState) {
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
flixel_FlxG.resetState = function() {
	var o = flixel_FlxG.game._state;
	var nextState = Type.createInstance(o == null ? null : js_Boot.getClass(o),[]);
	if(flixel_FlxG.game._state.switchTo(nextState)) {
		flixel_FlxG.game._requestedState = nextState;
	}
};
flixel_FlxG.overlap = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
	if(ObjectOrGroup1 == null) {
		ObjectOrGroup1 = flixel_FlxG.game._state;
	}
	if(ObjectOrGroup2 == ObjectOrGroup1) {
		ObjectOrGroup2 = null;
	}
	flixel_system_FlxQuadTree.divisions = flixel_FlxG.worldDivisions;
	var quadTree = flixel_system_FlxQuadTree.recycle(flixel_FlxG.worldBounds.x,flixel_FlxG.worldBounds.y,flixel_FlxG.worldBounds.width,flixel_FlxG.worldBounds.height);
	quadTree.load(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback);
	var result = quadTree.execute();
	quadTree.destroy();
	return result;
};
flixel_FlxG.pixelPerfectOverlap = function(Sprite1,Sprite2,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) {
		AlphaTolerance = 255;
	}
	return flixel_util_FlxCollision.pixelPerfectCheck(Sprite1,Sprite2,AlphaTolerance,Camera);
};
flixel_FlxG.collide = function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback) {
	return flixel_FlxG.overlap(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,flixel_FlxObject.separate);
};
flixel_FlxG.addPostProcess = function(postProcess) {
	return postProcess;
};
flixel_FlxG.removePostProcess = function(postProcess) {
};
flixel_FlxG.openURL = function(URL,Target) {
	if(Target == null) {
		Target = "_blank";
	}
	var prefix = "";
	if(!new EReg("^https?://","").match(URL)) {
		prefix = "http://";
	}
	openfl_Lib.getURL(new openfl_net_URLRequest(prefix + URL),Target);
};
flixel_FlxG.init = function(Game,Width,Height,Zoom) {
	flixel_FlxG.game = Game;
	flixel_FlxG.width = Math.abs(Width) | 0;
	flixel_FlxG.height = Math.abs(Height) | 0;
	flixel_FlxG.initRenderMethod();
	flixel_FlxG.initialWidth = flixel_FlxG.width;
	flixel_FlxG.initialHeight = flixel_FlxG.height;
	flixel_FlxG.initialZoom = flixel_FlxCamera.defaultZoom = Zoom;
	flixel_FlxG.scaleMode.onMeasure(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
	flixel_FlxG.keys = flixel_FlxG.inputs.add_flixel_input_keyboard_FlxKeyboard(new flixel_input_keyboard_FlxKeyboard());
	flixel_FlxG.set_mouse(flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(new flixel_input_mouse_FlxMouse(flixel_FlxG.game._inputContainer)));
	flixel_FlxG.touches = flixel_FlxG.inputs.add_flixel_input_touch_FlxTouchManager(new flixel_input_touch_FlxTouchManager());
	flixel_FlxG.save.bind("flixel");
	flixel_FlxG.plugins = new flixel_system_frontEnds_PluginFrontEnd();
	flixel_FlxG.vcr = new flixel_system_frontEnds_VCRFrontEnd();
	flixel_FlxG.sound = new flixel_system_frontEnds_SoundFrontEnd();
};
flixel_FlxG.initRenderMethod = function() {
	flixel_FlxG.renderMethod = flixel_FlxRenderMethod.BLITTING;
	if(!openfl_Lib.application.config.windows[0].hardware) {
		flixel_FlxG.renderMethod = flixel_FlxRenderMethod.BLITTING;
	} else {
		var _g = openfl_Lib.current.stage.window.renderer.type;
		var tmp;
		switch(_g[1]) {
		case 1:case 3:case 4:
			tmp = flixel_FlxRenderMethod.BLITTING;
			break;
		case 0:case 5:
			tmp = flixel_FlxRenderMethod.DRAW_TILES;
			break;
		default:
			tmp = flixel_FlxRenderMethod.BLITTING;
		}
		flixel_FlxG.renderMethod = tmp;
	}
	flixel_FlxG.renderBlit = flixel_FlxG.renderMethod == flixel_FlxRenderMethod.BLITTING;
	flixel_FlxG.renderTile = flixel_FlxG.renderMethod == flixel_FlxRenderMethod.DRAW_TILES;
	flixel_FlxObject.defaultPixelPerfectPosition = flixel_FlxG.renderBlit;
};
flixel_FlxG.reset = function() {
	var _this = flixel_FlxG.random;
	var Value = Math.random() * 2147483647 | 0;
	var lowerBound = Value < 1 ? 1 : Value;
	var NewSeed = (lowerBound > 2147483646 ? 2147483646 : lowerBound) | 0;
	var lowerBound1 = NewSeed < 1 ? 1 : NewSeed;
	var NewSeed1 = (lowerBound1 > 2147483646 ? 2147483646 : lowerBound1) | 0;
	var lowerBound2 = NewSeed1 < 1 ? 1 : NewSeed1;
	_this.initialSeed = (_this.internalSeed = (lowerBound2 > 2147483646 ? 2147483646 : lowerBound2) | 0) | 0;
	flixel_FlxG.bitmap.reset();
	flixel_FlxG.inputs.reset();
	flixel_FlxG.sound.destroy(true);
	flixel_FlxG.autoPause = true;
	flixel_FlxG.fixedTimestep = true;
	flixel_FlxG.timeScale = 1.0;
	flixel_FlxG.elapsed = 0;
	flixel_FlxG.maxElapsed = 0.1;
	var _this1 = flixel_FlxG.worldBounds;
	_this1.x = -10;
	_this1.y = -10;
	_this1.width = flixel_FlxG.width + 20;
	_this1.height = flixel_FlxG.height + 20;
	flixel_FlxG.worldDivisions = 6;
};
flixel_FlxG.set_scaleMode = function(ScaleMode) {
	flixel_FlxG.scaleMode = ScaleMode;
	flixel_FlxG.game.onResize(null);
	return ScaleMode;
};
flixel_FlxG.set_mouse = function(NewMouse) {
	if(flixel_FlxG.mouse == null) {
		flixel_FlxG.mouse = flixel_FlxG.inputs.add_flixel_input_mouse_FlxMouse(NewMouse);
		return flixel_FlxG.mouse;
	}
	var oldMouse = flixel_FlxG.mouse;
	var result = flixel_FlxG.inputs.replace_flixel_input_mouse_FlxMouse(oldMouse,NewMouse);
	if(result != null) {
		flixel_FlxG.mouse = result;
		oldMouse.destroy();
		return NewMouse;
	}
	return oldMouse;
};
flixel_FlxG.set_updateFramerate = function(Framerate) {
	if(Framerate < flixel_FlxG.drawFramerate) {
		flixel_FlxG.log.advanced("FlxG.framerate: the game's framerate shouldn't be smaller than the flash framerate," + " since it can stop your game from updating.",flixel_system_debug_log_LogStyle.WARNING,true);
	}
	flixel_FlxG.updateFramerate = Framerate;
	flixel_FlxG.game._stepMS = Math.abs(1000 / Framerate);
	flixel_FlxG.game._stepSeconds = flixel_FlxG.game._stepMS / 1000;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) {
		flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	}
	return Framerate;
};
flixel_FlxG.set_drawFramerate = function(Framerate) {
	if(Framerate > flixel_FlxG.updateFramerate) {
		flixel_FlxG.log.advanced("FlxG.drawFramerate: the update framerate shouldn't be smaller than the draw framerate," + " since it can stop your game from updating.",flixel_system_debug_log_LogStyle.WARNING,true);
	}
	flixel_FlxG.drawFramerate = Math.abs(Framerate) | 0;
	if(flixel_FlxG.game.stage != null) {
		flixel_FlxG.game.stage.set_frameRate(flixel_FlxG.drawFramerate);
	}
	flixel_FlxG.game._maxAccumulation = 2000 / flixel_FlxG.drawFramerate - 1;
	if(flixel_FlxG.game._maxAccumulation < flixel_FlxG.game._stepMS) {
		flixel_FlxG.game._maxAccumulation = flixel_FlxG.game._stepMS;
	}
	return Framerate;
};
flixel_FlxG.get_fullscreen = function() {
	if(openfl_Lib.current.stage.get_displayState() != 0) {
		return openfl_Lib.current.stage.get_displayState() == 1;
	} else {
		return true;
	}
};
flixel_FlxG.set_fullscreen = function(Value) {
	openfl_Lib.current.stage.set_displayState(Value ? 0 : 2);
	return Value;
};
flixel_FlxG.get_stage = function() {
	return openfl_Lib.current.stage;
};
flixel_FlxG.get_state = function() {
	return flixel_FlxG.game._state;
};
flixel_FlxG.get_onMobile = function() {
	return flixel_FlxG.html5.onMobile;
};
var flixel_FlxRenderMethod = $hxClasses["flixel.FlxRenderMethod"] = { __ename__ : ["flixel","FlxRenderMethod"], __constructs__ : ["DRAW_TILES","BLITTING"] };
flixel_FlxRenderMethod.DRAW_TILES = ["DRAW_TILES",0];
flixel_FlxRenderMethod.DRAW_TILES.toString = $estr;
flixel_FlxRenderMethod.DRAW_TILES.__enum__ = flixel_FlxRenderMethod;
flixel_FlxRenderMethod.BLITTING = ["BLITTING",1];
flixel_FlxRenderMethod.BLITTING.toString = $estr;
flixel_FlxRenderMethod.BLITTING.__enum__ = flixel_FlxRenderMethod;
flixel_FlxRenderMethod.__empty_constructs__ = [flixel_FlxRenderMethod.DRAW_TILES,flixel_FlxRenderMethod.BLITTING];
var flixel_FlxGame = function(GameWidth,GameHeight,InitialState,Zoom,UpdateFramerate,DrawFramerate,SkipSplash,StartFullscreen) {
	if(StartFullscreen == null) {
		StartFullscreen = false;
	}
	if(SkipSplash == null) {
		SkipSplash = false;
	}
	if(DrawFramerate == null) {
		DrawFramerate = 60;
	}
	if(UpdateFramerate == null) {
		UpdateFramerate = 60;
	}
	if(Zoom == null) {
		Zoom = 1;
	}
	if(GameHeight == null) {
		GameHeight = 0;
	}
	if(GameWidth == null) {
		GameWidth = 0;
	}
	this._resetGame = false;
	this._skipSplash = false;
	this._customFocusLostScreen = flixel_system_ui_FlxFocusLostScreen;
	this._customSoundTray = flixel_system_ui_FlxSoundTray;
	this._lostFocus = false;
	this._startTime = 0;
	this._total = 0;
	this._gameJustStarted = false;
	this.filtersEnabled = true;
	this.ticks = 0;
	this.focusLostFramerate = 10;
	openfl_display_Sprite.call(this);
	this._inputContainer = new openfl_display_Sprite();
	if(GameWidth == 0) {
		GameWidth = openfl_Lib.current.stage.stageWidth;
	}
	if(GameHeight == 0) {
		GameHeight = openfl_Lib.current.stage.stageHeight;
	}
	flixel_FlxG.init(this,GameWidth,GameHeight,Zoom);
	flixel_FlxG.set_updateFramerate(UpdateFramerate);
	flixel_FlxG.set_drawFramerate(DrawFramerate);
	this._accumulator = this._stepMS;
	this._skipSplash = SkipSplash;
	this._initialState = InitialState == null ? flixel_FlxState : InitialState;
	this.addEventListener("addedToStage",$bind(this,this.create));
};
$hxClasses["flixel.FlxGame"] = flixel_FlxGame;
flixel_FlxGame.__name__ = ["flixel","FlxGame"];
flixel_FlxGame.__super__ = openfl_display_Sprite;
flixel_FlxGame.prototype = $extend(openfl_display_Sprite.prototype,{
	focusLostFramerate: null
	,soundTray: null
	,'debugger': null
	,ticks: null
	,filtersEnabled: null
	,_gameJustStarted: null
	,_initialState: null
	,_state: null
	,_total: null
	,_startTime: null
	,_accumulator: null
	,_elapsedMS: null
	,_stepMS: null
	,_stepSeconds: null
	,_maxAccumulation: null
	,_lostFocus: null
	,_filters: null
	,_focusLostScreen: null
	,_inputContainer: null
	,_customSoundTray: null
	,_customFocusLostScreen: null
	,_skipSplash: null
	,_requestedState: null
	,_resetGame: null
	,setFilters: function(filters) {
		this._filters = filters;
	}
	,create: function(_) {
		if(this.stage == null) {
			return;
		}
		this.removeEventListener("addedToStage",$bind(this,this.create));
		this._startTime = this.getTimer();
		this._total = this.getTimer() - this._startTime;
		this.stage.scaleMode = 2;
		this.stage.align = 6;
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		this.addChild(this._inputContainer);
		this["debugger"] = new flixel_system_debug_FlxDebugger(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
		this.addChild(this["debugger"]);
		this.soundTray = Type.createInstance(this._customSoundTray,[]);
		this.addChild(this.soundTray);
		this._focusLostScreen = Type.createInstance(this._customFocusLostScreen,[]);
		this.addChild(this._focusLostScreen);
		this.stage.addEventListener("deactivate",$bind(this,this.onFocusLost));
		this.stage.addEventListener("activate",$bind(this,this.onFocus));
		flixel_FlxG.signals.preGameReset.dispatch();
		this._skipSplash = true;
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) {
				this._gameJustStarted = true;
			}
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		if(js_Boot.__instanceof(this._requestedState,flixel_FlxSubState)) {
			throw new js__$Boot_HaxeError("You can't set FlxSubState class instance as the state for you game");
		}
		flixel_FlxG.reset();
		flixel_FlxG.signals.postGameReset.dispatch();
		this.switchState();
		if(flixel_FlxG.updateFramerate < flixel_FlxG.drawFramerate) {
			flixel_FlxG.log.advanced("FlxG.updateFramerate: The update framerate shouldn't be smaller" + " than the draw framerate, since it can slow down your game.",flixel_system_debug_log_LogStyle.WARNING,true);
		}
		this.stage.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.stage.addEventListener("resize",$bind(this,this.onResize));
		this.resizeGame(openfl_Lib.current.stage.stageWidth,openfl_Lib.current.stage.stageHeight);
		openfl_Assets.addEventListener("change",($_=flixel_FlxG.bitmap,$bind($_,$_.onAssetsReload)));
	}
	,onFocus: function(_) {
		this._lostFocus = false;
		flixel_FlxG.signals.focusGained.dispatch();
		if(!flixel_FlxG.autoPause) {
			return;
		}
		if(this._focusLostScreen != null) {
			this._focusLostScreen.set_visible(false);
		}
		this["debugger"].stats.onFocus();
		this.stage.set_frameRate(flixel_FlxG.drawFramerate);
		flixel_FlxG.sound.onFocus();
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocus();
		}
	}
	,onFocusLost: function(_) {
		this._lostFocus = true;
		flixel_FlxG.signals.focusLost.dispatch();
		this._state.onFocusLost();
		if(!flixel_FlxG.autoPause) {
			return;
		}
		if(this._focusLostScreen != null) {
			this._focusLostScreen.set_visible(true);
		}
		this["debugger"].stats.onFocusLost();
		this.stage.set_frameRate(this.focusLostFramerate);
		flixel_FlxG.sound.onFocusLost();
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.onFocusLost();
		}
	}
	,onResize: function(_) {
		var width = openfl_Lib.current.stage.stageWidth;
		var height = openfl_Lib.current.stage.stageHeight;
		if(flixel_FlxG.renderTile) {
			flixel_FlxG.bitmap.onContext();
		}
		this.resizeGame(width,height);
	}
	,resizeGame: function(width,height) {
		flixel_FlxG.scaleMode.onMeasure(width,height);
		this._state.onResize(width,height);
		flixel_FlxG.cameras.resize();
		flixel_FlxG.signals.gameResized.dispatch(width,height);
		this["debugger"].onResize(width,height);
		if(this._focusLostScreen != null) {
			this._focusLostScreen.draw();
		}
		if(this.soundTray != null) {
			this.soundTray.screenCenter();
		}
	}
	,onEnterFrame: function(_) {
		this.ticks = this.getTimer() - this._startTime;
		this._elapsedMS = this.ticks - this._total;
		this._total = this.ticks;
		if(this.soundTray != null && this.soundTray.active) {
			this.soundTray.update(this._elapsedMS);
		}
		if(!this._lostFocus || !flixel_FlxG.autoPause) {
			if(flixel_FlxG.vcr.paused) {
				if(flixel_FlxG.vcr.stepRequested) {
					flixel_FlxG.vcr.stepRequested = false;
				} else if(this._state == this._requestedState) {
					this["debugger"].update();
					if(this["debugger"].interaction.isActive()) {
						this.draw();
					}
					return;
				}
			}
			if(flixel_FlxG.fixedTimestep) {
				this._accumulator += this._elapsedMS;
				this._accumulator = this._accumulator > this._maxAccumulation ? this._maxAccumulation : this._accumulator;
				while(this._accumulator >= this._stepMS) {
					this.step();
					this._accumulator -= this._stepMS;
				}
			} else {
				this.step();
			}
			flixel_FlxBasic.visibleCount = 0;
			this.draw();
			this["debugger"].stats.visibleObjects(flixel_FlxBasic.visibleCount);
			this["debugger"].update();
		}
	}
	,resetGame: function() {
		flixel_FlxG.signals.preGameReset.dispatch();
		this._skipSplash = true;
		if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
			this._requestedState = Type.createInstance(this._initialState,[]);
			if(flixel_system_FlxSplash.nextState == null) {
				this._gameJustStarted = true;
			}
		} else {
			flixel_system_FlxSplash.nextState = this._initialState;
			this._requestedState = new flixel_system_FlxSplash();
			this._skipSplash = true;
		}
		if(js_Boot.__instanceof(this._requestedState,flixel_FlxSubState)) {
			throw new js__$Boot_HaxeError("You can't set FlxSubState class instance as the state for you game");
		}
		flixel_FlxG.reset();
		flixel_FlxG.signals.postGameReset.dispatch();
	}
	,switchState: function() {
		flixel_FlxG.cameras.reset();
		flixel_FlxG.inputs.onStateSwitch();
		flixel_FlxG.sound.destroy();
		flixel_FlxG.signals.stateSwitched.dispatch();
		if(this._state != null) {
			this._state.destroy();
		}
		flixel_FlxG.bitmap.clearCache();
		this._state = this._requestedState;
		flixel_FlxG.signals.preStateCreate.dispatch(this._state);
		this._state.create();
		if(this._gameJustStarted) {
			this.gameStart();
		}
		var anyObject = this._state;
		this["debugger"].console.registeredObjects.set("state",anyObject);
		flixel_system_debug_console_ConsoleUtil.registerObject("state",anyObject);
	}
	,gameStart: function() {
		flixel_FlxG.signals.gameStarted.dispatch();
		this._gameJustStarted = false;
	}
	,step: function() {
		if(this._resetGame) {
			flixel_FlxG.signals.preGameReset.dispatch();
			this._skipSplash = true;
			if(this._skipSplash || flixel_system_FlxSplash.nextState != null) {
				this._requestedState = Type.createInstance(this._initialState,[]);
				if(flixel_system_FlxSplash.nextState == null) {
					this._gameJustStarted = true;
				}
			} else {
				flixel_system_FlxSplash.nextState = this._initialState;
				this._requestedState = new flixel_system_FlxSplash();
				this._skipSplash = true;
			}
			if(js_Boot.__instanceof(this._requestedState,flixel_FlxSubState)) {
				throw new js__$Boot_HaxeError("You can't set FlxSubState class instance as the state for you game");
			}
			flixel_FlxG.reset();
			flixel_FlxG.signals.postGameReset.dispatch();
			this._resetGame = false;
		}
		flixel_FlxBasic.activeCount = 0;
		this.update();
		this["debugger"].stats.activeObjects(flixel_FlxBasic.activeCount);
	}
	,handleReplayRequests: function() {
	}
	,update: function() {
		if(!this._state.active || !this._state.exists) {
			return;
		}
		if(this._state != this._requestedState) {
			this.switchState();
		}
		if(flixel_FlxG["debugger"].visible) {
			this.ticks = this.getTimer() - this._startTime;
		}
		this.updateElapsed();
		flixel_FlxG.signals.preUpdate.dispatch();
		this.updateInput();
		flixel_FlxG.sound.update(flixel_FlxG.elapsed);
		var elapsed = flixel_FlxG.elapsed;
		var _g = 0;
		var _g1 = flixel_FlxG.plugins.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.active) {
				plugin.update(elapsed);
			}
		}
		this._state.tryUpdate(flixel_FlxG.elapsed);
		var elapsed1 = flixel_FlxG.elapsed;
		var _g2 = 0;
		var _g11 = flixel_FlxG.cameras.list;
		while(_g2 < _g11.length) {
			var camera = _g11[_g2];
			++_g2;
			if(camera != null && camera.exists && camera.active) {
				camera.update(elapsed1);
			}
		}
		flixel_FlxG.signals.postUpdate.dispatch();
		this["debugger"].stats.flixelUpdate(this.getTimer() - this._startTime - this.ticks);
		flixel_util_FlxArrayUtil.clearArray(flixel_FlxG.swipes);
		this.set_filters(this.filtersEnabled ? this._filters : null);
	}
	,updateElapsed: function() {
		if(flixel_FlxG.fixedTimestep) {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * this._stepSeconds;
		} else {
			flixel_FlxG.elapsed = flixel_FlxG.timeScale * (this._elapsedMS / 1000);
			var max = flixel_FlxG.maxElapsed * flixel_FlxG.timeScale;
			if(flixel_FlxG.elapsed > max) {
				flixel_FlxG.elapsed = max;
			}
		}
	}
	,updateInput: function() {
		var _g = 0;
		var _g1 = flixel_FlxG.inputs.list;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.update();
		}
	}
	,draw: function() {
		if(!this._state.visible || !this._state.exists) {
			return;
		}
		if(flixel_FlxG["debugger"].visible) {
			this.ticks = this.getTimer() - this._startTime;
		}
		flixel_FlxG.signals.preDraw.dispatch();
		if(flixel_FlxG.renderTile) {
			flixel_graphics_tile_FlxTilesheet._DRAWCALLS = 0;
		}
		var _this = flixel_FlxG.cameras;
		var _g = 0;
		var _g1 = _this.list;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(camera == null || !camera.exists || !camera.visible) {
				continue;
			}
			if(flixel_FlxG.renderBlit) {
				camera.checkResize();
			}
			if(flixel_FlxG.renderTile) {
				camera.clearDrawStack();
				camera.canvas.get_graphics().clear();
				camera.debugLayer.get_graphics().clear();
			}
			if(flixel_FlxG.renderBlit) {
				camera.fill(camera.bgColor,camera.useBgAlphaBlending);
				camera.screen.dirty = true;
			} else {
				camera.fill(camera.bgColor & 16777215,camera.useBgAlphaBlending,(camera.bgColor >> 24 & 255) / 255);
			}
		}
		var _g2 = 0;
		var _g11 = flixel_FlxG.plugins.list;
		while(_g2 < _g11.length) {
			var plugin = _g11[_g2];
			++_g2;
			if(plugin.exists && plugin.visible) {
				plugin.draw();
			}
		}
		this._state.draw();
		if(flixel_FlxG.renderTile) {
			if(flixel_FlxG.renderTile) {
				var _g3 = 0;
				var _g12 = flixel_FlxG.cameras.list;
				while(_g3 < _g12.length) {
					var camera1 = _g12[_g3];
					++_g3;
					if(camera1 != null && camera1.exists && camera1.visible) {
						camera1.render();
					}
				}
			}
			this["debugger"].stats.drawCalls(flixel_graphics_tile_FlxTilesheet._DRAWCALLS);
		}
		var _this1 = flixel_FlxG.cameras;
		var _g4 = 0;
		var _g13 = _this1.list;
		while(_g4 < _g13.length) {
			var camera2 = _g13[_g4];
			++_g4;
			if(camera2 == null || !camera2.exists || !camera2.visible) {
				continue;
			}
			camera2.drawFX();
			if(flixel_FlxG.renderBlit) {
				camera2.screen.dirty = true;
			}
		}
		flixel_FlxG.signals.postDraw.dispatch();
		this["debugger"].stats.flixelDraw(this.getTimer() - this._startTime - this.ticks);
	}
	,getTicks: function() {
		return this.getTimer() - this._startTime;
	}
	,getTimer: function() {
		return openfl_Lib.getTimer();
	}
	,__class__: flixel_FlxGame
});
var flixel_IFlxSprite = function() { };
$hxClasses["flixel.IFlxSprite"] = flixel_IFlxSprite;
flixel_IFlxSprite.__name__ = ["flixel","IFlxSprite"];
flixel_IFlxSprite.__interfaces__ = [flixel_IFlxBasic];
flixel_IFlxSprite.prototype = {
	set_x: null
	,set_y: null
	,set_alpha: null
	,set_angle: null
	,set_facing: null
	,set_moves: null
	,set_immovable: null
	,x: null
	,y: null
	,alpha: null
	,angle: null
	,facing: null
	,moves: null
	,immovable: null
	,offset: null
	,origin: null
	,scale: null
	,velocity: null
	,maxVelocity: null
	,acceleration: null
	,drag: null
	,scrollFactor: null
	,reset: null
	,setPosition: null
	,__class__: flixel_IFlxSprite
	,__properties__: {set_immovable:"set_immovable",set_moves:"set_moves",set_facing:"set_facing",set_angle:"set_angle",set_alpha:"set_alpha",set_y:"set_y",set_x:"set_x"}
};
var flixel_group_FlxTypedGroup = function(MaxSize) {
	if(MaxSize == null) {
		MaxSize = 0;
	}
	this._marker = 0;
	this.length = 0;
	flixel_FlxBasic.call(this);
	this.members = [];
	this.set_maxSize(Math.abs(MaxSize) | 0);
	this.flixelType = 2;
};
$hxClasses["flixel.group.FlxTypedGroup"] = flixel_group_FlxTypedGroup;
flixel_group_FlxTypedGroup.__name__ = ["flixel","group","FlxTypedGroup"];
flixel_group_FlxTypedGroup.overlaps = function(Callback,Group,X,Y,InScreenSpace,Camera) {
	var result = false;
	if(Group != null) {
		var i = 0;
		var l = Group.length;
		var basic;
		while(i < l) {
			basic = Group.members[i++];
			if(basic != null && Callback(basic,X,Y,InScreenSpace,Camera)) {
				result = true;
				break;
			}
		}
	}
	return result;
};
flixel_group_FlxTypedGroup.resolveGroup = function(ObjectOrGroup) {
	var group = null;
	if(ObjectOrGroup != null) {
		if(ObjectOrGroup.flixelType == 2) {
			group = ObjectOrGroup;
		} else if(ObjectOrGroup.flixelType == 4) {
			var spriteGroup = ObjectOrGroup;
			group = spriteGroup.group;
		}
	}
	return group;
};
flixel_group_FlxTypedGroup.__super__ = flixel_FlxBasic;
flixel_group_FlxTypedGroup.prototype = $extend(flixel_FlxBasic.prototype,{
	members: null
	,maxSize: null
	,length: null
	,_marker: null
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		if(this.members != null) {
			var i = 0;
			var basic = null;
			while(i < this.length) {
				basic = this.members[i++];
				if(basic != null) {
					basic.destroy();
				}
			}
			this.members = null;
		}
	}
	,update: function(elapsed) {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.active) {
				basic.update(elapsed);
			}
		}
	}
	,draw: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.visible) {
				basic.draw();
			}
		}
	}
	,add: function(Object) {
		if(Object == null) {
			flixel_FlxG.log.advanced("Cannot add a `null` object to a FlxGroup.",flixel_system_debug_log_LogStyle.WARNING,true);
			return null;
		}
		if(this.members.indexOf(Object) >= 0) {
			return Object;
		}
		var index = this.getFirstNull();
		if(index != -1) {
			this.members[index] = Object;
			if(index >= this.length) {
				this.length = index + 1;
			}
			return Object;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) {
			return Object;
		}
		this.members.push(Object);
		this.length++;
		return Object;
	}
	,insert: function(position,object) {
		if(object == null) {
			flixel_FlxG.log.advanced("Cannot insert a `null` object into a FlxGroup.",flixel_system_debug_log_LogStyle.WARNING,true);
			return null;
		}
		if(this.members.indexOf(object) >= 0) {
			return object;
		}
		if(position < this.length && this.members[position] == null) {
			this.members[position] = object;
			return object;
		}
		if(this.maxSize > 0 && this.length >= this.maxSize) {
			return object;
		}
		this.members.splice(position,0,object);
		this.length++;
		return object;
	}
	,recycle: function(ObjectClass,ObjectFactory,Force,Revive) {
		if(Revive == null) {
			Revive = true;
		}
		if(Force == null) {
			Force = false;
		}
		var basic = null;
		if(this.maxSize > 0) {
			if(this.length < this.maxSize) {
				var object = null;
				if(ObjectFactory != null) {
					object = ObjectFactory();
					this.add(object);
				} else if(ObjectClass != null) {
					object = Type.createInstance(ObjectClass,[]);
					this.add(object);
				}
				return object;
			} else {
				basic = this.members[this._marker++];
				if(this._marker >= this.maxSize) {
					this._marker = 0;
				}
				if(Revive) {
					basic.revive();
				}
				return basic;
			}
		} else {
			basic = this.getFirstAvailable(ObjectClass,Force);
			if(basic != null) {
				if(Revive) {
					basic.revive();
				}
				return basic;
			}
			var object1 = null;
			if(ObjectFactory != null) {
				object1 = ObjectFactory();
				this.add(object1);
			} else if(ObjectClass != null) {
				object1 = Type.createInstance(ObjectClass,[]);
				this.add(object1);
			}
			return object1;
		}
	}
	,recycleCreateObject: function(ObjectClass,ObjectFactory) {
		var object = null;
		if(ObjectFactory != null) {
			object = ObjectFactory();
			this.add(object);
		} else if(ObjectClass != null) {
			object = Type.createInstance(ObjectClass,[]);
			this.add(object);
		}
		return object;
	}
	,remove: function(Object,Splice) {
		if(Splice == null) {
			Splice = false;
		}
		if(this.members == null) {
			return null;
		}
		var index = this.members.indexOf(Object);
		if(index < 0) {
			return null;
		}
		if(Splice) {
			this.members.splice(index,1);
			this.length--;
		} else {
			this.members[index] = null;
		}
		return Object;
	}
	,replace: function(OldObject,NewObject) {
		var index = this.members.indexOf(OldObject);
		if(index < 0) {
			return null;
		}
		this.members[index] = NewObject;
		return NewObject;
	}
	,sort: function(Function,Order) {
		if(Order == null) {
			Order = -1;
		}
		var f = Function;
		var a1 = Order;
		var tmp = function(a2,a3) {
			return f(a1,a2,a3);
		};
		this.members.sort(tmp);
	}
	,getFirstAvailable: function(ObjectClass,Force) {
		if(Force == null) {
			Force = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists && (ObjectClass == null || js_Boot.__instanceof(basic,ObjectClass))) {
				if(Force && Type.getClassName(basic == null ? null : js_Boot.getClass(basic)) != Type.getClassName(ObjectClass)) {
					continue;
				}
				return this.members[i - 1];
			}
		}
		return null;
	}
	,getFirstNull: function() {
		var i = 0;
		while(i < this.length) {
			if(this.members[i] == null) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,getFirstExisting: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				return basic;
			}
		}
		return null;
	}
	,getFirstAlive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) {
				return basic;
			}
		}
		return null;
	}
	,getFirstDead: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) {
				return basic;
			}
		}
		return null;
	}
	,countLiving: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) {
					count = 0;
				}
				if(basic.exists && basic.alive) {
					++count;
				}
			}
		}
		return count;
	}
	,countDead: function() {
		var i = 0;
		var count = -1;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(count < 0) {
					count = 0;
				}
				if(!basic.alive) {
					++count;
				}
			}
		}
		return count;
	}
	,getRandom: function(StartIndex,Length) {
		if(Length == null) {
			Length = 0;
		}
		if(StartIndex == null) {
			StartIndex = 0;
		}
		if(StartIndex < 0) {
			StartIndex = 0;
		}
		if(Length <= 0) {
			Length = this.length;
		}
		return flixel_FlxG.random.getObject_flixel_group_FlxTypedGroup_T(this.members,null,StartIndex,Length);
	}
	,clear: function() {
		this.length = 0;
		flixel_util_FlxArrayUtil.clearArray(this.members);
	}
	,kill: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				basic.kill();
			}
		}
		flixel_FlxBasic.prototype.kill.call(this);
	}
	,revive: function() {
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.exists) {
				basic.revive();
			}
		}
		flixel_FlxBasic.prototype.revive.call(this);
	}
	,iterator: function(filter) {
		return new flixel_group_FlxTypedGroupIterator(this.members,filter);
	}
	,forEach: function(Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEach(Function,Recurse);
					}
				}
				Function(basic);
			}
		}
	}
	,forEachAlive: function(Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists && basic.alive) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachAlive(Function,Recurse);
					}
				}
				Function(basic);
			}
		}
	}
	,forEachDead: function(Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && !basic.alive) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachDead(Function,Recurse);
					}
				}
				Function(basic);
			}
		}
	}
	,forEachExists: function(Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null && basic.exists) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachExists(Function,Recurse);
					}
				}
				Function(basic);
			}
		}
	}
	,forEachOfType: function(ObjectClass,Function,Recurse) {
		if(Recurse == null) {
			Recurse = false;
		}
		var i = 0;
		var basic = null;
		while(i < this.length) {
			basic = this.members[i++];
			if(basic != null) {
				if(Recurse) {
					var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						group.forEachOfType(ObjectClass,Function,Recurse);
					}
				}
				if(js_Boot.__instanceof(basic,ObjectClass)) {
					Function(basic);
				}
			}
		}
	}
	,set_maxSize: function(Size) {
		this.maxSize = Math.abs(Size) | 0;
		if(this._marker >= this.maxSize) {
			this._marker = 0;
		}
		if(this.maxSize == 0 || this.members == null || this.maxSize >= this.length) {
			return this.maxSize;
		}
		var i = this.maxSize;
		var l = this.length;
		var basic = null;
		while(i < l) {
			basic = this.members[i++];
			if(basic != null) {
				basic.destroy();
			}
		}
		flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T(this.members,this.maxSize);
		this.length = this.members.length;
		return this.maxSize;
	}
	,__class__: flixel_group_FlxTypedGroup
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_maxSize:"set_maxSize"})
});
var flixel_FlxState = function(MaxSize) {
	this._requestSubStateReset = false;
	this.destroySubStates = true;
	this.persistentDraw = true;
	this.persistentUpdate = false;
	flixel_group_FlxTypedGroup.call(this,MaxSize);
};
$hxClasses["flixel.FlxState"] = flixel_FlxState;
flixel_FlxState.__name__ = ["flixel","FlxState"];
flixel_FlxState.__super__ = flixel_group_FlxTypedGroup;
flixel_FlxState.prototype = $extend(flixel_group_FlxTypedGroup.prototype,{
	persistentUpdate: null
	,persistentDraw: null
	,destroySubStates: null
	,subState: null
	,_requestedSubState: null
	,_requestSubStateReset: null
	,create: function() {
	}
	,draw: function() {
		if(this.persistentDraw || this.subState == null) {
			flixel_group_FlxTypedGroup.prototype.draw.call(this);
		}
		if(this.subState != null) {
			this.subState.draw();
		}
	}
	,openSubState: function(SubState) {
		this._requestSubStateReset = true;
		this._requestedSubState = SubState;
	}
	,closeSubState: function() {
		this._requestSubStateReset = true;
	}
	,resetSubState: function() {
		if(this.subState != null) {
			if(this.subState.closeCallback != null) {
				this.subState.closeCallback();
			}
			if(this.destroySubStates) {
				this.subState.destroy();
			}
		}
		this.subState = this._requestedSubState;
		this._requestedSubState = null;
		if(this.subState != null) {
			if(!this.persistentUpdate) {
				flixel_FlxG.inputs.onStateSwitch();
			}
			this.subState._parentState = this;
			if(!this.subState._created) {
				this.subState._created = true;
				this.subState.create();
			}
		}
	}
	,destroy: function() {
		if(this.subState != null) {
			this.subState.destroy();
			this.subState = null;
		}
		flixel_group_FlxTypedGroup.prototype.destroy.call(this);
	}
	,switchTo: function(nextState) {
		return true;
	}
	,onFocusLost: function() {
	}
	,onFocus: function() {
	}
	,onResize: function(Width,Height) {
	}
	,tryUpdate: function(elapsed) {
		if(this.persistentUpdate || this.subState == null) {
			this.update(elapsed);
		}
		if(this._requestSubStateReset) {
			this._requestSubStateReset = false;
			this.resetSubState();
		} else if(this.subState != null) {
			this.subState.tryUpdate(elapsed);
		}
	}
	,get_bgColor: function() {
		return flixel_FlxG.cameras.get_bgColor();
	}
	,set_bgColor: function(Value) {
		return flixel_FlxG.cameras.set_bgColor(Value);
	}
	,__class__: flixel_FlxState
	,__properties__: $extend(flixel_group_FlxTypedGroup.prototype.__properties__,{set_bgColor:"set_bgColor",get_bgColor:"get_bgColor"})
});
var flixel_FlxStrip = function(X,Y,SimpleGraphic) {
	this.repeat = false;
	this.colors = [];
	this.uvtData = [];
	this.indices = [];
	this.vertices = [];
	flixel_FlxSprite.call(this,X,Y,SimpleGraphic);
};
$hxClasses["flixel.FlxStrip"] = flixel_FlxStrip;
flixel_FlxStrip.__name__ = ["flixel","FlxStrip"];
flixel_FlxStrip.__super__ = flixel_FlxSprite;
flixel_FlxStrip.prototype = $extend(flixel_FlxSprite.prototype,{
	vertices: null
	,indices: null
	,uvtData: null
	,colors: null
	,repeat: null
	,destroy: function() {
		this.vertices = null;
		this.indices = null;
		this.uvtData = null;
		this.colors = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,draw: function() {
		if(this.alpha == 0 || this.graphic == null || this.vertices == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists) {
				continue;
			}
			this.getScreenPosition(this._point,camera);
			camera.drawTriangles(this.graphic,this.vertices,this.indices,this.uvtData,this.colors,this._point,this.blend,this.repeat,this.antialiasing);
		}
	}
	,__class__: flixel_FlxStrip
});
var flixel_FlxSubState = function(BGColor) {
	if(BGColor == null) {
		BGColor = 0;
	}
	this._created = false;
	flixel_FlxState.call(this);
	this.closeCallback = null;
	if(flixel_FlxG.renderTile) {
		this._bgSprite = new flixel_system_FlxBGSprite();
	}
	this.set_bgColor(BGColor);
};
$hxClasses["flixel.FlxSubState"] = flixel_FlxSubState;
flixel_FlxSubState.__name__ = ["flixel","FlxSubState"];
flixel_FlxSubState.__super__ = flixel_FlxState;
flixel_FlxSubState.prototype = $extend(flixel_FlxState.prototype,{
	closeCallback: null
	,_bgSprite: null
	,_parentState: null
	,_bgColor: null
	,_created: null
	,draw: function() {
		if(flixel_FlxG.renderBlit) {
			var _g = 0;
			var _g1 = this.get_cameras();
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				camera.fill(this._bgColor);
			}
		} else {
			this._bgSprite.draw();
		}
		flixel_FlxState.prototype.draw.call(this);
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this.closeCallback = null;
		this._parentState = null;
		this._bgSprite = null;
	}
	,close: function() {
		if(this._parentState != null && this._parentState.subState == this) {
			this._parentState.closeSubState();
		}
	}
	,get_bgColor: function() {
		return this._bgColor;
	}
	,set_bgColor: function(Value) {
		if(flixel_FlxG.renderTile && this._bgSprite != null) {
			this._bgSprite.get_pixels().setPixel32(0,0,Value);
		}
		return this._bgColor = Value;
	}
	,__class__: flixel_FlxSubState
});
var flixel_addons_display_FlxBackdrop = function(Graphic,ScrollX,ScrollY,RepeatX,RepeatY,SpaceX,SpaceY) {
	if(SpaceY == null) {
		SpaceY = 0;
	}
	if(SpaceX == null) {
		SpaceX = 0;
	}
	if(RepeatY == null) {
		RepeatY = true;
	}
	if(RepeatX == null) {
		RepeatX = true;
	}
	if(ScrollY == null) {
		ScrollY = 1;
	}
	if(ScrollX == null) {
		ScrollX = 1;
	}
	this.useScaleHack = true;
	this._numTiles = 0;
	this._spaceY = 0;
	this._spaceX = 0;
	this._repeatY = false;
	this._repeatX = false;
	this._scrollH = 0;
	this._scrollW = 0;
	flixel_FlxSprite.call(this);
	this.scale = new flixel_math_FlxCallbackPoint($bind(this,this.scaleCallback));
	this.scale.set(1,1);
	this._repeatX = RepeatX;
	this._repeatY = RepeatY;
	this._spaceX = SpaceX;
	this._spaceY = SpaceY;
	this._ppoint = new openfl_geom_Point();
	this.scrollFactor.set_x(ScrollX);
	this.scrollFactor.set_y(ScrollY);
	if(Graphic != null) {
		this.loadGraphic(Graphic);
	}
	flixel_FlxG.signals.gameResized.add($bind(this,this.onGameResize));
};
$hxClasses["flixel.addons.display.FlxBackdrop"] = flixel_addons_display_FlxBackdrop;
flixel_addons_display_FlxBackdrop.__name__ = ["flixel","addons","display","FlxBackdrop"];
flixel_addons_display_FlxBackdrop.__super__ = flixel_FlxSprite;
flixel_addons_display_FlxBackdrop.prototype = $extend(flixel_FlxSprite.prototype,{
	_ppoint: null
	,_scrollW: null
	,_scrollH: null
	,_repeatX: null
	,_repeatY: null
	,_spaceX: null
	,_spaceY: null
	,_tileFrame: null
	,_tileInfo: null
	,_numTiles: null
	,useScaleHack: null
	,destroy: function() {
		this._tileInfo = null;
		this._ppoint = null;
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		this.setTileFrame(null);
		flixel_FlxG.signals.gameResized.remove($bind(this,this.onGameResize));
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		var tileGraphic = flixel_FlxG.bitmap.add(Graphic);
		this.setTileFrame(tileGraphic.get_imageFrame().get_frame());
		var w = this._tileFrame.sourceSize.x + this._spaceX | 0;
		var h = this._tileFrame.sourceSize.y + this._spaceY | 0;
		this._scrollW = w;
		this._scrollH = h;
		this.regenGraphic();
		return this;
	}
	,loadFrame: function(Frame) {
		this.setTileFrame(Frame);
		var w = this._tileFrame.sourceSize.x + this._spaceX | 0;
		var h = this._tileFrame.sourceSize.y + this._spaceY | 0;
		this._scrollW = w;
		this._scrollH = h;
		this.regenGraphic();
		return this;
	}
	,draw: function() {
		var isColored = this.alpha != 1 || this.color != 16777215;
		var hasColorOffsets = this.colorTransform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(this.colorTransform);
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists) {
				continue;
			}
			var ssw = this._scrollW * Math.abs(this.scale.x);
			var ssh = this._scrollH * Math.abs(this.scale.y);
			if(this._repeatX) {
				this._ppoint.x = (this.x - this.offset.x - camera.scroll.x * this.scrollFactor.x) % ssw;
				if(this._ppoint.x > 0) {
					this._ppoint.x -= ssw;
				}
			} else {
				this._ppoint.x = this.x - this.offset.x - camera.scroll.x * this.scrollFactor.x;
			}
			if(this._repeatY) {
				this._ppoint.y = (this.y - this.offset.y - camera.scroll.y * this.scrollFactor.y) % ssh;
				if(this._ppoint.y > 0) {
					this._ppoint.y -= ssh;
				}
			} else {
				this._ppoint.y = this.y - this.offset.y - camera.scroll.y * this.scrollFactor.y;
			}
			if(flixel_FlxG.renderBlit) {
				if(this.graphic == null) {
					return;
				}
				if(this.dirty) {
					this.calcFrame(this.useFramePixels);
				}
				this._flashRect2.setTo(0,0,this.graphic.width,this.graphic.height);
				camera.copyPixels(this.frame,this.framePixels,this._flashRect2,this._ppoint);
			} else {
				if(this._tileFrame == null) {
					return;
				}
				var drawItem = camera.startQuadBatch(this._tileFrame.parent,isColored,hasColorOffsets);
				this._tileFrame.prepareMatrix(this._matrix);
				var scaleX = this.scale.x;
				var scaleY = this.scale.y;
				if(this.useScaleHack) {
					scaleX += 1 / (this._tileFrame.sourceSize.x * camera.totalScaleX);
					scaleY += 1 / (this._tileFrame.sourceSize.y * camera.totalScaleY);
				}
				this._matrix.scale(scaleX,scaleY);
				var tx = this._matrix.tx;
				var ty = this._matrix.ty;
				var _g3 = 0;
				var _g2 = this._numTiles;
				while(_g3 < _g2) {
					var j = _g3++;
					var currTileX = this._tileInfo[j * 2];
					var currTileY = this._tileInfo[j * 2 + 1];
					this._matrix.tx = tx + (this._ppoint.x + currTileX);
					this._matrix.ty = ty + (this._ppoint.y + currTileY);
					drawItem.addQuad(this._tileFrame,this._matrix,this.colorTransform);
				}
			}
		}
	}
	,regenGraphic: function() {
		var sx = Math.abs(this.scale.x);
		var sy = Math.abs(this.scale.y);
		var ssw = this._scrollW * sx | 0;
		var ssh = this._scrollH * sy | 0;
		var w = ssw;
		var h = ssh;
		var frameBitmap = null;
		if(this._repeatX) {
			w = ssw + flixel_FlxG.width;
		}
		if(this._repeatY) {
			h = ssh + flixel_FlxG.height;
		}
		if(flixel_FlxG.renderBlit) {
			if(this.graphic == null || (this.graphic.width != w || this.graphic.height != h)) {
				this.makeGraphic(w,h,0,true);
			}
		} else {
			this._tileInfo = [];
			this._numTiles = 0;
			this.set_width(this.frameWidth = w);
			this.set_height(this.frameHeight = h);
		}
		this._ppoint.x = this._ppoint.y = 0;
		if(flixel_FlxG.renderBlit) {
			this._flashRect2.setTo(0,0,this.graphic.width,this.graphic.height);
			this.get_pixels().fillRect(this._flashRect2,0);
			this._matrix.identity();
			this._matrix.scale(sx,sy);
			frameBitmap = this._tileFrame.paint();
		}
		while(this._ppoint.y < h) {
			while(this._ppoint.x < w) {
				if(flixel_FlxG.renderBlit) {
					this.get_pixels().draw(frameBitmap,this._matrix);
					this._matrix.tx += ssw;
				} else {
					this._tileInfo.push(this._ppoint.x);
					this._tileInfo.push(this._ppoint.y);
					this._numTiles++;
				}
				this._ppoint.x += ssw;
			}
			if(flixel_FlxG.renderBlit) {
				this._matrix.tx = 0;
				this._matrix.ty += ssh;
			}
			this._ppoint.x = 0;
			this._ppoint.y += ssh;
		}
		if(flixel_FlxG.renderBlit) {
			frameBitmap.dispose();
			this.dirty = true;
			this.calcFrame();
		}
	}
	,onGameResize: function(_,_1) {
		if(this._tileFrame != null) {
			this.regenGraphic();
		}
	}
	,scaleCallback: function(Scale) {
		if(this._tileFrame != null) {
			this.regenGraphic();
		}
	}
	,setTileFrame: function(Frame) {
		if(Frame != this._tileFrame) {
			if(this._tileFrame != null) {
				var _g = this._tileFrame.parent;
				var _g1 = _g.get_useCount();
				_g.set_useCount(_g1 - 1);
			}
			if(Frame != null) {
				var _g2 = Frame.parent;
				var _g11 = _g2.get_useCount();
				_g2.set_useCount(_g11 + 1);
			}
		}
		return this._tileFrame = Frame;
	}
	,__class__: flixel_addons_display_FlxBackdrop
});
var flixel_addons_display__$FlxStarField_FlxStarField = function(X,Y,Width,Height,StarAmount) {
	this.bgColor = -16777216;
	flixel_FlxSprite.call(this,X,Y);
	if(Width <= 0) {
		Width = flixel_FlxG.width;
	} else {
		Width = Width;
	}
	if(Height <= 0) {
		Height = flixel_FlxG.height;
	} else {
		Height = Height;
	}
	this.makeGraphic(Width,Height,this.bgColor,true);
	this._stars = [];
	var _g1 = 0;
	while(_g1 < StarAmount) {
		var i = _g1++;
		var star = new flixel_addons_display__$FlxStarField_FlxStar();
		star.index = i;
		star.x = flixel_FlxG.random["int"](0,Width);
		star.y = flixel_FlxG.random["int"](0,Height);
		star.d = 1;
		star.r = flixel_FlxG.random["float"]() * Math.PI * 2;
		this._stars.push(star);
	}
};
$hxClasses["flixel.addons.display._FlxStarField.FlxStarField"] = flixel_addons_display__$FlxStarField_FlxStarField;
flixel_addons_display__$FlxStarField_FlxStarField.__name__ = ["flixel","addons","display","_FlxStarField","FlxStarField"];
flixel_addons_display__$FlxStarField_FlxStarField.__super__ = flixel_FlxSprite;
flixel_addons_display__$FlxStarField_FlxStarField.prototype = $extend(flixel_FlxSprite.prototype,{
	bgColor: null
	,_stars: null
	,_depthColors: null
	,_minSpeed: null
	,_maxSpeed: null
	,destroy: function() {
		var _g = 0;
		var _g1 = this._stars;
		while(_g < _g1.length) ++_g;
		this._stars = null;
		this._depthColors = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,draw: function() {
		this.get_pixels().fillRect(this._flashRect,this.bgColor);
		var _g = 0;
		var _g1 = this._stars;
		while(_g < _g1.length) {
			var star = _g1[_g];
			++_g;
			var colorIndex = (star.speed - this._minSpeed) / (this._maxSpeed - this._minSpeed) * this._depthColors.length | 0;
			this.get_pixels().setPixel32(star.x | 0,star.y | 0,this._depthColors[colorIndex]);
		}
		this.framePixels = this.get_pixels();
		this.dirty = false;
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,setStarDepthColors: function(Depth,LowestColor,HighestColor) {
		if(HighestColor == null) {
			HighestColor = -723724;
		}
		if(LowestColor == null) {
			LowestColor = 267933784;
		}
		this._depthColors = flixel_util_FlxGradient.createGradientArray(1,Depth,[LowestColor,HighestColor]);
	}
	,setStarSpeed: function(Min,Max) {
		this._minSpeed = Min;
		this._maxSpeed = Max;
		var _g = 0;
		var _g1 = this._stars;
		while(_g < _g1.length) {
			var star = _g1[_g];
			++_g;
			star.speed = flixel_FlxG.random["float"](Min,Max);
		}
	}
	,__class__: flixel_addons_display__$FlxStarField_FlxStarField
});
var flixel_addons_display_FlxStarField2D = function(X,Y,Width,Height,StarAmount) {
	if(StarAmount == null) {
		StarAmount = 300;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	flixel_addons_display__$FlxStarField_FlxStarField.call(this,X,Y,Width,Height,StarAmount);
	var point = flixel_math_FlxPoint._pool.get().set(-1,0);
	point._inPool = false;
	this.starVelocityOffset = point;
	this._depthColors = flixel_util_FlxGradient.createGradientArray(1,5,[-10987432,-723724]);
	this.setStarSpeed(100,400);
};
$hxClasses["flixel.addons.display.FlxStarField2D"] = flixel_addons_display_FlxStarField2D;
flixel_addons_display_FlxStarField2D.__name__ = ["flixel","addons","display","FlxStarField2D"];
flixel_addons_display_FlxStarField2D.__super__ = flixel_addons_display__$FlxStarField_FlxStarField;
flixel_addons_display_FlxStarField2D.prototype = $extend(flixel_addons_display__$FlxStarField_FlxStarField.prototype,{
	starVelocityOffset: null
	,destroy: function() {
		this.starVelocityOffset = flixel_util_FlxDestroyUtil.put(this.starVelocityOffset);
		flixel_addons_display__$FlxStarField_FlxStarField.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		var _g = 0;
		var _g1 = this._stars;
		while(_g < _g1.length) {
			var star = _g1[_g];
			++_g;
			star.x += this.starVelocityOffset.x * star.speed * elapsed;
			star.y += this.starVelocityOffset.y * star.speed * elapsed;
			if(star.x > this.get_width()) {
				star.x = 0;
			} else if(star.x < 0) {
				star.x = this.get_width();
			}
			if(star.y > this.get_height()) {
				star.y = 0;
			} else if(star.y < 0) {
				star.y = this.get_height();
			}
		}
		flixel_addons_display__$FlxStarField_FlxStarField.prototype.update.call(this,elapsed);
	}
	,__class__: flixel_addons_display_FlxStarField2D
});
var flixel_addons_display_FlxStarField3D = function(X,Y,Width,Height,StarAmount) {
	if(StarAmount == null) {
		StarAmount = 300;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	flixel_addons_display__$FlxStarField_FlxStarField.call(this,X,Y,Width,Height,StarAmount);
	var X1 = this.get_width() / 2;
	var Y1 = this.get_height() / 2;
	var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
	point._inPool = false;
	this.center = point;
	this._depthColors = flixel_util_FlxGradient.createGradientArray(1,300,[-14079703,-1]);
	this.setStarSpeed(0,200);
};
$hxClasses["flixel.addons.display.FlxStarField3D"] = flixel_addons_display_FlxStarField3D;
flixel_addons_display_FlxStarField3D.__name__ = ["flixel","addons","display","FlxStarField3D"];
flixel_addons_display_FlxStarField3D.__super__ = flixel_addons_display__$FlxStarField_FlxStarField;
flixel_addons_display_FlxStarField3D.prototype = $extend(flixel_addons_display__$FlxStarField_FlxStarField.prototype,{
	center: null
	,destroy: function() {
		this.center = flixel_util_FlxDestroyUtil.put(this.center);
		flixel_addons_display__$FlxStarField_FlxStarField.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		var _g = 0;
		var _g1 = this._stars;
		while(_g < _g1.length) {
			var star = _g1[_g];
			++_g;
			star.d *= 1.1;
			star.x = this.center.x + Math.cos(star.r) * star.d * star.speed * elapsed;
			star.y = this.center.y + Math.sin(star.r) * star.d * star.speed * elapsed;
			if(star.x < 0 || star.x > this.get_width() || star.y < 0 || star.y > this.get_height()) {
				star.d = 1;
				star.r = flixel_FlxG.random["float"]() * Math.PI * 2;
				star.x = 0;
				star.y = 0;
				star.speed = flixel_FlxG.random["float"](this._minSpeed,this._maxSpeed);
				this._stars[star.index] = star;
			}
		}
		flixel_addons_display__$FlxStarField_FlxStarField.prototype.update.call(this,elapsed);
	}
	,__class__: flixel_addons_display_FlxStarField3D
});
var flixel_addons_display__$FlxStarField_FlxStar = function() {
};
$hxClasses["flixel.addons.display._FlxStarField.FlxStar"] = flixel_addons_display__$FlxStarField_FlxStar;
flixel_addons_display__$FlxStarField_FlxStar.__name__ = ["flixel","addons","display","_FlxStarField","FlxStar"];
flixel_addons_display__$FlxStarField_FlxStar.prototype = {
	index: null
	,x: null
	,y: null
	,d: null
	,r: null
	,speed: null
	,__class__: flixel_addons_display__$FlxStarField_FlxStar
};
var flixel_addons_display_FlxTiledSprite = function(Graphic,Width,Height,RepeatX,RepeatY) {
	if(RepeatY == null) {
		RepeatY = true;
	}
	if(RepeatX == null) {
		RepeatX = true;
	}
	this.graphicVisible = true;
	this.regen = true;
	this.repeatY = true;
	this.repeatX = true;
	this.scrollY = 0;
	this.scrollX = 0;
	flixel_FlxStrip.call(this);
	this.repeat = true;
	this.indices[0] = 0;
	this.indices[1] = 1;
	this.indices[2] = 2;
	this.indices[3] = 2;
	this.indices[4] = 3;
	this.indices[5] = 0;
	this.uvtData[0] = 0;
	this.uvtData[1] = 0;
	this.uvtData[2] = 1;
	this.uvtData[3] = 0;
	this.uvtData[4] = 1;
	this.uvtData[5] = 1;
	this.uvtData[6] = 0;
	this.uvtData[7] = 1;
	this.vertices[0] = 0;
	this.vertices[1] = 0;
	this.vertices[2] = Width;
	this.vertices[3] = 0;
	this.vertices[4] = Width;
	this.vertices[5] = Height;
	this.vertices[6] = 0;
	this.vertices[7] = Height;
	this.set_width(Width);
	this.set_height(Height);
	this.set_repeatX(RepeatX);
	this.set_repeatY(RepeatY);
	if(Graphic != null) {
		this.loadGraphic(Graphic);
	}
};
$hxClasses["flixel.addons.display.FlxTiledSprite"] = flixel_addons_display_FlxTiledSprite;
flixel_addons_display_FlxTiledSprite.__name__ = ["flixel","addons","display","FlxTiledSprite"];
flixel_addons_display_FlxTiledSprite.__super__ = flixel_FlxStrip;
flixel_addons_display_FlxTiledSprite.prototype = $extend(flixel_FlxStrip.prototype,{
	scrollX: null
	,scrollY: null
	,repeatX: null
	,repeatY: null
	,renderSprite: null
	,regen: null
	,graphicVisible: null
	,destroy: function() {
		this.renderSprite = flixel_util_FlxDestroyUtil.destroy(this.renderSprite);
		flixel_FlxStrip.prototype.destroy.call(this);
	}
	,loadGraphic: function(Graphic,Animated,Width,Height,Unique,Key) {
		if(Unique == null) {
			Unique = false;
		}
		if(Height == null) {
			Height = 0;
		}
		if(Width == null) {
			Width = 0;
		}
		if(Animated == null) {
			Animated = false;
		}
		this.set_graphic(flixel_FlxG.bitmap.add(Graphic));
		return this;
	}
	,loadFrame: function(Frame) {
		this.set_graphic(flixel_graphics_FlxGraphic.fromFrame(Frame));
		return this;
	}
	,set_graphic: function(Value) {
		if(this.graphic != Value) {
			this.regen = true;
		}
		return flixel_FlxStrip.prototype.set_graphic.call(this,Value);
	}
	,regenGraphic: function() {
		if(!this.regen || this.graphic == null) {
			return;
		}
		if(flixel_FlxG.renderBlit) {
			this.updateRenderSprite();
		} else {
			this.updateVerticesData();
		}
		this.regen = false;
	}
	,draw: function() {
		if(this.regen) {
			this.regenGraphic();
		}
		if(!this.graphicVisible) {
			return;
		}
		if(flixel_FlxG.renderBlit) {
			this.renderSprite.set_x(this.x);
			this.renderSprite.set_y(this.y);
			this.renderSprite.scrollFactor.set(this.scrollFactor.x,this.scrollFactor.y);
			this.renderSprite.set_cameras(this.get_cameras());
			this.renderSprite.draw();
		} else {
			flixel_FlxStrip.prototype.draw.call(this);
		}
	}
	,updateRenderSprite: function() {
		this.graphicVisible = true;
		if(this.renderSprite == null) {
			this.renderSprite = new flixel_FlxSprite();
		}
		var rectX = this.repeatX ? 0 : this.scrollX;
		var rectWidth = this.repeatX ? this.get_width() : this.graphic.bitmap.width;
		if(!this.repeatX && (rectX > this.get_width() || rectX + rectWidth < 0)) {
			this.graphicVisible = false;
			return;
		}
		var rectY = this.repeatY ? 0 : this.scrollY;
		var rectHeight = this.repeatY ? this.get_height() : this.graphic.bitmap.height;
		if(!this.repeatY && (rectY > this.get_height() || rectY + rectHeight < 0)) {
			this.graphicVisible = false;
			return;
		}
		if(this.renderSprite.get_width() != this.get_width() || this.renderSprite.get_height() != this.get_height()) {
			this.renderSprite.makeGraphic(this.get_width() | 0,this.get_height() | 0,0,true);
		} else {
			this._flashRect2.setTo(0,0,this.get_width(),this.get_height());
			this.renderSprite.get_pixels().fillRect(this._flashRect2,0);
		}
		flixel_util_FlxSpriteUtil.flashGfx.clear();
		if(this.scrollX != 0 || this.scrollY != 0) {
			this._matrix.identity();
			this._matrix.tx = Math.round(this.scrollX);
			this._matrix.ty = Math.round(this.scrollY);
			flixel_util_FlxSpriteUtil.flashGfx.beginBitmapFill(this.graphic.bitmap,this._matrix);
		} else {
			flixel_util_FlxSpriteUtil.flashGfx.beginBitmapFill(this.graphic.bitmap);
		}
		flixel_util_FlxSpriteUtil.flashGfx.drawRect(rectX,rectY,rectWidth,rectHeight);
		this.renderSprite.get_pixels().draw(flixel_util_FlxSpriteUtil.flashGfxSprite,null,this.colorTransform);
		flixel_util_FlxSpriteUtil.flashGfx.clear();
		this.renderSprite.dirty = true;
	}
	,updateVerticesData: function() {
		if(this.graphic == null) {
			return;
		}
		var frame = this.graphic.get_imageFrame().get_frame();
		this.graphicVisible = true;
		if(this.repeatX) {
			this.vertices[6] = 0.0;
			this.vertices[0] = 0.0;
			this.vertices[2] = this.vertices[4] = this.get_width();
			var tmp = this.uvtData[6] = -this.scrollX / frame.sourceSize.x;
			this.uvtData[0] = tmp;
			var tmp1 = this.uvtData;
			var tmp2 = this.uvtData[0];
			var tmp3 = this.get_width() / frame.sourceSize.x;
			tmp1[2] = this.uvtData[4] = tmp2 + tmp3;
		} else {
			var tmp4 = this.vertices;
			var Value = this.scrollX;
			var Max = this.get_width();
			var lowerBound = Value < 0 ? 0 : Value;
			tmp4[0] = this.vertices[6] = Max != null && lowerBound > Max ? Max : lowerBound;
			var tmp5 = this.vertices;
			var Value1 = this.scrollX + frame.sourceSize.x;
			var Max1 = this.get_width();
			var lowerBound1 = Value1 < 0 ? 0 : Value1;
			tmp5[2] = this.vertices[4] = Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1;
			if(this.vertices[2] - this.vertices[0] <= 0) {
				this.graphicVisible = false;
				return;
			}
			var tmp6 = this.uvtData[6] = (this.vertices[0] - this.scrollX) / frame.sourceSize.x;
			this.uvtData[0] = tmp6;
			var tmp7 = this.uvtData[4] = this.uvtData[0] + (this.vertices[2] - this.vertices[0]) / frame.sourceSize.x;
			this.uvtData[2] = tmp7;
		}
		if(this.repeatY) {
			this.vertices[3] = 0.0;
			this.vertices[1] = 0.0;
			this.vertices[5] = this.vertices[7] = this.get_height();
			var tmp8 = this.uvtData[3] = -this.scrollY / frame.sourceSize.y;
			this.uvtData[1] = tmp8;
			var tmp9 = this.uvtData;
			var tmp10 = this.uvtData[1];
			var tmp11 = this.get_height() / frame.sourceSize.y;
			tmp9[5] = this.uvtData[7] = tmp10 + tmp11;
		} else {
			var tmp12 = this.vertices;
			var Value2 = this.scrollY;
			var Max2 = this.get_height();
			var lowerBound2 = Value2 < 0 ? 0 : Value2;
			tmp12[1] = this.vertices[3] = Max2 != null && lowerBound2 > Max2 ? Max2 : lowerBound2;
			var tmp13 = this.vertices;
			var Value3 = this.scrollY + frame.sourceSize.y;
			var Max3 = this.get_height();
			var lowerBound3 = Value3 < 0 ? 0 : Value3;
			tmp13[5] = this.vertices[7] = Max3 != null && lowerBound3 > Max3 ? Max3 : lowerBound3;
			if(this.vertices[5] - this.vertices[1] <= 0) {
				this.graphicVisible = false;
				return;
			}
			var tmp14 = this.uvtData[3] = (this.vertices[1] - this.scrollY) / frame.sourceSize.y;
			this.uvtData[1] = tmp14;
			var tmp15 = this.uvtData[7] = this.uvtData[1] + (this.vertices[5] - this.vertices[1]) / frame.sourceSize.y;
			this.uvtData[5] = tmp15;
		}
	}
	,set_width: function(Width) {
		if(Width <= 0) {
			return Width;
		}
		if(Width != this.get_width()) {
			this.regen = true;
		}
		return flixel_FlxStrip.prototype.set_width.call(this,Width);
	}
	,set_height: function(Height) {
		if(Height <= 0) {
			return Height;
		}
		if(Height != this.get_height()) {
			this.regen = true;
		}
		return flixel_FlxStrip.prototype.set_height.call(this,Height);
	}
	,set_scrollX: function(Value) {
		if(Value != this.scrollX) {
			this.regen = true;
		}
		return this.scrollX = Value;
	}
	,set_scrollY: function(Value) {
		if(Value != this.scrollY) {
			this.regen = true;
		}
		return this.scrollY = Value;
	}
	,set_repeatX: function(Value) {
		if(Value != this.repeatX) {
			this.regen = true;
		}
		return this.repeatX = Value;
	}
	,set_repeatY: function(Value) {
		if(Value != this.repeatY) {
			this.regen = true;
		}
		return this.repeatY = Value;
	}
	,__class__: flixel_addons_display_FlxTiledSprite
	,__properties__: $extend(flixel_FlxStrip.prototype.__properties__,{set_repeatY:"set_repeatY",set_repeatX:"set_repeatX",set_scrollY:"set_scrollY",set_scrollX:"set_scrollX"})
});
var flixel_addons_editors_tiled_TiledLayer = function(source,parent) {
	this.properties = new flixel_addons_editors_tiled_TiledPropertySet();
	this.map = parent;
	this.name = source.att.resolve("name");
	this.visible = source.has.resolve("visible") && source.att.resolve("visible") == "0" ? false : true;
	this.opacity = source.has.resolve("opacity") ? parseFloat(source.att.resolve("opacity")) : 1.0;
	this.offsetX = source.has.resolve("offsetx") ? parseFloat(source.att.resolve("offsetx")) : 0.0;
	this.offsetY = source.has.resolve("offsety") ? parseFloat(source.att.resolve("offsety")) : 0.0;
	this.loadProperties(source);
};
$hxClasses["flixel.addons.editors.tiled.TiledLayer"] = flixel_addons_editors_tiled_TiledLayer;
flixel_addons_editors_tiled_TiledLayer.__name__ = ["flixel","addons","editors","tiled","TiledLayer"];
flixel_addons_editors_tiled_TiledLayer.prototype = {
	type: null
	,map: null
	,name: null
	,opacity: null
	,visible: null
	,properties: null
	,offsetX: null
	,offsetY: null
	,loadProperties: function(source) {
		var _g_head = source.nodes.resolve("properties").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.properties.extend(val);
		}
	}
	,__class__: flixel_addons_editors_tiled_TiledLayer
};
var flixel_addons_editors_tiled_TiledImageLayer = function(source,parent) {
	flixel_addons_editors_tiled_TiledLayer.call(this,source,parent);
	this.type = flixel_addons_editors_tiled_TiledLayerType.IMAGE;
	this.imagePath = source.node.resolve("image").att.resolve("source");
	this.x = source.has.resolve("x") ? Std.parseInt(source.att.resolve("x")) : 0;
	this.y = source.has.resolve("y") ? Std.parseInt(source.att.resolve("y")) : 0;
};
$hxClasses["flixel.addons.editors.tiled.TiledImageLayer"] = flixel_addons_editors_tiled_TiledImageLayer;
flixel_addons_editors_tiled_TiledImageLayer.__name__ = ["flixel","addons","editors","tiled","TiledImageLayer"];
flixel_addons_editors_tiled_TiledImageLayer.__super__ = flixel_addons_editors_tiled_TiledLayer;
flixel_addons_editors_tiled_TiledImageLayer.prototype = $extend(flixel_addons_editors_tiled_TiledLayer.prototype,{
	imagePath: null
	,x: null
	,y: null
	,__class__: flixel_addons_editors_tiled_TiledImageLayer
});
var flixel_addons_editors_tiled_TiledImageTile = function(Source) {
	var _g_head = Source.nodes.resolve("image").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		this.width = parseFloat(val.att.resolve("width"));
		this.height = parseFloat(val.att.resolve("height"));
		this.source = val.att.resolve("source");
	}
};
$hxClasses["flixel.addons.editors.tiled.TiledImageTile"] = flixel_addons_editors_tiled_TiledImageTile;
flixel_addons_editors_tiled_TiledImageTile.__name__ = ["flixel","addons","editors","tiled","TiledImageTile"];
flixel_addons_editors_tiled_TiledImageTile.prototype = {
	id: null
	,width: null
	,height: null
	,source: null
	,__class__: flixel_addons_editors_tiled_TiledImageTile
};
var flixel_addons_editors_tiled_TiledLayerType = $hxClasses["flixel.addons.editors.tiled.TiledLayerType"] = { __ename__ : ["flixel","addons","editors","tiled","TiledLayerType"], __constructs__ : ["TILE","OBJECT","IMAGE"] };
flixel_addons_editors_tiled_TiledLayerType.TILE = ["TILE",0];
flixel_addons_editors_tiled_TiledLayerType.TILE.toString = $estr;
flixel_addons_editors_tiled_TiledLayerType.TILE.__enum__ = flixel_addons_editors_tiled_TiledLayerType;
flixel_addons_editors_tiled_TiledLayerType.OBJECT = ["OBJECT",1];
flixel_addons_editors_tiled_TiledLayerType.OBJECT.toString = $estr;
flixel_addons_editors_tiled_TiledLayerType.OBJECT.__enum__ = flixel_addons_editors_tiled_TiledLayerType;
flixel_addons_editors_tiled_TiledLayerType.IMAGE = ["IMAGE",2];
flixel_addons_editors_tiled_TiledLayerType.IMAGE.toString = $estr;
flixel_addons_editors_tiled_TiledLayerType.IMAGE.__enum__ = flixel_addons_editors_tiled_TiledLayerType;
flixel_addons_editors_tiled_TiledLayerType.__empty_constructs__ = [flixel_addons_editors_tiled_TiledLayerType.TILE,flixel_addons_editors_tiled_TiledLayerType.OBJECT,flixel_addons_editors_tiled_TiledLayerType.IMAGE];
var flixel_addons_editors_tiled_TiledMap = function(data,rootPath) {
	if(rootPath == null) {
		rootPath = "";
	}
	this.rootPath = "";
	this.layerMap = new haxe_ds_StringMap();
	this.noLoadHash = new haxe_ds_StringMap();
	this.layers = [];
	this.tilesetArray = [];
	this.tilesets = new haxe_ds_StringMap();
	this.properties = new flixel_addons_editors_tiled_TiledPropertySet();
	var source = null;
	this.rootPath = rootPath;
	if(typeof(data) == "string") {
		source = new haxe_xml_Fast(Xml.parse(openfl_Assets.getText(data)));
	} else if(js_Boot.__instanceof(data,Xml)) {
		source = new haxe_xml_Fast(data);
	}
	source = source.node.resolve("map");
	this.loadAttributes(source);
	this.loadProperties(source);
	this.loadTilesets(source);
	this.loadLayers(source);
};
$hxClasses["flixel.addons.editors.tiled.TiledMap"] = flixel_addons_editors_tiled_TiledMap;
flixel_addons_editors_tiled_TiledMap.__name__ = ["flixel","addons","editors","tiled","TiledMap"];
flixel_addons_editors_tiled_TiledMap.prototype = {
	version: null
	,orientation: null
	,backgroundColor: null
	,width: null
	,height: null
	,tileWidth: null
	,tileHeight: null
	,fullWidth: null
	,fullHeight: null
	,properties: null
	,tilesets: null
	,tilesetArray: null
	,layers: null
	,noLoadHash: null
	,layerMap: null
	,rootPath: null
	,loadAttributes: function(source) {
		this.version = source.att.resolve("version") != null ? source.att.resolve("version") : "unknown";
		this.orientation = source.att.resolve("orientation") != null ? source.att.resolve("orientation") : "orthogonal";
		this.backgroundColor = source.has.resolve("backgroundcolor") && source.att.resolve("backgroundcolor") != null ? flixel_util__$FlxColor_FlxColor_$Impl_$.fromString(source.att.resolve("backgroundcolor")) : 0;
		this.width = Std.parseInt(source.att.resolve("width"));
		this.height = Std.parseInt(source.att.resolve("height"));
		this.tileWidth = Std.parseInt(source.att.resolve("tilewidth"));
		this.tileHeight = Std.parseInt(source.att.resolve("tileheight"));
		this.fullWidth = this.width * this.tileWidth;
		this.fullHeight = this.height * this.tileHeight;
	}
	,loadProperties: function(source) {
		var _g_head = source.nodes.resolve("properties").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.properties.extend(val);
		}
		var noLoadStr = this.properties.keys.get("noload");
		if(noLoadStr != null) {
			var noLoadArr = new EReg("[,;|]","").split(noLoadStr);
			var _g = 0;
			while(_g < noLoadArr.length) {
				var s = noLoadArr[_g];
				++_g;
				var this1 = this.noLoadHash;
				var key = StringTools.trim(s);
				var _this = this1;
				if(__map_reserved[key] != null) {
					_this.setReserved(key,true);
				} else {
					_this.h[key] = true;
				}
			}
		}
	}
	,loadTilesets: function(source) {
		var _g_head = source.nodes.resolve("tileset").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var name = val.has.resolve("name") ? val.att.resolve("name") : "";
			var _this = this.noLoadHash;
			if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
				var ts = new flixel_addons_editors_tiled_TiledTileSet(val,this.rootPath);
				var key = ts.name;
				var _this1 = this.tilesets;
				if(__map_reserved[key] != null) {
					_this1.setReserved(key,ts);
				} else {
					_this1.h[key] = ts;
				}
				this.tilesetArray.push(ts);
			}
		}
	}
	,loadLayers: function(source) {
		var el = source.get_elements();
		while(el.hasNext()) {
			var el1 = el.next();
			var tmp;
			if(el1.has.resolve("name")) {
				var this1 = this.noLoadHash;
				var key = el1.att.resolve("name");
				var _this = this1;
				if(__map_reserved[key] != null) {
					tmp = _this.existsReserved(key);
				} else {
					tmp = _this.h.hasOwnProperty(key);
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				continue;
			}
			var layer;
			var _g = el1.get_name().toLowerCase();
			switch(_g) {
			case "imagelayer":
				layer = new flixel_addons_editors_tiled_TiledImageLayer(el1,this);
				break;
			case "layer":
				layer = new flixel_addons_editors_tiled_TiledTileLayer(el1,this);
				break;
			case "objectgroup":
				layer = new flixel_addons_editors_tiled_TiledObjectLayer(el1,this);
				break;
			default:
				layer = null;
			}
			if(layer != null) {
				this.layers.push(layer);
				var key1 = layer.name;
				var _this1 = this.layerMap;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,layer);
				} else {
					_this1.h[key1] = layer;
				}
			}
		}
	}
	,getTileSet: function(name) {
		var _this = this.tilesets;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getLayer: function(name) {
		var _this = this.layerMap;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getGidOwner: function(gid) {
		var _this = this.tilesets;
		var set = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(set.hasNext()) {
			var set1 = set.next();
			if(gid >= set1.firstGID && gid < set1.firstGID + set1.numTiles) {
				return set1;
			}
		}
		return null;
	}
	,__class__: flixel_addons_editors_tiled_TiledMap
};
var flixel_addons_editors_tiled_TiledObject = function(source,parent) {
	this.xmlData = source;
	this.layer = parent;
	this.name = source.has.resolve("name") ? source.att.resolve("name") : "";
	this.type = source.has.resolve("type") ? source.att.resolve("type") : parent.properties.keys.exists("defaultType") ? parent.properties.keys.get("defaultType") : "";
	this.x = Std.parseInt(source.att.resolve("x"));
	this.y = Std.parseInt(source.att.resolve("y"));
	this.width = source.has.resolve("width") ? Std.parseInt(source.att.resolve("width")) : 0;
	this.height = source.has.resolve("height") ? Std.parseInt(source.att.resolve("height")) : 0;
	this.angle = source.has.resolve("rotation") ? parseFloat(source.att.resolve("rotation")) : 0;
	this.objectType = 0;
	this.shared = null;
	this.gid = -1;
	if(source.has.resolve("gid") && source.att.resolve("gid").length != 0) {
		this.gid = Std.parseInt(source.att.resolve("gid"));
		var _this = this.layer.map.tilesets;
		var set = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(set.hasNext()) {
			var set1 = set.next();
			this.shared = set1.getPropertiesByGid(this.gid);
			if(this.shared != null) {
				break;
			}
		}
		this.objectType = 4;
	}
	this.properties = new flixel_addons_editors_tiled_TiledPropertySet();
	var _g_head = source.nodes.resolve("properties").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		this.properties.extend(val);
	}
	if(source.hasNode.resolve("ellipse")) {
		this.objectType = 1;
	} else if(source.hasNode.resolve("polygon")) {
		this.objectType = 2;
		this.getPoints(source.node.resolve("polygon"));
	} else if(source.hasNode.resolve("polyline")) {
		this.objectType = 3;
		this.getPoints(source.node.resolve("polyline"));
	}
};
$hxClasses["flixel.addons.editors.tiled.TiledObject"] = flixel_addons_editors_tiled_TiledObject;
flixel_addons_editors_tiled_TiledObject.__name__ = ["flixel","addons","editors","tiled","TiledObject"];
flixel_addons_editors_tiled_TiledObject.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,name: null
	,type: null
	,xmlData: null
	,angle: null
	,gid: null
	,properties: null
	,shared: null
	,layer: null
	,objectType: null
	,flippedHorizontally: null
	,flippedVertically: null
	,points: null
	,getPoints: function(node) {
		this.points = [];
		var pointsStr = node.att.resolve("points").split(" ");
		var pair;
		var _g = 0;
		while(_g < pointsStr.length) {
			var p = pointsStr[_g];
			++_g;
			pair = p.split(",");
			var tmp = this.points;
			var X = parseFloat(pair[0]);
			var Y = parseFloat(pair[1]);
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			tmp.push(point);
		}
	}
	,get_flippedHorizontally: function() {
		return (this.gid & -2147483648) > 0;
	}
	,get_flippedVertically: function() {
		return (this.gid & 1073741824) > 0;
	}
	,__class__: flixel_addons_editors_tiled_TiledObject
	,__properties__: {get_flippedVertically:"get_flippedVertically",get_flippedHorizontally:"get_flippedHorizontally"}
};
var flixel_addons_editors_tiled_TiledObjectLayer = function(source,parent) {
	flixel_addons_editors_tiled_TiledLayer.call(this,source,parent);
	this.type = flixel_addons_editors_tiled_TiledLayerType.OBJECT;
	this.objects = [];
	this.color = source.has.resolve("color") ? flixel_util__$FlxColor_FlxColor_$Impl_$.fromString(source.att.resolve("color")) : 0;
	this.loadObjects(source);
};
$hxClasses["flixel.addons.editors.tiled.TiledObjectLayer"] = flixel_addons_editors_tiled_TiledObjectLayer;
flixel_addons_editors_tiled_TiledObjectLayer.__name__ = ["flixel","addons","editors","tiled","TiledObjectLayer"];
flixel_addons_editors_tiled_TiledObjectLayer.__super__ = flixel_addons_editors_tiled_TiledLayer;
flixel_addons_editors_tiled_TiledObjectLayer.prototype = $extend(flixel_addons_editors_tiled_TiledLayer.prototype,{
	objects: null
	,color: null
	,loadObjects: function(source) {
		var _g_head = source.nodes.resolve("object").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.objects.push(new flixel_addons_editors_tiled_TiledObject(val,this));
		}
	}
	,__class__: flixel_addons_editors_tiled_TiledObjectLayer
});
var flixel_addons_editors_tiled_TiledPropertySet = function() {
	this.keys = new haxe_ds_StringMap();
};
$hxClasses["flixel.addons.editors.tiled.TiledPropertySet"] = flixel_addons_editors_tiled_TiledPropertySet;
flixel_addons_editors_tiled_TiledPropertySet.__name__ = ["flixel","addons","editors","tiled","TiledPropertySet"];
flixel_addons_editors_tiled_TiledPropertySet.prototype = {
	keys: null
	,get: function(Key) {
		return this.keys.get(Key);
	}
	,contains: function(Key) {
		var _this = this.keys;
		if(__map_reserved[Key] != null) {
			return _this.existsReserved(Key);
		} else {
			return _this.h.hasOwnProperty(Key);
		}
	}
	,resolve: function(Name) {
		var _this = this.keys;
		if(__map_reserved[Name] != null) {
			return _this.getReserved(Name);
		} else {
			return _this.h[Name];
		}
	}
	,keysIterator: function() {
		return this.keys.keys();
	}
	,extend: function(Source) {
		var _g_head = Source.nodes.resolve("property").h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var this1 = this.keys;
			var key = val.att.resolve("name");
			var value = val.att.resolve("value");
			var _this = this1;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
	}
	,__class__: flixel_addons_editors_tiled_TiledPropertySet
};
var flixel_addons_editors_tiled_TiledTile = function(OriginalId) {
	this.isFlipVertically = false;
	this.isFlipHorizontally = false;
	this.tileID = OriginalId;
	this.tilesetID = this.tileID & 536870911;
	this.rotate = 0;
	this.resolveFlipAndRotation();
};
$hxClasses["flixel.addons.editors.tiled.TiledTile"] = flixel_addons_editors_tiled_TiledTile;
flixel_addons_editors_tiled_TiledTile.__name__ = ["flixel","addons","editors","tiled","TiledTile"];
flixel_addons_editors_tiled_TiledTile.prototype = {
	tileID: null
	,tilesetID: null
	,isFlipHorizontally: null
	,isFlipVertically: null
	,rotate: null
	,resolveFlipAndRotation: function() {
		var flipHorizontal = (this.tileID & -2147483648) != 0;
		var flipVertical = (this.tileID & 1073741824) != 0;
		if((this.tileID & 536870912) != 0) {
			if(flipHorizontal && flipVertical) {
				this.isFlipHorizontally = true;
				this.rotate = 2;
			} else if(flipHorizontal) {
				this.rotate = 1;
			} else if(flipVertical) {
				this.rotate = 2;
			} else {
				this.isFlipVertically = true;
				this.rotate = 2;
			}
		} else {
			this.isFlipHorizontally = flipHorizontal;
			this.isFlipVertically = flipVertical;
		}
	}
	,resolveTilesetID: function() {
		return this.tileID & 536870911;
	}
	,__class__: flixel_addons_editors_tiled_TiledTile
};
var flixel_addons_editors_tiled_TiledTileLayer = function(source,parent) {
	flixel_addons_editors_tiled_TiledLayer.call(this,source,parent);
	this.type = flixel_addons_editors_tiled_TiledLayerType.TILE;
	this.x = source.has.resolve("x") ? Std.parseInt(source.att.resolve("x")) : 0;
	this.y = source.has.resolve("y") ? Std.parseInt(source.att.resolve("y")) : 0;
	this.width = Std.parseInt(source.att.resolve("width"));
	this.height = Std.parseInt(source.att.resolve("height"));
	this.tiles = [];
	this.xmlData = source.node.resolve("data");
	if(this.xmlData == null) {
		throw new js__$Boot_HaxeError("Error loading TiledLayer level data");
	}
};
$hxClasses["flixel.addons.editors.tiled.TiledTileLayer"] = flixel_addons_editors_tiled_TiledTileLayer;
flixel_addons_editors_tiled_TiledTileLayer.__name__ = ["flixel","addons","editors","tiled","TiledTileLayer"];
flixel_addons_editors_tiled_TiledTileLayer.__super__ = flixel_addons_editors_tiled_TiledLayer;
flixel_addons_editors_tiled_TiledTileLayer.prototype = $extend(flixel_addons_editors_tiled_TiledLayer.prototype,{
	x: null
	,y: null
	,width: null
	,height: null
	,tiles: null
	,encoding: null
	,csvData: null
	,tileArray: null
	,xmlData: null
	,getByteArrayData: function() {
		var result = null;
		if(this.get_encoding() == "base64") {
			var chunk = this.xmlData.get_innerData();
			var compressed = false;
			result = this.base64ToByteArray(chunk);
			result.__endian = 1;
			if(this.xmlData.has.resolve("compression")) {
				var _g = this.xmlData.att.resolve("compression");
				if(_g == "zlib") {
					compressed = true;
				} else {
					throw new js__$Boot_HaxeError("TiledLayer - data compression type not supported!");
				}
			}
			if(compressed) {
				throw new js__$Boot_HaxeError("HTML5 doesn't support compressed data! Use Base64 (uncompressed) when you save the map or install the library 'format' and use it");
			}
		} else {
			throw new js__$Boot_HaxeError("Must use base64 encoding in order to get tileArray data.");
		}
		result.__endian = 1;
		return result;
	}
	,base64ToByteArray: function(data) {
		var this1 = new openfl_utils_ByteArrayData(0);
		var output = this1;
		var lookup = [];
		var _g1 = 0;
		var _g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".length;
		while(_g1 < _g) {
			var c = _g1++;
			lookup[HxOverrides.cca("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",c)] = c;
		}
		var i = 0;
		while(i < data.length - 3) {
			if(data.charAt(i) == " " || data.charAt(i) == "\n" || data.charAt(i) == "\r") {
				++i;
				continue;
			}
			var a0 = lookup[HxOverrides.cca(data,i)];
			var a1 = lookup[HxOverrides.cca(data,i + 1)];
			var a2 = lookup[HxOverrides.cca(data,i + 2)];
			var a3 = lookup[HxOverrides.cca(data,i + 3)];
			if(a1 < 64) {
				output.writeByte((a0 << 2) + ((a1 & 48) >> 4));
			}
			if(a2 < 64) {
				output.writeByte(((a1 & 15) << 4) + ((a2 & 60) >> 2));
			}
			if(a3 < 64) {
				output.writeByte(((a2 & 3) << 6) + a3);
			}
			i += 4;
		}
		output.position = 0;
		return output;
	}
	,resolveTile: function(globalTileId) {
		var tile = new flixel_addons_editors_tiled_TiledTile(globalTileId);
		var tilesetID = tile.tilesetID;
		var _this = this.map.tilesets;
		var tileset = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(tileset.hasNext()) {
			var tileset1 = tileset.next();
			if(tilesetID >= tileset1.firstGID && tilesetID < tileset1.firstGID + tileset1.numTiles) {
				this.tiles.push(tile);
				return tilesetID;
			}
		}
		this.tiles.push(null);
		return 0;
	}
	,get_encoding: function() {
		if(this.encoding != null) {
			return this.encoding;
		} else {
			return this.xmlData.att.resolve("encoding");
		}
	}
	,get_csvData: function() {
		if(this.csvData == null) {
			if(this.xmlData.att.resolve("encoding") == "csv") {
				this.csvData = StringTools.ltrim(this.xmlData.get_innerData());
			} else {
				throw new js__$Boot_HaxeError("Must use CSV encoding in order to get CSV data.");
			}
		}
		return this.csvData;
	}
	,get_tileArray: function() {
		if(this.tileArray == null) {
			this.tileArray = [];
			if(this.get_encoding() == "csv") {
				var endline = this.get_csvData().indexOf("\r\n") != -1 ? "\r\n" : "\n";
				var rows = this.get_csvData().split(endline);
				var _g = 0;
				while(_g < rows.length) {
					var row = rows[_g];
					++_g;
					var cells = row.split(",");
					var _g1 = 0;
					while(_g1 < cells.length) {
						var cell = cells[_g1];
						++_g1;
						if(cell != "") {
							this.tileArray.push(Std.parseInt(cell));
						}
					}
				}
			} else {
				var mapData = this.getByteArrayData();
				if(mapData == null) {
					throw new js__$Boot_HaxeError("Must use Base64 encoding (with or without zlip compression) in order to get 1D Array.");
				}
				while((mapData.position | 0) < (openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(mapData) | 0)) this.tileArray.push(this.resolveTile(mapData.readUnsignedInt()));
			}
		}
		return this.tileArray;
	}
	,__class__: flixel_addons_editors_tiled_TiledTileLayer
	,__properties__: {get_tileArray:"get_tileArray",get_csvData:"get_csvData",get_encoding:"get_encoding"}
});
var flixel_addons_editors_tiled_TiledTilePropertySet = function(tileID) {
	flixel_addons_editors_tiled_TiledPropertySet.call(this);
	this.tileID = tileID;
	this.animationFrames = [];
};
$hxClasses["flixel.addons.editors.tiled.TiledTilePropertySet"] = flixel_addons_editors_tiled_TiledTilePropertySet;
flixel_addons_editors_tiled_TiledTilePropertySet.__name__ = ["flixel","addons","editors","tiled","TiledTilePropertySet"];
flixel_addons_editors_tiled_TiledTilePropertySet.__super__ = flixel_addons_editors_tiled_TiledPropertySet;
flixel_addons_editors_tiled_TiledTilePropertySet.prototype = $extend(flixel_addons_editors_tiled_TiledPropertySet.prototype,{
	tileID: null
	,animationFrames: null
	,addAnimationFrame: function(tileID,duration) {
		this.animationFrames.push({ tileID : tileID, duration : duration});
	}
	,__class__: flixel_addons_editors_tiled_TiledTilePropertySet
});
var flixel_addons_editors_tiled_TiledTileSet = function(data,rootPath) {
	if(rootPath == null) {
		rootPath = "";
	}
	var source;
	this.numTiles = 16777215;
	this.numRows = this.numCols = 1;
	if(js_Boot.__instanceof(data,haxe_xml_Fast)) {
		source = data;
	} else if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) {
		var bytes = data;
		source = new haxe_xml_Fast(Xml.parse(bytes.toString()));
		source = source.node.resolve("tileset");
	} else {
		throw new js__$Boot_HaxeError("Unknown TMX tileset format");
	}
	this.firstGID = source.has.resolve("firstgid") ? Std.parseInt(source.att.resolve("firstgid")) : 1;
	if(source.has.resolve("source")) {
		var sourcePath = rootPath + source.att.resolve("source");
		if(openfl_Assets.exists(sourcePath)) {
			source = new haxe_xml_Fast(Xml.parse(openfl_Assets.getText(sourcePath)));
			source = source.node.resolve("tileset");
		}
	}
	if(!source.has.resolve("source")) {
		var node;
		if(source.hasNode.resolve("image")) {
			node = source.node.resolve("image");
			this.imageSource = node.att.resolve("source");
		} else {
			node = source.node.resolve("tile");
			this.imageSource = "";
			this.tileImagesSources = [];
			var _g_head = source.nodes.resolve("tile").h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				if(!val.has.resolve("id")) {
					continue;
				}
				var id = Std.parseInt(val.att.resolve("id"));
				this.tileImagesSources[id] = new flixel_addons_editors_tiled_TiledImageTile(val);
			}
		}
		this.name = source.att.resolve("name");
		var imgWidth = 0;
		if(node.has.resolve("width")) {
			imgWidth = Std.parseInt(node.att.resolve("width"));
		}
		var imgHeight = 0;
		if(node.has.resolve("height")) {
			imgHeight = Std.parseInt(node.att.resolve("height"));
		}
		if(source.has.resolve("tilewidth")) {
			this.tileWidth = Std.parseInt(source.att.resolve("tilewidth"));
		}
		if(source.has.resolve("tileheight")) {
			this.tileHeight = Std.parseInt(source.att.resolve("tileheight"));
		}
		if(source.has.resolve("spacing")) {
			this.spacing = Std.parseInt(source.att.resolve("spacing"));
		}
		if(source.has.resolve("margin")) {
			this.margin = Std.parseInt(source.att.resolve("margin"));
		}
		this.properties = new flixel_addons_editors_tiled_TiledPropertySet();
		var _g_head1 = source.nodes.resolve("properties").h;
		while(_g_head1 != null) {
			var val1 = _g_head1.item;
			_g_head1 = _g_head1.next;
			this.properties.extend(val1);
		}
		this.tileProps = [];
		var _g_head2 = source.nodes.resolve("tile").h;
		while(_g_head2 != null) {
			var val2 = _g_head2.item;
			_g_head2 = _g_head2.next;
			if(!val2.has.resolve("id")) {
				continue;
			}
			var id1 = Std.parseInt(val2.att.resolve("id"));
			this.tileProps[id1] = new flixel_addons_editors_tiled_TiledTilePropertySet(id1);
			var _this = this.tileProps[id1].keys;
			var value = id1 == null ? "null" : "" + id1;
			if(__map_reserved["id"] != null) {
				_this.setReserved("id",value);
			} else {
				_this.h["id"] = value;
			}
			var _g_head3 = val2.nodes.resolve("properties").h;
			while(_g_head3 != null) {
				var val3 = _g_head3.item;
				_g_head3 = _g_head3.next;
				this.tileProps[id1].extend(val3);
			}
			if(val2.hasNode.resolve("animation")) {
				var _g_head4 = val2.node.resolve("animation").nodes.resolve("frame").h;
				while(_g_head4 != null) {
					var val4 = _g_head4.item;
					_g_head4 = _g_head4.next;
					this.tileProps[id1].addAnimationFrame(Std.parseInt(val4.att.resolve("tileid")),parseFloat(val4.att.resolve("duration")));
				}
			}
		}
		if(this.tileWidth > 0 && this.tileHeight > 0) {
			this.numRows = imgWidth / this.tileWidth | 0;
			this.numCols = imgHeight / this.tileHeight | 0;
			this.numTiles = this.numRows * this.numCols;
		}
	}
};
$hxClasses["flixel.addons.editors.tiled.TiledTileSet"] = flixel_addons_editors_tiled_TiledTileSet;
flixel_addons_editors_tiled_TiledTileSet.__name__ = ["flixel","addons","editors","tiled","TiledTileSet"];
flixel_addons_editors_tiled_TiledTileSet.prototype = {
	firstGID: null
	,name: null
	,tileWidth: null
	,tileHeight: null
	,spacing: null
	,margin: null
	,imageSource: null
	,numTiles: null
	,numRows: null
	,numCols: null
	,properties: null
	,tileProps: null
	,tileImagesSources: null
	,hasGid: function(Gid) {
		if(Gid >= this.firstGID) {
			return Gid < this.firstGID + this.numTiles;
		} else {
			return false;
		}
	}
	,fromGid: function(Gid) {
		return Gid - (this.firstGID - 1);
	}
	,toGid: function(ID) {
		return this.firstGID + ID;
	}
	,getPropertiesByGid: function(Gid) {
		if(this.tileProps != null) {
			return this.tileProps[Gid - this.firstGID];
		}
		return null;
	}
	,getProperties: function(ID) {
		return this.tileProps[ID];
	}
	,getImageSourceByGid: function(Gid) {
		if(this.tileImagesSources != null) {
			return this.tileImagesSources[Gid - this.firstGID];
		}
		return null;
	}
	,getImageSource: function(ID) {
		return this.tileImagesSources[ID];
	}
	,getRect: function(ID) {
		return new openfl_geom_Rectangle(ID % this.numCols * this.tileWidth,ID / this.numCols * this.tileHeight);
	}
	,__class__: flixel_addons_editors_tiled_TiledTileSet
};
var flixel_addons_effects_chainable_FlxEffectSprite = function(Target,Effects) {
	this.updateTargetAnimation = true;
	this.effectsEnabled = true;
	flixel_FlxSprite.call(this);
	this.target = Target;
	this.effects = Effects != null ? Effects : [];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._effectOffset = point;
};
$hxClasses["flixel.addons.effects.chainable.FlxEffectSprite"] = flixel_addons_effects_chainable_FlxEffectSprite;
flixel_addons_effects_chainable_FlxEffectSprite.__name__ = ["flixel","addons","effects","chainable","FlxEffectSprite"];
flixel_addons_effects_chainable_FlxEffectSprite.__super__ = flixel_FlxSprite;
flixel_addons_effects_chainable_FlxEffectSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	effectsEnabled: null
	,target: null
	,updateTargetAnimation: null
	,effects: null
	,_effectOffset: null
	,destroy: function() {
		this.effects = flixel_util_FlxDestroyUtil.destroyArray(this.effects);
		this._effectOffset = flixel_util_FlxDestroyUtil.put(this._effectOffset);
		this.target = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,getScreenPosition: function(point,Camera) {
		return flixel_FlxSprite.prototype.getScreenPosition.call(this,point,Camera).addPoint(this._effectOffset);
	}
	,draw: function() {
		if(this.target.dirty) {
			this.target.drawFrame();
		}
		if(this.target.framePixels == null) {
			flixel_FlxSprite.prototype.draw.call(this);
			return;
		}
		if(this.get_pixels() != null && this.get_pixels().width == this.target.framePixels.width && this.get_pixels().height == this.target.framePixels.height) {
			this.get_pixels().fillRect(this.get_pixels().rect,0);
			this.get_pixels().draw(this.target.framePixels);
		} else {
			flixel_util_FlxDestroyUtil.dispose(this.get_pixels());
			this.set_pixels(this.target.framePixels.clone());
		}
		this._effectOffset.set(0,0);
		if(this.effectsEnabled) {
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var effect = _g1[_g];
				++_g;
				if(effect.active) {
					this.set_pixels(effect.apply(this.get_pixels()));
					if(effect.offset != null) {
						this._effectOffset.addPoint(effect.offset);
					}
				}
			}
			this._flashRect = this.get_pixels().rect;
		}
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,update: function(elapsed) {
		if(this.updateTargetAnimation && this.target.animation._sprite.numFrames > 1) {
			this.target.updateAnimation(elapsed);
		}
		if(this.effectsEnabled) {
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var effect = _g1[_g];
				++_g;
				if(effect.active) {
					effect.update(elapsed);
				}
			}
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,__class__: flixel_addons_effects_chainable_FlxEffectSprite
});
var flixel_addons_effects_chainable_IFlxEffect = function() { };
$hxClasses["flixel.addons.effects.chainable.IFlxEffect"] = flixel_addons_effects_chainable_IFlxEffect;
flixel_addons_effects_chainable_IFlxEffect.__name__ = ["flixel","addons","effects","chainable","IFlxEffect"];
flixel_addons_effects_chainable_IFlxEffect.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_effects_chainable_IFlxEffect.prototype = {
	active: null
	,offset: null
	,update: null
	,apply: null
	,__class__: flixel_addons_effects_chainable_IFlxEffect
};
var flixel_addons_effects_chainable_FlxOutlineEffect = function(Mode,Color,Thickness,Threshold,Quality) {
	if(Quality == null) {
		Quality = 1;
	}
	if(Threshold == null) {
		Threshold = 0;
	}
	if(Thickness == null) {
		Thickness = 1;
	}
	if(Color == null) {
		Color = -1;
	}
	this._matrix = new openfl_geom_Matrix();
	this._flashPoint = new openfl_geom_Point();
	this.dirty = true;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.offset = point;
	this.active = true;
	this.mode = Mode == null ? flixel_addons_effects_chainable_FlxOutlineMode.FAST : Mode;
	this.color = Color;
	this.thickness = Thickness;
	this.threshold = Threshold;
	this.quality = Quality;
};
$hxClasses["flixel.addons.effects.chainable.FlxOutlineEffect"] = flixel_addons_effects_chainable_FlxOutlineEffect;
flixel_addons_effects_chainable_FlxOutlineEffect.__name__ = ["flixel","addons","effects","chainable","FlxOutlineEffect"];
flixel_addons_effects_chainable_FlxOutlineEffect.__interfaces__ = [flixel_addons_effects_chainable_IFlxEffect];
flixel_addons_effects_chainable_FlxOutlineEffect.prototype = {
	active: null
	,offset: null
	,dirty: null
	,mode: null
	,color: null
	,thickness: null
	,threshold: null
	,quality: null
	,_pixels: null
	,_borderPixels: null
	,_flashPoint: null
	,_matrix: null
	,destroy: function() {
		this._pixels = flixel_util_FlxDestroyUtil.dispose(this._pixels);
		this._borderPixels = flixel_util_FlxDestroyUtil.dispose(this._borderPixels);
		this._flashPoint = null;
		this._matrix = null;
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
	}
	,update: function(elapsed) {
	}
	,apply: function(bitmapData) {
		if(this.dirty) {
			var brush = this.thickness * 2;
			if(this._pixels == null || this._pixels.width < bitmapData.width + brush || this._pixels.height < bitmapData.height + brush) {
				flixel_util_FlxDestroyUtil.dispose(this._pixels);
				this._pixels = new openfl_display_BitmapData(bitmapData.width + brush,bitmapData.height + brush,true,this.color);
			} else {
				this._pixels.fillRect(this._pixels.rect,this.color);
			}
			if(this.mode == flixel_addons_effects_chainable_FlxOutlineMode.PIXEL_BY_PIXEL) {
				this.drawPixelByPixel(bitmapData);
			} else {
				if(this._borderPixels == null || this._borderPixels.width < bitmapData.width || this._borderPixels.height < bitmapData.height) {
					flixel_util_FlxDestroyUtil.dispose(this._borderPixels);
					this._borderPixels = new openfl_display_BitmapData(bitmapData.width,bitmapData.height,true,0);
				} else {
					this._borderPixels.fillRect(this._borderPixels.rect,0);
				}
				this._flashPoint.setTo(0,0);
				this._borderPixels.copyPixels(this._pixels,this._pixels.rect,this._flashPoint,bitmapData,null,true);
				this._pixels.fillRect(this._pixels.rect,0);
				this._matrix.identity();
				this._matrix.translate(this.thickness,this.thickness);
				var iterations = Math.max(1,this.thickness * this.quality) | 0;
				var _g = this.mode;
				switch(_g[1]) {
				case 0:
					this.drawFast(iterations);
					break;
				case 1:
					this.drawNormal(iterations);
					break;
				case 2:
					break;
				}
			}
			this.dirty = false;
		}
		if(this._pixels != null) {
			this.offset.set(-this.thickness,-this.thickness);
			this._flashPoint.setTo(this.thickness,this.thickness);
			this._pixels.copyPixels(bitmapData,bitmapData.rect,this._flashPoint,null,null,true);
			flixel_util_FlxDestroyUtil.dispose(bitmapData);
			return this._pixels.clone();
		}
		return bitmapData;
	}
	,drawPixelByPixel: function(bitmapData) {
		this._pixels.fillRect(this._pixels.rect,0);
		var _g1 = 0;
		var _g = bitmapData.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = bitmapData.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var c = bitmapData.getPixel32(x,y);
				if((c >> 24 & 255) > this.threshold) {
					this.surroundPixel(x,y,this.thickness * 2);
				}
			}
		}
	}
	,drawNormal: function(iterations) {
		var delta = this.thickness / iterations;
		var curDelta = delta;
		var _g1 = 0;
		while(_g1 < iterations) {
			++_g1;
			this._matrix.translate(-curDelta,-curDelta);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(curDelta,0);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(curDelta,0);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(0,curDelta);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(0,curDelta);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(-curDelta,0);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(-curDelta,0);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(0,-curDelta);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(curDelta,0);
			curDelta += delta;
		}
	}
	,drawFast: function(iterations) {
		var delta = this.thickness / iterations;
		var curDelta = delta;
		var _g1 = 0;
		while(_g1 < iterations) {
			++_g1;
			this._matrix.translate(-curDelta,-curDelta);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(curDelta * 2,0);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(0,curDelta * 2);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(-curDelta * 2,0);
			this._pixels.draw(this._borderPixels,this._matrix);
			this._matrix.translate(curDelta,-curDelta);
			curDelta += delta;
		}
	}
	,drawBorder: function(x,y) {
		this._matrix.translate(x,y);
		this._pixels.draw(this._borderPixels,this._matrix);
	}
	,surroundPixel: function(x,y,brush) {
		this._pixels.fillRect(new openfl_geom_Rectangle(x,y,brush,brush),this.color);
		return this._pixels;
	}
	,__class__: flixel_addons_effects_chainable_FlxOutlineEffect
};
var flixel_addons_effects_chainable_FlxOutlineMode = $hxClasses["flixel.addons.effects.chainable.FlxOutlineMode"] = { __ename__ : ["flixel","addons","effects","chainable","FlxOutlineMode"], __constructs__ : ["FAST","NORMAL","PIXEL_BY_PIXEL"] };
flixel_addons_effects_chainable_FlxOutlineMode.FAST = ["FAST",0];
flixel_addons_effects_chainable_FlxOutlineMode.FAST.toString = $estr;
flixel_addons_effects_chainable_FlxOutlineMode.FAST.__enum__ = flixel_addons_effects_chainable_FlxOutlineMode;
flixel_addons_effects_chainable_FlxOutlineMode.NORMAL = ["NORMAL",1];
flixel_addons_effects_chainable_FlxOutlineMode.NORMAL.toString = $estr;
flixel_addons_effects_chainable_FlxOutlineMode.NORMAL.__enum__ = flixel_addons_effects_chainable_FlxOutlineMode;
flixel_addons_effects_chainable_FlxOutlineMode.PIXEL_BY_PIXEL = ["PIXEL_BY_PIXEL",2];
flixel_addons_effects_chainable_FlxOutlineMode.PIXEL_BY_PIXEL.toString = $estr;
flixel_addons_effects_chainable_FlxOutlineMode.PIXEL_BY_PIXEL.__enum__ = flixel_addons_effects_chainable_FlxOutlineMode;
flixel_addons_effects_chainable_FlxOutlineMode.__empty_constructs__ = [flixel_addons_effects_chainable_FlxOutlineMode.FAST,flixel_addons_effects_chainable_FlxOutlineMode.NORMAL,flixel_addons_effects_chainable_FlxOutlineMode.PIXEL_BY_PIXEL];
var flixel_addons_util_FlxFSM = function(owner,state) {
	this.age = 0;
	this.set_owner(owner);
	this.set_state(state);
	this.type = 0;
	this.transitions = new flixel_addons_util_FlxFSMTransitionTable();
	this.pools = new haxe_ds_StringMap();
};
$hxClasses["flixel.addons.util.FlxFSM"] = flixel_addons_util_FlxFSM;
flixel_addons_util_FlxFSM.__name__ = ["flixel","addons","util","FlxFSM"];
flixel_addons_util_FlxFSM.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_util_FlxFSM.prototype = {
	owner: null
	,state: null
	,stateClass: null
	,age: null
	,name: null
	,type: null
	,stack: null
	,transitions: null
	,pools: null
	,update: function(elapsed) {
		if(this.state != null && this.owner != null) {
			this.age += elapsed;
			this.state.update(elapsed,this.owner,this);
		}
		if(this.transitions != null && this.pools != null) {
			var newStateClass = this.transitions.poll(this.stateClass,this.owner);
			if(newStateClass != this.stateClass) {
				var curName = null;
				if(this.stateClass != null) {
					curName = Type.getClassName(this.stateClass);
				}
				var newName = Type.getClassName(newStateClass);
				var tmp;
				if(newName != null) {
					var _this = this.pools;
					tmp = !(__map_reserved[newName] != null ? _this.existsReserved(newName) : _this.h.hasOwnProperty(newName));
				} else {
					tmp = false;
				}
				if(tmp) {
					var value = new flixel_util_FlxPool(newStateClass);
					var _this1 = this.pools;
					if(__map_reserved[newName] != null) {
						_this1.setReserved(newName,value);
					} else {
						_this1.h[newName] = value;
					}
				}
				var returnToPool = this.state;
				var _this2 = this.pools;
				this.set_state((__map_reserved[newName] != null ? _this2.getReserved(newName) : _this2.h[newName]).get());
				var tmp1;
				if(this.state != null && curName != null) {
					var _this3 = this.pools;
					if(__map_reserved[curName] != null) {
						tmp1 = _this3.existsReserved(curName);
					} else {
						tmp1 = _this3.h.hasOwnProperty(curName);
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					var _this4 = this.pools;
					(__map_reserved[curName] != null ? _this4.getReserved(curName) : _this4.h[curName]).put(returnToPool);
				}
			}
		}
	}
	,destroy: function() {
		this.set_owner(null);
		this.set_state(null);
		this.stack = null;
		this.name = null;
		this.transitions = null;
		this.pools = null;
	}
	,set_owner: function(owner) {
		if(this.owner != owner) {
			this.owner != null && this.state != null;
			this.owner = owner;
			if(this.owner != null && this.state != null) {
				this.age = 0;
				this.state.enter(this.owner,this);
			}
		}
		return this.owner;
	}
	,set_state: function(state) {
		var newClass = state == null ? null : js_Boot.getClass(state);
		if(this.stateClass != newClass) {
			this.owner != null && this.state != null;
			this.state = state;
			if(this.state != null && this.owner != null) {
				this.age = 0;
				this.state.enter(this.owner,this);
			}
			this.stateClass = newClass;
		}
		return state;
	}
	,__class__: flixel_addons_util_FlxFSM
	,__properties__: {set_state:"set_state",set_owner:"set_owner"}
};
var flixel_addons_util__$FlxFSM_FlxFSMStackSignal = function() {
	if(flixel_addons_util__$FlxFSM_FlxFSMStackSignal._lockSignal == null) {
		flixel_addons_util__$FlxFSM_FlxFSMStackSignal._lockSignal = new flixel_util__$FlxSignal_FlxSignal1();
	}
};
$hxClasses["flixel.addons.util._FlxFSM.FlxFSMStackSignal"] = flixel_addons_util__$FlxFSM_FlxFSMStackSignal;
flixel_addons_util__$FlxFSM_FlxFSMStackSignal.__name__ = ["flixel","addons","util","_FlxFSM","FlxFSMStackSignal"];
flixel_addons_util__$FlxFSM_FlxFSMStackSignal._lockSignal = null;
flixel_addons_util__$FlxFSM_FlxFSMStackSignal.prototype = {
	globalLock: function(type) {
		flixel_addons_util__$FlxFSM_FlxFSMStackSignal._lockSignal.dispatch(type);
	}
	,__class__: flixel_addons_util__$FlxFSM_FlxFSMStackSignal
};
var flixel_addons_util_FlxFSMStack = function() {
	flixel_addons_util__$FlxFSM_FlxFSMStackSignal.call(this);
	this._stack = [];
	this._lockedNames = [];
	this._lockedTypes = 0;
	this._hasLocks = false;
	flixel_addons_util__$FlxFSM_FlxFSMStackSignal._lockSignal.add($bind(this,this.lockType));
};
$hxClasses["flixel.addons.util.FlxFSMStack"] = flixel_addons_util_FlxFSMStack;
flixel_addons_util_FlxFSMStack.__name__ = ["flixel","addons","util","FlxFSMStack"];
flixel_addons_util_FlxFSMStack.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_addons_util_FlxFSMStack.__super__ = flixel_addons_util__$FlxFSM_FlxFSMStackSignal;
flixel_addons_util_FlxFSMStack.prototype = $extend(flixel_addons_util__$FlxFSM_FlxFSMStackSignal.prototype,{
	_stack: null
	,_alteredStack: null
	,_hasLocks: null
	,_lockedNames: null
	,_lockedTypes: null
	,_lockRemaining: null
	,update: function(elapsed) {
		if(this._alteredStack != null) {
			this._stack = this._alteredStack.slice();
			this._alteredStack = null;
		}
		var _g = 0;
		var _g1 = this._stack;
		while(_g < _g1.length) {
			var fsm = _g1[_g];
			++_g;
			if(this._hasLocks) {
				if(this._lockRemaining == false && (fsm.type & this._lockedTypes) == 0 && this._lockedNames.indexOf(fsm.name) == -1) {
					fsm.update(elapsed);
				}
			} else {
				fsm.update(elapsed);
			}
		}
		if(this._lockedNames.length != 0) {
			this._lockedNames = [];
		}
		this._lockRemaining = false;
		this._lockedTypes = 0;
		this._hasLocks = false;
	}
	,lock: function(name) {
		if(this._lockedNames.indexOf(name) == -1) {
			this._lockedNames.push(name);
			this._hasLocks = true;
		}
	}
	,lockRemaining: function() {
		this._lockRemaining = true;
		this._hasLocks = true;
	}
	,lockType: function(bitflag) {
		this._lockedTypes |= bitflag;
		this._hasLocks = true;
	}
	,unshift: function(FSM) {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		FSM.stack = this;
		this._alteredStack.unshift(FSM);
	}
	,shift: function() {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		var FSM = this._alteredStack.shift();
		flixel_util_FlxDestroyUtil.destroy(FSM);
		return FSM;
	}
	,push: function(FSM) {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		FSM.stack = this;
		this._alteredStack.push(FSM);
	}
	,pop: function() {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		var FSM = this._alteredStack.pop();
		this.lock(FSM.name);
		flixel_util_FlxDestroyUtil.destroy(FSM);
		return FSM;
	}
	,remove: function(FSM) {
		if(this._alteredStack == null) {
			this._alteredStack = this._stack.slice();
		}
		if(HxOverrides.remove(this._alteredStack,FSM)) {
			this.lock(FSM.name);
			flixel_util_FlxDestroyUtil.destroy(FSM);
		}
	}
	,removeByName: function(name) {
		var _g = 0;
		var _g1 = this._stack;
		while(_g < _g1.length) {
			var fsm = _g1[_g];
			++_g;
			if(fsm.name == name) {
				this.remove(fsm);
			}
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this._stack;
		while(_g < _g1.length) {
			var fsm = _g1[_g];
			++_g;
			flixel_util_FlxDestroyUtil.destroy(fsm);
		}
		this.lockRemaining();
		flixel_addons_util__$FlxFSM_FlxFSMStackSignal._lockSignal.remove($bind(this,this.lockType));
	}
	,get_isEmpty: function() {
		return this._stack.length == 0;
	}
	,__class__: flixel_addons_util_FlxFSMStack
	,__properties__: {get_isEmpty:"get_isEmpty"}
});
var flixel_addons_util_FlxFSMTransitionTable = function() {
	this._garbagecollect = false;
	this._table = [];
};
$hxClasses["flixel.addons.util.FlxFSMTransitionTable"] = flixel_addons_util_FlxFSMTransitionTable;
flixel_addons_util_FlxFSMTransitionTable.__name__ = ["flixel","addons","util","FlxFSMTransitionTable"];
flixel_addons_util_FlxFSMTransitionTable.prototype = {
	_table: null
	,_startState: null
	,_garbagecollect: null
	,poll: function(currentState,owner) {
		if(currentState == null && this._startState != null) {
			return this._startState;
		}
		if(this._garbagecollect) {
			this._garbagecollect = false;
			var removeThese = [];
			var _g = 0;
			var _g1 = this._table;
			while(_g < _g1.length) {
				var transition = _g1[_g];
				++_g;
				if(transition.remove == true) {
					if(transition.from == currentState) {
						this._garbagecollect = true;
					} else {
						removeThese.push(transition);
					}
				}
			}
			var _g2 = 0;
			while(_g2 < removeThese.length) {
				var transition1 = removeThese[_g2];
				++_g2;
				HxOverrides.remove(this._table,transition1);
			}
		}
		var _g3 = 0;
		var _g11 = this._table;
		while(_g3 < _g11.length) {
			var transition2 = _g11[_g3];
			++_g3;
			if(transition2.from == currentState || transition2.from == null) {
				if(transition2.evaluate(owner) == true) {
					return transition2.to;
				}
			}
		}
		return currentState;
	}
	,add: function(from,to,condition) {
		if(this.hasTransition(from,to,condition) == false) {
			var row = new flixel_addons_util_Transition();
			row.from = from;
			row.to = to;
			row.condition = condition;
			this._table.push(row);
		}
		return this;
	}
	,addGlobal: function(to,condition) {
		if(this.hasTransition(null,to,condition) == false) {
			var row = new flixel_addons_util_Transition();
			row.to = to;
			row.condition = condition;
			this._table.push(row);
		}
		return this;
	}
	,addTransition: function(transition) {
		if(this._table.indexOf(transition) == -1) {
			this._table.push(transition);
		}
	}
	,start: function($with) {
		this._startState = $with;
		return this;
	}
	,replace: function(target,replacement) {
		var _g = 0;
		var _g1 = this._table;
		while(_g < _g1.length) {
			var transition = _g1[_g];
			++_g;
			if(transition.to == target) {
				transition.remove = true;
				if(transition.from == null) {
					this.addGlobal(replacement,transition.condition);
				} else {
					this.add(transition.from,replacement,transition.condition);
				}
				this._garbagecollect = true;
			}
			if(transition.from == target) {
				transition.remove = true;
				this.add(replacement,transition.to,transition.condition);
				this._garbagecollect = true;
			}
		}
	}
	,remove: function(from,to,condition) {
		if(to == null) {
			if(condition == null) {
				var _g = 0;
				var _g1 = this._table;
				while(_g < _g1.length) {
					var transition = _g1[_g];
					++_g;
					if(from == transition.from) {
						transition.remove = true;
						this._garbagecollect = true;
					}
				}
			} else if(from == null) {
				var _g2 = 0;
				var _g11 = this._table;
				while(_g2 < _g11.length) {
					var transition1 = _g11[_g2];
					++_g2;
					if(to == transition1.to && condition == transition1.condition) {
						transition1.remove = true;
						this._garbagecollect = true;
					}
				}
			} else {
				var _g3 = 0;
				var _g12 = this._table;
				while(_g3 < _g12.length) {
					var transition2 = _g12[_g3];
					++_g3;
					if(from == transition2.from && to == transition2.to && condition == transition2.condition) {
						transition2.remove = true;
						this._garbagecollect = true;
					}
				}
			}
		} else if(condition == null) {
			var _g4 = 0;
			var _g13 = this._table;
			while(_g4 < _g13.length) {
				var transition3 = _g13[_g4];
				++_g4;
				if(from == transition3.from && to == transition3.to) {
					transition3.remove = true;
					this._garbagecollect = true;
				}
			}
		} else if(from == null) {
			var _g5 = 0;
			var _g14 = this._table;
			while(_g5 < _g14.length) {
				var transition4 = _g14[_g5];
				++_g5;
				if(to == transition4.to && condition == transition4.condition) {
					transition4.remove = true;
					this._garbagecollect = true;
				}
			}
		} else {
			var _g6 = 0;
			var _g15 = this._table;
			while(_g6 < _g15.length) {
				var transition5 = _g15[_g6];
				++_g6;
				if(from == transition5.from && to == transition5.to && condition == transition5.condition) {
					transition5.remove = true;
					this._garbagecollect = true;
				}
			}
		}
	}
	,hasTransition: function(from,to,condition) {
		if(to == null) {
			if(condition == null) {
				var _g = 0;
				var _g1 = this._table;
				while(_g < _g1.length) {
					var transition = _g1[_g];
					++_g;
					if(from == transition.from && transition.remove == false) {
						return true;
					}
				}
			} else if(from == null) {
				var _g2 = 0;
				var _g11 = this._table;
				while(_g2 < _g11.length) {
					var transition1 = _g11[_g2];
					++_g2;
					if(to == transition1.to && condition == transition1.condition && transition1.remove == false) {
						return true;
					}
				}
			} else {
				var _g3 = 0;
				var _g12 = this._table;
				while(_g3 < _g12.length) {
					var transition2 = _g12[_g3];
					++_g3;
					if(from == transition2.from && to == transition2.to && condition == transition2.condition && transition2.remove == false) {
						return true;
					}
				}
			}
		} else if(condition == null) {
			var _g4 = 0;
			var _g13 = this._table;
			while(_g4 < _g13.length) {
				var transition3 = _g13[_g4];
				++_g4;
				if(from == transition3.from && to == transition3.to && transition3.remove == false) {
					return true;
				}
			}
		} else if(from == null) {
			var _g5 = 0;
			var _g14 = this._table;
			while(_g5 < _g14.length) {
				var transition4 = _g14[_g5];
				++_g5;
				if(to == transition4.to && condition == transition4.condition && transition4.remove == false) {
					return true;
				}
			}
		} else {
			var _g6 = 0;
			var _g15 = this._table;
			while(_g6 < _g15.length) {
				var transition5 = _g15[_g6];
				++_g6;
				if(from == transition5.from && to == transition5.to && condition == transition5.condition && transition5.remove == false) {
					return true;
				}
			}
		}
		return false;
	}
	,__class__: flixel_addons_util_FlxFSMTransitionTable
};
var flixel_addons_util_Transition = function() {
	this.remove = false;
};
$hxClasses["flixel.addons.util.Transition"] = flixel_addons_util_Transition;
flixel_addons_util_Transition.__name__ = ["flixel","addons","util","Transition"];
flixel_addons_util_Transition.prototype = {
	evaluate: function(target) {
		return this.condition(target);
	}
	,from: null
	,to: null
	,condition: null
	,remove: null
	,__class__: flixel_addons_util_Transition
};
var flixel_animation_FlxBaseAnimation = function(Parent,Name) {
	this.curIndex = 0;
	this.parent = Parent;
	this.name = Name;
};
$hxClasses["flixel.animation.FlxBaseAnimation"] = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxBaseAnimation.__name__ = ["flixel","animation","FlxBaseAnimation"];
flixel_animation_FlxBaseAnimation.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_animation_FlxBaseAnimation.prototype = {
	parent: null
	,name: null
	,curIndex: null
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null && this.parent._curAnim == this) {
			this.parent.set_frameIndex(Value);
		}
		return Value;
	}
	,destroy: function() {
		this.parent = null;
		this.name = null;
	}
	,update: function(elapsed) {
	}
	,clone: function(Parent) {
		return null;
	}
	,__class__: flixel_animation_FlxBaseAnimation
	,__properties__: {set_curIndex:"set_curIndex"}
};
var flixel_animation_FlxAnimation = function(Parent,Name,Frames,FrameRate,Looped,FlipX,FlipY) {
	if(FlipY == null) {
		FlipY = false;
	}
	if(FlipX == null) {
		FlipX = false;
	}
	if(Looped == null) {
		Looped = true;
	}
	if(FrameRate == null) {
		FrameRate = 0;
	}
	this._frameTimer = 0;
	this.flipY = false;
	this.flipX = false;
	this.reversed = false;
	this.looped = true;
	this.paused = true;
	this.finished = true;
	this.delay = 0;
	this.curFrame = 0;
	flixel_animation_FlxBaseAnimation.call(this,Parent,Name);
	this.set_frameRate(FrameRate);
	this.frames = Frames;
	this.looped = Looped;
	this.flipX = FlipX;
	this.flipY = FlipY;
};
$hxClasses["flixel.animation.FlxAnimation"] = flixel_animation_FlxAnimation;
flixel_animation_FlxAnimation.__name__ = ["flixel","animation","FlxAnimation"];
flixel_animation_FlxAnimation.__super__ = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxAnimation.prototype = $extend(flixel_animation_FlxBaseAnimation.prototype,{
	frameRate: null
	,curFrame: null
	,numFrames: null
	,delay: null
	,finished: null
	,paused: null
	,looped: null
	,reversed: null
	,flipX: null
	,flipY: null
	,frames: null
	,_frameTimer: null
	,destroy: function() {
		this.frames = null;
		this.name = null;
		flixel_animation_FlxBaseAnimation.prototype.destroy.call(this);
	}
	,play: function(Force,Reversed,Frame) {
		if(Frame == null) {
			Frame = 0;
		}
		if(Reversed == null) {
			Reversed = false;
		}
		if(Force == null) {
			Force = false;
		}
		if(!Force && !this.finished && this.reversed == Reversed) {
			this.paused = false;
			this.finished = false;
			return;
		}
		this.reversed = Reversed;
		this.paused = false;
		this._frameTimer = 0;
		this.finished = this.delay == 0;
		var maxFrameIndex = this.frames.length - 1;
		if(Frame < 0) {
			this.set_curFrame(flixel_FlxG.random["int"](0,maxFrameIndex));
		} else {
			if(Frame > maxFrameIndex) {
				Frame = maxFrameIndex;
			}
			if(this.reversed) {
				Frame = maxFrameIndex - Frame;
			}
			this.set_curFrame(Frame);
		}
		if(this.finished) {
			var _this = this.parent;
			if(_this.finishCallback != null) {
				_this.finishCallback(this.name);
			}
		}
	}
	,restart: function() {
		this.play(true,this.reversed);
	}
	,stop: function() {
		this.finished = true;
		this.paused = true;
	}
	,reset: function() {
		this.stop();
		this.set_curFrame(this.reversed ? this.frames.length - 1 : 0);
	}
	,finish: function() {
		this.stop();
		this.set_curFrame(this.reversed ? 0 : this.frames.length - 1);
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		this.paused = false;
	}
	,reverse: function() {
		this.reversed = !this.reversed;
		if(this.finished) {
			this.play(false,this.reversed);
		}
	}
	,update: function(elapsed) {
		if(this.delay == 0 || this.finished || this.paused) {
			return;
		}
		this._frameTimer += elapsed;
		while(this._frameTimer > this.delay && !this.finished) {
			this._frameTimer -= this.delay;
			if(this.reversed) {
				if(this.looped && this.curFrame == 0) {
					this.set_curFrame(this.frames.length - 1);
				} else {
					var _g = this;
					var _g1 = _g.curFrame;
					_g.set_curFrame(_g1 - 1);
				}
			} else if(this.looped && this.curFrame == this.frames.length - 1) {
				this.set_curFrame(0);
			} else {
				var _g2 = this;
				var _g11 = _g2.curFrame;
				_g2.set_curFrame(_g11 + 1);
			}
		}
	}
	,clone: function(Parent) {
		return new flixel_animation_FlxAnimation(Parent,this.name,this.frames,this.frameRate,this.looped,this.flipX,this.flipY);
	}
	,set_frameRate: function(value) {
		this.delay = 0;
		this.frameRate = value;
		if(value > 0) {
			this.delay = 1.0 / value;
		}
		return value;
	}
	,set_curFrame: function(Frame) {
		var maxFrameIndex = this.frames.length - 1;
		var tempFrame = this.reversed ? maxFrameIndex - Frame : Frame;
		if(tempFrame >= 0) {
			if(!this.looped && Frame > maxFrameIndex) {
				this.finished = true;
				this.curFrame = this.reversed ? 0 : maxFrameIndex;
			} else {
				this.curFrame = Frame;
			}
		} else {
			this.curFrame = flixel_FlxG.random["int"](0,maxFrameIndex);
		}
		this.set_curIndex(this.frames[this.curFrame]);
		if(this.finished && this.parent != null) {
			var _this = this.parent;
			if(_this.finishCallback != null) {
				_this.finishCallback(this.name);
			}
		}
		return Frame;
	}
	,get_numFrames: function() {
		return this.frames.length;
	}
	,__class__: flixel_animation_FlxAnimation
	,__properties__: $extend(flixel_animation_FlxBaseAnimation.prototype.__properties__,{get_numFrames:"get_numFrames",set_curFrame:"set_curFrame",set_frameRate:"set_frameRate"})
});
var flixel_animation_FlxAnimationController = function(Sprite) {
	this.frameIndex = -1;
	this._sprite = Sprite;
	this._animations = new haxe_ds_StringMap();
};
$hxClasses["flixel.animation.FlxAnimationController"] = flixel_animation_FlxAnimationController;
flixel_animation_FlxAnimationController.__name__ = ["flixel","animation","FlxAnimationController"];
flixel_animation_FlxAnimationController.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_animation_FlxAnimationController.prototype = {
	frameIndex: null
	,frames: null
	,callback: null
	,finishCallback: null
	,_sprite: null
	,_curAnim: null
	,_animations: null
	,_prerotated: null
	,update: function(elapsed) {
		if(this._curAnim != null) {
			this._curAnim.update(elapsed);
		} else if(this._prerotated != null) {
			this._prerotated.set_angle(this._sprite.angle);
		}
	}
	,copyFrom: function(controller) {
		this.destroyAnimations();
		var _this = controller._animations;
		var anim = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(anim.hasNext()) {
			var anim1 = anim.next();
			this.add(anim1.name,anim1.frames,anim1.frameRate,anim1.looped);
		}
		if(controller._prerotated != null) {
			this.createPrerotated();
		}
		if(controller.get_name() != null) {
			this.set_name(controller.get_name());
		}
		this.set_frameIndex(controller.frameIndex);
		return this;
	}
	,createPrerotated: function(Controller) {
		this.destroyAnimations();
		if(Controller != null) {
			Controller = Controller;
		} else {
			Controller = this;
		}
		this._prerotated = new flixel_animation_FlxPrerotatedAnimation(Controller,Controller._sprite.bakedRotationAngle);
		this._prerotated.set_angle(this._sprite.angle);
	}
	,destroyAnimations: function() {
		this.clearAnimations();
		this.clearPrerotated();
	}
	,destroy: function() {
		this.destroyAnimations();
		this._animations = null;
		this.callback = null;
		this._sprite = null;
	}
	,clearPrerotated: function() {
		if(this._prerotated != null) {
			this._prerotated.destroy();
		}
		this._prerotated = null;
	}
	,clearAnimations: function() {
		if(this._animations != null) {
			var anim;
			var key = this._animations.keys();
			while(key.hasNext()) {
				var key1 = key.next();
				var _this = this._animations;
				if(__map_reserved[key1] != null) {
					anim = _this.getReserved(key1);
				} else {
					anim = _this.h[key1];
				}
				if(anim != null) {
					anim.destroy();
				}
				this._animations.remove(key1);
			}
		}
		this._curAnim = null;
	}
	,add: function(Name,Frames,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		var framesToAdd = Frames;
		var numFrames = Frames.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(framesToAdd[i] >= this._sprite.numFrames) {
				if(framesToAdd == Frames) {
					framesToAdd = Frames.slice();
				}
				framesToAdd.splice(i,1);
			}
			--i;
		}
		if(framesToAdd.length > 0) {
			var anim = new flixel_animation_FlxAnimation(this,Name,framesToAdd,FrameRate,Looped,FlipX,FlipY);
			var _this = this._animations;
			if(__map_reserved[Name] != null) {
				_this.setReserved(Name,anim);
			} else {
				_this.h[Name] = anim;
			}
		}
	}
	,remove: function(Name) {
		var _this = this._animations;
		var anim = __map_reserved[Name] != null ? _this.getReserved(Name) : _this.h[Name];
		if(anim != null) {
			this._animations.remove(Name);
			anim.destroy();
		}
	}
	,append: function(Name,Frames) {
		var _this = this._animations;
		var anim = __map_reserved[Name] != null ? _this.getReserved(Name) : _this.h[Name];
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_log_LogStyle.WARNING,true);
			return;
		}
		var numFrames = Frames.length - 1;
		var i = numFrames;
		while(i >= 0) {
			if(Frames[numFrames - i] < this._sprite.numFrames) {
				anim.frames.push(Frames[numFrames - i]);
			}
			--i;
		}
	}
	,addByNames: function(Name,FrameNames,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		if(this._sprite.frames != null) {
			var indices = [];
			this.byNamesHelper(indices,FrameNames);
			if(indices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,indices,FrameRate,Looped,FlipX,FlipY);
				var _this = this._animations;
				if(__map_reserved[Name] != null) {
					_this.setReserved(Name,anim);
				} else {
					_this.h[Name] = anim;
				}
			}
		}
	}
	,appendByNames: function(Name,FrameNames) {
		var _this = this._animations;
		var anim = __map_reserved[Name] != null ? _this.getReserved(Name) : _this.h[Name];
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_log_LogStyle.WARNING,true);
			return;
		}
		if(this._sprite.frames != null) {
			this.byNamesHelper(anim.frames,FrameNames);
		}
	}
	,addByStringIndices: function(Name,Prefix,Indices,Postfix,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		if(this._sprite.frames != null) {
			var frameIndices = [];
			this.byStringIndicesHelper(frameIndices,Prefix,Indices,Postfix);
			if(frameIndices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped,FlipX,FlipY);
				var _this = this._animations;
				if(__map_reserved[Name] != null) {
					_this.setReserved(Name,anim);
				} else {
					_this.h[Name] = anim;
				}
			}
		}
	}
	,appendByStringIndices: function(Name,Prefix,Indices,Postfix) {
		var _this = this._animations;
		var anim = __map_reserved[Name] != null ? _this.getReserved(Name) : _this.h[Name];
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_log_LogStyle.WARNING,true);
			return;
		}
		if(this._sprite.frames != null) {
			this.byStringIndicesHelper(anim.frames,Prefix,Indices,Postfix);
		}
	}
	,addByIndices: function(Name,Prefix,Indices,Postfix,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		if(this._sprite.frames != null) {
			var frameIndices = [];
			this.byIndicesHelper(frameIndices,Prefix,Indices,Postfix);
			if(frameIndices.length > 0) {
				var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped,FlipX,FlipY);
				var _this = this._animations;
				if(__map_reserved[Name] != null) {
					_this.setReserved(Name,anim);
				} else {
					_this.h[Name] = anim;
				}
			}
		}
	}
	,appendByIndices: function(Name,Prefix,Indices,Postfix) {
		var _this = this._animations;
		var anim = __map_reserved[Name] != null ? _this.getReserved(Name) : _this.h[Name];
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_log_LogStyle.WARNING,true);
			return;
		}
		if(this._sprite.frames != null) {
			this.byIndicesHelper(anim.frames,Prefix,Indices,Postfix);
		}
	}
	,findSpriteFrame: function(Prefix,Index,Postfix) {
		var numFrames = this._sprite.numFrames;
		var flxFrames = this._sprite.frames.frames;
		var _g1 = 0;
		while(_g1 < numFrames) {
			var i = _g1++;
			var name = flxFrames[i].name;
			if(StringTools.startsWith(name,Prefix) && StringTools.endsWith(name,Postfix)) {
				var index = Std.parseInt(name.substring(Prefix.length,name.length - Postfix.length));
				if(index != null && index == Index) {
					return i;
				}
			}
		}
		return -1;
	}
	,addByPrefix: function(Name,Prefix,FrameRate,Looped,FlipX,FlipY) {
		if(FlipY == null) {
			FlipY = false;
		}
		if(FlipX == null) {
			FlipX = false;
		}
		if(Looped == null) {
			Looped = true;
		}
		if(FrameRate == null) {
			FrameRate = 30;
		}
		if(this._sprite.frames != null) {
			var animFrames = [];
			this.findByPrefix(animFrames,Prefix);
			if(animFrames.length > 0) {
				var frameIndices = [];
				this.byPrefixHelper(frameIndices,animFrames,Prefix);
				if(frameIndices.length > 0) {
					var anim = new flixel_animation_FlxAnimation(this,Name,frameIndices,FrameRate,Looped,FlipX,FlipY);
					var _this = this._animations;
					if(__map_reserved[Name] != null) {
						_this.setReserved(Name,anim);
					} else {
						_this.h[Name] = anim;
					}
				}
			}
		}
	}
	,appendByPrefix: function(Name,Prefix) {
		var _this = this._animations;
		var anim = __map_reserved[Name] != null ? _this.getReserved(Name) : _this.h[Name];
		if(anim == null) {
			flixel_FlxG.log.advanced("No animation called \"" + Name + "\"",flixel_system_debug_log_LogStyle.WARNING,true);
			return;
		}
		if(this._sprite.frames != null) {
			var animFrames = [];
			this.findByPrefix(animFrames,Prefix);
			if(animFrames.length > 0) {
				this.byPrefixHelper(anim.frames,animFrames,Prefix);
			}
		}
	}
	,play: function(AnimName,Force,Reversed,Frame) {
		if(Frame == null) {
			Frame = 0;
		}
		if(Reversed == null) {
			Reversed = false;
		}
		if(Force == null) {
			Force = false;
		}
		if(AnimName == null) {
			if(this._curAnim != null) {
				this._curAnim.stop();
			}
			this._curAnim = null;
		}
		var tmp;
		if(AnimName != null) {
			var _this = this._animations;
			tmp = (__map_reserved[AnimName] != null ? _this.getReserved(AnimName) : _this.h[AnimName]) == null;
		} else {
			tmp = true;
		}
		if(tmp) {
			flixel_FlxG.log.advanced("No animation called \"" + AnimName + "\"",flixel_system_debug_log_LogStyle.WARNING,true);
			return;
		}
		var oldFlipX = false;
		var oldFlipY = false;
		if(this._curAnim != null && AnimName != this._curAnim.name) {
			oldFlipX = this._curAnim.flipX;
			oldFlipY = this._curAnim.flipY;
			this._curAnim.stop();
		}
		var _this1 = this._animations;
		this._curAnim = __map_reserved[AnimName] != null ? _this1.getReserved(AnimName) : _this1.h[AnimName];
		this._curAnim.play(Force,Reversed,Frame);
		if(oldFlipX != this._curAnim.flipX || oldFlipY != this._curAnim.flipY) {
			this._sprite.dirty = true;
		}
	}
	,reset: function() {
		if(this._curAnim != null) {
			this._curAnim.reset();
		}
	}
	,finish: function() {
		if(this._curAnim != null) {
			this._curAnim.finish();
		}
	}
	,stop: function() {
		if(this._curAnim != null) {
			this._curAnim.stop();
		}
	}
	,pause: function() {
		if(this._curAnim != null) {
			this._curAnim.pause();
		}
	}
	,resume: function() {
		if(this._curAnim != null) {
			this._curAnim.paused = false;
		}
	}
	,reverse: function() {
		if(this._curAnim != null) {
			this._curAnim.reverse();
		}
	}
	,getByName: function(Name) {
		var _this = this._animations;
		if(__map_reserved[Name] != null) {
			return _this.getReserved(Name);
		} else {
			return _this.h[Name];
		}
	}
	,randomFrame: function() {
		if(this._curAnim != null) {
			this._curAnim.stop();
			this._curAnim = null;
		}
		this.set_frameIndex(flixel_FlxG.random["int"](0,this._sprite.numFrames - 1));
	}
	,fireCallback: function() {
		if(this.callback != null) {
			var name = this._curAnim != null ? this._curAnim.name : null;
			var number = this._curAnim != null ? this._curAnim.curFrame : this.frameIndex;
			this.callback(name,number,this.frameIndex);
		}
	}
	,fireFinishCallback: function(name) {
		if(this.finishCallback != null) {
			this.finishCallback(name);
		}
	}
	,byNamesHelper: function(AddTo,FrameNames) {
		var _g = 0;
		while(_g < FrameNames.length) {
			var frameName = FrameNames[_g];
			++_g;
			var _this = this._sprite.frames.framesHash;
			if(__map_reserved[frameName] != null ? _this.existsReserved(frameName) : _this.h.hasOwnProperty(frameName)) {
				var _this1 = this._sprite.frames.framesHash;
				var frameToAdd = __map_reserved[frameName] != null ? _this1.getReserved(frameName) : _this1.h[frameName];
				AddTo.push(this._sprite.frames.frames.indexOf(frameToAdd));
			}
		}
	}
	,byStringIndicesHelper: function(AddTo,Prefix,Indices,Postfix) {
		var _g = 0;
		while(_g < Indices.length) {
			var index = Indices[_g];
			++_g;
			var name = Prefix + index + Postfix;
			var _this = this._sprite.frames.framesHash;
			if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
				var _this1 = this._sprite.frames.framesHash;
				var frameToAdd = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
				AddTo.push(this._sprite.frames.frames.indexOf(frameToAdd));
			}
		}
	}
	,byIndicesHelper: function(AddTo,Prefix,Indices,Postfix) {
		var _g = 0;
		while(_g < Indices.length) {
			var index = Indices[_g];
			++_g;
			var indexToAdd = this.findSpriteFrame(Prefix,index,Postfix);
			if(indexToAdd != -1) {
				AddTo.push(indexToAdd);
			}
		}
	}
	,byPrefixHelper: function(AddTo,AnimFrames,Prefix) {
		var name = AnimFrames[0].name;
		var postIndex = name.indexOf(".",Prefix.length);
		var postFix = name.substring(postIndex == -1 ? name.length : postIndex,name.length);
		flixel_graphics_frames_FlxFrame.sort(AnimFrames,Prefix.length,postFix.length);
		var _g = 0;
		while(_g < AnimFrames.length) {
			var animFrame = AnimFrames[_g];
			++_g;
			AddTo.push(this._sprite.frames.frames.indexOf(animFrame));
		}
	}
	,findByPrefix: function(AnimFrames,Prefix) {
		var _g = 0;
		var _g1 = this._sprite.frames.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			if(frame.name != null && StringTools.startsWith(frame.name,Prefix)) {
				AnimFrames.push(frame);
			}
		}
	}
	,set_frameIndex: function(Frame) {
		if(this._sprite.frames != null) {
			Frame %= this._sprite.numFrames;
			this._sprite.set_frame(this._sprite.frames.frames[Frame]);
			this.frameIndex = Frame;
			if(this.callback != null) {
				var name = this._curAnim != null ? this._curAnim.name : null;
				var number = this._curAnim != null ? this._curAnim.curFrame : this.frameIndex;
				this.callback(name,number,this.frameIndex);
			}
		}
		return this.frameIndex;
	}
	,get_frameName: function() {
		return this._sprite.frame.name;
	}
	,set_frameName: function(Value) {
		var tmp;
		if(this._sprite.frames != null) {
			var _this = this._sprite.frames.framesHash;
			if(__map_reserved[Value] != null) {
				tmp = _this.existsReserved(Value);
			} else {
				tmp = _this.h.hasOwnProperty(Value);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this._curAnim != null) {
				this._curAnim.stop();
				this._curAnim = null;
			}
			var _this1 = this._sprite.frames.framesHash;
			var frame = __map_reserved[Value] != null ? _this1.getReserved(Value) : _this1.h[Value];
			if(frame != null) {
				this.set_frameIndex(this._sprite.frames.frames.indexOf(frame));
			}
		}
		return Value;
	}
	,get_name: function() {
		var animName = null;
		if(this._curAnim != null) {
			animName = this._curAnim.name;
		}
		return animName;
	}
	,set_name: function(AnimName) {
		this.play(AnimName);
		return AnimName;
	}
	,get_curAnim: function() {
		return this._curAnim;
	}
	,set_curAnim: function(Anim) {
		if(Anim != this._curAnim) {
			if(this._curAnim != null) {
				this._curAnim.stop();
			}
			if(Anim != null) {
				Anim.play();
			}
		}
		return this._curAnim = Anim;
	}
	,get_paused: function() {
		var paused = false;
		if(this._curAnim != null) {
			paused = this._curAnim.paused;
		}
		return paused;
	}
	,set_paused: function(Value) {
		if(this._curAnim != null) {
			if(Value) {
				this._curAnim.pause();
			} else {
				this._curAnim.paused = false;
			}
		}
		return Value;
	}
	,get_finished: function() {
		var finished = true;
		if(this._curAnim != null) {
			finished = this._curAnim.finished;
		}
		return finished;
	}
	,set_finished: function(Value) {
		if(Value && this._curAnim != null) {
			this._curAnim.finish();
		}
		return Value;
	}
	,get_frames: function() {
		return this._sprite.numFrames;
	}
	,getFrameIndex: function(Frame) {
		return this._sprite.frames.frames.indexOf(Frame);
	}
	,__class__: flixel_animation_FlxAnimationController
	,__properties__: {get_frames:"get_frames",set_finished:"set_finished",get_finished:"get_finished",set_paused:"set_paused",get_paused:"get_paused",set_name:"set_name",get_name:"get_name",set_frameName:"set_frameName",get_frameName:"get_frameName",set_frameIndex:"set_frameIndex",set_curAnim:"set_curAnim",get_curAnim:"get_curAnim"}
};
var flixel_animation_FlxPrerotatedAnimation = function(Parent,Baked) {
	this.angle = 0;
	flixel_animation_FlxBaseAnimation.call(this,Parent,"prerotated_animation");
	this.baked = Baked;
	this.rotations = Math.round(360 / Baked);
};
$hxClasses["flixel.animation.FlxPrerotatedAnimation"] = flixel_animation_FlxPrerotatedAnimation;
flixel_animation_FlxPrerotatedAnimation.__name__ = ["flixel","animation","FlxPrerotatedAnimation"];
flixel_animation_FlxPrerotatedAnimation.__super__ = flixel_animation_FlxBaseAnimation;
flixel_animation_FlxPrerotatedAnimation.prototype = $extend(flixel_animation_FlxBaseAnimation.prototype,{
	rotations: null
	,baked: null
	,angle: null
	,set_angle: function(Value) {
		var oldIndex = this.curIndex;
		var angleHelper = Math.floor(Value % 360);
		while(angleHelper < 0) angleHelper += 360;
		var newIndex = Math.floor(angleHelper / this.baked + 0.5);
		newIndex = newIndex % this.rotations | 0;
		if(oldIndex != newIndex) {
			this.set_curIndex(newIndex);
		}
		return this.angle = Value;
	}
	,set_curIndex: function(Value) {
		this.curIndex = Value;
		if(this.parent != null) {
			this.parent.set_frameIndex(Value);
		}
		return Value;
	}
	,clone: function(Parent) {
		return new flixel_animation_FlxPrerotatedAnimation(Parent,this.baked);
	}
	,__class__: flixel_animation_FlxPrerotatedAnimation
	,__properties__: $extend(flixel_animation_FlxBaseAnimation.prototype.__properties__,{set_angle:"set_angle"})
});
var flixel_util_FlxPool_$flixel_$effects_$FlxFlicker = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_effects_FlxFlicker"] = flixel_util_FlxPool_$flixel_$effects_$FlxFlicker;
flixel_util_FlxPool_$flixel_$effects_$FlxFlicker.__name__ = ["flixel","util","FlxPool_flixel_effects_FlxFlicker"];
flixel_util_FlxPool_$flixel_$effects_$FlxFlicker.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$effects_$FlxFlicker.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$effects_$FlxFlicker
	,__properties__: {get_length:"get_length"}
};
var flixel_effects_FlxFlicker = function() {
};
$hxClasses["flixel.effects.FlxFlicker"] = flixel_effects_FlxFlicker;
flixel_effects_FlxFlicker.__name__ = ["flixel","effects","FlxFlicker"];
flixel_effects_FlxFlicker.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_effects_FlxFlicker.flicker = function(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) {
		ForceRestart = true;
	}
	if(EndVisibility == null) {
		EndVisibility = true;
	}
	if(Interval == null) {
		Interval = 0.04;
	}
	if(Duration == null) {
		Duration = 1;
	}
	if(flixel_effects_FlxFlicker.isFlickering(Object)) {
		if(ForceRestart) {
			flixel_effects_FlxFlicker.stopFlickering(Object);
		} else {
			return flixel_effects_FlxFlicker._boundObjects.h[Object.__id__];
		}
	}
	if(Interval <= 0) {
		Interval = flixel_FlxG.elapsed;
	}
	var flicker = flixel_effects_FlxFlicker._pool.get();
	flicker.start(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback);
	flixel_effects_FlxFlicker._boundObjects.set(Object,flicker);
	return flicker;
};
flixel_effects_FlxFlicker.isFlickering = function(Object) {
	return flixel_effects_FlxFlicker._boundObjects.h.__keys__[Object.__id__] != null;
};
flixel_effects_FlxFlicker.stopFlickering = function(Object) {
	var boundFlicker = flixel_effects_FlxFlicker._boundObjects.h[Object.__id__];
	if(boundFlicker != null) {
		boundFlicker.stop();
	}
};
flixel_effects_FlxFlicker.prototype = {
	object: null
	,endVisibility: null
	,timer: null
	,completionCallback: null
	,progressCallback: null
	,duration: null
	,interval: null
	,destroy: function() {
		this.object = null;
		this.timer = null;
		this.completionCallback = null;
		this.progressCallback = null;
	}
	,start: function(Object,Duration,Interval,EndVisibility,CompletionCallback,ProgressCallback) {
		this.object = Object;
		this.duration = Duration;
		this.interval = Interval;
		this.completionCallback = CompletionCallback;
		this.progressCallback = ProgressCallback;
		this.endVisibility = EndVisibility;
		this.timer = new flixel_util_FlxTimer().start(this.interval,$bind(this,this.flickerProgress),this.duration / this.interval | 0);
	}
	,stop: function() {
		this.timer.cancel();
		this.object.set_visible(true);
		this.release();
	}
	,release: function() {
		flixel_effects_FlxFlicker._boundObjects.remove(this.object);
		flixel_effects_FlxFlicker._pool.put(this);
	}
	,flickerProgress: function(Timer) {
		this.object.set_visible(!this.object.visible);
		if(this.progressCallback != null) {
			this.progressCallback(this);
		}
		if(Timer.loops > 0 && Timer.loops - Timer._loopsCounter == 0) {
			this.object.set_visible(this.endVisibility);
			if(this.completionCallback != null) {
				this.completionCallback(this);
			}
			this.release();
		}
	}
	,__class__: flixel_effects_FlxFlicker
};
var flixel_effects_particles_FlxTypedEmitter = function(X,Y,Size) {
	if(Size == null) {
		Size = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._waitForKill = false;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._point = point;
	this._counter = 0;
	this._timer = 0;
	this._explode = true;
	this._quantity = 0;
	this.allowCollisions = 0;
	this.autoUpdateHitbox = false;
	this.immovable = false;
	this.elasticity = new flixel_util_helpers_FlxRangeBounds(0);
	this.acceleration = new flixel_util_helpers_FlxPointRangeBounds(0,0);
	this.drag = new flixel_util_helpers_FlxPointRangeBounds(0,0);
	this.color = new flixel_util_helpers_FlxRangeBounds(-1,-1);
	this.alpha = new flixel_util_helpers_FlxRangeBounds(1);
	this.scale = new flixel_util_helpers_FlxPointRangeBounds(1,1);
	this.lifespan = new flixel_util_helpers_FlxBounds(3);
	this.launchAngle = new flixel_util_helpers_FlxBounds(-180,180);
	this.ignoreAngularVelocity = false;
	this.angle = new flixel_util_helpers_FlxRangeBounds(0);
	this.angularVelocity = new flixel_util_helpers_FlxRangeBounds(0,0);
	this.angularDrag = new flixel_util_helpers_FlxRangeBounds(0,0);
	this.angularAcceleration = new flixel_util_helpers_FlxRangeBounds(0,0);
	this.speed = new flixel_util_helpers_FlxRangeBounds(0,100);
	this.velocity = new flixel_util_helpers_FlxPointRangeBounds(-100,-100,100,100);
	this.keepScaleRatio = false;
	this.launchMode = flixel_effects_particles_FlxEmitterMode.CIRCLE;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.frequency = 0.1;
	this.emitting = false;
	this.particleClass = flixel_effects_particles_FlxParticle;
	flixel_group_FlxTypedGroup.call(this,Size);
	this.x = X;
	this.y = Y;
	this.set_exists(false);
};
$hxClasses["flixel.effects.particles.FlxTypedEmitter"] = flixel_effects_particles_FlxTypedEmitter;
flixel_effects_particles_FlxTypedEmitter.__name__ = ["flixel","effects","particles","FlxTypedEmitter"];
flixel_effects_particles_FlxTypedEmitter.__super__ = flixel_group_FlxTypedGroup;
flixel_effects_particles_FlxTypedEmitter.prototype = $extend(flixel_group_FlxTypedGroup.prototype,{
	particleClass: null
	,emitting: null
	,frequency: null
	,blend: null
	,x: null
	,y: null
	,width: null
	,height: null
	,launchMode: null
	,keepScaleRatio: null
	,velocity: null
	,speed: null
	,angularAcceleration: null
	,angularDrag: null
	,angularVelocity: null
	,angle: null
	,ignoreAngularVelocity: null
	,launchAngle: null
	,lifespan: null
	,scale: null
	,alpha: null
	,color: null
	,drag: null
	,acceleration: null
	,elasticity: null
	,immovable: null
	,autoUpdateHitbox: null
	,allowCollisions: null
	,_quantity: null
	,_explode: null
	,_timer: null
	,_counter: null
	,_point: null
	,_waitForKill: null
	,destroy: function() {
		this.velocity = flixel_util_FlxDestroyUtil.destroy(this.velocity);
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		this.drag = flixel_util_FlxDestroyUtil.destroy(this.drag);
		this.acceleration = flixel_util_FlxDestroyUtil.destroy(this.acceleration);
		this._point = flixel_util_FlxDestroyUtil.put(this._point);
		this.blend = null;
		this.angularAcceleration = null;
		this.angularDrag = null;
		this.angularVelocity = null;
		this.angle = null;
		this.speed = null;
		this.launchAngle = null;
		this.lifespan = null;
		this.alpha = null;
		this.color = null;
		this.elasticity = null;
		flixel_group_FlxTypedGroup.prototype.destroy.call(this);
	}
	,loadParticles: function(Graphics,Quantity,bakedRotationAngles,Multiple,AutoBuffer) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(Multiple == null) {
			Multiple = false;
		}
		if(bakedRotationAngles == null) {
			bakedRotationAngles = 16;
		}
		if(Quantity == null) {
			Quantity = 50;
		}
		this.set_maxSize(Quantity);
		var totalFrames = 1;
		if(Multiple) {
			var sprite = new flixel_FlxSprite();
			sprite.loadGraphic(Graphics,true);
			totalFrames = sprite.numFrames;
			sprite.destroy();
		}
		var _g1 = 0;
		while(_g1 < Quantity) {
			++_g1;
			this.add(this.loadParticle(Graphics,Quantity,bakedRotationAngles,Multiple,AutoBuffer,totalFrames));
		}
		return this;
	}
	,loadParticle: function(Graphics,Quantity,bakedRotationAngles,Multiple,AutoBuffer,totalFrames) {
		if(AutoBuffer == null) {
			AutoBuffer = false;
		}
		if(Multiple == null) {
			Multiple = false;
		}
		var particle = Type.createInstance(this.particleClass,[]);
		var frame = Multiple ? flixel_FlxG.random["int"](0,totalFrames - 1) : -1;
		if(flixel_FlxG.renderBlit && bakedRotationAngles > 0) {
			particle.loadRotatedGraphic(Graphics,bakedRotationAngles,frame,false,AutoBuffer);
		} else {
			particle.loadGraphic(Graphics,Multiple);
		}
		if(Multiple) {
			particle.animation.set_frameIndex(frame);
		}
		return particle;
	}
	,makeParticles: function(Width,Height,Color,Quantity) {
		if(Quantity == null) {
			Quantity = 50;
		}
		if(Color == null) {
			Color = -1;
		}
		if(Height == null) {
			Height = 2;
		}
		if(Width == null) {
			Width = 2;
		}
		var _g1 = 0;
		while(_g1 < Quantity) {
			++_g1;
			var particle = Type.createInstance(this.particleClass,[]);
			particle.makeGraphic(Width,Height,Color);
			this.add(particle);
		}
		return this;
	}
	,update: function(elapsed) {
		if(this.emitting) {
			if(this._explode) {
				this.explode();
			} else {
				this.emitContinuously(elapsed);
			}
		} else if(this._waitForKill) {
			this._timer += elapsed;
			if(this.lifespan.max > 0 && this._timer > this.lifespan.max) {
				this.kill();
				return;
			}
		}
		flixel_group_FlxTypedGroup.prototype.update.call(this,elapsed);
	}
	,explode: function() {
		var amount = this._quantity;
		if(amount <= 0 || amount > this.length) {
			amount = this.length;
		}
		var _g1 = 0;
		var _g = amount;
		while(_g1 < _g) {
			++_g1;
			this.emitParticle();
		}
		this.onFinished();
	}
	,emitContinuously: function(elapsed) {
		if(this.frequency <= 0) {
			this.emitParticleContinuously();
		} else {
			this._timer += elapsed;
			while(this._timer > this.frequency) {
				this._timer -= this.frequency;
				this.emitParticleContinuously();
			}
		}
	}
	,emitParticleContinuously: function() {
		this.emitParticle();
		this._counter++;
		if(this._quantity > 0 && this._counter >= this._quantity) {
			this.onFinished();
		}
	}
	,onFinished: function() {
		this.emitting = false;
		this._waitForKill = true;
		this._quantity = 0;
	}
	,kill: function() {
		this.emitting = false;
		this._waitForKill = false;
		flixel_group_FlxTypedGroup.prototype.kill.call(this);
	}
	,start: function(Explode,Frequency,Quantity) {
		if(Quantity == null) {
			Quantity = 0;
		}
		if(Frequency == null) {
			Frequency = 0.1;
		}
		if(Explode == null) {
			Explode = true;
		}
		this.set_exists(true);
		this.set_visible(true);
		this.emitting = true;
		this._explode = Explode;
		this.frequency = Frequency;
		this._quantity += Quantity;
		this._counter = 0;
		this._timer = 0;
		this._waitForKill = false;
		return this;
	}
	,emitParticle: function() {
		var particle = this.recycle(this.particleClass);
		particle.reset(0,0);
		particle.set_blend(this.blend);
		particle.set_immovable(this.immovable);
		particle.set_solid((this.allowCollisions & 4369) > 0);
		particle.set_allowCollisions(this.allowCollisions);
		particle.autoUpdateHitbox = this.autoUpdateHitbox;
		if(this.velocity.active) {
			var _this = particle.velocityRange.start;
			var point = particle.velocityRange.end;
			var result = Math.abs(_this.x - point.x) <= 0.0000001 && Math.abs(_this.y - point.y) <= 0.0000001;
			if(point._weak) {
				point.put();
			}
			particle.velocityRange.active = !result;
			if(this.launchMode == flixel_effects_particles_FlxEmitterMode.CIRCLE) {
				var particleAngle = 0;
				if(this.launchAngle.active) {
					particleAngle = flixel_FlxG.random["float"](this.launchAngle.min,this.launchAngle.max);
				}
				var Speed = flixel_FlxG.random["float"](this.speed.start.min,this.speed.start.max);
				var a = particleAngle * (Math.PI / 180);
				var X = Math.cos(a) * Speed;
				var Y = Math.sin(a) * Speed;
				var point1 = flixel_math_FlxPoint._pool.get().set(X,Y);
				point1._inPool = false;
				this._point = point1;
				particle.velocity.set_x(this._point.x);
				particle.velocity.set_y(this._point.y);
				particle.velocityRange.start.set(this._point.x,this._point.y);
				var Speed1 = flixel_FlxG.random["float"](this.speed.end.min,this.speed.end.max);
				var a1 = particleAngle * (Math.PI / 180);
				var X1 = Math.cos(a1) * Speed1;
				var Y1 = Math.sin(a1) * Speed1;
				var point2 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
				point2._inPool = false;
				this._point = point2;
				particle.velocityRange.end.set(this._point.x,this._point.y);
			} else {
				particle.velocityRange.start.set_x(flixel_FlxG.random["float"](this.velocity.start.min.x,this.velocity.start.max.x));
				particle.velocityRange.start.set_y(flixel_FlxG.random["float"](this.velocity.start.min.y,this.velocity.start.max.y));
				particle.velocityRange.end.set_x(flixel_FlxG.random["float"](this.velocity.end.min.x,this.velocity.end.max.x));
				particle.velocityRange.end.set_y(flixel_FlxG.random["float"](this.velocity.end.min.y,this.velocity.end.max.y));
				particle.velocity.set_x(particle.velocityRange.start.x);
				particle.velocity.set_y(particle.velocityRange.start.y);
			}
		} else {
			particle.velocityRange.active = false;
		}
		particle.angularVelocityRange.active = this.angularVelocity.start != this.angularVelocity.end;
		if(!this.ignoreAngularVelocity) {
			if(this.angularAcceleration.active) {
				particle.angularAcceleration = flixel_FlxG.random["float"](this.angularAcceleration.start.min,this.angularAcceleration.start.max);
			}
			if(this.angularVelocity.active) {
				particle.angularVelocityRange.start = flixel_FlxG.random["float"](this.angularVelocity.start.min,this.angularVelocity.start.max);
				particle.angularVelocityRange.end = flixel_FlxG.random["float"](this.angularVelocity.end.min,this.angularVelocity.end.max);
				particle.angularVelocity = particle.angularVelocityRange.start;
			}
			if(this.angularDrag.active) {
				particle.angularDrag = flixel_FlxG.random["float"](this.angularDrag.start.min,this.angularDrag.start.max);
			}
		} else if(this.angularVelocity.active) {
			particle.angularVelocity = (flixel_FlxG.random["float"](this.angle.end.min,this.angle.end.max) - flixel_FlxG.random["float"](this.angle.start.min,this.angle.start.max)) / flixel_FlxG.random["float"](this.lifespan.min,this.lifespan.max);
			particle.angularVelocityRange.active = false;
		}
		if(this.angle.active) {
			particle.set_angle(flixel_FlxG.random["float"](this.angle.start.min,this.angle.start.max));
		}
		if(this.lifespan.active) {
			particle.lifespan = flixel_FlxG.random["float"](this.lifespan.min,this.lifespan.max);
		}
		if(this.scale.active) {
			particle.scaleRange.start.set_x(flixel_FlxG.random["float"](this.scale.start.min.x,this.scale.start.max.x));
			particle.scaleRange.start.set_y(this.keepScaleRatio ? particle.scaleRange.start.x : flixel_FlxG.random["float"](this.scale.start.min.y,this.scale.start.max.y));
			particle.scaleRange.end.set_x(flixel_FlxG.random["float"](this.scale.end.min.x,this.scale.end.max.x));
			particle.scaleRange.end.set_y(this.keepScaleRatio ? particle.scaleRange.end.x : flixel_FlxG.random["float"](this.scale.end.min.y,this.scale.end.max.y));
			var _this1 = particle.scaleRange.start;
			var point3 = particle.scaleRange.end;
			var result1 = Math.abs(_this1.x - point3.x) <= 0.0000001 && Math.abs(_this1.y - point3.y) <= 0.0000001;
			if(point3._weak) {
				point3.put();
			}
			particle.scaleRange.active = !result1;
			particle.scale.set_x(particle.scaleRange.start.x);
			particle.scale.set_y(particle.scaleRange.start.y);
			if(particle.autoUpdateHitbox) {
				particle.updateHitbox();
			}
		} else {
			particle.scaleRange.active = false;
		}
		if(this.alpha.active) {
			particle.alphaRange.start = flixel_FlxG.random["float"](this.alpha.start.min,this.alpha.start.max);
			particle.alphaRange.end = flixel_FlxG.random["float"](this.alpha.end.min,this.alpha.end.max);
			particle.alphaRange.active = particle.alphaRange.start != particle.alphaRange.end;
			particle.set_alpha(particle.alphaRange.start);
		} else {
			particle.alphaRange.active = false;
		}
		if(this.color.active) {
			particle.colorRange.start = flixel_FlxG.random.color(this.color.start.min,this.color.start.max);
			particle.colorRange.end = flixel_FlxG.random.color(this.color.end.min,this.color.end.max);
			particle.colorRange.active = particle.colorRange.start != particle.colorRange.end;
			particle.set_color(particle.colorRange.start);
		} else {
			particle.colorRange.active = false;
		}
		if(this.drag.active) {
			particle.dragRange.start.set_x(flixel_FlxG.random["float"](this.drag.start.min.x,this.drag.start.max.x));
			particle.dragRange.start.set_y(flixel_FlxG.random["float"](this.drag.start.min.y,this.drag.start.max.y));
			particle.dragRange.end.set_x(flixel_FlxG.random["float"](this.drag.end.min.x,this.drag.end.max.x));
			particle.dragRange.end.set_y(flixel_FlxG.random["float"](this.drag.end.min.y,this.drag.end.max.y));
			var _this2 = particle.dragRange.start;
			var point4 = particle.dragRange.end;
			var result2 = Math.abs(_this2.x - point4.x) <= 0.0000001 && Math.abs(_this2.y - point4.y) <= 0.0000001;
			if(point4._weak) {
				point4.put();
			}
			particle.dragRange.active = !result2;
			particle.drag.set_x(particle.dragRange.start.x);
			particle.drag.set_y(particle.dragRange.start.y);
		} else {
			particle.dragRange.active = false;
		}
		if(this.acceleration.active) {
			particle.accelerationRange.start.set_x(flixel_FlxG.random["float"](this.acceleration.start.min.x,this.acceleration.start.max.x));
			particle.accelerationRange.start.set_y(flixel_FlxG.random["float"](this.acceleration.start.min.y,this.acceleration.start.max.y));
			particle.accelerationRange.end.set_x(flixel_FlxG.random["float"](this.acceleration.end.min.x,this.acceleration.end.max.x));
			particle.accelerationRange.end.set_y(flixel_FlxG.random["float"](this.acceleration.end.min.y,this.acceleration.end.max.y));
			var _this3 = particle.accelerationRange.start;
			var point5 = particle.accelerationRange.end;
			var result3 = Math.abs(_this3.x - point5.x) <= 0.0000001 && Math.abs(_this3.y - point5.y) <= 0.0000001;
			if(point5._weak) {
				point5.put();
			}
			particle.accelerationRange.active = !result3;
			particle.acceleration.set_x(particle.accelerationRange.start.x);
			particle.acceleration.set_y(particle.accelerationRange.start.y);
		} else {
			particle.accelerationRange.active = false;
		}
		if(this.elasticity.active) {
			particle.elasticityRange.start = flixel_FlxG.random["float"](this.elasticity.start.min,this.elasticity.start.max);
			particle.elasticityRange.end = flixel_FlxG.random["float"](this.elasticity.end.min,this.elasticity.end.max);
			particle.elasticityRange.active = particle.elasticityRange.start != particle.elasticityRange.end;
			particle.elasticity = particle.elasticityRange.start;
		} else {
			particle.elasticityRange.active = false;
		}
		particle.set_x(flixel_FlxG.random["float"](this.x,this.x + this.width) - particle.get_width() / 2);
		particle.set_y(flixel_FlxG.random["float"](this.y,this.y + this.height) - particle.get_height() / 2);
		if(particle.animation._curAnim != null) {
			particle.animation._curAnim.restart();
		}
		particle.onEmit();
		return particle;
	}
	,focusOn: function(Object) {
		Object.getMidpoint(this._point);
		this.x = this._point.x - ((this.width | 0) >> 1);
		this.y = this._point.y - ((this.height | 0) >> 1);
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
	}
	,setSize: function(Width,Height) {
		this.width = Width;
		this.height = Height;
	}
	,get_solid: function() {
		return (this.allowCollisions & 4369) > 0;
	}
	,set_solid: function(Solid) {
		if(Solid) {
			this.allowCollisions = 4369;
		} else {
			this.allowCollisions = 0;
		}
		return Solid;
	}
	,__class__: flixel_effects_particles_FlxTypedEmitter
	,__properties__: $extend(flixel_group_FlxTypedGroup.prototype.__properties__,{set_solid:"set_solid",get_solid:"get_solid"})
});
var flixel_effects_particles_FlxEmitterMode = $hxClasses["flixel.effects.particles.FlxEmitterMode"] = { __ename__ : ["flixel","effects","particles","FlxEmitterMode"], __constructs__ : ["SQUARE","CIRCLE"] };
flixel_effects_particles_FlxEmitterMode.SQUARE = ["SQUARE",0];
flixel_effects_particles_FlxEmitterMode.SQUARE.toString = $estr;
flixel_effects_particles_FlxEmitterMode.SQUARE.__enum__ = flixel_effects_particles_FlxEmitterMode;
flixel_effects_particles_FlxEmitterMode.CIRCLE = ["CIRCLE",1];
flixel_effects_particles_FlxEmitterMode.CIRCLE.toString = $estr;
flixel_effects_particles_FlxEmitterMode.CIRCLE.__enum__ = flixel_effects_particles_FlxEmitterMode;
flixel_effects_particles_FlxEmitterMode.__empty_constructs__ = [flixel_effects_particles_FlxEmitterMode.SQUARE,flixel_effects_particles_FlxEmitterMode.CIRCLE];
var flixel_effects_particles_IFlxParticle = function() { };
$hxClasses["flixel.effects.particles.IFlxParticle"] = flixel_effects_particles_IFlxParticle;
flixel_effects_particles_IFlxParticle.__name__ = ["flixel","effects","particles","IFlxParticle"];
flixel_effects_particles_IFlxParticle.__interfaces__ = [flixel_IFlxSprite];
flixel_effects_particles_IFlxParticle.prototype = {
	lifespan: null
	,age: null
	,percent: null
	,autoUpdateHitbox: null
	,velocityRange: null
	,angularVelocityRange: null
	,scaleRange: null
	,alphaRange: null
	,colorRange: null
	,dragRange: null
	,accelerationRange: null
	,elasticityRange: null
	,onEmit: null
	,__class__: flixel_effects_particles_IFlxParticle
};
var flixel_effects_particles_FlxParticle = function() {
	this._delta = 0;
	this.autoUpdateHitbox = false;
	this.percent = 0;
	this.age = 0;
	this.lifespan = 0;
	flixel_FlxSprite.call(this);
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	this.velocityRange = new flixel_util_helpers_FlxRange(point,point1);
	this.angularVelocityRange = new flixel_util_helpers_FlxRange(0);
	var point2 = flixel_math_FlxPoint._pool.get().set(1,1);
	point2._inPool = false;
	var point3 = flixel_math_FlxPoint._pool.get().set(1,1);
	point3._inPool = false;
	this.scaleRange = new flixel_util_helpers_FlxRange(point2,point3);
	this.alphaRange = new flixel_util_helpers_FlxRange(1,1);
	this.colorRange = new flixel_util_helpers_FlxRange(-1);
	var point4 = flixel_math_FlxPoint._pool.get().set(0,0);
	point4._inPool = false;
	var point5 = flixel_math_FlxPoint._pool.get().set(0,0);
	point5._inPool = false;
	this.dragRange = new flixel_util_helpers_FlxRange(point4,point5);
	var point6 = flixel_math_FlxPoint._pool.get().set(0,0);
	point6._inPool = false;
	var point7 = flixel_math_FlxPoint._pool.get().set(0,0);
	point7._inPool = false;
	this.accelerationRange = new flixel_util_helpers_FlxRange(point6,point7);
	this.elasticityRange = new flixel_util_helpers_FlxRange(0);
	this.set_exists(false);
};
$hxClasses["flixel.effects.particles.FlxParticle"] = flixel_effects_particles_FlxParticle;
flixel_effects_particles_FlxParticle.__name__ = ["flixel","effects","particles","FlxParticle"];
flixel_effects_particles_FlxParticle.__interfaces__ = [flixel_effects_particles_IFlxParticle];
flixel_effects_particles_FlxParticle.__super__ = flixel_FlxSprite;
flixel_effects_particles_FlxParticle.prototype = $extend(flixel_FlxSprite.prototype,{
	lifespan: null
	,age: null
	,percent: null
	,autoUpdateHitbox: null
	,velocityRange: null
	,angularVelocityRange: null
	,scaleRange: null
	,alphaRange: null
	,colorRange: null
	,dragRange: null
	,accelerationRange: null
	,elasticityRange: null
	,_delta: null
	,destroy: function() {
		if(this.velocityRange != null) {
			this.velocityRange.start = flixel_util_FlxDestroyUtil.put(this.velocityRange.start);
			this.velocityRange.end = flixel_util_FlxDestroyUtil.put(this.velocityRange.end);
			this.velocityRange = null;
		}
		if(this.scaleRange != null) {
			this.scaleRange.start = flixel_util_FlxDestroyUtil.put(this.scaleRange.start);
			this.scaleRange.end = flixel_util_FlxDestroyUtil.put(this.scaleRange.end);
			this.scaleRange = null;
		}
		if(this.dragRange != null) {
			this.dragRange.start = flixel_util_FlxDestroyUtil.put(this.dragRange.start);
			this.dragRange.end = flixel_util_FlxDestroyUtil.put(this.dragRange.end);
			this.dragRange = null;
		}
		if(this.accelerationRange != null) {
			this.accelerationRange.start = flixel_util_FlxDestroyUtil.put(this.accelerationRange.start);
			this.accelerationRange.end = flixel_util_FlxDestroyUtil.put(this.accelerationRange.end);
			this.angularVelocityRange = null;
		}
		this.alphaRange = null;
		this.colorRange = null;
		this.accelerationRange = null;
		this.elasticityRange = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		if(this.age < this.lifespan) {
			this.age += elapsed;
		}
		if(this.age >= this.lifespan && this.lifespan != 0) {
			this.kill();
		} else {
			this._delta = elapsed / this.lifespan;
			this.percent = this.age / this.lifespan;
			if(this.velocityRange.active) {
				var _g = this.velocity;
				_g.set_x(_g.x + (this.velocityRange.end.x - this.velocityRange.start.x) * this._delta);
				var _g1 = this.velocity;
				_g1.set_y(_g1.y + (this.velocityRange.end.y - this.velocityRange.start.y) * this._delta);
			}
			if(this.angularVelocityRange.active) {
				this.angularVelocity += (this.angularVelocityRange.end - this.angularVelocityRange.start) * this._delta;
			}
			if(this.scaleRange.active) {
				var _g2 = this.scale;
				_g2.set_x(_g2.x + (this.scaleRange.end.x - this.scaleRange.start.x) * this._delta);
				var _g3 = this.scale;
				_g3.set_y(_g3.y + (this.scaleRange.end.y - this.scaleRange.start.y) * this._delta);
				if(this.autoUpdateHitbox) {
					this.updateHitbox();
				}
			}
			if(this.alphaRange.active) {
				var _g4 = this;
				_g4.set_alpha(_g4.alpha + (this.alphaRange.end - this.alphaRange.start) * this._delta);
			}
			if(this.colorRange.active) {
				var Color1 = this.colorRange.start;
				var Color2 = this.colorRange.end;
				var Factor = this.percent;
				var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
				var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
				var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
				var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
				var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
				color &= -16711681;
				color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
				color &= -65281;
				color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
				color &= -256;
				color |= b > 255 ? 255 : b < 0 ? 0 : b;
				color &= 16777215;
				color |= (a > 255 ? 255 : a < 0 ? 0 : a) << 24;
				this.set_color(color);
			}
			if(this.dragRange.active) {
				var _g5 = this.drag;
				_g5.set_x(_g5.x + (this.dragRange.end.x - this.dragRange.start.x) * this._delta);
				var _g6 = this.drag;
				_g6.set_y(_g6.y + (this.dragRange.end.y - this.dragRange.start.y) * this._delta);
			}
			if(this.accelerationRange.active) {
				var _g7 = this.acceleration;
				_g7.set_x(_g7.x + (this.accelerationRange.end.x - this.accelerationRange.start.x) * this._delta);
				var _g8 = this.acceleration;
				_g8.set_y(_g8.y + (this.accelerationRange.end.y - this.accelerationRange.start.y) * this._delta);
			}
			if(this.elasticityRange.active) {
				this.elasticity += (this.elasticityRange.end - this.elasticityRange.start) * this._delta;
			}
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,reset: function(X,Y) {
		flixel_FlxSprite.prototype.reset.call(this,X,Y);
		this.age = 0;
		this.set_visible(true);
	}
	,onEmit: function() {
	}
	,__class__: flixel_effects_particles_FlxParticle
});
var flixel_effects_postprocess_PostProcess = function(shader) {
	flixel_FlxG.log.advanced("Post processing is only supported on cpp and neko",flixel_system_debug_log_LogStyle.ERROR,true);
};
$hxClasses["flixel.effects.postprocess.PostProcess"] = flixel_effects_postprocess_PostProcess;
flixel_effects_postprocess_PostProcess.__name__ = ["flixel","effects","postprocess","PostProcess"];
flixel_effects_postprocess_PostProcess.prototype = {
	enable: function(to) {
	}
	,capture: function() {
	}
	,rebuild: function() {
	}
	,update: function(elapsed) {
	}
	,render: function(rect) {
	}
	,setUniform: function(uniform,value) {
	}
	,set_to: function(value) {
		return null;
	}
	,__class__: flixel_effects_postprocess_PostProcess
	,__properties__: {set_to:"set_to"}
};
var flixel_graphics_FlxGraphic = function(Key,Bitmap,Persist) {
	this._destroyOnNoUse = true;
	this._useCount = 0;
	this.unique = false;
	this.isDumped = false;
	this.persist = false;
	this.height = 0;
	this.width = 0;
	this.key = Key;
	this.persist = Persist != null ? Persist : flixel_graphics_FlxGraphic.defaultPersist;
	this.frameCollections = new haxe_ds_EnumValueMap();
	this.frameCollectionTypes = [];
	this.set_bitmap(Bitmap);
};
$hxClasses["flixel.graphics.FlxGraphic"] = flixel_graphics_FlxGraphic;
flixel_graphics_FlxGraphic.__name__ = ["flixel","graphics","FlxGraphic"];
flixel_graphics_FlxGraphic.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_FlxGraphic.fromAssetKey = function(Source,Unique,Key,Cache) {
	if(Cache == null) {
		Cache = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	var bitmap = null;
	if(!Cache) {
		if(openfl_Assets.exists(Source)) {
			bitmap = openfl_Assets.getBitmapData(Source,false);
		} else {
			flixel_FlxG.log.advanced("Could not find a BitmapData asset with ID '" + Source + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
			bitmap = null;
		}
		if(bitmap == null) {
			return null;
		}
		return flixel_graphics_FlxGraphic.createGraphic(bitmap,Key,Unique,Cache);
	}
	var key = flixel_FlxG.bitmap.generateKey(Source,Key,Unique);
	var graphic = flixel_FlxG.bitmap._cache.get(key);
	if(graphic != null) {
		return graphic;
	}
	if(openfl_Assets.exists(Source)) {
		bitmap = openfl_Assets.getBitmapData(Source,false);
	} else {
		flixel_FlxG.log.advanced("Could not find a BitmapData asset with ID '" + Source + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
		bitmap = null;
	}
	if(bitmap == null) {
		return null;
	}
	graphic = flixel_graphics_FlxGraphic.createGraphic(bitmap,key,Unique);
	graphic.assetsKey = Source;
	return graphic;
};
flixel_graphics_FlxGraphic.fromClass = function(Source,Unique,Key,Cache) {
	if(Cache == null) {
		Cache = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	var bitmap = null;
	if(!Cache) {
		bitmap = Type.createInstance(Source,[0,0]);
		return flixel_graphics_FlxGraphic.createGraphic(bitmap,Key,Unique,Cache);
	}
	var key = Type.getClassName(Source);
	key = flixel_FlxG.bitmap.generateKey(key,Key,Unique);
	var graphic = flixel_FlxG.bitmap._cache.get(key);
	if(graphic != null) {
		return graphic;
	}
	bitmap = Type.createInstance(Source,[0,0]);
	graphic = flixel_graphics_FlxGraphic.createGraphic(bitmap,key,Unique);
	graphic.assetsClass = Source;
	return graphic;
};
flixel_graphics_FlxGraphic.fromBitmapData = function(Source,Unique,Key,Cache) {
	if(Cache == null) {
		Cache = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	if(!Cache) {
		return flixel_graphics_FlxGraphic.createGraphic(Source,Key,Unique,Cache);
	}
	var key = flixel_FlxG.bitmap.findKeyForBitmap(Source);
	var assetKey = null;
	var assetClass = null;
	var graphic = null;
	if(key != null) {
		graphic = flixel_FlxG.bitmap._cache.get(key);
		assetKey = graphic.assetsKey;
		assetClass = graphic.assetsClass;
	}
	key = flixel_FlxG.bitmap.generateKey(key,Key,Unique);
	graphic = flixel_FlxG.bitmap._cache.get(key);
	if(graphic != null) {
		return graphic;
	}
	graphic = flixel_graphics_FlxGraphic.createGraphic(Source,key,Unique);
	graphic.assetsKey = assetKey;
	graphic.assetsClass = assetClass;
	return graphic;
};
flixel_graphics_FlxGraphic.fromFrame = function(Source,Unique,Key,Cache) {
	if(Cache == null) {
		Cache = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	var key = Source.name;
	if(key == null) {
		var _this = Source.frame;
		var value = _this.x;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "x";
		_this1.value = value;
		var value1 = _this.y;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "y";
		_this2.value = value1;
		var value2 = _this.width;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "w";
		_this3.value = value2;
		var value3 = _this.height;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "h";
		_this4.value = value3;
		key = flixel_util_FlxStringUtil.getDebugString([_this1,_this2,_this3,_this4]);
	}
	key = Source.parent.key + ":" + key;
	key = flixel_FlxG.bitmap.generateKey(key,Key,Unique);
	var graphic = flixel_FlxG.bitmap._cache.get(key);
	if(graphic != null) {
		return graphic;
	}
	var bitmap = Source.paint();
	graphic = flixel_graphics_FlxGraphic.createGraphic(bitmap,key,Unique,Cache);
	var image = flixel_graphics_frames_FlxImageFrame.fromGraphic(graphic);
	image.frames[0].name = Source.name;
	return graphic;
};
flixel_graphics_FlxGraphic.fromFrames = function(Source,Unique,Key) {
	if(Unique == null) {
		Unique = false;
	}
	return flixel_graphics_FlxGraphic.fromGraphic(Source.parent,Unique,Key);
};
flixel_graphics_FlxGraphic.fromGraphic = function(Source,Unique,Key) {
	if(Unique == null) {
		Unique = false;
	}
	if(!Unique) {
		return Source;
	}
	var key = flixel_FlxG.bitmap.generateKey(Source.key,Key,Unique);
	var graphic = flixel_graphics_FlxGraphic.createGraphic(Source.bitmap,key,Unique);
	graphic.unique = Unique;
	graphic.assetsClass = Source.assetsClass;
	graphic.assetsKey = Source.assetsKey;
	flixel_FlxG.bitmap._cache.set(graphic.key,graphic);
	return graphic;
};
flixel_graphics_FlxGraphic.fromRectangle = function(Width,Height,Color,Unique,Key) {
	if(Unique == null) {
		Unique = false;
	}
	var systemKey = Width + "x" + Height + ":" + Color;
	var key = flixel_FlxG.bitmap.generateKey(systemKey,Key,Unique);
	var graphic = flixel_FlxG.bitmap._cache.get(key);
	if(graphic != null) {
		return graphic;
	}
	var bitmap = new openfl_display_BitmapData(Width,Height,true,Color);
	return flixel_graphics_FlxGraphic.createGraphic(bitmap,key);
};
flixel_graphics_FlxGraphic.getBitmap = function(Bitmap,Unique) {
	if(Unique == null) {
		Unique = false;
	}
	if(Unique) {
		return Bitmap.clone();
	} else {
		return Bitmap;
	}
};
flixel_graphics_FlxGraphic.createGraphic = function(Bitmap,Key,Unique,Cache) {
	if(Cache == null) {
		Cache = true;
	}
	if(Unique == null) {
		Unique = false;
	}
	if(Unique) {
		Bitmap = Bitmap.clone();
	} else {
		Bitmap = Bitmap;
	}
	var graphic = null;
	if(Cache) {
		graphic = new flixel_graphics_FlxGraphic(Key,Bitmap);
		graphic.unique = Unique;
		flixel_FlxG.bitmap._cache.set(graphic.key,graphic);
	} else {
		graphic = new flixel_graphics_FlxGraphic(null,Bitmap);
	}
	return graphic;
};
flixel_graphics_FlxGraphic.prototype = {
	key: null
	,bitmap: null
	,width: null
	,height: null
	,assetsKey: null
	,assetsClass: null
	,persist: null
	,isDumped: null
	,tilesheet: null
	,imageFrame: null
	,atlasFrames: null
	,frameCollections: null
	,frameCollectionTypes: null
	,unique: null
	,_imageFrame: null
	,_tilesheet: null
	,_useCount: null
	,_destroyOnNoUse: null
	,dump: function() {
	}
	,undump: function() {
		var newBitmap = this.getBitmapFromSystem();
		if(newBitmap != null) {
			this.set_bitmap(newBitmap);
		}
		this.isDumped = false;
	}
	,onContext: function() {
		if(this.isDumped) {
			this.undump();
		}
	}
	,onAssetsReload: function() {
		if(!(this.assetsClass != null || this.assetsKey != null)) {
			return;
		}
		this.undump();
	}
	,destroy: function() {
		this.set_bitmap(flixel_util_FlxDestroyUtil.dispose(this.bitmap));
		if(flixel_FlxG.renderTile) {
			this._tilesheet = null;
		}
		this.key = null;
		this.assetsKey = null;
		this.assetsClass = null;
		this._imageFrame = null;
		var collections;
		var _g = 0;
		var _g1 = this.frameCollectionTypes;
		while(_g < _g1.length) {
			var collectionType = _g1[_g];
			++_g;
			collections = this.frameCollections.get(collectionType);
			flixel_util_FlxDestroyUtil.destroyArray(collections);
		}
		this.frameCollections = null;
		this.frameCollectionTypes = null;
	}
	,addFrameCollection: function(collection) {
		if(collection.type != null) {
			var type = collection.type;
			var collections = this.frameCollections.get(type);
			if(collections == null) {
				collections = [];
				this.frameCollections.set(type,collections);
			}
			var collections1 = collections;
			collections1.push(collection);
		}
	}
	,getFramesCollections: function(type) {
		var collections = this.frameCollections.get(type);
		if(collections == null) {
			collections = [];
			this.frameCollections.set(type,collections);
		}
		return collections;
	}
	,getEmptyFrame: function(size) {
		var frame = new flixel_graphics_frames_FlxFrame(this);
		frame.type = 2;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = 0;
		_this.height = 0;
		_this._inPool = false;
		frame.set_frame(_this);
		var _this1 = frame.sourceSize;
		_this1.set_x(size.x);
		_this1.set_y(size.y);
		if(size._weak) {
			size.put();
		}
		return frame;
	}
	,get_tilesheet: function() {
		if(this._tilesheet == null) {
			var dumped = this.isDumped;
			if(dumped) {
				this.undump();
			}
			this._tilesheet = new openfl_display_Tilesheet(this.bitmap);
		}
		return this._tilesheet;
	}
	,getBitmapFromSystem: function() {
		var newBitmap = null;
		if(this.assetsClass != null) {
			newBitmap = Type.createInstance(this.assetsClass,[0,0]);
		} else if(this.assetsKey != null) {
			var id = this.assetsKey;
			if(openfl_Assets.exists(id)) {
				newBitmap = openfl_Assets.getBitmapData(id,false);
			} else {
				flixel_FlxG.log.advanced("Could not find a BitmapData asset with ID '" + id + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
				newBitmap = null;
			}
		}
		if(newBitmap != null) {
			if(this.unique) {
				return newBitmap.clone();
			} else {
				return newBitmap;
			}
		}
		return null;
	}
	,get_canBeDumped: function() {
		if(this.assetsClass == null) {
			return this.assetsKey != null;
		} else {
			return true;
		}
	}
	,get_useCount: function() {
		return this._useCount;
	}
	,set_useCount: function(Value) {
		if(Value <= 0 && this._destroyOnNoUse && !this.persist) {
			flixel_FlxG.bitmap.remove(this);
		}
		return this._useCount = Value;
	}
	,get_destroyOnNoUse: function() {
		return this._destroyOnNoUse;
	}
	,set_destroyOnNoUse: function(Value) {
		if(Value && this._useCount <= 0 && this.key != null && !this.persist) {
			flixel_FlxG.bitmap.remove(this);
		}
		return this._destroyOnNoUse = Value;
	}
	,get_imageFrame: function() {
		if(this._imageFrame == null) {
			var Width = this.bitmap.width;
			var Height = this.bitmap.height;
			var _this = flixel_math_FlxRect._pool.get();
			_this.x = 0;
			_this.y = 0;
			_this.width = Width;
			_this.height = Height;
			_this._inPool = false;
			this._imageFrame = flixel_graphics_frames_FlxImageFrame.fromRectangle(this,_this);
		}
		return this._imageFrame;
	}
	,get_atlasFrames: function() {
		return flixel_graphics_frames_FlxAtlasFrames.findFrame(this,null);
	}
	,set_bitmap: function(value) {
		if(value != null) {
			this.bitmap = value;
			this.width = this.bitmap.width;
			this.height = this.bitmap.height;
			if(flixel_FlxG.renderTile && this._tilesheet != null) {
				this._tilesheet = new openfl_display_Tilesheet(this.bitmap);
			}
		}
		return value;
	}
	,__class__: flixel_graphics_FlxGraphic
	,__properties__: {get_atlasFrames:"get_atlasFrames",get_imageFrame:"get_imageFrame",set_useCount:"set_useCount",get_useCount:"get_useCount",get_tilesheet:"get_tilesheet",get_canBeDumped:"get_canBeDumped",set_destroyOnNoUse:"set_destroyOnNoUse",get_destroyOnNoUse:"get_destroyOnNoUse",set_bitmap:"set_bitmap"}
};
var flixel_graphics_atlas_FlxAtlas = function(name,powerOfTwo,border,rotate,minSize,maxSize) {
	if(rotate == null) {
		rotate = false;
	}
	if(border == null) {
		border = 1;
	}
	if(powerOfTwo == null) {
		powerOfTwo = false;
	}
	this.powerOfTwo = false;
	this.allowRotation = false;
	this.maxHeight = 1024;
	this.maxWidth = 1024;
	this.minHeight = 128;
	this.minWidth = 128;
	this.border = 1;
	this.persist = false;
	this.nodes = new haxe_ds_StringMap();
	this.name = name;
	this.set_powerOfTwo(powerOfTwo);
	this.border = border;
	if(minSize != null) {
		minSize = minSize;
	} else {
		minSize = flixel_graphics_atlas_FlxAtlas.defaultMinSize;
	}
	if(maxSize != null) {
		maxSize = maxSize;
	} else {
		maxSize = flixel_graphics_atlas_FlxAtlas.defaultMaxSize;
	}
	this.set_minWidth(minSize.x | 0);
	this.set_minHeight(minSize.y | 0);
	this.set_maxWidth(maxSize.x > minSize.x ? maxSize.x | 0 : this.minWidth);
	this.set_maxHeight(maxSize.y > minSize.x ? maxSize.y | 0 : this.minHeight);
	this.allowRotation = rotate;
	this.initRoot();
	flixel_FlxG.signals.preStateCreate.add($bind(this,this.onClear));
};
$hxClasses["flixel.graphics.atlas.FlxAtlas"] = flixel_graphics_atlas_FlxAtlas;
flixel_graphics_atlas_FlxAtlas.__name__ = ["flixel","graphics","atlas","FlxAtlas"];
flixel_graphics_atlas_FlxAtlas.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_atlas_FlxAtlas.prototype = {
	root: null
	,name: null
	,nodes: null
	,bitmapData: null
	,graphic: null
	,persist: null
	,border: null
	,width: null
	,height: null
	,minWidth: null
	,minHeight: null
	,maxWidth: null
	,maxHeight: null
	,allowRotation: null
	,powerOfTwo: null
	,_graphic: null
	,_tempStorage: null
	,initRoot: function() {
		var rootWidth = this.minWidth;
		var rootHeight = this.minHeight;
		if(this.powerOfTwo) {
			rootWidth = this.getNextPowerOfTwo(rootWidth);
			rootHeight = this.getNextPowerOfTwo(rootHeight);
		}
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = rootWidth;
		_this.height = rootHeight;
		_this._inPool = false;
		this.root = new flixel_graphics_atlas_FlxNode(_this,this);
	}
	,addNode: function(Graphic,Key) {
		var key = flixel_system_FlxAssets.resolveKey(Graphic,Key);
		if(key == null) {
			throw new js__$Boot_HaxeError("addNode can't find the key for specified bitmapdata. Please provide not null value as a Key argument.");
		}
		if(this.hasNodeWithName(key)) {
			var _this = this.nodes;
			if(__map_reserved[key] != null) {
				return _this.getReserved(key);
			} else {
				return _this.h[key];
			}
		}
		var data = flixel_system_FlxAssets.resolveBitmapData(Graphic);
		if(data == null) {
			throw new js__$Boot_HaxeError("addNode can't find bitmapdata with specified key: " + Graphic + ". Please provide valid value.");
		}
		if(this.root.left == null) {
			return this.insertFirstNodeInRoot(data,key);
		}
		if(this.root.right == null) {
			return this.expand(data,key);
		}
		var inserted = this.tryInsert(data,key);
		if(inserted != null) {
			return inserted;
		}
		this.wrapRoot();
		return this.expand(data,key);
	}
	,wrapRoot: function() {
		var temp = this.root;
		var Width = temp.rect.width | 0;
		var Height = temp.rect.height | 0;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		this.root = new flixel_graphics_atlas_FlxNode(_this,this);
		this.root.left = temp;
	}
	,tryInsert: function(data,key) {
		var insertWidth = data.width + this.border;
		var insertHeight = data.height + this.border;
		var rotateNode = false;
		var nodeToInsert = this.findNodeToInsert(insertWidth,insertHeight);
		if(this.allowRotation) {
			var nodeToInsertWithRotation = this.findNodeToInsert(insertHeight,insertWidth);
			if(nodeToInsertWithRotation != null) {
				var nodeWithRotationArea = (nodeToInsertWithRotation.rect.width | 0) * (nodeToInsertWithRotation.rect.height | 0);
				if(nodeToInsert == null || nodeToInsert != null && (nodeToInsert.rect.width | 0) * (nodeToInsert.rect.height | 0) > nodeWithRotationArea) {
					nodeToInsert = nodeToInsertWithRotation;
					rotateNode = true;
					var temp = insertWidth;
					insertWidth = insertHeight;
					insertHeight = temp;
				}
			}
		}
		if(nodeToInsert != null) {
			var horizontally = this.needToDivideHorizontally(nodeToInsert,insertWidth,insertHeight);
			return this.divideNode(nodeToInsert,insertWidth,insertHeight,horizontally,data,key,rotateNode);
		}
		return null;
	}
	,needToDivideHorizontally: function(nodeToDivide,insertWidth,insertHeight) {
		var dw = (nodeToDivide.rect.width | 0) - insertWidth;
		var dh = (nodeToDivide.rect.height | 0) - insertHeight;
		return dw > dh;
	}
	,divideNode: function(nodeToDivide,insertWidth,insertHeight,divideHorizontally,firstGrandChildData,firstGrandChildKey,firstGrandChildRotated) {
		if(firstGrandChildRotated == null) {
			firstGrandChildRotated = false;
		}
		if(nodeToDivide != null) {
			var firstChild = null;
			var secondChild = null;
			var firstGrandChild = null;
			var secondGrandChild = null;
			var firstGrandChildFilled = firstGrandChildKey != null;
			if(divideHorizontally) {
				var X = nodeToDivide.rect.x | 0;
				var Y = nodeToDivide.rect.y | 0;
				var Height = nodeToDivide.rect.height | 0;
				var _this = flixel_math_FlxRect._pool.get();
				_this.x = X;
				_this.y = Y;
				_this.width = insertWidth;
				_this.height = Height;
				_this._inPool = false;
				firstChild = new flixel_graphics_atlas_FlxNode(_this,this);
				if((nodeToDivide.rect.width | 0) - insertWidth > 0) {
					var X1 = (nodeToDivide.rect.x | 0) + insertWidth;
					var Y1 = nodeToDivide.rect.y | 0;
					var Width = (nodeToDivide.rect.width | 0) - insertWidth;
					var Height1 = nodeToDivide.rect.height | 0;
					var _this1 = flixel_math_FlxRect._pool.get();
					_this1.x = X1;
					_this1.y = Y1;
					_this1.width = Width;
					_this1.height = Height1;
					_this1._inPool = false;
					secondChild = new flixel_graphics_atlas_FlxNode(_this1,this);
				}
				var X2 = firstChild.rect.x | 0;
				var Y2 = firstChild.rect.y | 0;
				var _this2 = flixel_math_FlxRect._pool.get();
				_this2.x = X2;
				_this2.y = Y2;
				_this2.width = insertWidth;
				_this2.height = insertHeight;
				_this2._inPool = false;
				firstGrandChild = new flixel_graphics_atlas_FlxNode(_this2,this,firstGrandChildFilled,firstGrandChildKey,firstGrandChildRotated);
				if((firstChild.rect.height | 0) - insertHeight > 0) {
					var X3 = firstChild.rect.x | 0;
					var Y3 = (firstChild.rect.y | 0) + insertHeight;
					var Height2 = (firstChild.rect.height | 0) - insertHeight;
					var _this3 = flixel_math_FlxRect._pool.get();
					_this3.x = X3;
					_this3.y = Y3;
					_this3.width = insertWidth;
					_this3.height = Height2;
					_this3._inPool = false;
					secondGrandChild = new flixel_graphics_atlas_FlxNode(_this3,this);
				}
			} else {
				var X4 = nodeToDivide.rect.x | 0;
				var Y4 = nodeToDivide.rect.y | 0;
				var Width1 = nodeToDivide.rect.width | 0;
				var _this4 = flixel_math_FlxRect._pool.get();
				_this4.x = X4;
				_this4.y = Y4;
				_this4.width = Width1;
				_this4.height = insertHeight;
				_this4._inPool = false;
				firstChild = new flixel_graphics_atlas_FlxNode(_this4,this);
				if((nodeToDivide.rect.height | 0) - insertHeight > 0) {
					var X5 = nodeToDivide.rect.x | 0;
					var Y5 = (nodeToDivide.rect.y | 0) + insertHeight;
					var Width2 = nodeToDivide.rect.width | 0;
					var Height3 = (nodeToDivide.rect.height | 0) - insertHeight;
					var _this5 = flixel_math_FlxRect._pool.get();
					_this5.x = X5;
					_this5.y = Y5;
					_this5.width = Width2;
					_this5.height = Height3;
					_this5._inPool = false;
					secondChild = new flixel_graphics_atlas_FlxNode(_this5,this);
				}
				var X6 = firstChild.rect.x | 0;
				var Y6 = firstChild.rect.y | 0;
				var _this6 = flixel_math_FlxRect._pool.get();
				_this6.x = X6;
				_this6.y = Y6;
				_this6.width = insertWidth;
				_this6.height = insertHeight;
				_this6._inPool = false;
				firstGrandChild = new flixel_graphics_atlas_FlxNode(_this6,this,firstGrandChildFilled,firstGrandChildKey,firstGrandChildRotated);
				if((firstChild.rect.width | 0) - insertWidth > 0) {
					var X7 = (firstChild.rect.x | 0) + insertWidth;
					var Y7 = firstChild.rect.y | 0;
					var Width3 = (firstChild.rect.width | 0) - insertWidth;
					var _this7 = flixel_math_FlxRect._pool.get();
					_this7.x = X7;
					_this7.y = Y7;
					_this7.width = Width3;
					_this7.height = insertHeight;
					_this7._inPool = false;
					secondGrandChild = new flixel_graphics_atlas_FlxNode(_this7,this);
				}
			}
			firstChild.left = firstGrandChild;
			firstChild.right = secondGrandChild;
			nodeToDivide.left = firstChild;
			nodeToDivide.right = secondChild;
			if(firstGrandChildKey != null && firstGrandChildData != null) {
				this.expandBitmapData();
				if(firstGrandChildRotated) {
					flixel_graphics_atlas_FlxAtlas.matrix.identity();
					flixel_graphics_atlas_FlxAtlas.matrix.rotate(Math.PI / 2);
					flixel_graphics_atlas_FlxAtlas.matrix.translate(firstGrandChildData.height + (firstGrandChild.rect.x | 0),firstGrandChild.rect.y | 0);
					this.bitmapData.draw(firstGrandChildData,flixel_graphics_atlas_FlxAtlas.matrix);
				} else {
					flixel_graphics_atlas_FlxAtlas.point.setTo(firstGrandChild.rect.x | 0,firstGrandChild.rect.y | 0);
					this.bitmapData.copyPixels(firstGrandChildData,firstGrandChildData.rect,flixel_graphics_atlas_FlxAtlas.point);
				}
				this.addNodeToAtlasFrames(firstGrandChild);
				var _this8 = this.nodes;
				if(__map_reserved[firstGrandChildKey] != null) {
					_this8.setReserved(firstGrandChildKey,firstGrandChild);
				} else {
					_this8.h[firstGrandChildKey] = firstGrandChild;
				}
			}
			return firstGrandChild;
		}
		return null;
	}
	,insertFirstNodeInRoot: function(data,key) {
		if(this.root.left == null) {
			var insertWidth = data.width + this.border;
			var insertHeight = data.height + this.border;
			var rootWidth = insertWidth;
			var rootHeight = insertHeight;
			if(this.powerOfTwo) {
				rootWidth = this.getNextPowerOfTwo(insertWidth);
				rootHeight = this.getNextPowerOfTwo(insertHeight);
			}
			if(this.minWidth > rootWidth) {
				rootWidth = this.minWidth;
			} else {
				rootWidth = rootWidth;
			}
			if(this.minHeight > rootHeight) {
				rootHeight = this.minHeight;
			} else {
				rootHeight = rootHeight;
			}
			if(this.powerOfTwo) {
				rootWidth = this.getNextPowerOfTwo(rootWidth);
				rootHeight = this.getNextPowerOfTwo(rootHeight);
			}
			if(this.maxWidth > 0 && rootWidth > this.maxWidth || this.maxHeight > 0 && rootHeight > this.maxHeight) {
				throw new js__$Boot_HaxeError("Can't insert node " + key + " with the size of (" + data.width + "; " + data.height + ") in atlas " + this.name + " with the max size of (" + this.maxWidth + "; " + this.maxHeight + ") and powerOfTwo: " + Std.string(this.powerOfTwo));
			}
			this.root.set_width(rootWidth);
			this.root.set_height(rootHeight);
			var horizontally = this.needToDivideHorizontally(this.root,insertWidth,insertHeight);
			return this.divideNode(this.root,insertWidth,insertHeight,horizontally,data,key);
		}
		return null;
	}
	,expand: function(data,key) {
		if(this.root.right == null) {
			var insertWidth = data.width + this.border;
			var insertHeight = data.height + this.border;
			var addRightWidth = (this.root.rect.width | 0) + insertWidth;
			var addRightHeight = Math.max(this.root.rect.height | 0,insertHeight) | 0;
			var addBottomWidth = Math.max(this.root.rect.width | 0,insertWidth) | 0;
			var addBottomHeight = (this.root.rect.height | 0) + insertHeight;
			var addRightWidthRotate = addRightWidth;
			var addRightHeightRotate = addRightHeight;
			var addBottomWidthRotate = addBottomWidth;
			var addBottomHeightRotate = addBottomHeight;
			if(this.allowRotation) {
				addRightWidthRotate = (this.root.rect.width | 0) + insertHeight;
				addRightHeightRotate = Math.max(this.root.rect.height | 0,insertWidth) | 0;
				addBottomWidthRotate = Math.max(this.root.rect.width | 0,insertHeight) | 0;
				addBottomHeightRotate = (this.root.rect.height | 0) + insertWidth;
			}
			if(this.powerOfTwo) {
				addRightWidth = this.getNextPowerOfTwo(addRightWidth);
				addRightWidthRotate = addRightWidth;
				addRightHeight = this.getNextPowerOfTwo(addRightHeight);
				addRightHeightRotate = addRightHeight;
				addBottomWidth = this.getNextPowerOfTwo(addBottomWidth);
				addBottomWidthRotate = addBottomWidth;
				addBottomHeight = this.getNextPowerOfTwo(addBottomHeight);
				addBottomHeightRotate = addBottomHeight;
				if(this.allowRotation) {
					addRightWidthRotate = this.getNextPowerOfTwo(addRightWidthRotate);
					addRightHeightRotate = this.getNextPowerOfTwo(addRightHeightRotate);
					addBottomWidthRotate = this.getNextPowerOfTwo(addBottomWidthRotate);
					addBottomHeightRotate = this.getNextPowerOfTwo(addBottomHeightRotate);
				}
			}
			var canExpandRight = true;
			var canExpandBottom = true;
			var canExpandRightRotate = this.allowRotation;
			var canExpandBottomRotate = this.allowRotation;
			if(this.maxWidth > 0 && addRightWidth > this.maxWidth || this.maxHeight > 0 && addRightHeight > this.maxHeight) {
				canExpandRight = false;
			}
			if(this.maxWidth > 0 && addBottomWidth > this.maxWidth || this.maxHeight > 0 && addBottomHeight > this.maxHeight) {
				canExpandBottom = false;
			}
			if(this.maxWidth > 0 && addRightWidthRotate > this.maxWidth || this.maxHeight > 0 && addRightHeightRotate > this.maxHeight) {
				canExpandRightRotate = false;
			}
			if(this.maxWidth > 0 && addBottomWidthRotate > this.maxWidth || this.maxHeight > 0 && addBottomHeightRotate > this.maxHeight) {
				canExpandBottomRotate = false;
			}
			if(!canExpandRight && !canExpandBottom && !canExpandRightRotate && !canExpandBottomRotate) {
				throw new js__$Boot_HaxeError("Can't insert node " + key + " with the size of (" + data.width + "; " + data.height + ") in atlas " + this.name + " with the max size of (" + this.maxWidth + "; " + this.maxHeight + ") and powerOfTwo: " + Std.string(this.powerOfTwo));
			}
			var addRightArea = addRightWidth * addRightHeight;
			var addBottomArea = addBottomWidth * addBottomHeight;
			var addRightAreaRotate = addRightWidthRotate * addRightHeightRotate;
			var addBottomAreaRotate = addBottomWidthRotate * addBottomHeightRotate;
			var rotateRight = false;
			var rotateBottom = false;
			if(canExpandRight && canExpandRightRotate && addRightArea > addRightAreaRotate || !canExpandRight && canExpandRightRotate) {
				addRightArea = addBottomAreaRotate;
				addRightWidth = addRightWidthRotate;
				addRightHeight = addRightHeightRotate;
				canExpandRight = true;
				rotateRight = true;
			}
			if(canExpandBottom && canExpandBottomRotate && addBottomArea > addBottomAreaRotate || !canExpandBottom && canExpandBottomRotate) {
				addBottomArea = addBottomAreaRotate;
				addBottomWidth = addBottomWidthRotate;
				addBottomHeight = addBottomHeightRotate;
				canExpandBottom = true;
				rotateBottom = true;
			}
			if(!canExpandRight && canExpandBottom) {
				addRightArea = addBottomArea + 1;
			} else if(canExpandRight && !canExpandBottom) {
				addBottomArea = addRightArea + 1;
			}
			var dataNode = null;
			var temp = this.root;
			var insertNodeWidth = insertWidth;
			var insertNodeHeight = insertHeight;
			if(addBottomArea >= addRightArea) {
				if(rotateRight) {
					insertNodeWidth = insertHeight;
					insertNodeHeight = insertWidth;
				}
				this.expandRoot((temp.rect.width | 0) + insertNodeWidth,Math.max(temp.rect.height | 0,insertNodeHeight),true);
				dataNode = this.divideNode(this.root.right,insertNodeWidth,insertNodeHeight,true,data,key,rotateRight);
				this.expandRoot(addRightWidth,addRightHeight,false,true);
			} else {
				if(rotateBottom) {
					insertNodeWidth = insertHeight;
					insertNodeHeight = insertWidth;
				}
				this.expandRoot(Math.max(temp.rect.width | 0,insertNodeWidth),(temp.rect.height | 0) + insertNodeHeight,false);
				dataNode = this.divideNode(this.root.right,insertNodeWidth,insertNodeHeight,true,data,key,rotateBottom);
				this.expandRoot(addBottomWidth,addBottomHeight,false,true);
			}
			return dataNode;
		}
		return null;
	}
	,expandRoot: function(newWidth,newHeight,divideHorizontally,decideHowToDivide) {
		if(decideHowToDivide == null) {
			decideHowToDivide = false;
		}
		if(newWidth > (this.root.rect.width | 0) || newHeight > (this.root.rect.height | 0)) {
			var temp = this.root;
			var _this = flixel_math_FlxRect._pool.get();
			_this.x = 0;
			_this.y = 0;
			_this.width = newWidth;
			_this.height = newHeight;
			_this._inPool = false;
			this.root = new flixel_graphics_atlas_FlxNode(_this,this);
			if(decideHowToDivide) {
				divideHorizontally = this.needToDivideHorizontally(this.root,temp.rect.width | 0,temp.rect.height | 0);
			} else {
				divideHorizontally = divideHorizontally;
			}
			this.divideNode(this.root,temp.rect.width | 0,temp.rect.height | 0,divideHorizontally);
			this.root.left.left = temp;
		}
	}
	,expandBitmapData: function() {
		if(this.bitmapData != null && this.bitmapData.width == (this.root.rect.width | 0) && this.bitmapData.height == (this.root.rect.height | 0)) {
			return;
		}
		var newBitmapData = new openfl_display_BitmapData(this.root.rect.width | 0,this.root.rect.height | 0,true,0);
		if(this.bitmapData != null) {
			flixel_graphics_atlas_FlxAtlas.point.setTo(0,0);
			newBitmapData.copyPixels(this.bitmapData,this.bitmapData.rect,flixel_graphics_atlas_FlxAtlas.point);
		}
		this.set_bitmapData(flixel_util_FlxDestroyUtil.dispose(this.bitmapData));
		this.set_bitmapData(newBitmapData);
	}
	,getNextPowerOfTwo: function(number) {
		var n = number | 0;
		if(n > 0 && (n & n - 1) == 0) {
			return n;
		}
		var result = 1;
		while(result < n) result <<= 1;
		return result;
	}
	,addNodeWithSpacesAndBorders: function(Graphic,Key,tileSize,tileSpacing,tileBorder,region) {
		var key = flixel_system_FlxAssets.resolveKey(Graphic,Key);
		if(key == null) {
			throw new js__$Boot_HaxeError("addNodeWithSpacings can't find the key for specified bitmapdata." + " Please provide not null value as a Key argument.");
		}
		key = flixel_FlxG.bitmap.getKeyWithSpacesAndBorders(key,tileSize,tileSpacing,tileBorder,region);
		if(this.hasNodeWithName(key)) {
			var _this = this.nodes;
			return (__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).getTileFrames(tileSize,tileSpacing,tileBorder);
		}
		var data = flixel_system_FlxAssets.resolveBitmapData(Graphic);
		if(data == null) {
			throw new js__$Boot_HaxeError("addNodeWithSpacings can't find bitmapdata with specified key: " + Graphic + ". Please provide valid value.");
		}
		var nodeData = flixel_util_FlxBitmapDataUtil.addSpacesAndBorders(data,tileSize,tileSpacing,tileBorder,region);
		var node = this.addNode(nodeData,key);
		if(node == null) {
			throw new js__$Boot_HaxeError("addNodeWithSpacings can't insert provided image: " + Graphic + ") in atlas. It's probably too big.");
		}
		if(tileBorder != null) {
			var Y = 2 * tileBorder.y;
			tileSize.set_x(tileSize.x + 2 * tileBorder.x);
			tileSize.set_y(tileSize.y + Y);
		}
		return node.getTileFrames(tileSize,tileSpacing,tileBorder);
	}
	,getAtlasFrames: function() {
		var graph = this.get_graphic();
		var atlasFrames = graph.get_atlasFrames();
		if(graph.get_atlasFrames() == null) {
			atlasFrames = new flixel_graphics_frames_FlxAtlasFrames(graph);
		}
		var _this = this.nodes;
		var node = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(node.hasNext()) {
			var node1 = node.next();
			this.addNodeToAtlasFrames(node1);
		}
		return atlasFrames;
	}
	,addNodeToAtlasFrames: function(node) {
		if(this._graphic == null || this._graphic.get_atlasFrames() == null || node == null) {
			return;
		}
		var atlasFrames = this._graphic.get_atlasFrames();
		var tmp;
		if(node.filled) {
			var key = node.key;
			var _this = atlasFrames.framesHash;
			tmp = !(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key));
		} else {
			tmp = false;
		}
		if(tmp) {
			var X = node.rect.x | 0;
			var Y = node.rect.y | 0;
			var Width = (node.rect.width | 0) - this.border;
			var Height = (node.rect.height | 0) - this.border;
			var _this1 = flixel_math_FlxRect._pool.get();
			_this1.x = X;
			_this1.y = Y;
			_this1.width = Width;
			_this1.height = Height;
			_this1._inPool = false;
			var sourceSize;
			if(node.rotated) {
				var X1 = (node.rect.height | 0) - this.border;
				var Y1 = (node.rect.width | 0) - this.border;
				var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
				point._inPool = false;
				sourceSize = point;
			} else {
				var X2 = (node.rect.width | 0) - this.border;
				var Y2 = (node.rect.height | 0) - this.border;
				var point1 = flixel_math_FlxPoint._pool.get().set(X2,Y2);
				point1._inPool = false;
				sourceSize = point1;
			}
			var point2 = flixel_math_FlxPoint._pool.get().set(0,0);
			point2._inPool = false;
			var angle = node.rotated ? -90 : 0;
			atlasFrames.addAtlasFrame(_this1,sourceSize,point2,node.key,angle);
		}
	}
	,hasNodeWithName: function(nodeName) {
		var _this = this.nodes;
		if(__map_reserved[nodeName] != null) {
			return _this.existsReserved(nodeName);
		} else {
			return _this.h.hasOwnProperty(nodeName);
		}
	}
	,getNode: function(key) {
		var _this = this.nodes;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,addNodes: function(bitmaps,keys) {
		var numKeys = keys.length;
		var numBitmaps = bitmaps.length;
		if(numBitmaps != numKeys) {
			throw new js__$Boot_HaxeError("The number of bitmaps (" + numBitmaps + ") should be equal to number of keys (" + numKeys + ")");
		}
		this._tempStorage = [];
		var _g1 = 0;
		while(_g1 < numBitmaps) {
			var i = _g1++;
			this._tempStorage.push({ bmd : bitmaps[i], keyStr : keys[i]});
		}
		this.addFromAtlasObjects(this._tempStorage);
		return this;
	}
	,addFromAtlasObjects: function(objects) {
		objects.sort($bind(this,this.bitmapSorter));
		var numBitmaps = objects.length;
		var _g1 = 0;
		while(_g1 < numBitmaps) {
			var i = _g1++;
			this.addNode(objects[i].bmd,objects[i].keyStr);
		}
		this._tempStorage = null;
	}
	,bitmapSorter: function(obj1,obj2) {
		if(this.allowRotation) {
			var area1 = obj1.bmd.width * obj1.bmd.height;
			var area2 = obj2.bmd.width * obj2.bmd.height;
			return area2 - area1;
		}
		if(obj2.bmd.width == obj1.bmd.width) {
			return obj2.bmd.height - obj1.bmd.height;
		}
		return obj2.bmd.width - obj1.bmd.width;
	}
	,createQueue: function() {
		this._tempStorage = [];
		return this;
	}
	,addToQueue: function(data,key) {
		if(this._tempStorage == null) {
			this._tempStorage = [];
		}
		this._tempStorage.push({ bmd : data, keyStr : key});
		return this;
	}
	,generateFromQueue: function() {
		if(this._tempStorage != null) {
			this.addFromAtlasObjects(this._tempStorage);
		}
		return this;
	}
	,onClear: function(_) {
		if(!this.persist || this._graphic != null && this._graphic.get_useCount() <= 0) {
			this.destroy();
		}
	}
	,destroy: function() {
		this._tempStorage = null;
		this.deleteSubtree(this.root);
		this.root = null;
		flixel_FlxG.bitmap.removeByKey(this.name);
		this.set_bitmapData(null);
		this.nodes = null;
		this._graphic = null;
		flixel_FlxG.signals.preStateCreate.remove($bind(this,this.onClear));
	}
	,clear: function() {
		this.deleteSubtree(this.root);
		this.initRoot();
		flixel_FlxG.bitmap.removeByKey(this.name);
		this.set_bitmapData(null);
		this.nodes = new haxe_ds_StringMap();
		this._graphic = null;
	}
	,getLibGdxData: function() {
		var data = "\n";
		data = "\n" + (this.name + "\n");
		data += "format: RGBA8888\n";
		data += "filter: Linear,Linear\n";
		data += "repeat: none\n";
		var _this = this.nodes;
		var node = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(node.hasNext()) {
			var node1 = node.next();
			data += node1.key + "\n";
			data += "  rotate: " + (node1.rotated == null ? "null" : "" + node1.rotated) + "\n";
			data += "  xy: " + (node1.rect.x | 0) + ", " + (node1.rect.y | 0) + "\n";
			if(this.allowRotation) {
				data += "size: " + (node1.rect.height | 0) + ", " + (node1.rect.width | 0) + "\n";
				data += "orig: " + (node1.rect.height | 0) + ", " + (node1.rect.width | 0) + "\n";
			} else {
				data += "size: " + (node1.rect.width | 0) + ", " + (node1.rect.height | 0) + "\n";
				data += "orig: " + (node1.rect.width | 0) + ", " + (node1.rect.height | 0) + "\n";
			}
			data += "  offset: 0, 0\n";
			data += "  index: -1\n";
		}
		return data;
	}
	,deleteSubtree: function(node) {
		if(node != null) {
			if(node.left != null) {
				this.deleteSubtree(node.left);
			}
			if(node.right != null) {
				this.deleteSubtree(node.right);
			}
			node.key = null;
			node.left = null;
			node.right = null;
			node.rect = null;
			node.atlas = null;
		}
	}
	,findNodeToInsert: function(insertWidth,insertHeight) {
		var stack = [];
		var current = this.root;
		[];
		var canPlaceRight = false;
		var canPlaceLeft = false;
		var looping = true;
		var result = null;
		var minArea = this.maxWidth * this.maxHeight + 1;
		var nodeArea;
		while(looping) {
			if(!current.filled && current.left == null && current.right == null && (current.rect.width >= insertWidth && current.rect.height >= insertHeight)) {
				nodeArea = (current.rect.width | 0) * (current.rect.height | 0);
				if(nodeArea < minArea) {
					minArea = nodeArea;
					result = current;
				}
			}
			if(current.right != null) {
				var _this = current.right;
				if(_this.rect.width >= insertWidth) {
					canPlaceRight = _this.rect.height >= insertHeight;
				} else {
					canPlaceRight = false;
				}
			} else {
				canPlaceRight = false;
			}
			if(current.left != null) {
				var _this1 = current.left;
				if(_this1.rect.width >= insertWidth) {
					canPlaceLeft = _this1.rect.height >= insertHeight;
				} else {
					canPlaceLeft = false;
				}
			} else {
				canPlaceLeft = false;
			}
			if(canPlaceRight && canPlaceLeft) {
				stack.push(current.right);
				current = current.left;
			} else if(canPlaceLeft) {
				current = current.left;
			} else if(canPlaceRight) {
				current = current.right;
			} else if(stack.length > 0) {
				current = stack.pop();
			} else {
				looping = false;
			}
		}
		return result;
	}
	,set_bitmapData: function(value) {
		if(value != null && this._graphic != null) {
			this._graphic.set_bitmap(value);
		}
		return this.bitmapData = value;
	}
	,get_graphic: function() {
		if(this._graphic != null) {
			return this._graphic;
		}
		this._graphic = flixel_FlxG.bitmap.add(this.bitmapData,false,this.name);
		this._graphic.persist = this.persist;
		return this._graphic;
	}
	,set_persist: function(value) {
		if(this._graphic != null) {
			this._graphic.persist = value;
		}
		return this.persist = value;
	}
	,set_minWidth: function(value) {
		if(value <= this.maxWidth) {
			this.minWidth = value;
			if(value > this.get_width()) {
				this.set_width(value);
			}
		}
		return this.minWidth;
	}
	,set_minHeight: function(value) {
		if(value <= this.maxHeight) {
			this.minHeight = value;
			if(value > this.get_height()) {
				this.set_height(value);
			}
		}
		return this.minHeight;
	}
	,get_width: function() {
		if(this.root != null) {
			return this.root.rect.width | 0;
		}
		return 0;
	}
	,set_width: function(value) {
		if(value > this.get_width()) {
			if(this.powerOfTwo) {
				value = this.getNextPowerOfTwo(value);
			}
			if(value <= this.maxWidth) {
				if(this.root != null && (this.root.rect.width | 0) < value) {
					this.expandRoot(value,this.root.rect.height | 0,this.needToDivideHorizontally(this.root,this.root.rect.width | 0,this.root.rect.height | 0));
				}
			}
		}
		return value;
	}
	,get_height: function() {
		if(this.root != null) {
			return this.root.rect.height | 0;
		}
		return 0;
	}
	,set_height: function(value) {
		if(value > this.get_height()) {
			if(this.powerOfTwo) {
				value = this.getNextPowerOfTwo(value);
			}
			if(value <= this.maxHeight) {
				if(this.root != null && (this.root.rect.height | 0) < value) {
					this.expandRoot(this.root.rect.width | 0,value,this.needToDivideHorizontally(this.root,this.root.rect.width | 0,this.root.rect.height | 0));
				}
			}
		}
		return value;
	}
	,set_maxWidth: function(value) {
		if(value >= this.minWidth && (this.root == null || value >= this.get_width())) {
			this.maxWidth = value;
		}
		return this.maxWidth;
	}
	,set_maxHeight: function(value) {
		if(value >= this.minHeight && (this.root == null || value >= this.get_height())) {
			this.maxHeight = value;
		}
		return this.maxHeight;
	}
	,set_powerOfTwo: function(value) {
		if(value != this.powerOfTwo && value && this.root != null) {
			var nextWidth = this.getNextPowerOfTwo(this.root.rect.width | 0);
			var nextHeight = this.getNextPowerOfTwo(this.root.rect.height | 0);
			if(nextWidth != (this.root.rect.width | 0) || nextHeight != (this.root.rect.height | 0)) {
				if(this.maxWidth > 0 && nextWidth > this.maxWidth || this.maxHeight > 0 && nextHeight > this.maxHeight) {
					throw new js__$Boot_HaxeError("Can't set powerOfTwo property to true," + " since it requires to increase atlas size which is bigger that max size");
				}
				var temp = this.root;
				var _this = flixel_math_FlxRect._pool.get();
				_this.x = 0;
				_this.y = 0;
				_this.width = nextWidth;
				_this.height = nextHeight;
				_this._inPool = false;
				this.root = new flixel_graphics_atlas_FlxNode(_this,this);
				if(temp.left != null) {
					this.divideNode(this.root,temp.rect.width | 0,temp.rect.height | 0,this.needToDivideHorizontally(this.root,temp.rect.width | 0,temp.rect.height | 0));
					this.root.left.left = temp;
				}
			}
		}
		return this.powerOfTwo = value;
	}
	,__class__: flixel_graphics_atlas_FlxAtlas
	,__properties__: {set_powerOfTwo:"set_powerOfTwo",set_maxHeight:"set_maxHeight",set_maxWidth:"set_maxWidth",set_minHeight:"set_minHeight",set_minWidth:"set_minWidth",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_persist:"set_persist",get_graphic:"get_graphic",set_bitmapData:"set_bitmapData"}
};
var flixel_graphics_atlas_FlxNode = function(rect,atlas,filled,key,rotated) {
	if(rotated == null) {
		rotated = false;
	}
	if(key == null) {
		key = "";
	}
	if(filled == null) {
		filled = false;
	}
	this.filled = filled;
	this.left = null;
	this.right = null;
	this.rect = rect;
	this.key = key;
	this.atlas = atlas;
	this.rotated = rotated;
};
$hxClasses["flixel.graphics.atlas.FlxNode"] = flixel_graphics_atlas_FlxNode;
flixel_graphics_atlas_FlxNode.__name__ = ["flixel","graphics","atlas","FlxNode"];
flixel_graphics_atlas_FlxNode.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_atlas_FlxNode.prototype = {
	left: null
	,right: null
	,rect: null
	,key: null
	,filled: null
	,atlas: null
	,x: null
	,y: null
	,isEmpty: null
	,rotated: null
	,destroy: function() {
		this.key = null;
		this.left = null;
		this.right = null;
		this.rect = null;
		this.atlas = null;
	}
	,canPlace: function(width,height) {
		if(this.rect.width >= width) {
			return this.rect.height >= height;
		} else {
			return false;
		}
	}
	,getTileFrames: function(tileSize,tileSpacing,tileBorder) {
		flixel_FlxG.bitmap.add(this.atlas.bitmapData,false,this.atlas.name);
		var frame = this.atlas.getAtlasFrames().framesHash.get(this.key);
		if(frame != null) {
			var tileFrames = flixel_graphics_frames_FlxTileFrames.fromFrame(frame,tileSize,tileSpacing);
			if(tileBorder != null) {
				tileFrames = tileFrames.addBorder(tileBorder);
			}
			return tileFrames;
		}
		return null;
	}
	,getImageFrame: function() {
		flixel_FlxG.bitmap.add(this.atlas.bitmapData,false,this.atlas.name);
		var frame = this.atlas.getAtlasFrames().framesHash.get(this.key);
		if(frame != null) {
			return flixel_graphics_frames_FlxImageFrame.fromFrame(frame);
		}
		return null;
	}
	,get_isEmpty: function() {
		if(!this.filled && this.left == null) {
			return this.right == null;
		} else {
			return false;
		}
	}
	,get_x: function() {
		return this.rect.x | 0;
	}
	,get_y: function() {
		return this.rect.y | 0;
	}
	,get_width: function() {
		return this.rect.width | 0;
	}
	,set_width: function(value) {
		this.rect.width = value;
		return value;
	}
	,get_height: function() {
		return this.rect.height | 0;
	}
	,set_height: function(value) {
		this.rect.height = value;
		return value;
	}
	,__class__: flixel_graphics_atlas_FlxNode
	,__properties__: {get_isEmpty:"get_isEmpty",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
};
var flixel_graphics_frames_FlxFramesCollection = function(parent,type,border) {
	this.parent = parent;
	this.type = type;
	var tmp;
	if(border == null) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		tmp = point;
	} else {
		tmp = border;
	}
	this.border = tmp;
	this.frames = [];
	this.framesHash = new haxe_ds_StringMap();
	if(parent != null) {
		parent.addFrameCollection(this);
	}
};
$hxClasses["flixel.graphics.frames.FlxFramesCollection"] = flixel_graphics_frames_FlxFramesCollection;
flixel_graphics_frames_FlxFramesCollection.__name__ = ["flixel","graphics","frames","FlxFramesCollection"];
flixel_graphics_frames_FlxFramesCollection.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_frames_FlxFramesCollection.prototype = {
	frames: null
	,framesHash: null
	,parent: null
	,type: null
	,border: null
	,getByName: function(name) {
		var _this = this.framesHash;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getByIndex: function(index) {
		return this.frames[index];
	}
	,getIndexByName: function(name) {
		var _g1 = 0;
		var _g = this.frames.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.frames[i].name == name) {
				return i;
			}
		}
		return -1;
	}
	,getFrameIndex: function(frame) {
		return this.frames.indexOf(frame);
	}
	,destroy: function() {
		this.frames = flixel_util_FlxDestroyUtil.destroyArray(this.frames);
		this.border = flixel_util_FlxDestroyUtil.put(this.border);
		this.framesHash = null;
		this.parent = null;
		this.type = null;
	}
	,addEmptyFrame: function(size) {
		var frame = new flixel_graphics_frames_FlxFrame(this.parent);
		frame.type = 2;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = 0;
		_this.height = 0;
		_this._inPool = false;
		frame.set_frame(_this);
		frame.sourceSize.set(size.width,size.height);
		this.frames.push(frame);
		return frame;
	}
	,addSpriteSheetFrame: function(region) {
		var frame = new flixel_graphics_frames_FlxFrame(this.parent);
		frame.set_frame(this.checkFrame(region));
		frame.sourceSize.set(region.width,region.height);
		frame.offset.set(0,0);
		return this.pushFrame(frame);
	}
	,addAtlasFrame: function(frame,sourceSize,offset,name,angle,flipX,flipY) {
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(angle == null) {
			angle = 0;
		}
		var tmp;
		if(name != null) {
			var _this = this.framesHash;
			if(__map_reserved[name] != null) {
				tmp = _this.existsReserved(name);
			} else {
				tmp = _this.h.hasOwnProperty(name);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.framesHash;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		}
		var texFrame = new flixel_graphics_frames_FlxFrame(this.parent,angle,flipX,flipY);
		texFrame.name = name;
		texFrame.sourceSize.set(sourceSize.x,sourceSize.y);
		texFrame.offset.set(offset.x,offset.y);
		texFrame.set_frame(this.checkFrame(frame,name));
		sourceSize = flixel_util_FlxDestroyUtil.put(sourceSize);
		offset = flixel_util_FlxDestroyUtil.put(offset);
		return this.pushFrame(texFrame);
	}
	,checkFrame: function(frame,name) {
		var Value = frame.x;
		var Max = this.parent.width;
		var lowerBound = Value < 0 ? 0 : Value;
		var x = Max != null && lowerBound > Max ? Max : lowerBound;
		var Value1 = frame.y;
		var Max1 = this.parent.height;
		var lowerBound1 = Value1 < 0 ? 0 : Value1;
		var y = Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1;
		var Value2 = frame.x + frame.width;
		var Max2 = this.parent.width;
		var lowerBound2 = Value2 < 0 ? 0 : Value2;
		var r = Max2 != null && lowerBound2 > Max2 ? Max2 : lowerBound2;
		var Value3 = frame.y + frame.height;
		var Max3 = this.parent.height;
		var lowerBound3 = Value3 < 0 ? 0 : Value3;
		var b = Max3 != null && lowerBound3 > Max3 ? Max3 : lowerBound3;
		frame.x = x;
		frame.y = y;
		frame.width = r - x;
		frame.height = b - y;
		if(frame.width <= 0 || frame.height <= 0) {
			flixel_FlxG.log.advanced("The frame " + name + " has incorrect data and results in an image with the size of (0, 0)",flixel_system_debug_log_LogStyle.WARNING,true);
		}
		return frame;
	}
	,pushFrame: function(frameObj) {
		var name = frameObj.name;
		var tmp;
		if(name != null) {
			var _this = this.framesHash;
			if(__map_reserved[name] != null) {
				tmp = _this.existsReserved(name);
			} else {
				tmp = _this.h.hasOwnProperty(name);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this1 = this.framesHash;
			if(__map_reserved[name] != null) {
				return _this1.getReserved(name);
			} else {
				return _this1.h[name];
			}
		}
		this.frames.push(frameObj);
		frameObj.cacheFrameMatrix();
		if(name != null) {
			var _this2 = this.framesHash;
			if(__map_reserved[name] != null) {
				_this2.setReserved(name,frameObj);
			} else {
				_this2.h[name] = frameObj;
			}
		}
		return frameObj;
	}
	,addBorder: function(border) {
		throw new js__$Boot_HaxeError("To be overriden in subclasses");
	}
	,toString: function() {
		var value = this.frames;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "frames";
		_this.value = value;
		var value1 = this.type;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "type";
		_this1.value = value1;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,get_numFrames: function() {
		return this.frames.length;
	}
	,__class__: flixel_graphics_frames_FlxFramesCollection
	,__properties__: {get_numFrames:"get_numFrames"}
};
var flixel_graphics_frames_FlxAtlasFrames = function(parent,border) {
	flixel_graphics_frames_FlxFramesCollection.call(this,parent,flixel_graphics_frames_FlxFrameCollectionType.ATLAS,border);
};
$hxClasses["flixel.graphics.frames.FlxAtlasFrames"] = flixel_graphics_frames_FlxAtlasFrames;
flixel_graphics_frames_FlxAtlasFrames.__name__ = ["flixel","graphics","frames","FlxAtlasFrames"];
flixel_graphics_frames_FlxAtlasFrames.fromTexturePackerJson = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source,false);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	if(openfl_Assets.exists(Description)) {
		Description = openfl_Assets.getText(Description);
	}
	var data = JSON.parse(Description);
	if((data.frames instanceof Array) && data.frames.__enum__ == null) {
		var _g = 0;
		var _g1 = Lambda.array(data.frames);
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			flixel_graphics_frames_FlxAtlasFrames.texturePackerHelper(frame.filename,frame,frames);
		}
	} else {
		var _g2 = 0;
		var _g11 = Reflect.fields(data.frames);
		while(_g2 < _g11.length) {
			var frameName = _g11[_g2];
			++_g2;
			flixel_graphics_frames_FlxAtlasFrames.texturePackerHelper(frameName,Reflect.field(data.frames,frameName),frames);
		}
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.texturePackerHelper = function(FrameName,FrameData,Frames) {
	var rotated = FrameData.rotated;
	var X = FrameData.sourceSize.w;
	var Y = FrameData.sourceSize.h;
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	var X1 = FrameData.spriteSourceSize.x;
	var Y1 = FrameData.spriteSourceSize.y;
	var point1 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
	point1._inPool = false;
	var angle = 0;
	var frameRect = null;
	if(rotated) {
		var X2 = FrameData.frame.x;
		var Y2 = FrameData.frame.y;
		var Width = FrameData.frame.h;
		var Height = FrameData.frame.w;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = X2;
		_this.y = Y2;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		frameRect = _this;
		angle = -90;
	} else {
		var X3 = FrameData.frame.x;
		var Y3 = FrameData.frame.y;
		var Width1 = FrameData.frame.w;
		var Height1 = FrameData.frame.h;
		var _this1 = flixel_math_FlxRect._pool.get();
		_this1.x = X3;
		_this1.y = Y3;
		_this1.width = Width1;
		_this1.height = Height1;
		_this1._inPool = false;
		frameRect = _this1;
	}
	Frames.addAtlasFrame(frameRect,point,point1,FrameName,angle);
};
flixel_graphics_frames_FlxAtlasFrames.fromLibGdx = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	if(openfl_Assets.exists(Description)) {
		Description = openfl_Assets.getText(Description);
	}
	var pack = StringTools.trim(Description);
	var lines = pack.split("\n");
	var repeatLine = lines[3].indexOf("repeat:") > -1 ? 3 : 4;
	lines.splice(0,repeatLine + 1);
	var numImages = lines.length / 7 | 0;
	var size = [];
	var _g1 = 0;
	while(_g1 < numImages) {
		var i = _g1++;
		var curIndex = i * 7;
		var name = lines[curIndex++];
		var rotated = lines[curIndex++].indexOf("true") >= 0;
		var angle = 0;
		var tempString = lines[curIndex++];
		var size1 = flixel_graphics_frames_FlxAtlasFrames.getDimensions(tempString,size);
		var imageX = size1[0];
		var imageY = size1[1];
		tempString = lines[curIndex++];
		size1 = flixel_graphics_frames_FlxAtlasFrames.getDimensions(tempString,size1);
		var imageWidth = size1[0];
		var imageHeight = size1[1];
		var rect = null;
		if(rotated) {
			var _this = flixel_math_FlxRect._pool.get();
			_this.x = imageX;
			_this.y = imageY;
			_this.width = imageHeight;
			_this.height = imageWidth;
			_this._inPool = false;
			rect = _this;
			angle = 90;
		} else {
			var _this1 = flixel_math_FlxRect._pool.get();
			_this1.x = imageX;
			_this1.y = imageY;
			_this1.width = imageWidth;
			_this1.height = imageHeight;
			_this1._inPool = false;
			rect = _this1;
		}
		tempString = lines[curIndex++];
		size1 = flixel_graphics_frames_FlxAtlasFrames.getDimensions(tempString,size1);
		var point = flixel_math_FlxPoint._pool.get().set(size1[0],size1[1]);
		point._inPool = false;
		tempString = lines[curIndex++];
		size1 = flixel_graphics_frames_FlxAtlasFrames.getDimensions(tempString,size1);
		var Y = point.y - size1[1] - imageHeight;
		var point1 = flixel_math_FlxPoint._pool.get().set(size1[0],Y);
		point1._inPool = false;
		frames.addAtlasFrame(rect,point,point1,name,angle);
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.getDimensions = function(line,size) {
	var colonPosition = line.indexOf(":");
	var comaPosition = line.indexOf(",");
	size[0] = Std.parseInt(line.substring(colonPosition + 1,comaPosition));
	size[1] = Std.parseInt(line.substring(comaPosition + 1,line.length));
	return size;
};
flixel_graphics_frames_FlxAtlasFrames.fromSparrow = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	if(openfl_Assets.exists(Description)) {
		Description = openfl_Assets.getText(Description);
	}
	var data = new haxe_xml_Fast(Xml.parse(Description).firstElement());
	var _g_head = data.nodes.resolve("SubTexture").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var name = val.att.resolve("name");
		var trimmed = val.has.resolve("frameX");
		var rotated = val.has.resolve("rotated") && val.att.resolve("rotated") == "true";
		var flipX = val.has.resolve("flipX") && val.att.resolve("flipX") == "true";
		var flipY = val.has.resolve("flipY") && val.att.resolve("flipY") == "true";
		var X = parseFloat(val.att.resolve("x"));
		var Y = parseFloat(val.att.resolve("y"));
		var Width = parseFloat(val.att.resolve("width"));
		var Height = parseFloat(val.att.resolve("height"));
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		var size = trimmed ? new openfl_geom_Rectangle(Std.parseInt(val.att.resolve("frameX")),Std.parseInt(val.att.resolve("frameY")),Std.parseInt(val.att.resolve("frameWidth")),Std.parseInt(val.att.resolve("frameHeight"))) : new openfl_geom_Rectangle(0,0,_this.width,_this.height);
		var angle = rotated ? -90 : 0;
		var X1 = -size.get_left();
		var Y1 = -size.get_top();
		var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point._inPool = false;
		var X2 = size.width;
		var Y2 = size.height;
		var point1 = flixel_math_FlxPoint._pool.get().set(X2,Y2);
		point1._inPool = false;
		if(rotated && !trimmed) {
			point1.set(size.height,size.width);
		}
		frames.addAtlasFrame(_this,point1,point,name,angle,flipX,flipY);
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.fromTexturePackerXml = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source,false);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	if(openfl_Assets.exists(Description)) {
		Description = openfl_Assets.getText(Description);
	}
	var xml = Xml.parse(Description);
	var sprite = xml.firstElement().elements();
	while(sprite.hasNext()) {
		var sprite1 = sprite.next();
		var trimmed = sprite1.exists("oX") || sprite1.exists("oY");
		var rotated = sprite1.exists("r") && sprite1.get("r") == "y";
		var angle = rotated ? -90 : 0;
		var name = sprite1.get("n");
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var X = Std.parseInt(sprite1.get("x"));
		var Y = Std.parseInt(sprite1.get("y"));
		var Width = Std.parseInt(sprite1.get("w"));
		var Height = Std.parseInt(sprite1.get("h"));
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		var X1 = _this.width;
		var Y1 = _this.height;
		var point1 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point1._inPool = false;
		if(trimmed) {
			point.set(Std.parseInt(sprite1.get("oX")),Std.parseInt(sprite1.get("oY")));
			point1.set(Std.parseInt(sprite1.get("oW")),Std.parseInt(sprite1.get("oH")));
		}
		frames.addAtlasFrame(_this,point1,point,name,angle);
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker = function(Source,Description) {
	var graphic = flixel_FlxG.bitmap.add(Source);
	if(graphic == null) {
		return null;
	}
	var frames = flixel_graphics_frames_FlxAtlasFrames.findFrame(graphic);
	if(frames != null) {
		return frames;
	}
	if(graphic == null || Description == null) {
		return null;
	}
	frames = new flixel_graphics_frames_FlxAtlasFrames(graphic);
	if(openfl_Assets.exists(Description)) {
		Description = openfl_Assets.getText(Description);
	}
	var pack = StringTools.trim(Description);
	var lines = pack.split("\n");
	var _g1 = 0;
	var _g = lines.length;
	while(_g1 < _g) {
		var i = _g1++;
		var currImageData = lines[i].split("=");
		var name = StringTools.trim(currImageData[0]);
		var currImageRegion = StringTools.trim(currImageData[1]).split(" ");
		var X = Std.parseInt(currImageRegion[0]);
		var Y = Std.parseInt(currImageRegion[1]);
		var Width = Std.parseInt(currImageRegion[2]);
		var Height = Std.parseInt(currImageRegion[3]);
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		var X1 = _this.width;
		var Y1 = _this.height;
		var point = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point._inPool = false;
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		frames.addAtlasFrame(_this,point,point1,name,0);
	}
	return frames;
};
flixel_graphics_frames_FlxAtlasFrames.findFrame = function(graphic,border) {
	if(border == null) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		point._weak = true;
		border = point;
	}
	var type = flixel_graphics_frames_FlxFrameCollectionType.ATLAS;
	var collections = graphic.frameCollections.get(type);
	if(collections == null) {
		collections = [];
		graphic.frameCollections.set(type,collections);
	}
	var atlasFrames = collections;
	var _g = 0;
	while(_g < atlasFrames.length) {
		var atlas = atlasFrames[_g];
		++_g;
		var _this = atlas.border;
		var result = Math.abs(_this.x - border.x) <= 0.0000001 && Math.abs(_this.y - border.y) <= 0.0000001;
		if(border._weak) {
			border.put();
		}
		if(result) {
			return atlas;
		}
	}
	return null;
};
flixel_graphics_frames_FlxAtlasFrames.__super__ = flixel_graphics_frames_FlxFramesCollection;
flixel_graphics_frames_FlxAtlasFrames.prototype = $extend(flixel_graphics_frames_FlxFramesCollection.prototype,{
	addBorder: function(border) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		point._weak = true;
		var resultBorder = point.addPoint(this.border).addPoint(border);
		var atlasFrames = flixel_graphics_frames_FlxAtlasFrames.findFrame(this.parent,resultBorder);
		if(atlasFrames != null) {
			return atlasFrames;
		}
		atlasFrames = new flixel_graphics_frames_FlxAtlasFrames(this.parent,resultBorder);
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			atlasFrames.pushFrame(frame.setBorderTo(border));
		}
		return atlasFrames;
	}
	,__class__: flixel_graphics_frames_FlxAtlasFrames
});
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_left: function() {
		return this.x;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,get_top: function() {
		return this.y;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {get_topLeft:"get_topLeft",get_top:"get_top",get_right:"get_right",get_left:"get_left",get_bottom:"get_bottom"}
};
var flixel_graphics_frames_FlxBitmapFont = function(frame,border) {
	this.spaceWidth = 0;
	this.minOffsetX = 0;
	this.numLetters = 0;
	this.italic = false;
	this.bold = false;
	this.lineHeight = 0;
	this.size = 0;
	flixel_graphics_frames_FlxFramesCollection.call(this,frame.parent,flixel_graphics_frames_FlxFrameCollectionType.FONT,border);
	this.frame = frame;
	this.parent.persist = true;
	this.parent.set_destroyOnNoUse(false);
	this.charMap = new haxe_ds_IntMap();
	this.charAdvance = new haxe_ds_IntMap();
};
$hxClasses["flixel.graphics.frames.FlxBitmapFont"] = flixel_graphics_frames_FlxBitmapFont;
flixel_graphics_frames_FlxBitmapFont.__name__ = ["flixel","graphics","frames","FlxBitmapFont"];
flixel_graphics_frames_FlxBitmapFont.getDefaultFont = function() {
	var graphic = flixel_FlxG.bitmap._cache.get("DEFAULT_FONT_KEY");
	if(graphic != null) {
		var font = flixel_graphics_frames_FlxBitmapFont.findFont(graphic.get_imageFrame().get_frame());
		if(font != null) {
			return font;
		}
	}
	var letters = "";
	var bd = new openfl_display_BitmapData(700,9,true,-7829368);
	graphic = flixel_FlxG.bitmap.add(bd,false,"DEFAULT_FONT_KEY");
	var letterPos = 0;
	var i = 0;
	while(i < " 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000".length) {
		letters += HxOverrides.substr(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",i,1);
		var gw = Std.parseInt(HxOverrides.substr(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",++i,1));
		var gh = Std.parseInt(HxOverrides.substr(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",++i,1));
		var _g1 = 0;
		while(_g1 < gh) {
			var py = _g1++;
			var _g3 = 0;
			while(_g3 < gw) {
				var px = _g3++;
				++i;
				if(HxOverrides.substr(" 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000",i,1) == "1") {
					bd.setPixel32(1 + letterPos * 7 + px,1 + py,-1);
				} else {
					bd.setPixel32(1 + letterPos * 7 + px,1 + py,0);
				}
			}
		}
		++i;
		++letterPos;
	}
	return flixel_graphics_frames_FlxBitmapFont.fromXNA(graphic,letters);
};
flixel_graphics_frames_FlxBitmapFont.fromAngelCode = function(Source,Data) {
	var graphic = null;
	var frame = null;
	if(js_Boot.__instanceof(Source,flixel_graphics_frames_FlxFrame)) {
		frame = Source;
		graphic = frame.parent;
	} else {
		graphic = flixel_FlxG.bitmap.add(Source);
		frame = graphic.get_imageFrame().get_frame();
	}
	var font = flixel_graphics_frames_FlxBitmapFont.findFont(frame);
	if(font != null) {
		return font;
	}
	var fontData = null;
	if(Data != null) {
		if(js_Boot.__instanceof(Data,Xml)) {
			fontData = Data;
		} else {
			var data = Std.string(Data);
			if(openfl_Assets.exists(data)) {
				data = openfl_Assets.getText(data);
			}
			fontData = Xml.parse(data);
		}
	}
	font = new flixel_graphics_frames_FlxBitmapFont(frame);
	var fast = new haxe_xml_Fast(fontData.firstElement());
	font.lineHeight = Std.parseInt(fast.node.resolve("common").att.resolve("lineHeight"));
	font.size = Std.parseInt(fast.node.resolve("info").att.resolve("size"));
	font.fontName = Std.string(fast.node.resolve("info").att.resolve("face"));
	font.bold = Std.parseInt(fast.node.resolve("info").att.resolve("bold")) != 0;
	font.italic = Std.parseInt(fast.node.resolve("info").att.resolve("italic")) != 0;
	var frameHeight;
	var charStr;
	var charCode;
	var xOffset;
	var yOffset;
	var xAdvance;
	var chars = fast.node.resolve("chars");
	var _g_head = chars.nodes.resolve("char").h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = 0;
		_this.height = 0;
		_this._inPool = false;
		_this.x = Std.parseInt(val.att.resolve("x"));
		_this.y = Std.parseInt(val.att.resolve("y"));
		_this.width = Std.parseInt(val.att.resolve("width"));
		frameHeight = Std.parseInt(val.att.resolve("height"));
		_this.height = frameHeight;
		if(val.has.resolve("xoffset")) {
			xOffset = Std.parseInt(val.att.resolve("xoffset"));
		} else {
			xOffset = 0;
		}
		if(val.has.resolve("yoffset")) {
			yOffset = Std.parseInt(val.att.resolve("yoffset"));
		} else {
			yOffset = 0;
		}
		if(val.has.resolve("xadvance")) {
			xAdvance = Std.parseInt(val.att.resolve("xadvance"));
		} else {
			xAdvance = 0;
		}
		var point = flixel_math_FlxPoint._pool.get().set(xOffset,yOffset);
		point._inPool = false;
		font.minOffsetX = font.minOffsetX < -xOffset ? -xOffset : font.minOffsetX;
		charCode = -1;
		charStr = null;
		if(val.has.resolve("letter")) {
			charStr = val.att.resolve("letter");
		} else if(val.has.resolve("id")) {
			charCode = Std.parseInt(val.att.resolve("id"));
		}
		if(charCode == -1 && charStr == null) {
			throw new js__$Boot_HaxeError("Invalid font xml data!");
		}
		if(charStr != null) {
			switch(charStr) {
			case "&amp;":
				charStr = "&";
				break;
			case "&gt;":
				charStr = ">";
				break;
			case "&lt;":
				charStr = "<";
				break;
			case "&quot;":
				charStr = "\"";
				break;
			case "space":
				charStr = " ";
				break;
			default:
				charStr = charStr;
			}
			charCode = HxOverrides.cca(charStr,0);
		}
		font.addCharFrame(charCode,_this,point,xAdvance);
		if(charCode == 32) {
			font.spaceWidth = xAdvance;
		} else {
			font.lineHeight = font.lineHeight > frameHeight + yOffset ? font.lineHeight : frameHeight + yOffset;
		}
	}
	font.updateSourceHeight();
	return font;
};
flixel_graphics_frames_FlxBitmapFont.fromXNA = function(source,letters,charBGColor) {
	if(charBGColor == null) {
		charBGColor = 0;
	}
	var graphic = null;
	var frame = null;
	if(js_Boot.__instanceof(source,flixel_graphics_frames_FlxFrame)) {
		frame = source;
		graphic = frame.parent;
	} else {
		graphic = flixel_FlxG.bitmap.add(source);
		frame = graphic.get_imageFrame().get_frame();
	}
	var font = flixel_graphics_frames_FlxBitmapFont.findFont(frame);
	if(font != null) {
		return font;
	}
	if(letters == null) {
		letters = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
	} else {
		letters = letters;
	}
	font = new flixel_graphics_frames_FlxBitmapFont(frame);
	font.fontName = graphic.key;
	var bmd = graphic.bitmap;
	var p = new openfl_geom_Point();
	p.setTo(0,0);
	var x = p.x;
	var y = p.y;
	if(frame.angle == -90) {
		p.x = frame.frame.width - y;
		p.y = x;
	} else if(frame.angle == 90) {
		p.x = y;
		p.y = frame.frame.height - x;
	}
	p.x += frame.frame.x;
	p.y += frame.frame.y;
	var globalBGColor = bmd.getPixel(p.x | 0,p.y | 0);
	var frameWidth = frame.frame.width | 0;
	var frameHeight = frame.frame.height | 0;
	var letterIdx = 0;
	var charCode;
	var numLetters = letters.length;
	var cy = 0;
	var cx;
	var gx;
	var gy;
	var gw;
	var gh;
	while(cy < frameHeight && letterIdx < numLetters) {
		var rowHeight = 0;
		cx = 0;
		while(cx < frameWidth && letterIdx < numLetters) {
			p.setTo(cx,cy);
			var x1 = p.x;
			var y1 = p.y;
			if(frame.angle == -90) {
				p.x = frame.frame.width - y1;
				p.y = x1;
			} else if(frame.angle == 90) {
				p.x = y1;
				p.y = frame.frame.height - x1;
			}
			p.x += frame.frame.x;
			p.y += frame.frame.y;
			if(bmd.getPixel(p.x | 0,p.y | 0) != globalBGColor) {
				gx = cx;
				gy = cy;
				p.setTo(gx,gy);
				var x2 = p.x;
				var y2 = p.y;
				if(frame.angle == -90) {
					p.x = frame.frame.width - y2;
					p.y = x2;
				} else if(frame.angle == 90) {
					p.x = y2;
					p.y = frame.frame.height - x2;
				}
				p.x += frame.frame.x;
				p.y += frame.frame.y;
				while(bmd.getPixel(p.x | 0,p.y | 0) != globalBGColor) {
					++gx;
					p.setTo(gx,cy);
					var x3 = p.x;
					var y3 = p.y;
					if(frame.angle == -90) {
						p.x = frame.frame.width - y3;
						p.y = x3;
					} else if(frame.angle == 90) {
						p.x = y3;
						p.y = frame.frame.height - x3;
					}
					p.x += frame.frame.x;
					p.y += frame.frame.y;
				}
				p.setTo(gx - 1,gy);
				var x4 = p.x;
				var y4 = p.y;
				if(frame.angle == -90) {
					p.x = frame.frame.width - y4;
					p.y = x4;
				} else if(frame.angle == 90) {
					p.x = y4;
					p.y = frame.frame.height - x4;
				}
				p.x += frame.frame.x;
				p.y += frame.frame.y;
				while(bmd.getPixel(p.x | 0,p.y | 0) != globalBGColor) {
					++gy;
					p.setTo(cx,gy);
					var x5 = p.x;
					var y5 = p.y;
					if(frame.angle == -90) {
						p.x = frame.frame.width - y5;
						p.y = x5;
					} else if(frame.angle == 90) {
						p.x = y5;
						p.y = frame.frame.height - x5;
					}
					p.x += frame.frame.x;
					p.y += frame.frame.y;
				}
				gw = gx - cx;
				gh = gy - cy;
				charCode = HxOverrides.cca(letters,letterIdx);
				var _this = flixel_math_FlxRect._pool.get();
				_this.x = cx;
				_this.y = cy;
				_this.width = gw;
				_this.height = gh;
				_this._inPool = false;
				var point = flixel_math_FlxPoint._pool.get().set(0,0);
				point._inPool = false;
				font.addCharFrame(charCode,_this,point,gw);
				if(charCode == 32) {
					font.spaceWidth = gw;
				}
				if(gh > rowHeight) {
					rowHeight = gh;
				}
				if(gh > font.size) {
					font.size = gh;
				}
				cx += gw;
				++letterIdx;
			}
			++cx;
		}
		cy += rowHeight + 1;
	}
	font.lineHeight = font.size;
	font.updateSourceHeight();
	flixel_graphics_frames_FlxBitmapFont.point.setTo(frame.frame.x | 0,frame.frame.y | 0);
	var frameRect = flixel_graphics_frames_FlxBitmapFont.flashRect;
	var _this1 = frame.frame;
	var FlashRect = frameRect;
	if(frameRect == null) {
		FlashRect = new openfl_geom_Rectangle();
	}
	FlashRect.x = _this1.x;
	FlashRect.y = _this1.y;
	FlashRect.width = _this1.width;
	FlashRect.height = _this1.height;
	if(charBGColor != 0) {
		bmd.threshold(bmd,frameRect,flixel_graphics_frames_FlxBitmapFont.point,"==",charBGColor,0,-1,true);
	}
	return font;
};
flixel_graphics_frames_FlxBitmapFont.transformPoint = function(point,frame) {
	var x = point.x;
	var y = point.y;
	if(frame.angle == -90) {
		point.x = frame.frame.width - y;
		point.y = x;
	} else if(frame.angle == 90) {
		point.x = y;
		point.y = frame.frame.height - x;
	}
	point.x += frame.frame.x;
	point.y += frame.frame.y;
	return point;
};
flixel_graphics_frames_FlxBitmapFont.fromMonospace = function(source,letters,charSize,region,spacing) {
	var graphic = null;
	var frame = null;
	if(js_Boot.__instanceof(source,flixel_graphics_frames_FlxFrame)) {
		frame = source;
		graphic = frame.parent;
	} else {
		graphic = flixel_FlxG.bitmap.add(source);
		frame = graphic.get_imageFrame().get_frame();
	}
	var font = flixel_graphics_frames_FlxBitmapFont.findFont(frame);
	if(font != null) {
		return font;
	}
	if(letters == null) {
		letters = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
	} else {
		letters = letters;
	}
	if(region == null) {
		var Width = frame.sourceSize.x;
		var Height = frame.sourceSize.y;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		_this._weak = true;
		region = _this;
	} else {
		region = region;
	}
	if(spacing == null) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		spacing = point;
	} else {
		spacing = spacing;
	}
	var bitmapWidth = region.width | 0;
	var bitmapHeight = region.height | 0;
	var startX = region.x | 0;
	var startY = region.y | 0;
	if(region._weak) {
		if(!region._inPool) {
			region._inPool = true;
			region._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(region);
		}
	}
	var xSpacing = spacing.x | 0;
	var ySpacing = spacing.y | 0;
	var charWidth = charSize.x | 0;
	var charHeight = charSize.y | 0;
	var spacedWidth = charWidth + xSpacing;
	var spacedHeight = charHeight + ySpacing;
	var numRows = charHeight == 0 ? 1 : (bitmapHeight + ySpacing) / spacedHeight | 0;
	var numCols = charWidth == 0 ? 1 : (bitmapWidth + xSpacing) / spacedWidth | 0;
	font = new flixel_graphics_frames_FlxBitmapFont(frame);
	font.fontName = graphic.key;
	font.lineHeight = font.size = charHeight;
	font.spaceWidth = charWidth;
	var letterIndex = 0;
	var numLetters = letters.length;
	var _g1 = 0;
	var _g = numRows;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = numCols;
		while(_g3 < _g2) {
			var i = _g3++;
			var _this1 = flixel_math_FlxRect._pool.get();
			_this1.x = startX + i * spacedWidth;
			_this1.y = startY + j * spacedHeight;
			_this1.width = charWidth;
			_this1.height = charHeight;
			_this1._inPool = false;
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			font.addCharFrame(HxOverrides.cca(letters,letterIndex),_this1,point1,charWidth);
			++letterIndex;
			if(letterIndex >= numLetters) {
				return font;
			}
		}
	}
	font.updateSourceHeight();
	return font;
};
flixel_graphics_frames_FlxBitmapFont.findFont = function(frame,border) {
	if(border == null) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		point._weak = true;
		border = point;
	}
	var _this = frame.parent;
	var type = flixel_graphics_frames_FlxFrameCollectionType.FONT;
	var collections = _this.frameCollections.get(type);
	if(collections == null) {
		collections = [];
		_this.frameCollections.set(type,collections);
	}
	var bitmapFonts = collections;
	var _g = 0;
	while(_g < bitmapFonts.length) {
		var font = bitmapFonts[_g];
		++_g;
		var tmp;
		if(font.frame == frame) {
			var _this1 = font.border;
			var result = Math.abs(_this1.x - border.x) <= 0.0000001 && Math.abs(_this1.y - border.y) <= 0.0000001;
			if(border._weak) {
				border.put();
			}
			tmp = result;
		} else {
			tmp = false;
		}
		if(tmp) {
			return font;
		}
	}
	return null;
};
flixel_graphics_frames_FlxBitmapFont.__super__ = flixel_graphics_frames_FlxFramesCollection;
flixel_graphics_frames_FlxBitmapFont.prototype = $extend(flixel_graphics_frames_FlxFramesCollection.prototype,{
	size: null
	,lineHeight: null
	,bold: null
	,italic: null
	,fontName: null
	,numLetters: null
	,minOffsetX: null
	,spaceWidth: null
	,charMap: null
	,charAdvance: null
	,frame: null
	,destroy: function() {
		flixel_graphics_frames_FlxFramesCollection.prototype.destroy.call(this);
		this.frame = null;
		this.fontName = null;
		this.charMap = null;
		this.charAdvance = null;
	}
	,addCharFrame: function(charCode,frame,offset,xAdvance) {
		var utf8 = new haxe_Utf8();
		var charName = utf8.__b += String.fromCharCode(charCode);
		if(frame.width == 0 || frame.height == 0 || this.framesHash.get(charName) != null) {
			return;
		}
		var charFrame = this.frame.subFrameTo(frame);
		var w = charFrame.sourceSize.x;
		var h = charFrame.sourceSize.y;
		w += offset.x > 0 ? offset.x : 0;
		h += offset.y > 0 ? offset.y : 0;
		charFrame.sourceSize.set(w,h);
		charFrame.offset.addPoint(offset);
		charFrame.name = charName;
		this.pushFrame(charFrame);
		this.charMap.h[charCode] = charFrame;
		this.charAdvance.h[charCode] = xAdvance;
		offset.put();
	}
	,updateSourceHeight: function() {
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			frame.sourceSize.set_y(this.lineHeight);
			frame.cacheFrameMatrix();
		}
	}
	,charExists: function(charCode) {
		return this.charMap.h.hasOwnProperty(charCode);
	}
	,getCharFrame: function(charCode) {
		return this.charMap.h[charCode];
	}
	,getCharAdvance: function(charCode) {
		if(this.charAdvance.h.hasOwnProperty(charCode)) {
			return this.charAdvance.h[charCode];
		} else {
			return 0;
		}
	}
	,getCharWidth: function(charCode) {
		if(this.charMap.h.hasOwnProperty(charCode)) {
			return this.charMap.h[charCode].sourceSize.x;
		} else {
			return 0;
		}
	}
	,addBorder: function(border) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		point._weak = true;
		var resultBorder = point.addPoint(this.border).addPoint(border);
		var font = flixel_graphics_frames_FlxBitmapFont.findFont(this.frame,resultBorder);
		if(font != null) {
			return font;
		}
		font = new flixel_graphics_frames_FlxBitmapFont(this.frame,border);
		font.spaceWidth = this.spaceWidth;
		font.fontName = this.fontName;
		font.numLetters = this.numLetters;
		font.minOffsetX = this.minOffsetX;
		font.size = this.size;
		font.lineHeight = this.lineHeight;
		font.italic = this.italic;
		font.bold = this.bold;
		var charWithBorder;
		var code;
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var $char = _g1[_g];
			++_g;
			charWithBorder = $char.setBorderTo(border);
			font.pushFrame(charWithBorder);
			code = HxOverrides.cca($char.name,0);
			font.charMap.h[code] = charWithBorder;
			font.charAdvance.h[code] = this.charAdvance.h[code];
		}
		font.updateSourceHeight();
		return font;
	}
	,__class__: flixel_graphics_frames_FlxBitmapFont
});
var flixel_graphics_frames_FlxFrame = function(parent,angle,flipX,flipY) {
	if(flipY == null) {
		flipY = false;
	}
	if(flipX == null) {
		flipX = false;
	}
	if(angle == null) {
		angle = 0;
	}
	this.matrix = new flixel_math_FlxMatrix();
	this.rect = new openfl_geom_Rectangle();
	this.point2 = new openfl_geom_Point();
	this.point1 = new openfl_geom_Point();
	this.parent = parent;
	this.angle = angle;
	this.flipX = flipX;
	this.flipY = flipY;
	this.type = 0;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.sourceSize = point;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	this.offset = point1;
	var this1 = new Array(6);
	this.blitMatrix = this1;
	if(flixel_FlxG.renderTile) {
		var this2 = new Array(6);
		this.tileMatrix = this2;
	}
};
$hxClasses["flixel.graphics.frames.FlxFrame"] = flixel_graphics_frames_FlxFrame;
flixel_graphics_frames_FlxFrame.__name__ = ["flixel","graphics","frames","FlxFrame"];
flixel_graphics_frames_FlxFrame.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_graphics_frames_FlxFrame.sort = function(frames,prefixLength,postfixLength) {
	var a3 = prefixLength;
	var a4 = postfixLength;
	haxe_ds_ArraySort.sort(frames,function(a1,a2) {
		return flixel_graphics_frames_FlxFrame.sortByName(a1,a2,a3,a4);
	});
};
flixel_graphics_frames_FlxFrame.sortByName = function(frame1,frame2,prefixLength,postfixLength) {
	var name1 = frame1.name;
	var name2 = frame2.name;
	var num1 = Std.parseInt(name1.substring(prefixLength,name1.length - postfixLength));
	var num2 = Std.parseInt(name2.substring(prefixLength,name2.length - postfixLength));
	if(num1 == null) {
		num1 = 0;
	}
	if(num2 == null) {
		num2 = 0;
	}
	return num1 - num2;
};
flixel_graphics_frames_FlxFrame.prototype = {
	point1: null
	,point2: null
	,rect: null
	,matrix: null
	,name: null
	,frame: null
	,uv: null
	,parent: null
	,angle: null
	,flipX: null
	,flipY: null
	,sourceSize: null
	,offset: null
	,type: null
	,tileMatrix: null
	,blitMatrix: null
	,cacheFrameMatrix: function() {
		var mat = this.matrix;
		mat.identity();
		mat.translate(-this.frame.x,-this.frame.y);
		if(this.angle == 90) {
			mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
			mat.translate(this.frame.height,0);
		} else if(this.angle == -90) {
			mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
			mat.translate(0,this.frame.width);
		}
		mat.translate(this.offset.x,this.offset.y);
		this.blitMatrix[0] = this.matrix.a;
		this.blitMatrix[1] = this.matrix.b;
		this.blitMatrix[2] = this.matrix.c;
		this.blitMatrix[3] = this.matrix.d;
		this.blitMatrix[4] = this.matrix.tx;
		this.blitMatrix[5] = this.matrix.ty;
		if(flixel_FlxG.renderTile) {
			var mat1 = this.matrix;
			mat1.identity();
			if(this.angle == 90) {
				mat1.setTo(-mat1.b,mat1.a,-mat1.d,mat1.c,-mat1.ty,mat1.tx);
				mat1.translate(this.frame.height,0);
			} else if(this.angle == -90) {
				mat1.setTo(mat1.b,-mat1.a,mat1.d,-mat1.c,mat1.ty,-mat1.tx);
				mat1.translate(0,this.frame.width);
			}
			mat1.translate(this.offset.x,this.offset.y);
			this.tileMatrix[0] = this.matrix.a;
			this.tileMatrix[1] = this.matrix.b;
			this.tileMatrix[2] = this.matrix.c;
			this.tileMatrix[3] = this.matrix.d;
			this.tileMatrix[4] = this.matrix.tx;
			this.tileMatrix[5] = this.matrix.ty;
		}
	}
	,prepareBlitMatrix: function(mat,blit) {
		if(blit == null) {
			blit = true;
		}
		mat.identity();
		if(blit) {
			mat.translate(-this.frame.x,-this.frame.y);
		}
		if(this.angle == 90) {
			mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
			mat.translate(this.frame.height,0);
		} else if(this.angle == -90) {
			mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
			mat.translate(0,this.frame.width);
		}
		mat.translate(this.offset.x,this.offset.y);
		return mat;
	}
	,rotateAndFlip: function(mat,rotation,flipX,flipY) {
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation != 0) {
			var t = w;
			w = h;
			h = t;
			if(rotation == 90) {
				mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
				mat.translate(this.sourceSize.y,0);
			} else if(rotation == -90 || rotation == -90) {
				mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
				mat.translate(0,this.sourceSize.x);
			}
		}
		if(flipX) {
			mat.scale(-1,1);
			mat.translate(w,0);
		}
		if(flipY) {
			mat.scale(1,-1);
			mat.translate(0,h);
		}
		return mat;
	}
	,prepareTransformedBlitMatrix: function(mat,rotation,flipX,flipY) {
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		mat.a = this.blitMatrix[0];
		mat.b = this.blitMatrix[1];
		mat.c = this.blitMatrix[2];
		mat.d = this.blitMatrix[3];
		mat.tx = this.blitMatrix[4];
		mat.ty = this.blitMatrix[5];
		mat = mat;
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation != 0) {
			var t = w;
			w = h;
			h = t;
			if(rotation == 90) {
				mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
				mat.translate(this.sourceSize.y,0);
			} else if(rotation == -90 || rotation == -90) {
				mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
				mat.translate(0,this.sourceSize.x);
			}
		}
		if(flipX) {
			mat.scale(-1,1);
			mat.translate(w,0);
		}
		if(flipY) {
			mat.scale(1,-1);
			mat.translate(0,h);
		}
		return mat;
	}
	,prepareMatrix: function(mat,rotation,flipX,flipY) {
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(flixel_FlxG.renderBlit) {
			mat.identity();
			return mat;
		}
		mat.a = this.tileMatrix[0];
		mat.b = this.tileMatrix[1];
		mat.c = this.tileMatrix[2];
		mat.d = this.tileMatrix[3];
		mat.tx = this.tileMatrix[4];
		mat.ty = this.tileMatrix[5];
		var doFlipX = flipX != this.flipX;
		var doFlipY = flipY != this.flipY;
		if(rotation == 0 && !doFlipX && !doFlipY) {
			return mat;
		}
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation != 0) {
			var t = w;
			w = h;
			h = t;
			if(rotation == 90) {
				mat.setTo(-mat.b,mat.a,-mat.d,mat.c,-mat.ty,mat.tx);
				mat.translate(this.sourceSize.y,0);
			} else if(rotation == -90 || rotation == -90) {
				mat.setTo(mat.b,-mat.a,mat.d,-mat.c,mat.ty,-mat.tx);
				mat.translate(0,this.sourceSize.x);
			}
		}
		if(doFlipX) {
			mat.scale(-1,1);
			mat.translate(w,0);
		}
		if(doFlipY) {
			mat.scale(1,-1);
			mat.translate(0,h);
		}
		return mat;
	}
	,fillBlitMatrix: function(mat) {
		mat.a = this.blitMatrix[0];
		mat.b = this.blitMatrix[1];
		mat.c = this.blitMatrix[2];
		mat.d = this.blitMatrix[3];
		mat.tx = this.blitMatrix[4];
		mat.ty = this.blitMatrix[5];
		return mat;
	}
	,paint: function(bmd,point,mergeAlpha,disposeIfNotEqual) {
		if(disposeIfNotEqual == null) {
			disposeIfNotEqual = false;
		}
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(point == null) {
			point = this.point1;
			point.setTo(0,0);
		}
		var bmd1 = bmd;
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(bmd1 != null && disposeIfNotEqual) {
			bmd1 = flixel_util_FlxDestroyUtil.disposeIfNotEqual(bmd1,w,h);
		}
		if(bmd1 != null && !mergeAlpha) {
			this.rect.setTo(point.x,point.y,w,h);
			bmd1.fillRect(this.rect,0);
		} else if(bmd1 == null) {
			bmd1 = new openfl_display_BitmapData(w,h,true,0);
		}
		bmd = bmd1;
		if(this.type == 2) {
			return bmd;
		}
		if(this.angle == 0) {
			var _this = this.offset;
			var FlashPoint = this.point2;
			if(FlashPoint == null) {
				FlashPoint = new openfl_geom_Point();
			}
			FlashPoint.x = _this.x;
			FlashPoint.y = _this.y;
			this.point2.x += point.x;
			this.point2.y += point.y;
			var _this1 = this.frame;
			var FlashRect = this.rect;
			if(FlashRect == null) {
				FlashRect = new openfl_geom_Rectangle();
			}
			FlashRect.x = _this1.x;
			FlashRect.y = _this1.y;
			FlashRect.width = _this1.width;
			FlashRect.height = _this1.height;
			bmd.copyPixels(this.parent.bitmap,FlashRect,this.point2,null,null,mergeAlpha);
		} else {
			var mat = this.matrix;
			mat.a = this.blitMatrix[0];
			mat.b = this.blitMatrix[1];
			mat.c = this.blitMatrix[2];
			mat.d = this.blitMatrix[3];
			mat.tx = this.blitMatrix[4];
			mat.ty = this.blitMatrix[5];
			this.matrix.translate(point.x,point.y);
			var mat1 = this.matrix;
			var X = this.frame.x;
			var Y = this.frame.y;
			var point1 = flixel_math_FlxPoint._pool.get().set(X,Y);
			point1._inPool = false;
			point1._weak = true;
			var _this2 = this.frame;
			var X1 = _this2.x + _this2.width;
			var _this3 = this.frame;
			var Y1 = _this3.y + _this3.height;
			var point2 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point2._inPool = false;
			point2._weak = true;
			var x1 = point1.x * mat1.a + point1.y * mat1.c + mat1.tx;
			var y1 = point1.x * mat1.b + point1.y * mat1.d + mat1.ty;
			point1.set(x1,y1);
			var x11 = point2.x * mat1.a + point2.y * mat1.c + mat1.tx;
			var y11 = point2.x * mat1.b + point2.y * mat1.d + mat1.ty;
			point2.set(x11,y11);
			var _this4 = flixel_math_FlxRect._pool.get();
			_this4.x = 0;
			_this4.y = 0;
			_this4.width = 0;
			_this4.height = 0;
			_this4._inPool = false;
			var minX = Math.min(point1.x,point2.x);
			var minY = Math.min(point1.y,point2.y);
			var maxX = Math.max(point1.x,point2.x);
			var maxY = Math.max(point1.y,point2.y);
			if(point1._weak) {
				point1.put();
			}
			if(point2._weak) {
				point2.put();
			}
			_this4.x = minX;
			_this4.y = minY;
			_this4.width = maxX - minX;
			_this4.height = maxY - minY;
			var FlashRect1 = this.rect;
			if(FlashRect1 == null) {
				FlashRect1 = new openfl_geom_Rectangle();
			}
			FlashRect1.x = _this4.x;
			FlashRect1.y = _this4.y;
			FlashRect1.width = _this4.width;
			FlashRect1.height = _this4.height;
			if(!_this4._inPool) {
				_this4._inPool = true;
				_this4._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(_this4);
			}
			var rect = this.rect;
			bmd.draw(this.parent.bitmap,this.matrix,null,null,rect);
		}
		return bmd;
	}
	,paintRotatedAndFlipped: function(bmd,point,rotation,flipX,flipY,mergeAlpha,disposeIfNotEqual) {
		if(disposeIfNotEqual == null) {
			disposeIfNotEqual = false;
		}
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(this.type == 2 && rotation == 0) {
			return this.paint(bmd,point,mergeAlpha,disposeIfNotEqual);
		}
		if(point == null) {
			point = this.point2;
			point.setTo(0,0);
		}
		var bmd1 = bmd;
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation != 0) {
			var t = w;
			w = h;
			h = t;
		}
		if(bmd1 != null && disposeIfNotEqual) {
			bmd1 = flixel_util_FlxDestroyUtil.disposeIfNotEqual(bmd1,w,h);
		}
		if(bmd1 != null && !mergeAlpha) {
			this.rect.setTo(point.x,point.y,w,h);
			bmd1.fillRect(this.rect,0);
		} else if(bmd1 == null) {
			bmd1 = new openfl_display_BitmapData(w,h,true,0);
		}
		bmd = bmd1;
		if(this.type == 2) {
			return bmd;
		}
		var doFlipX = flipX != this.flipX;
		var doFlipY = flipY != this.flipY;
		this.prepareTransformedBlitMatrix(this.matrix,rotation,doFlipX,doFlipY);
		this.matrix.translate(point.x,point.y);
		var mat = this.matrix;
		var X = this.frame.x;
		var Y = this.frame.y;
		var point1 = flixel_math_FlxPoint._pool.get().set(X,Y);
		point1._inPool = false;
		point1._weak = true;
		var _this = this.frame;
		var X1 = _this.x + _this.width;
		var _this1 = this.frame;
		var Y1 = _this1.y + _this1.height;
		var point2 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point2._inPool = false;
		point2._weak = true;
		var x1 = point1.x * mat.a + point1.y * mat.c + mat.tx;
		var y1 = point1.x * mat.b + point1.y * mat.d + mat.ty;
		point1.set(x1,y1);
		var x11 = point2.x * mat.a + point2.y * mat.c + mat.tx;
		var y11 = point2.x * mat.b + point2.y * mat.d + mat.ty;
		point2.set(x11,y11);
		var _this2 = flixel_math_FlxRect._pool.get();
		_this2.x = 0;
		_this2.y = 0;
		_this2.width = 0;
		_this2.height = 0;
		_this2._inPool = false;
		var minX = Math.min(point1.x,point2.x);
		var minY = Math.min(point1.y,point2.y);
		var maxX = Math.max(point1.x,point2.x);
		var maxY = Math.max(point1.y,point2.y);
		if(point1._weak) {
			point1.put();
		}
		if(point2._weak) {
			point2.put();
		}
		_this2.x = minX;
		_this2.y = minY;
		_this2.width = maxX - minX;
		_this2.height = maxY - minY;
		var FlashRect = this.rect;
		if(FlashRect == null) {
			FlashRect = new openfl_geom_Rectangle();
		}
		FlashRect.x = _this2.x;
		FlashRect.y = _this2.y;
		FlashRect.width = _this2.width;
		FlashRect.height = _this2.height;
		if(!_this2._inPool) {
			_this2._inPool = true;
			_this2._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(_this2);
		}
		var rect = this.rect;
		bmd.draw(this.parent.bitmap,this.matrix,null,null,rect);
		return bmd;
	}
	,checkInputBitmap: function(bmd,point,rotation,mergeAlpha,disposeIfNotEqual) {
		if(disposeIfNotEqual == null) {
			disposeIfNotEqual = false;
		}
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(rotation == null) {
			rotation = 0;
		}
		var w = this.sourceSize.x | 0;
		var h = this.sourceSize.y | 0;
		if(rotation != 0) {
			var t = w;
			w = h;
			h = t;
		}
		if(bmd != null && disposeIfNotEqual) {
			bmd = flixel_util_FlxDestroyUtil.disposeIfNotEqual(bmd,w,h);
		}
		if(bmd != null && !mergeAlpha) {
			this.rect.setTo(point.x,point.y,w,h);
			bmd.fillRect(this.rect,0);
		} else if(bmd == null) {
			bmd = new openfl_display_BitmapData(w,h,true,0);
		}
		return bmd;
	}
	,getDrawFrameRect: function(mat) {
		var X = this.frame.x;
		var Y = this.frame.y;
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		point._weak = true;
		var _this = this.frame;
		var X1 = _this.x + _this.width;
		var _this1 = this.frame;
		var Y1 = _this1.y + _this1.height;
		var point1 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
		point1._inPool = false;
		point1._weak = true;
		var x1 = point.x * mat.a + point.y * mat.c + mat.tx;
		var y1 = point.x * mat.b + point.y * mat.d + mat.ty;
		point.set(x1,y1);
		var x11 = point1.x * mat.a + point1.y * mat.c + mat.tx;
		var y11 = point1.x * mat.b + point1.y * mat.d + mat.ty;
		point1.set(x11,y11);
		var _this2 = flixel_math_FlxRect._pool.get();
		_this2.x = 0;
		_this2.y = 0;
		_this2.width = 0;
		_this2.height = 0;
		_this2._inPool = false;
		var minX = Math.min(point.x,point1.x);
		var minY = Math.min(point.y,point1.y);
		var maxX = Math.max(point.x,point1.x);
		var maxY = Math.max(point.y,point1.y);
		if(point._weak) {
			point.put();
		}
		if(point1._weak) {
			point1.put();
		}
		_this2.x = minX;
		_this2.y = minY;
		_this2.width = maxX - minX;
		_this2.height = maxY - minY;
		var FlashRect = this.rect;
		if(FlashRect == null) {
			FlashRect = new openfl_geom_Rectangle();
		}
		FlashRect.x = _this2.x;
		FlashRect.y = _this2.y;
		FlashRect.width = _this2.width;
		FlashRect.height = _this2.height;
		if(!_this2._inPool) {
			_this2._inPool = true;
			_this2._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(_this2);
		}
		return this.rect;
	}
	,subFrameTo: function(rect,frameToFill) {
		if(frameToFill == null) {
			frameToFill = new flixel_graphics_frames_FlxFrame(this.parent,this.angle);
		} else {
			frameToFill.parent = this.parent;
			frameToFill.angle = this.angle;
			frameToFill.set_frame(flixel_util_FlxDestroyUtil.put(frameToFill.frame));
		}
		frameToFill.sourceSize.set(rect.width,rect.height);
		if(this.type == 2) {
			frameToFill.type = 2;
			frameToFill.offset.set(0,0);
			return frameToFill;
		}
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = 0;
		_this.height = 0;
		_this._inPool = false;
		_this.width = this.frame.width;
		_this.height = this.frame.height;
		if(this.angle != 0) {
			_this.width = this.frame.height;
			_this.height = this.frame.width;
		}
		var ox = Math.max(this.offset.x,0);
		var oy = Math.max(this.offset.y,0);
		rect.x += -ox;
		rect.y += -oy;
		var frameRect = _this.intersection(rect);
		flixel_util_FlxDestroyUtil.put(_this);
		rect.x += ox;
		rect.y += oy;
		if(frameRect.width == 0 || frameRect.height == 0) {
			frameToFill.type = 2;
			frameRect.x = 0;
			frameRect.y = 0;
			frameRect.width = 0;
			frameRect.height = 0;
			frameToFill.set_frame(frameRect);
			frameToFill.offset.set(0,0);
		} else {
			frameToFill.type = 0;
			var _this1 = frameToFill.offset.set(frameRect.x,frameRect.y);
			var Y = rect.y;
			_this1.set_x(_this1.x - rect.x);
			_this1.set_y(_this1.y - Y);
			_this1.addPoint(this.offset);
			var X = frameRect.x;
			var Y1 = frameRect.y;
			var point = flixel_math_FlxPoint._pool.get().set(X,Y1);
			point._inPool = false;
			point._weak = true;
			var X1 = frameRect.x + frameRect.width;
			var Y2 = frameRect.y + frameRect.height;
			var point1 = flixel_math_FlxPoint._pool.get().set(X1,Y2);
			point1._inPool = false;
			point1._weak = true;
			this.matrix.identity();
			if(this.angle == -90) {
				var _this2 = this.matrix;
				_this2.setTo(-_this2.b,_this2.a,-_this2.d,_this2.c,-_this2.ty,_this2.tx);
				this.matrix.translate(this.frame.width,0);
			} else if(this.angle == 90) {
				var _this3 = this.matrix;
				_this3.setTo(_this3.b,-_this3.a,_this3.d,-_this3.c,_this3.ty,-_this3.tx);
				this.matrix.translate(0,this.frame.height);
			}
			if(this.angle != 0) {
				var matrix = this.matrix;
				var x1 = point.x * matrix.a + point.y * matrix.c + matrix.tx;
				var y1 = point.x * matrix.b + point.y * matrix.d + matrix.ty;
				point.set(x1,y1);
				var matrix1 = this.matrix;
				var x11 = point1.x * matrix1.a + point1.y * matrix1.c + matrix1.tx;
				var y11 = point1.x * matrix1.b + point1.y * matrix1.d + matrix1.ty;
				point1.set(x11,y11);
			}
			var minX = Math.min(point.x,point1.x);
			var minY = Math.min(point.y,point1.y);
			var maxX = Math.max(point.x,point1.x);
			var maxY = Math.max(point.y,point1.y);
			if(point._weak) {
				point.put();
			}
			if(point1._weak) {
				point1.put();
			}
			frameRect.x = minX;
			frameRect.y = minY;
			frameRect.width = maxX - minX;
			frameRect.height = maxY - minY;
			frameRect.x += this.frame.x;
			frameRect.y += this.frame.y;
			frameToFill.set_frame(frameRect);
			frameToFill.cacheFrameMatrix();
		}
		return frameToFill;
	}
	,setBorderTo: function(border,frameToFill) {
		var X = border.x;
		var Y = border.y;
		var Width = this.sourceSize.x - 2 * border.x;
		var Height = this.sourceSize.y - 2 * border.y;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = X;
		_this.y = Y;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		frameToFill = this.subFrameTo(_this,frameToFill);
		frameToFill.name = this.name;
		flixel_util_FlxDestroyUtil.put(_this);
		return frameToFill;
	}
	,clipTo: function(clip,clippedFrame) {
		if(clippedFrame == null) {
			clippedFrame = new flixel_graphics_frames_FlxFrame(this.parent,this.angle);
		} else {
			clippedFrame.parent = this.parent;
			clippedFrame.angle = this.angle;
			clippedFrame.set_frame(flixel_util_FlxDestroyUtil.put(clippedFrame.frame));
		}
		var _this = clippedFrame.sourceSize;
		var point = this.sourceSize;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		clippedFrame.name = this.name;
		if(this.type == 2) {
			clippedFrame.type = 2;
			clippedFrame.offset.set(0,0);
			return clippedFrame;
		}
		var _this1 = flixel_math_FlxRect._pool.get();
		_this1.x = 0;
		_this1.y = 0;
		_this1.width = 0;
		_this1.height = 0;
		_this1._inPool = false;
		_this1.width = this.frame.width;
		_this1.height = this.frame.height;
		if(this.angle != 0) {
			_this1.width = this.frame.height;
			_this1.height = this.frame.width;
		}
		clip.x += -this.offset.x;
		clip.y += -this.offset.y;
		var frameRect = _this1.intersection(clip);
		flixel_util_FlxDestroyUtil.put(_this1);
		if(frameRect.width == 0 || frameRect.height == 0) {
			clippedFrame.type = 2;
			frameRect.x = 0;
			frameRect.y = 0;
			frameRect.width = 0;
			frameRect.height = 0;
			clippedFrame.set_frame(frameRect);
			clippedFrame.offset.set(0,0);
		} else {
			clippedFrame.type = 0;
			clippedFrame.offset.set(frameRect.x,frameRect.y).addPoint(this.offset);
			var X = frameRect.x;
			var Y = frameRect.y;
			var point1 = flixel_math_FlxPoint._pool.get().set(X,Y);
			point1._inPool = false;
			point1._weak = true;
			var X1 = frameRect.x + frameRect.width;
			var Y1 = frameRect.y + frameRect.height;
			var point2 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
			point2._inPool = false;
			point2._weak = true;
			this.matrix.identity();
			if(this.angle == -90) {
				var _this2 = this.matrix;
				_this2.setTo(-_this2.b,_this2.a,-_this2.d,_this2.c,-_this2.ty,_this2.tx);
				this.matrix.translate(this.frame.width,0);
			} else if(this.angle == 90) {
				var _this3 = this.matrix;
				_this3.setTo(_this3.b,-_this3.a,_this3.d,-_this3.c,_this3.ty,-_this3.tx);
				this.matrix.translate(0,this.frame.height);
			}
			if(this.angle != 0) {
				var matrix = this.matrix;
				var x1 = point1.x * matrix.a + point1.y * matrix.c + matrix.tx;
				var y1 = point1.x * matrix.b + point1.y * matrix.d + matrix.ty;
				point1.set(x1,y1);
				var matrix1 = this.matrix;
				var x11 = point2.x * matrix1.a + point2.y * matrix1.c + matrix1.tx;
				var y11 = point2.x * matrix1.b + point2.y * matrix1.d + matrix1.ty;
				point2.set(x11,y11);
			}
			var minX = Math.min(point1.x,point2.x);
			var minY = Math.min(point1.y,point2.y);
			var maxX = Math.max(point1.x,point2.x);
			var maxY = Math.max(point1.y,point2.y);
			if(point1._weak) {
				point1.put();
			}
			if(point2._weak) {
				point2.put();
			}
			frameRect.x = minX;
			frameRect.y = minY;
			frameRect.width = maxX - minX;
			frameRect.height = maxY - minY;
			frameRect.x += this.frame.x;
			frameRect.y += this.frame.y;
			clippedFrame.set_frame(frameRect);
			clippedFrame.cacheFrameMatrix();
		}
		clip.x += this.offset.x;
		clip.y += this.offset.y;
		return clippedFrame;
	}
	,copyTo: function(clone) {
		if(clone == null) {
			clone = new flixel_graphics_frames_FlxFrame(this.parent,this.angle);
		} else {
			clone.parent = this.parent;
			clone.angle = this.angle;
			clone.set_frame(flixel_util_FlxDestroyUtil.put(clone.frame));
		}
		var _this = clone.offset;
		var point = this.offset;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		clone.flipX = this.flipX;
		clone.flipY = this.flipY;
		var _this1 = clone.sourceSize;
		var point1 = this.sourceSize;
		_this1.set_x(point1.x);
		_this1.set_y(point1.y);
		if(point1._weak) {
			point1.put();
		}
		var _this2 = flixel_math_FlxRect._pool.get();
		_this2.x = 0;
		_this2.y = 0;
		_this2.width = 0;
		_this2.height = 0;
		_this2._inPool = false;
		var Rect = this.frame;
		_this2.x = Rect.x;
		_this2.y = Rect.y;
		_this2.width = Rect.width;
		_this2.height = Rect.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		clone.set_frame(_this2);
		clone.type = this.type;
		clone.name = this.name;
		clone.cacheFrameMatrix();
		return clone;
	}
	,destroy: function() {
		this.name = null;
		this.parent = null;
		this.sourceSize = flixel_util_FlxDestroyUtil.put(this.sourceSize);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.set_frame(flixel_util_FlxDestroyUtil.put(this.frame));
		this.uv = flixel_util_FlxDestroyUtil.put(this.uv);
		this.blitMatrix = null;
		this.tileMatrix = null;
	}
	,toString: function() {
		var value = this.name;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "name";
		_this.value = value;
		return flixel_util_FlxStringUtil.getDebugString([_this]);
	}
	,set_frame: function(value) {
		if(value != null) {
			if(this.uv == null) {
				var _this = flixel_math_FlxRect._pool.get();
				_this.x = 0;
				_this.y = 0;
				_this.width = 0;
				_this.height = 0;
				_this._inPool = false;
				this.uv = _this;
			}
			var _this1 = this.uv;
			var Width = (value.x + value.width) / this.parent.width;
			var Height = (value.y + value.height) / this.parent.height;
			_this1.x = value.x / this.parent.width;
			_this1.y = value.y / this.parent.height;
			_this1.width = Width;
			_this1.height = Height;
		}
		return this.frame = value;
	}
	,__class__: flixel_graphics_frames_FlxFrame
	,__properties__: {set_frame:"set_frame"}
};
var flixel_graphics_frames_FlxFrameCollectionType = $hxClasses["flixel.graphics.frames.FlxFrameCollectionType"] = { __ename__ : ["flixel","graphics","frames","FlxFrameCollectionType"], __constructs__ : ["IMAGE","TILES","ATLAS","FONT","USER","FILTER"] };
flixel_graphics_frames_FlxFrameCollectionType.IMAGE = ["IMAGE",0];
flixel_graphics_frames_FlxFrameCollectionType.IMAGE.toString = $estr;
flixel_graphics_frames_FlxFrameCollectionType.IMAGE.__enum__ = flixel_graphics_frames_FlxFrameCollectionType;
flixel_graphics_frames_FlxFrameCollectionType.TILES = ["TILES",1];
flixel_graphics_frames_FlxFrameCollectionType.TILES.toString = $estr;
flixel_graphics_frames_FlxFrameCollectionType.TILES.__enum__ = flixel_graphics_frames_FlxFrameCollectionType;
flixel_graphics_frames_FlxFrameCollectionType.ATLAS = ["ATLAS",2];
flixel_graphics_frames_FlxFrameCollectionType.ATLAS.toString = $estr;
flixel_graphics_frames_FlxFrameCollectionType.ATLAS.__enum__ = flixel_graphics_frames_FlxFrameCollectionType;
flixel_graphics_frames_FlxFrameCollectionType.FONT = ["FONT",3];
flixel_graphics_frames_FlxFrameCollectionType.FONT.toString = $estr;
flixel_graphics_frames_FlxFrameCollectionType.FONT.__enum__ = flixel_graphics_frames_FlxFrameCollectionType;
flixel_graphics_frames_FlxFrameCollectionType.USER = function(type) { var $x = ["USER",4,type]; $x.__enum__ = flixel_graphics_frames_FlxFrameCollectionType; $x.toString = $estr; return $x; };
flixel_graphics_frames_FlxFrameCollectionType.FILTER = ["FILTER",5];
flixel_graphics_frames_FlxFrameCollectionType.FILTER.toString = $estr;
flixel_graphics_frames_FlxFrameCollectionType.FILTER.__enum__ = flixel_graphics_frames_FlxFrameCollectionType;
flixel_graphics_frames_FlxFrameCollectionType.__empty_constructs__ = [flixel_graphics_frames_FlxFrameCollectionType.IMAGE,flixel_graphics_frames_FlxFrameCollectionType.TILES,flixel_graphics_frames_FlxFrameCollectionType.ATLAS,flixel_graphics_frames_FlxFrameCollectionType.FONT,flixel_graphics_frames_FlxFrameCollectionType.FILTER];
var flixel_graphics_frames_FlxImageFrame = function(parent,border) {
	flixel_graphics_frames_FlxFramesCollection.call(this,parent,flixel_graphics_frames_FlxFrameCollectionType.IMAGE,border);
};
$hxClasses["flixel.graphics.frames.FlxImageFrame"] = flixel_graphics_frames_FlxImageFrame;
flixel_graphics_frames_FlxImageFrame.__name__ = ["flixel","graphics","frames","FlxImageFrame"];
flixel_graphics_frames_FlxImageFrame.fromEmptyFrame = function(graphic,frameRect) {
	if(graphic == null || frameRect == null) {
		return null;
	}
	var imageFrame = flixel_graphics_frames_FlxImageFrame.findEmptyFrame(graphic,frameRect);
	if(imageFrame != null) {
		return imageFrame;
	}
	imageFrame = new flixel_graphics_frames_FlxImageFrame(graphic);
	imageFrame.addEmptyFrame(frameRect);
	return imageFrame;
};
flixel_graphics_frames_FlxImageFrame.fromFrame = function(source) {
	var graphic = source.parent;
	var rect = source.frame;
	var imageFrame = flixel_graphics_frames_FlxImageFrame.findFrame(graphic,rect);
	if(imageFrame != null) {
		return imageFrame;
	}
	imageFrame = new flixel_graphics_frames_FlxImageFrame(graphic);
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	_this.x = rect.x;
	_this.y = rect.y;
	_this.width = rect.width;
	_this.height = rect.height;
	if(_this._weak) {
		if(!_this._inPool) {
			_this._inPool = true;
			_this._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(_this);
		}
	}
	imageFrame.addSpriteSheetFrame(_this);
	return imageFrame;
};
flixel_graphics_frames_FlxImageFrame.fromImage = function(source) {
	return flixel_graphics_frames_FlxImageFrame.fromRectangle(source,null);
};
flixel_graphics_frames_FlxImageFrame.fromGraphic = function(graphic,region) {
	if(graphic == null) {
		return null;
	}
	var checkRegion = region;
	if(checkRegion == null) {
		var Width = graphic.width;
		var Height = graphic.height;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		_this._weak = true;
		checkRegion = _this;
	}
	var imageFrame = flixel_graphics_frames_FlxImageFrame.findFrame(graphic,checkRegion);
	if(imageFrame != null) {
		return imageFrame;
	}
	imageFrame = new flixel_graphics_frames_FlxImageFrame(graphic);
	if(region == null) {
		var Width1 = graphic.width;
		var Height1 = graphic.height;
		var _this1 = flixel_math_FlxRect._pool.get();
		_this1.x = 0;
		_this1.y = 0;
		_this1.width = Width1;
		_this1.height = Height1;
		_this1._inPool = false;
		region = _this1;
	} else {
		if(region.width == 0) {
			region.width = graphic.width - region.x;
		}
		if(region.height == 0) {
			region.height = graphic.height - region.y;
		}
	}
	imageFrame.addSpriteSheetFrame(region);
	return imageFrame;
};
flixel_graphics_frames_FlxImageFrame.fromRectangle = function(source,region) {
	var graphic = flixel_FlxG.bitmap.add(source,false);
	return flixel_graphics_frames_FlxImageFrame.fromGraphic(graphic,region);
};
flixel_graphics_frames_FlxImageFrame.fromBitmapAddSpacesAndBorders = function(source,border,region) {
	var graphic = flixel_FlxG.bitmap.add(source,false);
	if(graphic == null) {
		return null;
	}
	var key = flixel_FlxG.bitmap.getKeyWithSpacesAndBorders(graphic.key,null,null,border,region);
	var result = flixel_FlxG.bitmap._cache.get(key);
	if(result == null) {
		var bitmap = flixel_util_FlxBitmapDataUtil.addSpacesAndBorders(graphic.bitmap,null,null,border,region);
		result = flixel_FlxG.bitmap.add(bitmap,false,key);
	}
	var imageFrame = flixel_graphics_frames_FlxImageFrame.fromGraphic(graphic);
	return imageFrame.addBorder(border);
};
flixel_graphics_frames_FlxImageFrame.fromFrameAddSpacesAndBorders = function(frame,border) {
	var bitmap = frame.paint();
	return flixel_graphics_frames_FlxImageFrame.fromBitmapAddSpacesAndBorders(bitmap,border);
};
flixel_graphics_frames_FlxImageFrame.findFrame = function(graphic,frameRect,frameBorder) {
	if(frameBorder == null) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		point._weak = true;
		frameBorder = point;
	}
	var type = flixel_graphics_frames_FlxFrameCollectionType.IMAGE;
	var collections = graphic.frameCollections.get(type);
	if(collections == null) {
		collections = [];
		graphic.frameCollections.set(type,collections);
	}
	var imageFrames = collections;
	var _g = 0;
	while(_g < imageFrames.length) {
		var imageFrame = imageFrames[_g];
		++_g;
		var tmp;
		var tmp1;
		var rect = imageFrame.get_frame().frame;
		var result = Math.abs(frameRect.x - rect.x) <= 0.0000001 && Math.abs(frameRect.y - rect.y) <= 0.0000001 && Math.abs(frameRect.width - rect.width) <= 0.0000001 && Math.abs(frameRect.height - rect.height) <= 0.0000001;
		if(rect._weak) {
			if(!rect._inPool) {
				rect._inPool = true;
				rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect);
			}
		}
		if(result) {
			var point1 = imageFrame.border;
			var result1 = Math.abs(frameBorder.x - point1.x) <= 0.0000001 && Math.abs(frameBorder.y - point1.y) <= 0.0000001;
			if(point1._weak) {
				point1.put();
			}
			tmp1 = result1;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = imageFrame.get_frame().type != 2;
		} else {
			tmp = false;
		}
		if(tmp) {
			return imageFrame;
		}
	}
	return null;
};
flixel_graphics_frames_FlxImageFrame.findEmptyFrame = function(graphic,frameRect) {
	var type = flixel_graphics_frames_FlxFrameCollectionType.IMAGE;
	var collections = graphic.frameCollections.get(type);
	if(collections == null) {
		collections = [];
		graphic.frameCollections.set(type,collections);
	}
	var imageFrames = collections;
	var _g = 0;
	while(_g < imageFrames.length) {
		var imageFrame = imageFrames[_g];
		++_g;
		var frame = imageFrame.get_frame();
		if(frame.sourceSize.x == frameRect.width && frame.sourceSize.y == frameRect.height && frame.type == 2) {
			return imageFrame;
		}
	}
	return null;
};
flixel_graphics_frames_FlxImageFrame.__super__ = flixel_graphics_frames_FlxFramesCollection;
flixel_graphics_frames_FlxImageFrame.prototype = $extend(flixel_graphics_frames_FlxFramesCollection.prototype,{
	frame: null
	,equals: function(rect,border) {
		var rect1 = this.get_frame().frame;
		var result = Math.abs(rect.x - rect1.x) <= 0.0000001 && Math.abs(rect.y - rect1.y) <= 0.0000001 && Math.abs(rect.width - rect1.width) <= 0.0000001 && Math.abs(rect.height - rect1.height) <= 0.0000001;
		if(rect1._weak) {
			if(!rect1._inPool) {
				rect1._inPool = true;
				rect1._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(rect1);
			}
		}
		if(result) {
			var point = this.border;
			var result1 = Math.abs(border.x - point.x) <= 0.0000001 && Math.abs(border.y - point.y) <= 0.0000001;
			if(point._weak) {
				point.put();
			}
			return result1;
		} else {
			return false;
		}
	}
	,addBorder: function(border) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		point._weak = true;
		var resultBorder = point.addPoint(this.border).addPoint(border);
		var imageFrame = flixel_graphics_frames_FlxImageFrame.findFrame(this.parent,this.get_frame().frame,resultBorder);
		if(imageFrame != null) {
			return imageFrame;
		}
		imageFrame = new flixel_graphics_frames_FlxImageFrame(this.parent,resultBorder);
		imageFrame.pushFrame(this.get_frame().setBorderTo(border));
		return imageFrame;
	}
	,destroy: function() {
		flixel_graphics_frames_FlxFramesCollection.prototype.destroy.call(this);
		this.frame = flixel_util_FlxDestroyUtil.destroy(this.get_frame());
	}
	,get_frame: function() {
		return this.frames[0];
	}
	,__class__: flixel_graphics_frames_FlxImageFrame
	,__properties__: $extend(flixel_graphics_frames_FlxFramesCollection.prototype.__properties__,{get_frame:"get_frame"})
});
var flixel_graphics_frames_FlxTileFrames = function(parent,border) {
	this.numCols = 0;
	this.numRows = 0;
	flixel_graphics_frames_FlxFramesCollection.call(this,parent,flixel_graphics_frames_FlxFrameCollectionType.TILES,border);
};
$hxClasses["flixel.graphics.frames.FlxTileFrames"] = flixel_graphics_frames_FlxTileFrames;
flixel_graphics_frames_FlxTileFrames.__name__ = ["flixel","graphics","frames","FlxTileFrames"];
flixel_graphics_frames_FlxTileFrames.fromBitmapAddSpacesAndBorders = function(source,tileSize,tileSpacing,tileBorder,region) {
	var graphic = flixel_FlxG.bitmap.add(source,false);
	if(graphic == null) {
		return null;
	}
	var key = flixel_FlxG.bitmap.getKeyWithSpacesAndBorders(graphic.key,tileSize,tileSpacing,tileBorder,region);
	var result = flixel_FlxG.bitmap._cache.get(key);
	if(result == null) {
		var bitmap = flixel_util_FlxBitmapDataUtil.addSpacesAndBorders(graphic.bitmap,tileSize,tileSpacing,tileBorder,region);
		result = flixel_FlxG.bitmap.add(bitmap,false,key);
	}
	var borderX = 0;
	var borderY = 0;
	if(tileBorder != null) {
		borderX = tileBorder.x | 0;
		borderY = tileBorder.y | 0;
	}
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var _this = point.addPoint(tileSize);
	_this.set_x(_this.x + 2 * borderX);
	_this.set_y(_this.y + 2 * borderY);
	var tileFrames = flixel_graphics_frames_FlxTileFrames.fromGraphic(result,_this,null,tileSpacing);
	if(tileBorder == null) {
		return tileFrames;
	}
	return tileFrames.addBorder(tileBorder);
};
flixel_graphics_frames_FlxTileFrames.fromFrameAddSpacesAndBorders = function(frame,tileSize,tileSpacing,tileBorder) {
	var bitmap = frame.paint();
	return flixel_graphics_frames_FlxTileFrames.fromBitmapAddSpacesAndBorders(bitmap,tileSize,tileSpacing,tileBorder);
};
flixel_graphics_frames_FlxTileFrames.fromFrame = function(frame,tileSize,tileSpacing) {
	var graphic = frame.parent;
	var tileFrames = flixel_graphics_frames_FlxTileFrames.findFrame(graphic,tileSize,null,frame,tileSpacing);
	if(tileFrames != null) {
		return tileFrames;
	}
	if(tileSpacing != null) {
		tileSpacing = tileSpacing;
	} else {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		tileSpacing = point;
	}
	tileFrames = new flixel_graphics_frames_FlxTileFrames(graphic);
	tileFrames.atlasFrame = frame;
	tileFrames.region = frame.frame;
	tileFrames.tileSize = tileSize;
	tileFrames.tileSpacing = tileSpacing;
	tileSpacing.set_x(Math.floor(tileSpacing.x));
	tileSpacing.set_y(Math.floor(tileSpacing.y));
	tileSize.set_x(Math.floor(tileSize.x));
	tileSize.set_y(Math.floor(tileSize.y));
	var spacedWidth = tileSize.x + tileSpacing.x;
	var spacedHeight = tileSize.y + tileSpacing.y;
	var numRows = tileSize.y == 0 ? 1 : (frame.sourceSize.y + tileSpacing.y) / spacedHeight | 0;
	var numCols = tileSize.x == 0 ? 1 : (frame.sourceSize.x + tileSpacing.x) / spacedWidth | 0;
	var Width = tileSize.x;
	var Height = tileSize.y;
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = Width;
	_this.height = Height;
	_this._inPool = false;
	var _g1 = 0;
	var _g = numRows;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = numCols;
		while(_g3 < _g2) {
			var i = _g3++;
			_this.x = spacedWidth * i;
			_this.y = spacedHeight * j;
			tileFrames.pushFrame(frame.subFrameTo(_this));
		}
	}
	flixel_util_FlxDestroyUtil.put(_this);
	tileFrames.numCols = numCols;
	tileFrames.numRows = numRows;
	return tileFrames;
};
flixel_graphics_frames_FlxTileFrames.fromFrames = function(Frames) {
	var firstFrame = Frames[0];
	var graphic = firstFrame.parent;
	var _g = 0;
	while(_g < Frames.length) {
		var frame = Frames[_g];
		++_g;
		var tmp;
		if(frame.parent == firstFrame.parent) {
			var _this = frame.sourceSize;
			var point = firstFrame.sourceSize;
			var result = Math.abs(_this.x - point.x) <= 0.0000001 && Math.abs(_this.y - point.y) <= 0.0000001;
			if(point._weak) {
				point.put();
			}
			tmp = !result;
		} else {
			tmp = true;
		}
		if(tmp) {
			return null;
		}
	}
	var tileFrames = new flixel_graphics_frames_FlxTileFrames(graphic);
	tileFrames.region = null;
	tileFrames.atlasFrame = null;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	var point2 = firstFrame.sourceSize;
	point1.set_x(point2.x);
	point1.set_y(point2.y);
	if(point2._weak) {
		point2.put();
	}
	tileFrames.tileSize = point1;
	var point3 = flixel_math_FlxPoint._pool.get().set(0,0);
	point3._inPool = false;
	tileFrames.tileSpacing = point3;
	tileFrames.numCols = Frames.length;
	tileFrames.numRows = 1;
	var _g1 = 0;
	while(_g1 < Frames.length) {
		var frame1 = Frames[_g1];
		++_g1;
		tileFrames.frames.push(frame1);
		if(frame1.name != null) {
			var key = frame1.name;
			var _this1 = tileFrames.framesHash;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,frame1);
			} else {
				_this1.h[key] = frame1;
			}
		}
	}
	return tileFrames;
};
flixel_graphics_frames_FlxTileFrames.fromAtlasByPrefix = function(Frames,Prefix) {
	var framesToAdd = [];
	var _g = 0;
	var _g1 = Frames.frames;
	while(_g < _g1.length) {
		var frame = _g1[_g];
		++_g;
		if(StringTools.startsWith(frame.name,Prefix)) {
			framesToAdd.push(frame);
		}
	}
	if(framesToAdd.length > 0) {
		var name = framesToAdd[0].name;
		var postIndex = name.indexOf(".",Prefix.length);
		var postFix = name.substring(postIndex == -1 ? name.length : postIndex,name.length);
		flixel_graphics_frames_FlxFrame.sort(framesToAdd,Prefix.length,postFix.length);
		return flixel_graphics_frames_FlxTileFrames.fromFrames(framesToAdd);
	}
	return null;
};
flixel_graphics_frames_FlxTileFrames.fromGraphic = function(graphic,tileSize,region,tileSpacing) {
	var tileFrames = flixel_graphics_frames_FlxTileFrames.findFrame(graphic,tileSize,region,null,tileSpacing);
	if(tileFrames != null) {
		return tileFrames;
	}
	if(region == null) {
		var Width = graphic.width;
		var Height = graphic.height;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		region = _this;
	} else {
		if(region.width == 0) {
			region.width = graphic.width - region.x;
		}
		if(region.height == 0) {
			region.height = graphic.height - region.y;
		}
	}
	if(tileSpacing != null) {
		tileSpacing = tileSpacing;
	} else {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		tileSpacing = point;
	}
	tileFrames = new flixel_graphics_frames_FlxTileFrames(graphic);
	tileFrames.region = region;
	tileFrames.atlasFrame = null;
	tileFrames.tileSize = tileSize;
	tileFrames.tileSpacing = tileSpacing;
	region.x = Math.floor(region.x);
	region.y = Math.floor(region.y);
	region.width = Math.floor(region.width);
	region.height = Math.floor(region.height);
	tileSpacing.set_x(Math.floor(tileSpacing.x));
	tileSpacing.set_y(Math.floor(tileSpacing.y));
	tileSize.set_x(Math.floor(tileSize.x));
	tileSize.set_y(Math.floor(tileSize.y));
	var spacedWidth = tileSize.x + tileSpacing.x;
	var spacedHeight = tileSize.y + tileSpacing.y;
	var numRows = tileSize.y == 0 ? 1 : (region.height + tileSpacing.y) / spacedHeight | 0;
	var numCols = tileSize.x == 0 ? 1 : (region.width + tileSpacing.x) / spacedWidth | 0;
	var _g1 = 0;
	var _g = numRows;
	while(_g1 < _g) {
		var j = _g1++;
		var _g3 = 0;
		var _g2 = numCols;
		while(_g3 < _g2) {
			var i = _g3++;
			var X = region.x + i * spacedWidth;
			var Y = region.y + j * spacedHeight;
			var Width1 = tileSize.x;
			var Height1 = tileSize.y;
			var _this1 = flixel_math_FlxRect._pool.get();
			_this1.x = X;
			_this1.y = Y;
			_this1.width = Width1;
			_this1.height = Height1;
			_this1._inPool = false;
			tileFrames.addSpriteSheetFrame(_this1);
		}
	}
	tileFrames.numCols = numCols;
	tileFrames.numRows = numRows;
	return tileFrames;
};
flixel_graphics_frames_FlxTileFrames.fromRectangle = function(source,tileSize,region,tileSpacing) {
	var graphic = flixel_FlxG.bitmap.add(source,false);
	if(graphic == null) {
		return null;
	}
	return flixel_graphics_frames_FlxTileFrames.fromGraphic(graphic,tileSize,region,tileSpacing);
};
flixel_graphics_frames_FlxTileFrames.combineTileSets = function(bitmaps,tileSize,spacing,border) {
	var framesCollections = [];
	var _g = 0;
	while(_g < bitmaps.length) {
		var bitmap = bitmaps[_g];
		++_g;
		framesCollections.push(flixel_graphics_frames_FlxTileFrames.fromRectangle(bitmap,tileSize));
	}
	return flixel_graphics_frames_FlxTileFrames.combineTileFrames(framesCollections,spacing,border);
};
flixel_graphics_frames_FlxTileFrames.combineTileFrames = function(tileframes,spacing,border) {
	var totalArea = 0;
	var rows = 0;
	var cols = 0;
	var tileWidth = tileframes[0].frames[0].sourceSize.x | 0;
	var tileHeight = tileframes[0].frames[0].sourceSize.y | 0;
	var spaceX = 0;
	var spaceY = 0;
	if(spacing != null) {
		spaceX = spacing.x | 0;
		spaceY = spacing.y | 0;
	}
	var borderX = 0;
	var borderY = 0;
	if(border != null) {
		borderX = border.x | 0;
		borderY = border.y | 0;
	}
	var _g = 0;
	while(_g < tileframes.length) {
		var collection = tileframes[_g];
		++_g;
		cols = collection.numCols;
		rows = collection.numRows;
		totalArea += cols * (tileWidth + 2 * borderX) * rows * (tileHeight + 2 * borderY) | 0;
	}
	var side = Math.sqrt(totalArea);
	cols = side / (tileWidth + 2 * borderX) | 0;
	rows = Math.ceil(totalArea / (cols * (tileWidth + 2 * borderX) * (tileHeight + 2 * borderY)));
	var width = (cols * (tileWidth + 2 * borderX) | 0) + (cols - 1) * spaceX;
	var height = (rows * (tileHeight + 2 * borderY) | 0) + (rows - 1) * spaceY;
	var combined = new openfl_display_BitmapData(width,height,true,0);
	var graphic = flixel_FlxG.bitmap.add(combined);
	var result = new flixel_graphics_frames_FlxTileFrames(graphic);
	var destPoint = new openfl_geom_Point(borderX,borderY);
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = width;
	_this.height = height;
	_this._inPool = false;
	result.region = _this;
	result.atlasFrame = null;
	var point = flixel_math_FlxPoint._pool.get().set(tileWidth,tileHeight);
	point._inPool = false;
	result.tileSize = point;
	var point1 = flixel_math_FlxPoint._pool.get().set(spaceX,spaceY);
	point1._inPool = false;
	result.tileSpacing = point1;
	result.numCols = cols;
	result.numRows = rows;
	var _g1 = 0;
	while(_g1 < tileframes.length) {
		var collection1 = tileframes[_g1];
		++_g1;
		var _g11 = 0;
		var _g2 = collection1.frames;
		while(_g11 < _g2.length) {
			var frame = _g2[_g11];
			++_g11;
			frame.paint(combined,destPoint,true);
			var X = destPoint.x;
			var Y = destPoint.y;
			var _this1 = flixel_math_FlxRect._pool.get();
			_this1.x = X;
			_this1.y = Y;
			_this1.width = tileWidth;
			_this1.height = tileHeight;
			_this1._inPool = false;
			var point2 = flixel_math_FlxPoint._pool.get().set(tileWidth,tileHeight);
			point2._inPool = false;
			var point3 = flixel_math_FlxPoint._pool.get().set(0,0);
			point3._inPool = false;
			result.addAtlasFrame(_this1,point2,point3);
			destPoint.x += tileWidth + 2 * borderX + spaceX;
			if(destPoint.x >= combined.width) {
				destPoint.x = borderX;
				destPoint.y += tileHeight + 2 * borderY + spaceY;
			}
		}
	}
	flixel_util_FlxBitmapDataUtil.copyBorderPixels(combined,tileWidth,tileHeight,spaceX,spaceY,borderX,borderY,cols,rows);
	return result;
};
flixel_graphics_frames_FlxTileFrames.findFrame = function(graphic,tileSize,region,atlasFrame,tileSpacing,border) {
	var type = flixel_graphics_frames_FlxFrameCollectionType.TILES;
	var collections = graphic.frameCollections.get(type);
	if(collections == null) {
		collections = [];
		graphic.frameCollections.set(type,collections);
	}
	var tileFrames = collections;
	var _g = 0;
	while(_g < tileFrames.length) {
		var sheet = tileFrames[_g];
		++_g;
		if(sheet.equals(tileSize,region,null,tileSpacing,border)) {
			return sheet;
		}
	}
	return null;
};
flixel_graphics_frames_FlxTileFrames.__super__ = flixel_graphics_frames_FlxFramesCollection;
flixel_graphics_frames_FlxTileFrames.prototype = $extend(flixel_graphics_frames_FlxFramesCollection.prototype,{
	atlasFrame: null
	,region: null
	,tileSize: null
	,tileSpacing: null
	,numRows: null
	,numCols: null
	,getByTilePosition: function(column,row) {
		return this.frames[row * this.numCols + column];
	}
	,equals: function(tileSize,region,atlasFrame,tileSpacing,border) {
		if(this.region == null && this.atlasFrame == null) {
			return false;
		}
		if(atlasFrame != null) {
			region = atlasFrame.frame;
		}
		if(region == null) {
			var Width = this.parent.width;
			var Height = this.parent.height;
			var _this = flixel_math_FlxRect._pool.get();
			_this.x = 0;
			_this.y = 0;
			_this.width = Width;
			_this.height = Height;
			_this._inPool = false;
			_this._weak = true;
			region = _this;
		}
		if(tileSpacing == null) {
			var point = flixel_math_FlxPoint._pool.get().set(0,0);
			point._inPool = false;
			point._weak = true;
			tileSpacing = point;
		}
		if(border == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point1._weak = true;
			border = point1;
		}
		var tmp;
		var tmp1;
		var tmp2;
		if(this.atlasFrame == atlasFrame) {
			var _this1 = this.region;
			var result = Math.abs(_this1.x - region.x) <= 0.0000001 && Math.abs(_this1.y - region.y) <= 0.0000001 && Math.abs(_this1.width - region.width) <= 0.0000001 && Math.abs(_this1.height - region.height) <= 0.0000001;
			if(region._weak) {
				if(!region._inPool) {
					region._inPool = true;
					region._weak = false;
					flixel_math_FlxRect._pool.putUnsafe(region);
				}
			}
			tmp2 = result;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			var _this2 = this.tileSize;
			var result1 = Math.abs(_this2.x - tileSize.x) <= 0.0000001 && Math.abs(_this2.y - tileSize.y) <= 0.0000001;
			if(tileSize._weak) {
				tileSize.put();
			}
			tmp1 = result1;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this3 = this.tileSpacing;
			var result2 = Math.abs(_this3.x - tileSpacing.x) <= 0.0000001 && Math.abs(_this3.y - tileSpacing.y) <= 0.0000001;
			if(tileSpacing._weak) {
				tileSpacing.put();
			}
			tmp = result2;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this4 = this.border;
			var result3 = Math.abs(_this4.x - border.x) <= 0.0000001 && Math.abs(_this4.y - border.y) <= 0.0000001;
			if(border._weak) {
				border.put();
			}
			return result3;
		} else {
			return false;
		}
	}
	,addBorder: function(border) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var resultBorder = point.addPoint(this.border).addPoint(border);
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		var point2 = this.tileSize;
		point1.set_x(point2.x);
		point1.set_y(point2.y);
		if(point2._weak) {
			point2.put();
		}
		var Y = 2 * border.y;
		point1.set_x(point1.x - 2 * border.x);
		point1.set_y(point1.y - Y);
		var tileFrames = flixel_graphics_frames_FlxTileFrames.findFrame(this.parent,point1,this.region,this.atlasFrame,this.tileSpacing,resultBorder);
		if(tileFrames != null) {
			flixel_util_FlxDestroyUtil.put(point1);
			return tileFrames;
		}
		tileFrames = new flixel_graphics_frames_FlxTileFrames(this.parent,resultBorder);
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = 0;
		_this.height = 0;
		_this._inPool = false;
		var Rect = this.region;
		_this.x = Rect.x;
		_this.y = Rect.y;
		_this.width = Rect.width;
		_this.height = Rect.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		tileFrames.region = _this;
		tileFrames.atlasFrame = this.atlasFrame;
		tileFrames.tileSize = point1;
		var point3 = flixel_math_FlxPoint._pool.get().set(0,0);
		point3._inPool = false;
		var point4 = this.tileSpacing;
		point3.set_x(point4.x);
		point3.set_y(point4.y);
		if(point4._weak) {
			point4.put();
		}
		tileFrames.tileSpacing = point3;
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			tileFrames.pushFrame(frame.setBorderTo(border));
		}
		return tileFrames;
	}
	,destroy: function() {
		flixel_graphics_frames_FlxFramesCollection.prototype.destroy.call(this);
		this.atlasFrame = null;
		this.region = flixel_util_FlxDestroyUtil.put(this.region);
		this.tileSize = flixel_util_FlxDestroyUtil.put(this.tileSize);
		this.tileSpacing = flixel_util_FlxDestroyUtil.put(this.tileSpacing);
	}
	,__class__: flixel_graphics_frames_FlxTileFrames
});
var flixel_graphics_tile_FlxDrawBaseItem = function() {
	this.blending = 0;
	this.hasColorOffsets = false;
	this.colored = false;
	this.antialiasing = false;
};
$hxClasses["flixel.graphics.tile.FlxDrawBaseItem"] = flixel_graphics_tile_FlxDrawBaseItem;
flixel_graphics_tile_FlxDrawBaseItem.__name__ = ["flixel","graphics","tile","FlxDrawBaseItem"];
flixel_graphics_tile_FlxDrawBaseItem.blendToInt = function(blend) {
	if(blend == null) {
		return 0;
	}
	switch(blend) {
	case 0:
		return 65536;
	case 2:
		return 1048576;
	case 3:
		return 16777216;
	case 5:
		return 8388608;
	case 6:
		return 33554432;
	case 8:
		return 2097152;
	case 9:
		return 131072;
	case 11:
		return 4194304;
	case 12:
		return 262144;
	case 14:
		return 524288;
	default:
		return 0;
	}
};
flixel_graphics_tile_FlxDrawBaseItem.prototype = {
	nextTyped: null
	,next: null
	,graphics: null
	,antialiasing: null
	,colored: null
	,hasColorOffsets: null
	,blending: null
	,type: null
	,reset: function() {
		this.graphics = null;
		this.antialiasing = false;
		this.nextTyped = null;
		this.next = null;
	}
	,dispose: function() {
		this.graphics = null;
		this.next = null;
		this.type = null;
		this.nextTyped = null;
	}
	,render: function(camera) {
	}
	,addQuad: function(frame,matrix,transform) {
	}
	,get_numVertices: function() {
		return 0;
	}
	,get_numTriangles: function() {
		return 0;
	}
	,__class__: flixel_graphics_tile_FlxDrawBaseItem
	,__properties__: {get_numTriangles:"get_numTriangles",get_numVertices:"get_numVertices"}
};
var flixel_graphics_tile_FlxDrawItemType = $hxClasses["flixel.graphics.tile.FlxDrawItemType"] = { __ename__ : ["flixel","graphics","tile","FlxDrawItemType"], __constructs__ : ["TILES","TRIANGLES"] };
flixel_graphics_tile_FlxDrawItemType.TILES = ["TILES",0];
flixel_graphics_tile_FlxDrawItemType.TILES.toString = $estr;
flixel_graphics_tile_FlxDrawItemType.TILES.__enum__ = flixel_graphics_tile_FlxDrawItemType;
flixel_graphics_tile_FlxDrawItemType.TRIANGLES = ["TRIANGLES",1];
flixel_graphics_tile_FlxDrawItemType.TRIANGLES.toString = $estr;
flixel_graphics_tile_FlxDrawItemType.TRIANGLES.__enum__ = flixel_graphics_tile_FlxDrawItemType;
flixel_graphics_tile_FlxDrawItemType.__empty_constructs__ = [flixel_graphics_tile_FlxDrawItemType.TILES,flixel_graphics_tile_FlxDrawItemType.TRIANGLES];
var flixel_graphics_tile_FlxDrawTilesItem = function() {
	this.position = 0;
	this.drawData = [];
	flixel_graphics_tile_FlxDrawBaseItem.call(this);
	this.type = flixel_graphics_tile_FlxDrawItemType.TILES;
};
$hxClasses["flixel.graphics.tile.FlxDrawTilesItem"] = flixel_graphics_tile_FlxDrawTilesItem;
flixel_graphics_tile_FlxDrawTilesItem.__name__ = ["flixel","graphics","tile","FlxDrawTilesItem"];
flixel_graphics_tile_FlxDrawTilesItem.__super__ = flixel_graphics_tile_FlxDrawBaseItem;
flixel_graphics_tile_FlxDrawTilesItem.prototype = $extend(flixel_graphics_tile_FlxDrawBaseItem.prototype,{
	drawData: null
	,position: null
	,shader: null
	,reset: function() {
		flixel_graphics_tile_FlxDrawBaseItem.prototype.reset.call(this);
		this.position = 0;
		this.shader = null;
	}
	,dispose: function() {
		flixel_graphics_tile_FlxDrawBaseItem.prototype.dispose.call(this);
		this.drawData = null;
		this.shader = null;
	}
	,addQuad: function(frame,matrix,transform) {
		this.drawData[this.position++] = matrix.tx;
		this.drawData[this.position++] = matrix.ty;
		var rect = frame.frame;
		this.drawData[this.position++] = rect.x;
		this.drawData[this.position++] = rect.y;
		this.drawData[this.position++] = rect.width;
		this.drawData[this.position++] = rect.height;
		this.drawData[this.position++] = matrix.a;
		this.drawData[this.position++] = matrix.b;
		this.drawData[this.position++] = matrix.c;
		this.drawData[this.position++] = matrix.d;
		if(this.colored && transform != null) {
			this.drawData[this.position++] = transform.redMultiplier;
			this.drawData[this.position++] = transform.greenMultiplier;
			this.drawData[this.position++] = transform.blueMultiplier;
		}
		this.drawData[this.position++] = transform != null ? transform.alphaMultiplier : 1.0;
		if(this.hasColorOffsets && transform != null) {
			this.drawData[this.position++] = transform.redOffset;
			this.drawData[this.position++] = transform.greenOffset;
			this.drawData[this.position++] = transform.blueOffset;
			this.drawData[this.position++] = transform.alphaOffset;
		}
	}
	,setNext: function(f) {
		this.drawData[this.position++] = f;
	}
	,render: function(camera) {
		if(!flixel_FlxG.renderTile || this.position <= 0) {
			return;
		}
		var flags = 56;
		if(this.colored) {
			flags = 60;
		}
		if(this.hasColorOffsets) {
			flags |= 128;
		}
		flags |= this.blending;
		camera.canvas.get_graphics().drawTiles(this.graphics.get_tilesheet(),this.drawData,camera.antialiasing || this.antialiasing,flags,this.shader,this.position);
		flixel_graphics_tile_FlxTilesheet._DRAWCALLS++;
	}
	,get_numTiles: function() {
		var elementsPerTile = 8;
		if(this.colored) {
			elementsPerTile = 11;
		}
		if(this.hasColorOffsets) {
			elementsPerTile += 4;
		}
		return this.position / elementsPerTile | 0;
	}
	,get_numVertices: function() {
		return 4 * this.get_numTiles();
	}
	,get_numTriangles: function() {
		return 2 * this.get_numTiles();
	}
	,__class__: flixel_graphics_tile_FlxDrawTilesItem
	,__properties__: $extend(flixel_graphics_tile_FlxDrawBaseItem.prototype.__properties__,{get_numTiles:"get_numTiles"})
});
var flixel_graphics_tile_FlxDrawTrianglesItem = function() {
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	this.bounds = _this;
	this.colorsPosition = 0;
	this.indicesPosition = 0;
	this.verticesPosition = 0;
	this.colors = [];
	this.uvtData = [];
	this.indices = [];
	this.vertices = [];
	flixel_graphics_tile_FlxDrawBaseItem.call(this);
	this.type = flixel_graphics_tile_FlxDrawItemType.TRIANGLES;
};
$hxClasses["flixel.graphics.tile.FlxDrawTrianglesItem"] = flixel_graphics_tile_FlxDrawTrianglesItem;
flixel_graphics_tile_FlxDrawTrianglesItem.__name__ = ["flixel","graphics","tile","FlxDrawTrianglesItem"];
flixel_graphics_tile_FlxDrawTrianglesItem.inflateBounds = function(bounds,x,y) {
	if(x < bounds.x) {
		bounds.width += bounds.x - x;
		bounds.x = x;
	}
	if(y < bounds.y) {
		bounds.height += bounds.y - y;
		bounds.y = y;
	}
	if(x > bounds.x + bounds.width) {
		bounds.width = x - bounds.x;
	}
	if(y > bounds.y + bounds.height) {
		bounds.height = y - bounds.y;
	}
	return bounds;
};
flixel_graphics_tile_FlxDrawTrianglesItem.__super__ = flixel_graphics_tile_FlxDrawBaseItem;
flixel_graphics_tile_FlxDrawTrianglesItem.prototype = $extend(flixel_graphics_tile_FlxDrawBaseItem.prototype,{
	vertices: null
	,indices: null
	,uvtData: null
	,colors: null
	,verticesPosition: null
	,indicesPosition: null
	,colorsPosition: null
	,bounds: null
	,render: function(camera) {
		if(!flixel_FlxG.renderTile) {
			return;
		}
		if(this.get_numTriangles() <= 0) {
			return;
		}
		var tmp = camera.antialiasing || this.antialiasing;
		camera.canvas.get_graphics().beginBitmapFill(this.graphics.bitmap,null,true,tmp);
		var tmp1 = camera.canvas.get_graphics();
		var value = this.vertices;
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		vectorData.data = value.slice(0);
		var value1 = this.indices;
		var vectorData1 = new openfl_VectorData();
		vectorData1.length = value1.length;
		vectorData1.fixed = true;
		vectorData1.data = value1.slice(0);
		var value2 = this.uvtData;
		var vectorData2 = new openfl_VectorData();
		vectorData2.length = value2.length;
		vectorData2.fixed = true;
		vectorData2.data = value2.slice(0);
		tmp1.drawTriangles(vectorData,vectorData1,vectorData2,1);
		camera.canvas.get_graphics().endFill();
		if(flixel_FlxG["debugger"].drawDebug) {
			var gfx = camera.debugLayer.get_graphics();
			gfx.lineStyle(1,-16776961,0.5);
			var value3 = this.vertices;
			var vectorData3 = new openfl_VectorData();
			vectorData3.length = value3.length;
			vectorData3.fixed = true;
			vectorData3.data = value3.slice(0);
			var value4 = this.indices;
			var vectorData4 = new openfl_VectorData();
			vectorData4.length = value4.length;
			vectorData4.fixed = true;
			vectorData4.data = value4.slice(0);
			gfx.drawTriangles(vectorData3,vectorData4);
		}
		flixel_graphics_tile_FlxTilesheet._DRAWCALLS++;
	}
	,reset: function() {
		flixel_graphics_tile_FlxDrawBaseItem.prototype.reset.call(this);
		this.vertices.splice(0,this.vertices.length);
		this.indices.splice(0,this.indices.length);
		this.uvtData.splice(0,this.uvtData.length);
		this.colors.splice(0,this.colors.length);
		this.verticesPosition = 0;
		this.indicesPosition = 0;
		this.colorsPosition = 0;
	}
	,dispose: function() {
		flixel_graphics_tile_FlxDrawBaseItem.prototype.dispose.call(this);
		this.vertices = null;
		this.indices = null;
		this.uvtData = null;
		this.colors = null;
		this.bounds = null;
	}
	,addTriangles: function(vertices,indices,uvtData,colors,position,cameraBounds) {
		if(position == null) {
			position = flixel_graphics_tile_FlxDrawTrianglesItem.point.set();
		}
		if(cameraBounds == null) {
			var _this = flixel_graphics_tile_FlxDrawTrianglesItem.rect;
			_this.x = 0;
			_this.y = 0;
			_this.width = flixel_FlxG.width;
			_this.height = flixel_FlxG.height;
			cameraBounds = _this;
		}
		var verticesLength = vertices.length;
		var prevVerticesLength = this.vertices.length;
		var numberOfVertices = verticesLength / 2 | 0;
		var prevIndicesLength = this.indices.length;
		var prevUVTDataLength = this.uvtData.length;
		var prevColorsLength = this.colors.length;
		var prevNumberOfVertices = this.get_numVertices();
		var tempX;
		var tempY;
		var i = 0;
		var currentVertexPosition = prevVerticesLength;
		while(i < verticesLength) {
			tempX = position.x + vertices[i];
			tempY = position.y + vertices[i + 1];
			this.vertices[currentVertexPosition++] = tempX;
			this.vertices[currentVertexPosition++] = tempY;
			if(i == 0) {
				var _this1 = this.bounds;
				_this1.x = tempX;
				_this1.y = tempY;
				_this1.width = 0;
				_this1.height = 0;
			} else {
				var bounds = this.bounds;
				if(tempX < bounds.x) {
					bounds.width += bounds.x - tempX;
					bounds.x = tempX;
				}
				if(tempY < bounds.y) {
					bounds.height += bounds.y - tempY;
					bounds.y = tempY;
				}
				if(tempX > bounds.x + bounds.width) {
					bounds.width = tempX - bounds.x;
				}
				if(tempY > bounds.y + bounds.height) {
					bounds.height = tempY - bounds.y;
				}
			}
			i += 2;
		}
		var Rect = this.bounds;
		var result = Rect.x + Rect.width > cameraBounds.x && Rect.x < cameraBounds.x + cameraBounds.width && Rect.y + Rect.height > cameraBounds.y && Rect.y < cameraBounds.y + cameraBounds.height;
		if(Rect._weak) {
			if(!Rect._inPool) {
				Rect._inPool = true;
				Rect._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(Rect);
			}
		}
		if(!result) {
			this.vertices.splice(this.vertices.length - verticesLength,verticesLength);
		} else {
			var uvtDataLength = uvtData.length;
			var _g1 = 0;
			while(_g1 < uvtDataLength) {
				var i1 = _g1++;
				this.uvtData[prevUVTDataLength + i1] = uvtData[i1];
			}
			var indicesLength = indices.length;
			var _g11 = 0;
			while(_g11 < indicesLength) {
				var i2 = _g11++;
				this.indices[prevIndicesLength + i2] = indices[i2] + prevNumberOfVertices;
			}
			if(this.colored) {
				var _g12 = 0;
				while(_g12 < numberOfVertices) {
					var i3 = _g12++;
					this.colors[prevColorsLength + i3] = colors[i3];
				}
				this.colorsPosition += numberOfVertices;
			}
			this.verticesPosition += verticesLength;
			this.indicesPosition += indicesLength;
		}
		if(position._weak) {
			position.put();
		}
		if(cameraBounds._weak) {
			if(!cameraBounds._inPool) {
				cameraBounds._inPool = true;
				cameraBounds._weak = false;
				flixel_math_FlxRect._pool.putUnsafe(cameraBounds);
			}
		}
	}
	,addQuad: function(frame,matrix,transform) {
		var prevVerticesPos = this.verticesPosition;
		var prevIndicesPos = this.indicesPosition;
		var prevColorsPos = this.colorsPosition;
		var prevNumberOfVertices = this.get_numVertices();
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var x1 = point.x * matrix.a + point.y * matrix.c + matrix.tx;
		var y1 = point.x * matrix.b + point.y * matrix.d + matrix.ty;
		point.set(x1,y1);
		this.vertices[prevVerticesPos] = point.x;
		this.vertices[prevVerticesPos + 1] = point.y;
		this.uvtData[prevVerticesPos] = frame.uv.x;
		this.uvtData[prevVerticesPos + 1] = frame.uv.y;
		point.set(frame.frame.width,0);
		var x11 = point.x * matrix.a + point.y * matrix.c + matrix.tx;
		var y11 = point.x * matrix.b + point.y * matrix.d + matrix.ty;
		point.set(x11,y11);
		this.vertices[prevVerticesPos + 2] = point.x;
		this.vertices[prevVerticesPos + 3] = point.y;
		this.uvtData[prevVerticesPos + 2] = frame.uv.width;
		this.uvtData[prevVerticesPos + 3] = frame.uv.y;
		point.set(frame.frame.width,frame.frame.height);
		var x12 = point.x * matrix.a + point.y * matrix.c + matrix.tx;
		var y12 = point.x * matrix.b + point.y * matrix.d + matrix.ty;
		point.set(x12,y12);
		this.vertices[prevVerticesPos + 4] = point.x;
		this.vertices[prevVerticesPos + 5] = point.y;
		this.uvtData[prevVerticesPos + 4] = frame.uv.width;
		this.uvtData[prevVerticesPos + 5] = frame.uv.height;
		point.set(0,frame.frame.height);
		var x13 = point.x * matrix.a + point.y * matrix.c + matrix.tx;
		var y13 = point.x * matrix.b + point.y * matrix.d + matrix.ty;
		point.set(x13,y13);
		this.vertices[prevVerticesPos + 6] = point.x;
		this.vertices[prevVerticesPos + 7] = point.y;
		point.put();
		this.uvtData[prevVerticesPos + 6] = frame.uv.x;
		this.uvtData[prevVerticesPos + 7] = frame.uv.height;
		this.indices[prevIndicesPos] = prevNumberOfVertices;
		this.indices[prevIndicesPos + 1] = prevNumberOfVertices + 1;
		this.indices[prevIndicesPos + 2] = prevNumberOfVertices + 2;
		this.indices[prevIndicesPos + 3] = prevNumberOfVertices + 2;
		this.indices[prevIndicesPos + 4] = prevNumberOfVertices + 3;
		this.indices[prevIndicesPos + 5] = prevNumberOfVertices;
		if(this.colored) {
			var red = 1.0;
			var green = 1.0;
			var blue = 1.0;
			var alpha = 1.0;
			if(transform != null) {
				red = transform.redMultiplier;
				green = transform.greenMultiplier;
				blue = transform.blueMultiplier;
				alpha = transform.alphaMultiplier;
			}
			var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
			var Value = Math.round(red * 255);
			color &= -16711681;
			color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
			var Value1 = Math.round(green * 255);
			color &= -65281;
			color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
			var Value2 = Math.round(blue * 255);
			color &= -256;
			color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
			var Value3 = Math.round(alpha * 255);
			color &= 16777215;
			color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
			var color1 = color;
			this.colors[prevColorsPos] = color1;
			this.colors[prevColorsPos + 1] = color1;
			this.colors[prevColorsPos + 2] = color1;
			this.colors[prevColorsPos + 3] = color1;
			this.colorsPosition += 4;
		}
		this.verticesPosition += 8;
		this.indicesPosition += 6;
	}
	,get_numVertices: function() {
		return this.vertices.length / 2 | 0;
	}
	,get_numTriangles: function() {
		return this.indices.length / 3 | 0;
	}
	,__class__: flixel_graphics_tile_FlxDrawTrianglesItem
});
var openfl_display_Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = [];
	this.__tileRects = [];
	this.__tileUVs = [];
	this.__rectTile = new openfl_geom_Rectangle();
	this.__rectUV = new openfl_geom_Rectangle();
	this.__point = new openfl_geom_Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl_display_Tilesheet.prototype = {
	__bitmap: null
	,__centerPoints: null
	,__tileRects: null
	,__tileUVs: null
	,__rectTile: null
	,__rectUV: null
	,__point: null
	,__class__: openfl_display_Tilesheet
};
var flixel_graphics_tile_FlxTilesheet = function(image) {
	openfl_display_Tilesheet.call(this,image);
};
$hxClasses["flixel.graphics.tile.FlxTilesheet"] = flixel_graphics_tile_FlxTilesheet;
flixel_graphics_tile_FlxTilesheet.__name__ = ["flixel","graphics","tile","FlxTilesheet"];
flixel_graphics_tile_FlxTilesheet.__super__ = openfl_display_Tilesheet;
flixel_graphics_tile_FlxTilesheet.prototype = $extend(openfl_display_Tilesheet.prototype,{
	__class__: flixel_graphics_tile_FlxTilesheet
});
var flixel_group_FlxTypedGroupIterator = function(GroupMembers,filter) {
	this._groupMembers = GroupMembers;
	this._filter = filter;
	this._cursor = 0;
	this._length = this._groupMembers.length;
};
$hxClasses["flixel.group.FlxTypedGroupIterator"] = flixel_group_FlxTypedGroupIterator;
flixel_group_FlxTypedGroupIterator.__name__ = ["flixel","group","FlxTypedGroupIterator"];
flixel_group_FlxTypedGroupIterator.prototype = {
	_groupMembers: null
	,_filter: null
	,_cursor: null
	,_length: null
	,next: function() {
		if(this.hasNext()) {
			return this._groupMembers[this._cursor++];
		} else {
			return null;
		}
	}
	,hasNext: function() {
		while(this._cursor < this._length && (this._groupMembers[this._cursor] == null || this._filter != null && !this._filter(this._groupMembers[this._cursor]))) this._cursor++;
		return this._cursor < this._length;
	}
	,__class__: flixel_group_FlxTypedGroupIterator
};
var flixel_input_FlxBaseKeyList = function(status,keyManager) {
	this.status = status;
	this.keyManager = keyManager;
};
$hxClasses["flixel.input.FlxBaseKeyList"] = flixel_input_FlxBaseKeyList;
flixel_input_FlxBaseKeyList.__name__ = ["flixel","input","FlxBaseKeyList"];
flixel_input_FlxBaseKeyList.prototype = {
	status: null
	,keyManager: null
	,check: function(keyCode) {
		return this.keyManager.checkStatus(keyCode,this.status);
	}
	,get_ANY: function() {
		var _g = 0;
		var _g1 = this.keyManager._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && this.keyManager.checkStatus(key.ID,this.status)) {
				return true;
			}
		}
		return false;
	}
	,__class__: flixel_input_FlxBaseKeyList
	,__properties__: {get_ANY:"get_ANY"}
};
var flixel_input_IFlxInput = function() { };
$hxClasses["flixel.input.IFlxInput"] = flixel_input_IFlxInput;
flixel_input_IFlxInput.__name__ = ["flixel","input","IFlxInput"];
flixel_input_IFlxInput.prototype = {
	get_justReleased: null
	,get_released: null
	,get_pressed: null
	,get_justPressed: null
	,__class__: flixel_input_IFlxInput
	,__properties__: {get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased"}
};
var flixel_input_FlxInput = function(ID) {
	this.last = 0;
	this.current = 0;
	this.ID = ID;
};
$hxClasses["flixel.input.FlxInput"] = flixel_input_FlxInput;
flixel_input_FlxInput.__name__ = ["flixel","input","FlxInput"];
flixel_input_FlxInput.__interfaces__ = [flixel_input_IFlxInput];
flixel_input_FlxInput.prototype = {
	ID: null
	,current: null
	,last: null
	,press: function() {
		this.last = this.current;
		this.current = this.current == 1 || this.current == 2 ? 1 : 2;
	}
	,release: function() {
		this.last = this.current;
		this.current = this.current == 1 || this.current == 2 ? -1 : 0;
	}
	,update: function() {
		if(this.last == -1 && this.current == -1) {
			this.current = 0;
		} else if(this.last == 2 && this.current == 2) {
			this.current = 1;
		}
		this.last = this.current;
	}
	,reset: function() {
		this.current = 0;
		this.last = 0;
	}
	,hasState: function(state) {
		switch(state) {
		case -1:
			return this.current == -1;
		case 0:
			if(this.current != 0) {
				return this.current == -1;
			} else {
				return true;
			}
			break;
		case 1:
			if(this.current != 1) {
				return this.current == 2;
			} else {
				return true;
			}
			break;
		case 2:
			return this.current == 2;
		}
	}
	,get_justReleased: function() {
		return this.current == -1;
	}
	,get_released: function() {
		if(this.current != 0) {
			return this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		if(this.current != 1) {
			return this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.current == 2;
	}
	,__class__: flixel_input_FlxInput
	,__properties__: {get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased"}
};
var flixel_input_IFlxInputManager = function() { };
$hxClasses["flixel.input.IFlxInputManager"] = flixel_input_IFlxInputManager;
flixel_input_IFlxInputManager.__name__ = ["flixel","input","IFlxInputManager"];
flixel_input_IFlxInputManager.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_IFlxInputManager.prototype = {
	reset: null
	,update: null
	,onFocus: null
	,onFocusLost: null
	,__class__: flixel_input_IFlxInputManager
};
var flixel_input_FlxKeyManager = function(keyListClass) {
	this._keyListMap = new haxe_ds_IntMap();
	this._keyListArray = [];
	this.preventDefaultKeys = [];
	this.enabled = true;
	openfl_Lib.current.stage.addEventListener("keyDown",$bind(this,this.onKeyDown));
	openfl_Lib.current.stage.addEventListener("keyUp",$bind(this,this.onKeyUp));
	this.pressed = Type.createInstance(keyListClass,[1,this]);
	this.justPressed = Type.createInstance(keyListClass,[2,this]);
	this.justReleased = Type.createInstance(keyListClass,[-1,this]);
};
$hxClasses["flixel.input.FlxKeyManager"] = flixel_input_FlxKeyManager;
flixel_input_FlxKeyManager.__name__ = ["flixel","input","FlxKeyManager"];
flixel_input_FlxKeyManager.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_FlxKeyManager.prototype = {
	enabled: null
	,preventDefaultKeys: null
	,pressed: null
	,justPressed: null
	,justReleased: null
	,_keyListArray: null
	,_keyListMap: null
	,anyPressed: function(KeyArray) {
		return this.checkKeyArrayState(KeyArray,1);
	}
	,anyJustPressed: function(KeyArray) {
		return this.checkKeyArrayState(KeyArray,2);
	}
	,anyJustReleased: function(KeyArray) {
		return this.checkKeyArrayState(KeyArray,-1);
	}
	,firstPressed: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && (key.current == 1 || key.current == 2)) {
				return key.ID;
			}
		}
		return -1;
	}
	,firstJustPressed: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == 2) {
				return key.ID;
			}
		}
		return -1;
	}
	,firstJustReleased: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && key.current == -1) {
				return key.ID;
			}
		}
		return -1;
	}
	,checkStatus: function(KeyCode,Status) {
		var key = this._keyListMap.get(KeyCode);
		if(key != null) {
			if(key.hasState(Status)) {
				return true;
			}
		} else {
			throw new js__$Boot_HaxeError("Invalid key code: " + Std.string(KeyCode) + ".");
		}
		return false;
	}
	,getIsDown: function() {
		var keysDown = [];
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null && (key.current == 1 || key.current == 2)) {
				keysDown.push(key);
			}
		}
		return keysDown;
	}
	,destroy: function() {
		this._keyListArray = null;
		this._keyListMap = null;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null) {
				key.release();
			}
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key != null) {
				key.update();
			}
		}
	}
	,checkKeyArrayState: function(KeyArray,State) {
		if(KeyArray == null) {
			return false;
		}
		var _g = 0;
		while(_g < KeyArray.length) {
			var code = KeyArray[_g];
			++_g;
			var key = this._keyListMap.get(code);
			if(key != null) {
				if(key.hasState(State)) {
					return true;
				}
			}
		}
		return false;
	}
	,onKeyUp: function(event) {
		var c = this.resolveKeyCode(event);
		this.handlePreventDefaultKeys(c,event);
		if(this.enabled) {
			var key = this._keyListMap.get(c);
			if(key != null) {
				key.release();
			}
		}
	}
	,onKeyDown: function(event) {
		var c = this.resolveKeyCode(event);
		this.handlePreventDefaultKeys(c,event);
		if(this.enabled) {
			var key = this._keyListMap.get(c);
			if(key != null) {
				key.press();
			}
		}
	}
	,handlePreventDefaultKeys: function(keyCode,event) {
		var key = this._keyListMap.get(keyCode);
		if(key != null && this.preventDefaultKeys != null && this.preventDefaultKeys.indexOf(key.ID) != -1) {
			event.stopImmediatePropagation();
			event.stopPropagation();
		}
	}
	,inKeyArray: function(KeyArray,Event) {
		if(KeyArray == null) {
			return false;
		} else {
			var code = this.resolveKeyCode(Event);
			var _g = 0;
			while(_g < KeyArray.length) {
				var key = KeyArray[_g];
				++_g;
				if(key == code || key == -2) {
					return true;
				}
			}
		}
		return false;
	}
	,resolveKeyCode: function(e) {
		return e.keyCode;
	}
	,updateKeyStates: function(KeyCode,Down) {
		var key = this._keyListMap.get(KeyCode);
		if(key != null) {
			if(Down) {
				key.press();
			} else {
				key.release();
			}
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,getKey: function(KeyCode) {
		return this._keyListMap.h[KeyCode];
	}
	,__class__: flixel_input_FlxKeyManager
};
var flixel_input_FlxPointer = function() {
	this._globalScreenY = 0;
	this._globalScreenX = 0;
	this.screenY = 0;
	this.screenX = 0;
	this.y = 0;
	this.x = 0;
};
$hxClasses["flixel.input.FlxPointer"] = flixel_input_FlxPointer;
flixel_input_FlxPointer.__name__ = ["flixel","input","FlxPointer"];
flixel_input_FlxPointer.prototype = {
	x: null
	,y: null
	,screenX: null
	,screenY: null
	,_globalScreenX: null
	,_globalScreenY: null
	,getWorldPosition: function(Camera,point) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		this.getScreenPosition(Camera,flixel_input_FlxPointer._cachedPoint);
		point.set_x(flixel_input_FlxPointer._cachedPoint.x + Camera.scroll.x);
		point.set_y(flixel_input_FlxPointer._cachedPoint.y + Camera.scroll.y);
		return point;
	}
	,getScreenPosition: function(Camera,point) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		point.set_x((this._globalScreenX - Camera.x + 0.5 * Camera.width * (Camera.zoom - Camera.initialZoom)) / Camera.zoom);
		point.set_y((this._globalScreenY - Camera.y + 0.5 * Camera.height * (Camera.zoom - Camera.initialZoom)) / Camera.zoom);
		return point;
	}
	,getPosition: function(point) {
		if(point == null) {
			var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
			point1._inPool = false;
			point = point1;
		}
		return point.set(this.x,this.y);
	}
	,overlaps: function(ObjectOrGroup,Camera) {
		var _gthis = this;
		var result = false;
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			group.forEachExists(function(basic) {
				if(_gthis.overlaps(basic,Camera)) {
					result = true;
					return;
				}
			});
		} else {
			this.getPosition(flixel_input_FlxPointer._cachedPoint);
			var object = ObjectOrGroup;
			result = object.overlapsPoint(flixel_input_FlxPointer._cachedPoint,true,Camera);
		}
		return result;
	}
	,setGlobalScreenPositionUnsafe: function(newX,newY) {
		this._globalScreenX = newX / flixel_FlxG.scaleMode.scale.x | 0;
		this._globalScreenY = newY / flixel_FlxG.scaleMode.scale.y | 0;
		this.updatePositions();
	}
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value1 = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value1;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,updatePositions: function() {
		this.getScreenPosition(flixel_FlxG.camera,flixel_input_FlxPointer._cachedPoint);
		this.screenX = flixel_input_FlxPointer._cachedPoint.x | 0;
		this.screenY = flixel_input_FlxPointer._cachedPoint.y | 0;
		this.getWorldPosition(flixel_FlxG.camera,flixel_input_FlxPointer._cachedPoint);
		this.x = flixel_input_FlxPointer._cachedPoint.x | 0;
		this.y = flixel_input_FlxPointer._cachedPoint.y | 0;
	}
	,__class__: flixel_input_FlxPointer
};
var flixel_input_FlxSwipe = function(ID,StartPosition,EndPosition,StartTimeInTicks) {
	this.ID = ID;
	this.startPosition = StartPosition;
	this.endPosition = EndPosition;
	this._startTimeInTicks = StartTimeInTicks;
	this._endTimeInTicks = flixel_FlxG.game.ticks;
};
$hxClasses["flixel.input.FlxSwipe"] = flixel_input_FlxSwipe;
flixel_input_FlxSwipe.__name__ = ["flixel","input","FlxSwipe"];
flixel_input_FlxSwipe.prototype = {
	ID: null
	,startPosition: null
	,endPosition: null
	,_startTimeInTicks: null
	,_endTimeInTicks: null
	,toString: function() {
		var value = this.ID;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "ID";
		_this.value = value;
		var value1 = this.startPosition;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "start";
		_this1.value = value1;
		var value2 = this.endPosition;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "end";
		_this2.value = value2;
		var dx = this.startPosition.x - this.endPosition.x;
		var dy = this.startPosition.y - this.endPosition.y;
		var value3 = Math.sqrt(dx * dx + dy * dy);
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "distance";
		_this3.value = value3;
		var value4 = this.startPosition.angleBetween(this.endPosition);
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "angle";
		_this4.value = value4;
		var value5 = (this._endTimeInTicks - this._startTimeInTicks) / 1000;
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "duration";
		_this5.value = value5;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);
	}
	,get_distance: function() {
		var dx = this.startPosition.x - this.endPosition.x;
		var dy = this.startPosition.y - this.endPosition.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,get_angle: function() {
		return this.startPosition.angleBetween(this.endPosition);
	}
	,get_duration: function() {
		return (this._endTimeInTicks - this._startTimeInTicks) / 1000;
	}
	,__class__: flixel_input_FlxSwipe
	,__properties__: {get_duration:"get_duration",get_angle:"get_angle",get_distance:"get_distance"}
};
var flixel_input_gamepad_FlxGamepad = function(ID,Manager,Model,Attachment) {
	this.buttons = [];
	this._deadZone = 0.15;
	this.axisActive = false;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 6) {
		++_g1;
		_g.push(0);
	}
	this.axis = _g;
	this.deadZoneMode = flixel_input_gamepad_FlxGamepadDeadZoneMode.INDEPENDENT_AXES;
	this.connected = true;
	this.id = ID;
	this.manager = Manager;
	this.pressed = new flixel_input_gamepad_lists_FlxGamepadButtonList(1,this);
	this.justPressed = new flixel_input_gamepad_lists_FlxGamepadButtonList(2,this);
	this.justReleased = new flixel_input_gamepad_lists_FlxGamepadButtonList(-1,this);
	this.analog = new flixel_input_gamepad_lists_FlxGamepadAnalogList(this);
	this.motion = new flixel_input_gamepad_lists_FlxGamepadMotionValueList(this);
	this.pointer = new flixel_input_gamepad_lists_FlxGamepadPointerValueList(this);
	if(Model == null) {
		Model = flixel_input_gamepad_FlxGamepadModel.XINPUT;
	}
	if(Attachment == null) {
		Attachment = flixel_input_gamepad_FlxGamepadAttachment.NONE;
	}
	this.set_model(Model);
	this.detectedModel = Model;
};
$hxClasses["flixel.input.gamepad.FlxGamepad"] = flixel_input_gamepad_FlxGamepad;
flixel_input_gamepad_FlxGamepad.__name__ = ["flixel","input","gamepad","FlxGamepad"];
flixel_input_gamepad_FlxGamepad.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_gamepad_FlxGamepad.prototype = {
	id: null
	,model: null
	,detectedModel: null
	,mapping: null
	,connected: null
	,attachment: null
	,deadZoneMode: null
	,pressed: null
	,justPressed: null
	,justReleased: null
	,analog: null
	,motion: null
	,pointer: null
	,axis: null
	,axisActive: null
	,manager: null
	,_deadZone: null
	,_device: null
	,buttons: null
	,getButton: function(RawID) {
		if(RawID == -1) {
			return null;
		}
		var gamepadButton = this.buttons[RawID];
		if(gamepadButton == null) {
			gamepadButton = new flixel_input_gamepad_FlxGamepadButton(RawID);
			this.buttons[RawID] = gamepadButton;
		}
		return gamepadButton;
	}
	,applyAxisFlip: function(axisValue,axisID) {
		if(this.mapping.isAxisFlipped(axisID)) {
			axisValue *= -1;
		}
		return axisValue;
	}
	,update: function() {
		var control;
		var button;
		if(this._device == null) {
			return;
		}
		var _g1 = 0;
		var _g = this._device.get_numControls();
		while(_g1 < _g) {
			var i = _g1++;
			control = this._device.getControlAt(i);
			button = this.getButton(i);
			if(this.isAxisForAnalogStick(i)) {
				this.handleAxisMove(i,control.value,button.value);
			}
			button.value = control.value;
			var value = Math.abs(control.value);
			if(value < this.get_deadZone()) {
				button.release();
			} else if(value > this.get_deadZone()) {
				button.press();
			}
		}
		var _g2 = 0;
		var _g11 = this.buttons;
		while(_g2 < _g11.length) {
			var button1 = _g11[_g2];
			++_g2;
			if(button1 != null) {
				button1.update();
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null) {
				button.reset();
			}
		}
		var numAxis = this.axis.length;
		var _g11 = 0;
		while(_g11 < numAxis) {
			var i = _g11++;
			this.axis[i] = 0;
		}
	}
	,destroy: function() {
		this.connected = false;
		this.buttons = null;
		this.axis = null;
		this.manager = null;
	}
	,checkStatus: function(ID,Status) {
		return this.checkStatusRaw(this.mapping.getRawID(ID),Status);
	}
	,checkStatusRaw: function(RawID,Status) {
		if(this.buttons[RawID] != null) {
			return this.buttons[RawID].current == Status;
		}
		return false;
	}
	,anyPressed: function(IDArray) {
		var _g = 0;
		while(_g < IDArray.length) {
			var id = IDArray[_g];
			++_g;
			var raw = this.mapping.getRawID(id);
			if(this.buttons[raw] != null) {
				var _this = this.buttons[raw];
				if(_this.current == 1 || _this.current == 2) {
					return true;
				}
			}
		}
		return false;
	}
	,anyPressedRaw: function(RawIDArray) {
		var _g = 0;
		while(_g < RawIDArray.length) {
			var b = RawIDArray[_g];
			++_g;
			if(this.buttons[b] != null) {
				var _this = this.buttons[b];
				if(_this.current == 1 || _this.current == 2) {
					return true;
				}
			}
		}
		return false;
	}
	,anyJustPressed: function(IDArray) {
		var _g = 0;
		while(_g < IDArray.length) {
			var b = IDArray[_g];
			++_g;
			var raw = this.mapping.getRawID(b);
			if(this.buttons[raw] != null) {
				if(this.buttons[raw].current == 2) {
					return true;
				}
			}
		}
		return false;
	}
	,anyJustPressedRaw: function(RawIDArray) {
		var _g = 0;
		while(_g < RawIDArray.length) {
			var b = RawIDArray[_g];
			++_g;
			if(this.buttons[b] != null) {
				if(this.buttons[b].current == 2) {
					return true;
				}
			}
		}
		return false;
	}
	,anyJustReleased: function(IDArray) {
		var _g = 0;
		while(_g < IDArray.length) {
			var b = IDArray[_g];
			++_g;
			var raw = this.mapping.getRawID(b);
			if(this.buttons[raw] != null) {
				if(this.buttons[raw].current == -1) {
					return true;
				}
			}
		}
		return false;
	}
	,anyJustReleasedRaw: function(RawIDArray) {
		var _g = 0;
		while(_g < RawIDArray.length) {
			var b = RawIDArray[_g];
			++_g;
			if(this.buttons[b] != null) {
				if(this.buttons[b].current == -1) {
					return true;
				}
			}
		}
		return false;
	}
	,firstPressedID: function() {
		return this.mapping.getID(this.firstPressedRawID());
	}
	,firstPressedRawID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && (button.current == 0 || button.current == -1)) {
				return button.ID;
			}
		}
		return -1;
	}
	,firstJustPressedID: function() {
		return this.mapping.getID(this.firstJustPressedRawID());
	}
	,firstJustPressedRawID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current == 2) {
				return button.ID;
			}
		}
		return -1;
	}
	,firstJustReleasedID: function() {
		return this.mapping.getID(this.firstJustReleasedRawID());
	}
	,firstJustReleasedRawID: function() {
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.current == -1) {
				return button.ID;
			}
		}
		return -1;
	}
	,getAxis: function(AxisButtonID) {
		var axisValue = this.getAxisValue(this.mapping.getRawID(AxisButtonID));
		if(Math.abs(axisValue) > this.get_deadZone()) {
			return axisValue;
		} else {
			return 0;
		}
	}
	,getAxisRaw: function(RawAxisID) {
		var axisValue = this.getAxisValue(RawAxisID);
		if(Math.abs(axisValue) > this.get_deadZone()) {
			return axisValue;
		}
		return 0;
	}
	,isAxisForAnalogStick: function(AxisIndex) {
		var leftStick = this.mapping.leftStick;
		var rightStick = this.mapping.rightStick;
		if(leftStick != null) {
			if(AxisIndex == leftStick.x || AxisIndex == leftStick.y) {
				return true;
			}
		}
		if(rightStick != null) {
			if(AxisIndex == rightStick.x || AxisIndex == rightStick.y) {
				return true;
			}
		}
		return false;
	}
	,getAnalogStickByAxis: function(AxisIndex) {
		var leftStick = this.mapping.leftStick;
		var rightStick = this.mapping.rightStick;
		if(leftStick != null && AxisIndex == leftStick.x || AxisIndex == leftStick.y) {
			return leftStick;
		}
		if(rightStick != null && AxisIndex == rightStick.x || AxisIndex == rightStick.y) {
			return rightStick;
		}
		return null;
	}
	,getXAxis: function(AxesButtonID) {
		return this.getAnalogXAxisValue(this.mapping.getAnalogStick(AxesButtonID));
	}
	,getXAxisRaw: function(Stick) {
		return this.getAnalogXAxisValue(Stick);
	}
	,getYAxis: function(AxesButtonID) {
		return this.getYAxisRaw(this.mapping.getAnalogStick(AxesButtonID));
	}
	,getYAxisRaw: function(Stick) {
		return this.getAnalogYAxisValue(Stick);
	}
	,anyButton: function(state) {
		if(state == null) {
			state = 1;
		}
		var _g = 0;
		var _g1 = this.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && button.hasState(state)) {
				return true;
			}
		}
		return false;
	}
	,anyInput: function() {
		if(this.anyButton()) {
			return true;
		}
		var numAxis = this.axis.length;
		var _g1 = 0;
		while(_g1 < numAxis) {
			++_g1;
			if(this.axis[0] != 0) {
				return true;
			}
		}
		return false;
	}
	,getAxisValue: function(AxisID) {
		var axisValue = 0;
		if(AxisID == -1) {
			return 0;
		}
		var tmp;
		if(this._device != null && this._device.enabled) {
			var Max = this._device.get_numControls() - 1;
			if(AxisID >= 0) {
				if(Max != null) {
					tmp = AxisID <= Max;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			axisValue = this._device.getControlAt(AxisID).value;
		}
		if(this.isAxisForAnalogStick(AxisID)) {
			var axisValue1 = axisValue;
			if(this.mapping.isAxisFlipped(AxisID)) {
				axisValue1 *= -1;
			}
			axisValue = axisValue1;
		}
		return axisValue;
	}
	,getAnalogXAxisValue: function(stick) {
		if(stick == null) {
			return 0;
		}
		if(this.deadZoneMode == flixel_input_gamepad_FlxGamepadDeadZoneMode.CIRCULAR) {
			return this.getAnalogAxisValueCircular(stick,stick.x);
		} else {
			return this.getAnalogAxisValueIndependant(stick.x);
		}
	}
	,getAnalogYAxisValue: function(stick) {
		if(stick == null) {
			return 0;
		}
		if(this.deadZoneMode == flixel_input_gamepad_FlxGamepadDeadZoneMode.CIRCULAR) {
			return this.getAnalogAxisValueCircular(stick,stick.y);
		} else {
			return this.getAnalogAxisValueIndependant(stick.y);
		}
	}
	,getAnalogAxisValueCircular: function(stick,axisID) {
		if(stick == null) {
			return 0;
		}
		var xAxis = this.getAxisValue(stick.x);
		var yAxis = this.getAxisValue(stick.y);
		var vector = flixel_math_FlxVector._pool.get().set(xAxis,yAxis);
		vector._inPool = false;
		var length = Math.sqrt(vector.x * vector.x + vector.y * vector.y);
		vector.put();
		if(length > this.get_deadZone()) {
			return this.getAxisValue(axisID);
		}
		return 0;
	}
	,getAnalogAxisValueIndependant: function(axisID) {
		var axisValue = this.getAxisValue(axisID);
		if(Math.abs(axisValue) > this.get_deadZone()) {
			return axisValue;
		}
		return 0;
	}
	,handleAxisMove: function(axis,newValue,oldValue) {
		var axisValue = newValue;
		if(this.mapping.isAxisFlipped(axis)) {
			axisValue *= -1;
		}
		newValue = axisValue;
		var axisValue1 = oldValue;
		if(this.mapping.isAxisFlipped(axis)) {
			axisValue1 *= -1;
		}
		oldValue = axisValue1;
		var leftStick = this.mapping.leftStick;
		var rightStick = this.mapping.rightStick;
		var stick = leftStick != null && axis == leftStick.x || axis == leftStick.y ? leftStick : rightStick != null && axis == rightStick.x || axis == rightStick.y ? rightStick : null;
		if(stick.mode == flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL || stick.mode == flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH) {
			this.handleAxisMoveSub(stick,axis,newValue,oldValue,1.0);
			this.handleAxisMoveSub(stick,axis,newValue,oldValue,-1.0);
		}
	}
	,handleAxisMoveSub: function(stick,axis,value,oldValue,sign) {
		if(sign == null) {
			sign = 1.0;
		}
		var digitalButton = -1;
		if(axis == stick.x) {
			if(sign < 0) {
				digitalButton = stick.rawLeft;
			} else {
				digitalButton = stick.rawRight;
			}
		} else if(axis == stick.y) {
			if(sign < 0) {
				digitalButton = stick.rawUp;
			} else {
				digitalButton = stick.rawDown;
			}
		}
		var threshold = stick.digitalThreshold;
		var valueSign = value * sign;
		var oldValueSign = oldValue * sign;
		if(valueSign > threshold && oldValueSign <= threshold) {
			var btn = this.getButton(digitalButton);
			if(btn != null) {
				btn.press();
			}
		} else if(valueSign <= threshold && oldValueSign > threshold) {
			var btn1 = this.getButton(digitalButton);
			if(btn1 != null) {
				btn1.release();
			}
		}
	}
	,createMappingForModel: function(model) {
		switch(model[1]) {
		case 0:
			return new flixel_input_gamepad_mappings_LogitechMapping(this.attachment);
		case 1:
			return new flixel_input_gamepad_mappings_OUYAMapping(this.attachment);
		case 2:
			return new flixel_input_gamepad_mappings_PS4Mapping(this.attachment);
		case 3:
			return new flixel_input_gamepad_mappings_PSVitaMapping(this.attachment);
		case 4:
			return new flixel_input_gamepad_mappings_XInputMapping(this.attachment);
		case 5:
			return new flixel_input_gamepad_mappings_MayflashWiiRemoteMapping(this.attachment);
		case 6:
			return new flixel_input_gamepad_mappings_WiiRemoteMapping(this.attachment);
		case 7:
			return new flixel_input_gamepad_mappings_MFiMapping(this.attachment);
		default:
			return new flixel_input_gamepad_mappings_XInputMapping(this.attachment);
		}
	}
	,get_name: function() {
		if(this._device == null) {
			return null;
		}
		return this._device.name;
	}
	,set_model: function(Model) {
		this.model = Model;
		this.mapping = this.createMappingForModel(this.model);
		return this.model;
	}
	,set_attachment: function(Attachment) {
		this.attachment = Attachment;
		this.mapping.set_attachment(Attachment);
		return this.attachment;
	}
	,get_deadZone: function() {
		if(this.manager.globalDeadZone == null) {
			return this._deadZone;
		} else {
			return this.manager.globalDeadZone;
		}
	}
	,set_deadZone: function(deadZone) {
		return this._deadZone = deadZone;
	}
	,toString: function() {
		var value = this.id;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "id";
		_this.value = value;
		var value1 = this.model;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "model";
		_this1.value = value1;
		var value2 = this.get_deadZone();
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "deadZone";
		_this2.value = value2;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2]);
	}
	,__class__: flixel_input_gamepad_FlxGamepad
	,__properties__: {set_deadZone:"set_deadZone",get_deadZone:"get_deadZone",set_attachment:"set_attachment",set_model:"set_model",get_name:"get_name"}
};
var flixel_input_gamepad_FlxGamepadDeadZoneMode = $hxClasses["flixel.input.gamepad.FlxGamepadDeadZoneMode"] = { __ename__ : ["flixel","input","gamepad","FlxGamepadDeadZoneMode"], __constructs__ : ["INDEPENDENT_AXES","CIRCULAR"] };
flixel_input_gamepad_FlxGamepadDeadZoneMode.INDEPENDENT_AXES = ["INDEPENDENT_AXES",0];
flixel_input_gamepad_FlxGamepadDeadZoneMode.INDEPENDENT_AXES.toString = $estr;
flixel_input_gamepad_FlxGamepadDeadZoneMode.INDEPENDENT_AXES.__enum__ = flixel_input_gamepad_FlxGamepadDeadZoneMode;
flixel_input_gamepad_FlxGamepadDeadZoneMode.CIRCULAR = ["CIRCULAR",1];
flixel_input_gamepad_FlxGamepadDeadZoneMode.CIRCULAR.toString = $estr;
flixel_input_gamepad_FlxGamepadDeadZoneMode.CIRCULAR.__enum__ = flixel_input_gamepad_FlxGamepadDeadZoneMode;
flixel_input_gamepad_FlxGamepadDeadZoneMode.__empty_constructs__ = [flixel_input_gamepad_FlxGamepadDeadZoneMode.INDEPENDENT_AXES,flixel_input_gamepad_FlxGamepadDeadZoneMode.CIRCULAR];
var flixel_input_gamepad_FlxGamepadModel = $hxClasses["flixel.input.gamepad.FlxGamepadModel"] = { __ename__ : ["flixel","input","gamepad","FlxGamepadModel"], __constructs__ : ["LOGITECH","OUYA","PS4","PSVITA","XINPUT","MAYFLASH_WII_REMOTE","WII_REMOTE","MFI","UNKNOWN"] };
flixel_input_gamepad_FlxGamepadModel.LOGITECH = ["LOGITECH",0];
flixel_input_gamepad_FlxGamepadModel.LOGITECH.toString = $estr;
flixel_input_gamepad_FlxGamepadModel.LOGITECH.__enum__ = flixel_input_gamepad_FlxGamepadModel;
flixel_input_gamepad_FlxGamepadModel.OUYA = ["OUYA",1];
flixel_input_gamepad_FlxGamepadModel.OUYA.toString = $estr;
flixel_input_gamepad_FlxGamepadModel.OUYA.__enum__ = flixel_input_gamepad_FlxGamepadModel;
flixel_input_gamepad_FlxGamepadModel.PS4 = ["PS4",2];
flixel_input_gamepad_FlxGamepadModel.PS4.toString = $estr;
flixel_input_gamepad_FlxGamepadModel.PS4.__enum__ = flixel_input_gamepad_FlxGamepadModel;
flixel_input_gamepad_FlxGamepadModel.PSVITA = ["PSVITA",3];
flixel_input_gamepad_FlxGamepadModel.PSVITA.toString = $estr;
flixel_input_gamepad_FlxGamepadModel.PSVITA.__enum__ = flixel_input_gamepad_FlxGamepadModel;
flixel_input_gamepad_FlxGamepadModel.XINPUT = ["XINPUT",4];
flixel_input_gamepad_FlxGamepadModel.XINPUT.toString = $estr;
flixel_input_gamepad_FlxGamepadModel.XINPUT.__enum__ = flixel_input_gamepad_FlxGamepadModel;
flixel_input_gamepad_FlxGamepadModel.MAYFLASH_WII_REMOTE = ["MAYFLASH_WII_REMOTE",5];
flixel_input_gamepad_FlxGamepadModel.MAYFLASH_WII_REMOTE.toString = $estr;
flixel_input_gamepad_FlxGamepadModel.MAYFLASH_WII_REMOTE.__enum__ = flixel_input_gamepad_FlxGamepadModel;
flixel_input_gamepad_FlxGamepadModel.WII_REMOTE = ["WII_REMOTE",6];
flixel_input_gamepad_FlxGamepadModel.WII_REMOTE.toString = $estr;
flixel_input_gamepad_FlxGamepadModel.WII_REMOTE.__enum__ = flixel_input_gamepad_FlxGamepadModel;
flixel_input_gamepad_FlxGamepadModel.MFI = ["MFI",7];
flixel_input_gamepad_FlxGamepadModel.MFI.toString = $estr;
flixel_input_gamepad_FlxGamepadModel.MFI.__enum__ = flixel_input_gamepad_FlxGamepadModel;
flixel_input_gamepad_FlxGamepadModel.UNKNOWN = ["UNKNOWN",8];
flixel_input_gamepad_FlxGamepadModel.UNKNOWN.toString = $estr;
flixel_input_gamepad_FlxGamepadModel.UNKNOWN.__enum__ = flixel_input_gamepad_FlxGamepadModel;
flixel_input_gamepad_FlxGamepadModel.__empty_constructs__ = [flixel_input_gamepad_FlxGamepadModel.LOGITECH,flixel_input_gamepad_FlxGamepadModel.OUYA,flixel_input_gamepad_FlxGamepadModel.PS4,flixel_input_gamepad_FlxGamepadModel.PSVITA,flixel_input_gamepad_FlxGamepadModel.XINPUT,flixel_input_gamepad_FlxGamepadModel.MAYFLASH_WII_REMOTE,flixel_input_gamepad_FlxGamepadModel.WII_REMOTE,flixel_input_gamepad_FlxGamepadModel.MFI,flixel_input_gamepad_FlxGamepadModel.UNKNOWN];
var flixel_input_gamepad_FlxGamepadAttachment = $hxClasses["flixel.input.gamepad.FlxGamepadAttachment"] = { __ename__ : ["flixel","input","gamepad","FlxGamepadAttachment"], __constructs__ : ["WII_NUNCHUCK","WII_CLASSIC_CONTROLLER","NONE"] };
flixel_input_gamepad_FlxGamepadAttachment.WII_NUNCHUCK = ["WII_NUNCHUCK",0];
flixel_input_gamepad_FlxGamepadAttachment.WII_NUNCHUCK.toString = $estr;
flixel_input_gamepad_FlxGamepadAttachment.WII_NUNCHUCK.__enum__ = flixel_input_gamepad_FlxGamepadAttachment;
flixel_input_gamepad_FlxGamepadAttachment.WII_CLASSIC_CONTROLLER = ["WII_CLASSIC_CONTROLLER",1];
flixel_input_gamepad_FlxGamepadAttachment.WII_CLASSIC_CONTROLLER.toString = $estr;
flixel_input_gamepad_FlxGamepadAttachment.WII_CLASSIC_CONTROLLER.__enum__ = flixel_input_gamepad_FlxGamepadAttachment;
flixel_input_gamepad_FlxGamepadAttachment.NONE = ["NONE",2];
flixel_input_gamepad_FlxGamepadAttachment.NONE.toString = $estr;
flixel_input_gamepad_FlxGamepadAttachment.NONE.__enum__ = flixel_input_gamepad_FlxGamepadAttachment;
flixel_input_gamepad_FlxGamepadAttachment.__empty_constructs__ = [flixel_input_gamepad_FlxGamepadAttachment.WII_NUNCHUCK,flixel_input_gamepad_FlxGamepadAttachment.WII_CLASSIC_CONTROLLER,flixel_input_gamepad_FlxGamepadAttachment.NONE];
var flixel_input_gamepad_FlxGamepadAnalogStick = function(x,y,settings) {
	this.mode = flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH;
	this.digitalThreshold = 0.5;
	this.rawRight = -1;
	this.rawLeft = -1;
	this.rawDown = -1;
	this.rawUp = -1;
	this.x = x;
	this.y = y;
	if(settings == null) {
		return;
	}
	this.mode = settings.mode != null ? settings.mode : flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH;
	this.rawUp = settings.up != null ? settings.up : -1;
	this.rawDown = settings.down != null ? settings.down : -1;
	this.rawLeft = settings.left != null ? settings.left : -1;
	this.rawRight = settings.right != null ? settings.right : -1;
	this.digitalThreshold = settings.threshold != null ? settings.threshold : 0.5;
};
$hxClasses["flixel.input.gamepad.FlxGamepadAnalogStick"] = flixel_input_gamepad_FlxGamepadAnalogStick;
flixel_input_gamepad_FlxGamepadAnalogStick.__name__ = ["flixel","input","gamepad","FlxGamepadAnalogStick"];
flixel_input_gamepad_FlxGamepadAnalogStick.prototype = {
	x: null
	,y: null
	,rawUp: null
	,rawDown: null
	,rawLeft: null
	,rawRight: null
	,digitalThreshold: null
	,mode: null
	,toString: function() {
		var value = this.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "x";
		_this.value = value;
		var value1 = this.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "y";
		_this1.value = value1;
		var value2 = this.rawUp;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "rawUp";
		_this2.value = value2;
		var value3 = this.rawDown;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "rawDown";
		_this3.value = value3;
		var value4 = this.rawLeft;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "rawLeft";
		_this4.value = value4;
		var value5 = this.rawRight;
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "rawRight";
		_this5.value = value5;
		var value6 = this.digitalThreshold;
		var _this6 = flixel_util_LabelValuePair._pool.get();
		_this6.label = "digitalThreshold";
		_this6.value = value6;
		var value7 = this.mode;
		var _this7 = flixel_util_LabelValuePair._pool.get();
		_this7.label = "mode";
		_this7.value = value7;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5,_this6,_this7]);
	}
	,__class__: flixel_input_gamepad_FlxGamepadAnalogStick
};
var flixel_input_gamepad_FlxAnalogToDigitalMode = $hxClasses["flixel.input.gamepad.FlxAnalogToDigitalMode"] = { __ename__ : ["flixel","input","gamepad","FlxAnalogToDigitalMode"], __constructs__ : ["BOTH","ONLY_DIGITAL","ONLY_ANALOG"] };
flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH = ["BOTH",0];
flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH.toString = $estr;
flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH.__enum__ = flixel_input_gamepad_FlxAnalogToDigitalMode;
flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL = ["ONLY_DIGITAL",1];
flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL.toString = $estr;
flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL.__enum__ = flixel_input_gamepad_FlxAnalogToDigitalMode;
flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_ANALOG = ["ONLY_ANALOG",2];
flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_ANALOG.toString = $estr;
flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_ANALOG.__enum__ = flixel_input_gamepad_FlxAnalogToDigitalMode;
flixel_input_gamepad_FlxAnalogToDigitalMode.__empty_constructs__ = [flixel_input_gamepad_FlxAnalogToDigitalMode.BOTH,flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL,flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_ANALOG];
var flixel_input_gamepad_FlxGamepadButton = function(ID) {
	this.value = 0;
	flixel_input_FlxInput.call(this,ID);
};
$hxClasses["flixel.input.gamepad.FlxGamepadButton"] = flixel_input_gamepad_FlxGamepadButton;
flixel_input_gamepad_FlxGamepadButton.__name__ = ["flixel","input","gamepad","FlxGamepadButton"];
flixel_input_gamepad_FlxGamepadButton.__super__ = flixel_input_FlxInput;
flixel_input_gamepad_FlxGamepadButton.prototype = $extend(flixel_input_FlxInput.prototype,{
	value: null
	,__class__: flixel_input_gamepad_FlxGamepadButton
});
var flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$ = {};
$hxClasses["flixel.input.gamepad._FlxGamepadInputID.FlxGamepadInputID_Impl_"] = flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.__name__ = ["flixel","input","gamepad","_FlxGamepadInputID","FlxGamepadInputID_Impl_"];
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.fromString = function(s) {
	s = s.toUpperCase();
	var _this = flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.fromStringMap;
	if(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s)) {
		var _this1 = flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.fromStringMap;
		if(__map_reserved[s] != null) {
			return _this1.getReserved(s);
		} else {
			return _this1.h[s];
		}
	} else {
		return -1;
	}
};
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.toString = function(this1) {
	return flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.toStringMap.h[this1];
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = lime_ui_Joystick.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices1 = lime_ui_Joystick.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices1[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			switch(axis) {
			case 0:
				control = "LEFT_X";
				break;
			case 1:
				control = "LEFT_Y";
				break;
			case 2:
				control = "RIGHT_X";
				break;
			case 3:
				control = "RIGHT_Y";
				break;
			case 4:
				control = "TRIGGER_LEFT";
				break;
			case 5:
				control = "TRIGGER_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + axis + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__axis.h[axis];
		control2.value = value;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 1;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			switch(button) {
			case 0:
				control = "A";
				break;
			case 1:
				control = "B";
				break;
			case 2:
				control = "X";
				break;
			case 3:
				control = "Y";
				break;
			case 4:
				control = "BACK";
				break;
			case 5:
				control = "GUIDE";
				break;
			case 6:
				control = "START";
				break;
			case 7:
				control = "LEFT_STICK";
				break;
			case 8:
				control = "RIGHT_STICK";
				break;
			case 9:
				control = "LEFT_SHOULDER";
				break;
			case 10:
				control = "RIGHT_SHOULDER";
				break;
			case 11:
				control = "DPAD_UP";
				break;
			case 12:
				control = "DPAD_DOWN";
				break;
			case 13:
				control = "DPAD_LEFT";
				break;
			case 14:
				control = "DPAD_RIGHT";
				break;
			default:
				control = "UNKNOWN (" + button + ")";
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control2 = device.__button.h[button];
		control2.value = 0;
		control2.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var flixel_input_gamepad_FlxGamepadManager = function() {
	this._activeGamepads = [];
	this._gamepads = [];
	flixel_input_gamepad_FlxGamepadManager._gameInput.addEventListener("deviceAdded",$bind(this,this.onDeviceAdded));
	flixel_input_gamepad_FlxGamepadManager._gameInput.addEventListener("deviceRemoved",$bind(this,this.onDeviceRemoved));
	var _g1 = 0;
	var _g = openfl_ui_GameInput.numDevices;
	while(_g1 < _g) {
		var i = _g1++;
		this.addGamepad(openfl_ui_GameInput.getDeviceAt(i));
	}
};
$hxClasses["flixel.input.gamepad.FlxGamepadManager"] = flixel_input_gamepad_FlxGamepadManager;
flixel_input_gamepad_FlxGamepadManager.__name__ = ["flixel","input","gamepad","FlxGamepadManager"];
flixel_input_gamepad_FlxGamepadManager.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_gamepad_FlxGamepadManager.prototype = {
	firstActive: null
	,lastActive: null
	,numActiveGamepads: null
	,globalDeadZone: null
	,_gamepads: null
	,_activeGamepads: null
	,getByID: function(GamepadID) {
		return this._activeGamepads[GamepadID];
	}
	,removeByID: function(GamepadID) {
		var gamepad = this._gamepads[GamepadID];
		if(gamepad != null) {
			flixel_util_FlxDestroyUtil.destroy(gamepad);
			this._gamepads[GamepadID] = null;
			var i = this._activeGamepads.indexOf(gamepad);
			if(i != -1) {
				this._activeGamepads[i] = null;
			}
		}
		if(this.lastActive == gamepad) {
			this.lastActive = null;
		}
		if(this.firstActive == gamepad) {
			this.firstActive = null;
		}
	}
	,createByID: function(GamepadID,Model) {
		var gamepad = this._gamepads[GamepadID];
		if(gamepad == null) {
			gamepad = new flixel_input_gamepad_FlxGamepad(GamepadID,this,Model);
			this._gamepads[GamepadID] = gamepad;
			var nullFound = false;
			var _g1 = 0;
			var _g = this._activeGamepads.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this._activeGamepads[i] == null) {
					this._activeGamepads[i] = gamepad;
					nullFound = true;
					break;
				}
			}
			if(!nullFound) {
				this._activeGamepads.push(gamepad);
			}
		}
		this.lastActive = gamepad;
		if(this.firstActive == null) {
			this.firstActive = gamepad;
		}
		return gamepad;
	}
	,getActiveGamepadIDs: function(IDsArray) {
		if(IDsArray == null) {
			IDsArray = [];
		}
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) {
				IDsArray.push(gamepad.id);
			}
		}
		return IDsArray;
	}
	,getActiveGamepads: function(GamepadArray) {
		if(GamepadArray == null) {
			GamepadArray = [];
		}
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) {
				GamepadArray.push(gamepad);
			}
		}
		return GamepadArray;
	}
	,getFirstActiveGamepadID: function() {
		var firstActive = this.getFirstActiveGamepad();
		if(firstActive == null) {
			return -1;
		} else {
			return firstActive.id;
		}
	}
	,getFirstActiveGamepad: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) {
				return gamepad;
			}
		}
		return null;
	}
	,anyButton: function(state) {
		if(state == null) {
			state = 1;
		}
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyButton(state)) {
				return true;
			}
		}
		return false;
	}
	,anyInput: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.anyInput()) {
				return true;
			}
		}
		return false;
	}
	,anyPressed: function(buttonID) {
		return this.anyHasState(buttonID,1);
	}
	,anyJustPressed: function(buttonID) {
		return this.anyHasState(buttonID,2);
	}
	,anyJustReleased: function(buttonID) {
		return this.anyHasState(buttonID,-1);
	}
	,anyHasState: function(buttonID,state) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null && gamepad.checkStatusRaw(gamepad.mapping.getRawID(buttonID),state)) {
				return true;
			}
		}
		return false;
	}
	,anyMovedXAxis: function(RawAxisID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad == null) {
				continue;
			}
			var value = gamepad.getAnalogXAxisValue(RawAxisID);
			if(value != 0) {
				return value;
			}
		}
		return 0;
	}
	,anyMovedYAxis: function(RawAxisID) {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad == null) {
				continue;
			}
			var value = gamepad.getYAxisRaw(RawAxisID);
			if(value != 0) {
				return value;
			}
		}
		return 0;
	}
	,destroy: function() {
		this._gamepads = flixel_util_FlxDestroyUtil.destroyArray(this._gamepads);
		this.firstActive = null;
		this.lastActive = null;
		this._gamepads = null;
		flixel_input_gamepad_FlxGamepadManager._gameInput.removeEventListener("deviceAdded",$bind(this,this.onDeviceAdded));
		flixel_input_gamepad_FlxGamepadManager._gameInput.removeEventListener("deviceRemoved",$bind(this,this.onDeviceRemoved));
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) {
				gamepad.reset();
			}
		}
	}
	,onDeviceAdded: function(Event) {
		this.addGamepad(Event.device);
	}
	,onDeviceRemoved: function(Event) {
		this.removeGamepad(Event.device);
	}
	,findGamepadIndex: function(Device) {
		if(Device == null) {
			return -1;
		}
		var _g1 = 0;
		var _g = openfl_ui_GameInput.numDevices;
		while(_g1 < _g) {
			var i = _g1++;
			if(openfl_ui_GameInput.getDeviceAt(i) == Device) {
				return i;
			}
		}
		return -1;
	}
	,addGamepad: function(Device) {
		if(Device == null) {
			return;
		}
		Device.enabled = true;
		var id = this.findGamepadIndex(Device);
		if(id < 0) {
			return;
		}
		var gamepad = this.createByID(id,this.getModelFromDeviceName(Device.name));
		gamepad._device = Device;
	}
	,getModelFromDeviceName: function(name) {
		name = StringTools.replace(StringTools.replace(name.toLowerCase(),"-",""),"_","");
		if(name.indexOf("ouya") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.OUYA;
		} else if(name.indexOf("wireless controller") != -1 || name.indexOf("ps4") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.PS4;
		} else if(name.indexOf("logitech") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.LOGITECH;
		} else if(name.indexOf("xbox") != -1 && name.indexOf("360") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.XINPUT;
		} else if(name.indexOf("xinput") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.XINPUT;
		} else if(name.indexOf("nintendo rvlcnt01tr") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.WII_REMOTE;
		} else if(name.indexOf("nintendo rvlcnt01") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.WII_REMOTE;
		} else if(name.indexOf("mayflash wiimote pc adapter") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.MAYFLASH_WII_REMOTE;
		} else if(name.indexOf("mfi") != -1) {
			return flixel_input_gamepad_FlxGamepadModel.MFI;
		} else {
			return flixel_input_gamepad_FlxGamepadModel.UNKNOWN;
		}
	}
	,removeGamepad: function(Device) {
		if(Device == null) {
			return;
		}
		var _g1 = 0;
		var _g = this._gamepads.length;
		while(_g1 < _g) {
			var i = _g1++;
			var gamepad = this._gamepads[i];
			if(gamepad != null && gamepad._device == Device) {
				this.removeByID(i);
			}
		}
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) {
				gamepad.update();
			}
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,get_numActiveGamepads: function() {
		var count = 0;
		var _g = 0;
		var _g1 = this._gamepads;
		while(_g < _g1.length) {
			var gamepad = _g1[_g];
			++_g;
			if(gamepad != null) {
				++count;
			}
		}
		return count;
	}
	,__class__: flixel_input_gamepad_FlxGamepadManager
	,__properties__: {get_numActiveGamepads:"get_numActiveGamepads"}
};
var flixel_input_gamepad_id_LogitechID = function() { };
$hxClasses["flixel.input.gamepad.id.LogitechID"] = flixel_input_gamepad_id_LogitechID;
flixel_input_gamepad_id_LogitechID.__name__ = ["flixel","input","gamepad","id","LogitechID"];
var flixel_input_gamepad_id_MFiID = function() { };
$hxClasses["flixel.input.gamepad.id.MFiID"] = flixel_input_gamepad_id_MFiID;
flixel_input_gamepad_id_MFiID.__name__ = ["flixel","input","gamepad","id","MFiID"];
var flixel_input_gamepad_id_MayflashWiiRemoteID = function() { };
$hxClasses["flixel.input.gamepad.id.MayflashWiiRemoteID"] = flixel_input_gamepad_id_MayflashWiiRemoteID;
flixel_input_gamepad_id_MayflashWiiRemoteID.__name__ = ["flixel","input","gamepad","id","MayflashWiiRemoteID"];
var flixel_input_gamepad_id_OUYAID = function() { };
$hxClasses["flixel.input.gamepad.id.OUYAID"] = flixel_input_gamepad_id_OUYAID;
flixel_input_gamepad_id_OUYAID.__name__ = ["flixel","input","gamepad","id","OUYAID"];
var flixel_input_gamepad_id_PS4ID = function() { };
$hxClasses["flixel.input.gamepad.id.PS4ID"] = flixel_input_gamepad_id_PS4ID;
flixel_input_gamepad_id_PS4ID.__name__ = ["flixel","input","gamepad","id","PS4ID"];
var flixel_input_gamepad_id_PSVitaID = function() { };
$hxClasses["flixel.input.gamepad.id.PSVitaID"] = flixel_input_gamepad_id_PSVitaID;
flixel_input_gamepad_id_PSVitaID.__name__ = ["flixel","input","gamepad","id","PSVitaID"];
var flixel_input_gamepad_id_WiiRemoteID = function() { };
$hxClasses["flixel.input.gamepad.id.WiiRemoteID"] = flixel_input_gamepad_id_WiiRemoteID;
flixel_input_gamepad_id_WiiRemoteID.__name__ = ["flixel","input","gamepad","id","WiiRemoteID"];
var flixel_input_gamepad_id_XInputID = function() { };
$hxClasses["flixel.input.gamepad.id.XInputID"] = flixel_input_gamepad_id_XInputID;
flixel_input_gamepad_id_XInputID.__name__ = ["flixel","input","gamepad","id","XInputID"];
var flixel_input_gamepad_lists_FlxBaseGamepadList = function(status,gamepad) {
	this.status = status;
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxBaseGamepadList"] = flixel_input_gamepad_lists_FlxBaseGamepadList;
flixel_input_gamepad_lists_FlxBaseGamepadList.__name__ = ["flixel","input","gamepad","lists","FlxBaseGamepadList"];
flixel_input_gamepad_lists_FlxBaseGamepadList.prototype = {
	status: null
	,gamepad: null
	,check: function(id) {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(id),Status);
	}
	,checkRaw: function(id) {
		return this.gamepad.checkStatusRaw(id,this.status);
	}
	,get_ANY: function() {
		var _g = 0;
		var _g1 = this.gamepad.buttons;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button != null && this.gamepad.checkStatusRaw(button.ID,this.status)) {
				return true;
			}
		}
		return false;
	}
	,__class__: flixel_input_gamepad_lists_FlxBaseGamepadList
	,__properties__: {get_ANY:"get_ANY"}
};
var flixel_input_gamepad_lists_FlxGamepadAnalogList = function(gamepad) {
	this.value = new flixel_input_gamepad_lists_FlxGamepadAnalogValueList(gamepad);
	this.justMoved = new flixel_input_gamepad_lists_FlxGamepadAnalogStateList(2,gamepad);
	this.justReleased = new flixel_input_gamepad_lists_FlxGamepadAnalogStateList(-1,gamepad);
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadAnalogList"] = flixel_input_gamepad_lists_FlxGamepadAnalogList;
flixel_input_gamepad_lists_FlxGamepadAnalogList.__name__ = ["flixel","input","gamepad","lists","FlxGamepadAnalogList"];
flixel_input_gamepad_lists_FlxGamepadAnalogList.prototype = {
	value: null
	,justMoved: null
	,justReleased: null
	,__class__: flixel_input_gamepad_lists_FlxGamepadAnalogList
};
var flixel_input_gamepad_lists_FlxGamepadAnalogStateList = function(status,gamepad) {
	this.status = status;
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadAnalogStateList"] = flixel_input_gamepad_lists_FlxGamepadAnalogStateList;
flixel_input_gamepad_lists_FlxGamepadAnalogStateList.__name__ = ["flixel","input","gamepad","lists","FlxGamepadAnalogStateList"];
flixel_input_gamepad_lists_FlxGamepadAnalogStateList.prototype = {
	gamepad: null
	,status: null
	,get_LEFT_STICK: function() {
		return this.checkXY(19);
	}
	,get_LEFT_STICK_X: function() {
		var stick = this.gamepad.mapping.getAnalogStick(19);
		if(stick == null) {
			return false;
		} else {
			return this.gamepad.checkStatusRaw(stick.x,this.status);
		}
	}
	,get_LEFT_STICK_Y: function() {
		var stick = this.gamepad.mapping.getAnalogStick(19);
		if(stick == null) {
			return false;
		} else {
			return this.gamepad.checkStatusRaw(stick.y,this.status);
		}
	}
	,get_RIGHT_STICK: function() {
		return this.checkXY(20);
	}
	,get_RIGHT_STICK_X: function() {
		var stick = this.gamepad.mapping.getAnalogStick(20);
		if(stick == null) {
			return false;
		} else {
			return this.gamepad.checkStatusRaw(stick.x,this.status);
		}
	}
	,get_RIGHT_STICK_Y: function() {
		var stick = this.gamepad.mapping.getAnalogStick(20);
		if(stick == null) {
			return false;
		} else {
			return this.gamepad.checkStatusRaw(stick.y,this.status);
		}
	}
	,checkXY: function(id) {
		var stick = this.gamepad.mapping.getAnalogStick(id);
		if(stick == null) {
			return false;
		}
		var xVal = this.gamepad.checkStatusRaw(stick.x,this.status);
		var yVal = this.gamepad.checkStatusRaw(stick.y,this.status);
		if(xVal && yVal) {
			return true;
		}
		if(xVal) {
			var yReleased = this.gamepad.checkStatusRaw(stick.y,0);
			var yJustReleased = this.gamepad.checkStatusRaw(stick.y,-1);
			if(yReleased || yJustReleased) {
				return true;
			}
		}
		if(yVal) {
			var xReleased = this.gamepad.checkStatusRaw(stick.x,0);
			var xJustReleased = this.gamepad.checkStatusRaw(stick.x,-1);
			if(xReleased || xJustReleased) {
				return true;
			}
		}
		return false;
	}
	,checkX: function(id) {
		var stick = this.gamepad.mapping.getAnalogStick(id);
		if(stick == null) {
			return false;
		}
		return this.gamepad.checkStatusRaw(stick.x,this.status);
	}
	,checkY: function(id) {
		var stick = this.gamepad.mapping.getAnalogStick(id);
		if(stick == null) {
			return false;
		}
		return this.gamepad.checkStatusRaw(stick.y,this.status);
	}
	,checkRaw: function(RawID,Status) {
		return this.gamepad.checkStatusRaw(RawID,Status);
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadAnalogStateList
	,__properties__: {get_RIGHT_STICK_Y:"get_RIGHT_STICK_Y",get_RIGHT_STICK_X:"get_RIGHT_STICK_X",get_RIGHT_STICK:"get_RIGHT_STICK",get_LEFT_STICK_Y:"get_LEFT_STICK_Y",get_LEFT_STICK_X:"get_LEFT_STICK_X",get_LEFT_STICK:"get_LEFT_STICK"}
};
var flixel_input_gamepad_lists_FlxGamepadAnalogValueList = function(gamepad) {
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadAnalogValueList"] = flixel_input_gamepad_lists_FlxGamepadAnalogValueList;
flixel_input_gamepad_lists_FlxGamepadAnalogValueList.__name__ = ["flixel","input","gamepad","lists","FlxGamepadAnalogValueList"];
flixel_input_gamepad_lists_FlxGamepadAnalogValueList.prototype = {
	gamepad: null
	,get_LEFT_STICK_X: function() {
		var _this = this.gamepad;
		return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(19));
	}
	,get_LEFT_STICK_Y: function() {
		var _this = this.gamepad;
		return _this.getYAxisRaw(_this.mapping.getAnalogStick(19));
	}
	,get_RIGHT_STICK_X: function() {
		var _this = this.gamepad;
		return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(20));
	}
	,get_RIGHT_STICK_Y: function() {
		var _this = this.gamepad;
		return _this.getYAxisRaw(_this.mapping.getAnalogStick(20));
	}
	,get_LEFT_TRIGGER: function() {
		return this.gamepad.getAxis(17);
	}
	,get_RIGHT_TRIGGER: function() {
		return this.gamepad.getAxis(18);
	}
	,get_POINTER_X: function() {
		return this.gamepad.getAxis(28);
	}
	,get_POINTER_Y: function() {
		return this.gamepad.getAxis(29);
	}
	,getAxis: function(id) {
		return this.gamepad.getAxis(id);
	}
	,getXAxis: function(id) {
		var _this = this.gamepad;
		return _this.getAnalogXAxisValue(_this.mapping.getAnalogStick(id));
	}
	,getYAxis: function(id) {
		var _this = this.gamepad;
		return _this.getYAxisRaw(_this.mapping.getAnalogStick(id));
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadAnalogValueList
	,__properties__: {get_POINTER_Y:"get_POINTER_Y",get_POINTER_X:"get_POINTER_X",get_RIGHT_TRIGGER:"get_RIGHT_TRIGGER",get_LEFT_TRIGGER:"get_LEFT_TRIGGER",get_RIGHT_STICK_Y:"get_RIGHT_STICK_Y",get_RIGHT_STICK_X:"get_RIGHT_STICK_X",get_LEFT_STICK_Y:"get_LEFT_STICK_Y",get_LEFT_STICK_X:"get_LEFT_STICK_X"}
};
var flixel_input_gamepad_lists_FlxGamepadButtonList = function(status,gamepad) {
	flixel_input_gamepad_lists_FlxBaseGamepadList.call(this,status,gamepad);
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadButtonList"] = flixel_input_gamepad_lists_FlxGamepadButtonList;
flixel_input_gamepad_lists_FlxGamepadButtonList.__name__ = ["flixel","input","gamepad","lists","FlxGamepadButtonList"];
flixel_input_gamepad_lists_FlxGamepadButtonList.__super__ = flixel_input_gamepad_lists_FlxBaseGamepadList;
flixel_input_gamepad_lists_FlxGamepadButtonList.prototype = $extend(flixel_input_gamepad_lists_FlxBaseGamepadList.prototype,{
	get_A: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(0),Status);
	}
	,get_B: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(1),Status);
	}
	,get_X: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(2),Status);
	}
	,get_Y: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(3),Status);
	}
	,get_LEFT_SHOULDER: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(4),Status);
	}
	,get_RIGHT_SHOULDER: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(5),Status);
	}
	,get_BACK: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(6),Status);
	}
	,get_START: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(7),Status);
	}
	,get_LEFT_STICK_CLICK: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(8),Status);
	}
	,get_RIGHT_STICK_CLICK: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(9),Status);
	}
	,get_GUIDE: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(10),Status);
	}
	,get_DPAD_UP: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(11),Status);
	}
	,get_DPAD_DOWN: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(12),Status);
	}
	,get_DPAD_LEFT: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(13),Status);
	}
	,get_DPAD_RIGHT: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(14),Status);
	}
	,get_LEFT_TRIGGER: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(17),Status);
	}
	,get_RIGHT_TRIGGER: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(18),Status);
	}
	,get_EXTRA_0: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(30),Status);
	}
	,get_EXTRA_1: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(31),Status);
	}
	,get_EXTRA_2: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(32),Status);
	}
	,get_EXTRA_3: function() {
		var _this = this.gamepad;
		var Status = this.status;
		return _this.checkStatusRaw(_this.mapping.getRawID(33),Status);
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadButtonList
	,__properties__: $extend(flixel_input_gamepad_lists_FlxBaseGamepadList.prototype.__properties__,{get_EXTRA_3:"get_EXTRA_3",get_EXTRA_2:"get_EXTRA_2",get_EXTRA_1:"get_EXTRA_1",get_EXTRA_0:"get_EXTRA_0",get_RIGHT_TRIGGER:"get_RIGHT_TRIGGER",get_LEFT_TRIGGER:"get_LEFT_TRIGGER",get_DPAD_RIGHT:"get_DPAD_RIGHT",get_DPAD_LEFT:"get_DPAD_LEFT",get_DPAD_DOWN:"get_DPAD_DOWN",get_DPAD_UP:"get_DPAD_UP",get_GUIDE:"get_GUIDE",get_RIGHT_STICK_CLICK:"get_RIGHT_STICK_CLICK",get_LEFT_STICK_CLICK:"get_LEFT_STICK_CLICK",get_START:"get_START",get_BACK:"get_BACK",get_RIGHT_SHOULDER:"get_RIGHT_SHOULDER",get_LEFT_SHOULDER:"get_LEFT_SHOULDER",get_Y:"get_Y",get_X:"get_X",get_B:"get_B",get_A:"get_A"})
});
var flixel_input_gamepad_lists_FlxGamepadMotionValueList = function(gamepad) {
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadMotionValueList"] = flixel_input_gamepad_lists_FlxGamepadMotionValueList;
flixel_input_gamepad_lists_FlxGamepadMotionValueList.__name__ = ["flixel","input","gamepad","lists","FlxGamepadMotionValueList"];
flixel_input_gamepad_lists_FlxGamepadMotionValueList.prototype = {
	gamepad: null
	,get_TILT_PITCH: function() {
		if(!this.gamepad.mapping.supportsMotion) {
			return 0;
		} else {
			return this.gamepad.getAxis(26);
		}
	}
	,get_TILT_ROLL: function() {
		if(!this.gamepad.mapping.supportsMotion) {
			return 0;
		} else {
			return this.gamepad.getAxis(27);
		}
	}
	,getAxis: function(id) {
		if(!this.gamepad.mapping.supportsMotion) {
			return 0;
		}
		return this.gamepad.getAxis(id);
	}
	,get_isSupported: function() {
		return this.gamepad.mapping.supportsMotion;
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadMotionValueList
	,__properties__: {get_TILT_ROLL:"get_TILT_ROLL",get_TILT_PITCH:"get_TILT_PITCH",get_isSupported:"get_isSupported"}
};
var flixel_input_gamepad_lists_FlxGamepadPointerValueList = function(gamepad) {
	this.gamepad = gamepad;
};
$hxClasses["flixel.input.gamepad.lists.FlxGamepadPointerValueList"] = flixel_input_gamepad_lists_FlxGamepadPointerValueList;
flixel_input_gamepad_lists_FlxGamepadPointerValueList.__name__ = ["flixel","input","gamepad","lists","FlxGamepadPointerValueList"];
flixel_input_gamepad_lists_FlxGamepadPointerValueList.prototype = {
	gamepad: null
	,get_X: function() {
		if(!this.gamepad.mapping.supportsPointer) {
			return 0;
		} else {
			return this.gamepad.getAxis(28);
		}
	}
	,get_Y: function() {
		if(!this.gamepad.mapping.supportsPointer) {
			return 0;
		} else {
			return this.gamepad.getAxis(29);
		}
	}
	,getAxis: function(id) {
		if(!this.gamepad.mapping.supportsPointer) {
			return 0;
		}
		return this.gamepad.getAxis(id);
	}
	,get_isSupported: function() {
		return this.gamepad.mapping.supportsPointer;
	}
	,__class__: flixel_input_gamepad_lists_FlxGamepadPointerValueList
	,__properties__: {get_Y:"get_Y",get_X:"get_X",get_isSupported:"get_isSupported"}
};
var flixel_input_gamepad_mappings_FlxGamepadMapping = function(attachment) {
	this.attachment = flixel_input_gamepad_FlxGamepadAttachment.NONE;
	this.supportsPointer = false;
	this.supportsMotion = false;
	if(attachment != null) {
		this.set_attachment(attachment);
	}
	this.initValues();
};
$hxClasses["flixel.input.gamepad.mappings.FlxGamepadMapping"] = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_FlxGamepadMapping.__name__ = ["flixel","input","gamepad","mappings","FlxGamepadMapping"];
flixel_input_gamepad_mappings_FlxGamepadMapping.prototype = {
	supportsMotion: null
	,supportsPointer: null
	,leftStick: null
	,rightStick: null
	,attachment: null
	,manufacturer: null
	,initValues: function() {
	}
	,getAnalogStick: function(ID) {
		switch(ID) {
		case 19:
			return this.leftStick;
		case 20:
			return this.rightStick;
		default:
			return null;
		}
	}
	,getID: function(rawID) {
		return -1;
	}
	,getRawID: function(ID) {
		return -1;
	}
	,isAxisForMotion: function(ID) {
		return false;
	}
	,isAxisFlipped: function(axisID) {
		return false;
	}
	,set_attachment: function(attachment) {
		return this.attachment = attachment;
	}
	,__class__: flixel_input_gamepad_mappings_FlxGamepadMapping
	,__properties__: {set_attachment:"set_attachment"}
};
var flixel_input_gamepad_mappings_Manufacturer = $hxClasses["flixel.input.gamepad.mappings.Manufacturer"] = { __ename__ : ["flixel","input","gamepad","mappings","Manufacturer"], __constructs__ : ["GooglePepper","AdobeWindows","Unknown"] };
flixel_input_gamepad_mappings_Manufacturer.GooglePepper = ["GooglePepper",0];
flixel_input_gamepad_mappings_Manufacturer.GooglePepper.toString = $estr;
flixel_input_gamepad_mappings_Manufacturer.GooglePepper.__enum__ = flixel_input_gamepad_mappings_Manufacturer;
flixel_input_gamepad_mappings_Manufacturer.AdobeWindows = ["AdobeWindows",1];
flixel_input_gamepad_mappings_Manufacturer.AdobeWindows.toString = $estr;
flixel_input_gamepad_mappings_Manufacturer.AdobeWindows.__enum__ = flixel_input_gamepad_mappings_Manufacturer;
flixel_input_gamepad_mappings_Manufacturer.Unknown = ["Unknown",2];
flixel_input_gamepad_mappings_Manufacturer.Unknown.toString = $estr;
flixel_input_gamepad_mappings_Manufacturer.Unknown.__enum__ = flixel_input_gamepad_mappings_Manufacturer;
flixel_input_gamepad_mappings_Manufacturer.__empty_constructs__ = [flixel_input_gamepad_mappings_Manufacturer.GooglePepper,flixel_input_gamepad_mappings_Manufacturer.AdobeWindows,flixel_input_gamepad_mappings_Manufacturer.Unknown];
flixel_input_gamepad_mappings_Manufacturer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:MemberName"]}};
var flixel_input_gamepad_mappings_LogitechMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.LogitechMapping"] = flixel_input_gamepad_mappings_LogitechMapping;
flixel_input_gamepad_mappings_LogitechMapping.__name__ = ["flixel","input","gamepad","mappings","LogitechMapping"];
flixel_input_gamepad_mappings_LogitechMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_LogitechMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case -5:
			return 10;
		case 0:
			return 2;
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 17;
		case 7:
			return 18;
		case 8:
			return 6;
		case 9:
			return 7;
		case 10:
			return 8;
		case 11:
			return 9;
		case 16:
			return 11;
		case 17:
			return 12;
		case 18:
			return 13;
		case 19:
			return 14;
		default:
			if(rawID == this.leftStick.rawUp) {
				return 34;
			} else if(rawID == this.leftStick.rawDown) {
				return 36;
			} else if(rawID == this.leftStick.rawLeft) {
				return 37;
			} else if(rawID == this.leftStick.rawRight) {
				return 35;
			} else if(rawID == this.rightStick.rawUp) {
				return 38;
			} else if(rawID == this.rightStick.rawDown) {
				return 40;
			} else if(rawID == this.rightStick.rawLeft) {
				return 41;
			} else if(rawID == this.rightStick.rawRight) {
				return 39;
			} else {
				return -1;
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 1;
		case 1:
			return 2;
		case 2:
			return 0;
		case 3:
			return 3;
		case 4:
			return 4;
		case 5:
			return 5;
		case 6:
			return 8;
		case 7:
			return 9;
		case 8:
			return 10;
		case 9:
			return 11;
		case 10:
			return -5;
		case 11:
			return 16;
		case 12:
			return 17;
		case 13:
			return 18;
		case 14:
			return 19;
		case 17:
			return 6;
		case 18:
			return 7;
		case 34:
			return flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,__class__: flixel_input_gamepad_mappings_LogitechMapping
});
var flixel_input_gamepad_mappings_MFiMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.MFiMapping"] = flixel_input_gamepad_mappings_MFiMapping;
flixel_input_gamepad_mappings_MFiMapping.__name__ = ["flixel","input","gamepad","mappings","MFiMapping"];
flixel_input_gamepad_mappings_MFiMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_MFiMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 6;
		case 11:
			return 10;
		case 12:
			return 7;
		case 13:
			return 8;
		case 14:
			return 9;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		default:
			if(rawID == this.leftStick.rawUp) {
				return 34;
			} else if(rawID == this.leftStick.rawDown) {
				return 36;
			} else if(rawID == this.leftStick.rawLeft) {
				return 37;
			} else if(rawID == this.leftStick.rawRight) {
				return 35;
			} else if(rawID == this.rightStick.rawUp) {
				return 38;
			} else if(rawID == this.rightStick.rawDown) {
				return 40;
			} else if(rawID == this.rightStick.rawLeft) {
				return 41;
			} else if(rawID == this.rightStick.rawRight) {
				return 39;
			} else {
				return -1;
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 10;
		case 7:
			return 12;
		case 8:
			return 13;
		case 9:
			return 14;
		case 10:
			return 11;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 17:
			return 4;
		case 18:
			return 5;
		case 34:
			return flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,__class__: flixel_input_gamepad_mappings_MFiMapping
});
var flixel_input_gamepad_mappings_MayflashWiiRemoteMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.MayflashWiiRemoteMapping"] = flixel_input_gamepad_mappings_MayflashWiiRemoteMapping;
flixel_input_gamepad_mappings_MayflashWiiRemoteMapping.__name__ = ["flixel","input","gamepad","mappings","MayflashWiiRemoteMapping"];
flixel_input_gamepad_mappings_MayflashWiiRemoteMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_MayflashWiiRemoteMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.supportsPointer = true;
	}
	,getID: function(rawID) {
		var _g = this.attachment;
		switch(_g[1]) {
		case 0:
			return this.getIDNunchuk(rawID);
		case 1:
			return this.getIDClassicController(rawID);
		case 2:
			return this.getIDDefault(rawID);
		}
	}
	,getIDClassicController: function(rawID) {
		switch(rawID) {
		case 4:
			return 11;
		case 5:
			return 12;
		case 6:
			return 13;
		case 7:
			return 14;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 0;
		case 11:
			return 1;
		case 12:
			return 17;
		case 13:
			return 18;
		case 14:
			return 4;
		case 15:
			return 5;
		case 16:
			return 6;
		case 17:
			return 7;
		case 19:
			return 10;
		default:
			if(rawID == this.leftStick.rawUp) {
				return 34;
			} else if(rawID == this.leftStick.rawDown) {
				return 36;
			} else if(rawID == this.leftStick.rawLeft) {
				return 37;
			} else if(rawID == this.leftStick.rawRight) {
				return 35;
			} else if(rawID == this.rightStick.rawUp) {
				return 38;
			} else if(rawID == this.rightStick.rawDown) {
				return 40;
			} else if(rawID == this.rightStick.rawLeft) {
				return 41;
			} else if(rawID == this.rightStick.rawRight) {
				return 39;
			} else {
				return -1;
			}
		}
	}
	,getIDNunchuk: function(rawID) {
		switch(rawID) {
		case 4:
			return 11;
		case 5:
			return 12;
		case 6:
			return 13;
		case 7:
			return 14;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 0;
		case 11:
			return 1;
		case 12:
			return 6;
		case 13:
			return 7;
		case 14:
			return 17;
		case 15:
			return 4;
		case 19:
			return 10;
		default:
			return -1;
		}
	}
	,getIDDefault: function(rawID) {
		switch(rawID) {
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 0;
		case 11:
			return 1;
		case 12:
			return 6;
		case 13:
			return 7;
		case 19:
			return 10;
		case 22:
			return 11;
		case 23:
			return 12;
		case 24:
			return 13;
		case 25:
			return 14;
		default:
			return -1;
		}
	}
	,getRawID: function(ID) {
		var _g = this.attachment;
		switch(_g[1]) {
		case 0:
			return this.getRawNunchuk(ID);
		case 1:
			return this.getRawClassicController(ID);
		case 2:
			return this.getRawDefault(ID);
		}
	}
	,getRawClassicController: function(ID) {
		switch(ID) {
		case 0:
			return 10;
		case 1:
			return 11;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 14;
		case 5:
			return 15;
		case 6:
			return 16;
		case 7:
			return 17;
		case 10:
			return 19;
		case 11:
			return 4;
		case 12:
			return 5;
		case 13:
			return 6;
		case 14:
			return 7;
		case 17:
			return 12;
		case 18:
			return 13;
		case 30:
			return -1;
		case 31:
			return -1;
		case 34:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return this.getRawDefault(ID);
		}
	}
	,getRawNunchuk: function(ID) {
		switch(ID) {
		case 0:
			return 10;
		case 1:
			return 11;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 6:
			return 12;
		case 7:
			return 13;
		case 10:
			return 19;
		case 11:
			return 4;
		case 12:
			return 5;
		case 13:
			return 6;
		case 14:
			return 7;
		case 17:
			return 14;
		case 28:
			return 2;
		case 29:
			return 3;
		case 34:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getRawDefault: function(ID) {
		switch(ID) {
		case 0:
			return 10;
		case 1:
			return 11;
		case 2:
			return 8;
		case 3:
			return 9;
		case 6:
			return 12;
		case 7:
			return 13;
		case 10:
			return 19;
		case 11:
			return 22;
		case 12:
			return 23;
		case 13:
			return 24;
		case 14:
			return 25;
		default:
			return -1;
		}
	}
	,set_attachment: function(attachment) {
		var tmp;
		switch(attachment[1]) {
		case 0:case 1:
			tmp = flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK;
			break;
		case 2:
			tmp = flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_DPAD;
			break;
		}
		this.leftStick = tmp;
		this.rightStick = attachment[1] == 1 ? flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK : null;
		return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.set_attachment.call(this,attachment);
	}
	,__class__: flixel_input_gamepad_mappings_MayflashWiiRemoteMapping
});
var flixel_input_gamepad_mappings_OUYAMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.OUYAMapping"] = flixel_input_gamepad_mappings_OUYAMapping;
flixel_input_gamepad_mappings_OUYAMapping.__name__ = ["flixel","input","gamepad","mappings","OUYAMapping"];
flixel_input_gamepad_mappings_OUYAMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_OUYAMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 10;
		case 3:
			return 2;
		case 4:
			return 3;
		case 6:
			return 4;
		case 7:
			return 5;
		case 8:
			return 17;
		case 9:
			return 18;
		case 10:
			return 8;
		case 11:
			return 9;
		case 13:
			return 13;
		case 14:
			return 14;
		case 15:
			return 12;
		case 16:
			return 11;
		default:
			if(rawID == this.leftStick.rawUp) {
				return 34;
			} else if(rawID == this.leftStick.rawDown) {
				return 36;
			} else if(rawID == this.leftStick.rawLeft) {
				return 37;
			} else if(rawID == this.leftStick.rawRight) {
				return 35;
			} else if(rawID == this.rightStick.rawUp) {
				return 38;
			} else if(rawID == this.rightStick.rawDown) {
				return 40;
			} else if(rawID == this.rightStick.rawLeft) {
				return 41;
			} else if(rawID == this.rightStick.rawRight) {
				return 39;
			} else {
				return -1;
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 3;
		case 3:
			return 4;
		case 4:
			return 6;
		case 5:
			return 7;
		case 8:
			return 10;
		case 9:
			return 11;
		case 10:
			return 2;
		case 11:
			return 16;
		case 12:
			return 15;
		case 13:
			return 13;
		case 14:
			return 14;
		case 17:
			return 8;
		case 18:
			return 9;
		case 34:
			return flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,__class__: flixel_input_gamepad_mappings_OUYAMapping
});
var flixel_input_gamepad_mappings_PS4Mapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.PS4Mapping"] = flixel_input_gamepad_mappings_PS4Mapping;
flixel_input_gamepad_mappings_PS4Mapping.__name__ = ["flixel","input","gamepad","mappings","PS4Mapping"];
flixel_input_gamepad_mappings_PS4Mapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_PS4Mapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 6;
		case 11:
			return 10;
		case 12:
			return 7;
		case 13:
			return 8;
		case 14:
			return 9;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		default:
			if(rawID == this.leftStick.rawUp) {
				return 34;
			} else if(rawID == this.leftStick.rawDown) {
				return 36;
			} else if(rawID == this.leftStick.rawLeft) {
				return 37;
			} else if(rawID == this.leftStick.rawRight) {
				return 35;
			} else if(rawID == this.rightStick.rawUp) {
				return 38;
			} else if(rawID == this.rightStick.rawDown) {
				return 40;
			} else if(rawID == this.rightStick.rawLeft) {
				return 41;
			} else if(rawID == this.rightStick.rawRight) {
				return 39;
			} else {
				return -1;
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 10;
		case 7:
			return 12;
		case 8:
			return 13;
		case 9:
			return 14;
		case 10:
			return 11;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 17:
			return 4;
		case 18:
			return 5;
		case 34:
			return flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,__class__: flixel_input_gamepad_mappings_PS4Mapping
});
var flixel_input_gamepad_mappings_PSVitaMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.PSVitaMapping"] = flixel_input_gamepad_mappings_PSVitaMapping;
flixel_input_gamepad_mappings_PSVitaMapping.__name__ = ["flixel","input","gamepad","mappings","PSVitaMapping"];
flixel_input_gamepad_mappings_PSVitaMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_PSVitaMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case 6:
			return 0;
		case 7:
			return 1;
		case 8:
			return 2;
		case 9:
			return 3;
		case 10:
			return 6;
		case 12:
			return 7;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		default:
			if(rawID == this.leftStick.rawUp) {
				return 34;
			} else if(rawID == this.leftStick.rawDown) {
				return 34;
			} else if(rawID == this.leftStick.rawLeft) {
				return 37;
			} else if(rawID == this.leftStick.rawRight) {
				return 35;
			} else if(rawID == this.rightStick.rawUp) {
				return 38;
			} else if(rawID == this.rightStick.rawDown) {
				return 40;
			} else if(rawID == this.rightStick.rawLeft) {
				return 41;
			} else if(rawID == this.rightStick.rawRight) {
				return 39;
			} else {
				return -1;
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 10;
		case 7:
			return 12;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 34:
			return flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,isAxisFlipped: function(axisID) {
		if(axisID != flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK.y) {
			return axisID == flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK.y;
		} else {
			return true;
		}
	}
	,__class__: flixel_input_gamepad_mappings_PSVitaMapping
});
var flixel_input_gamepad_mappings_WiiRemoteMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.WiiRemoteMapping"] = flixel_input_gamepad_mappings_WiiRemoteMapping;
flixel_input_gamepad_mappings_WiiRemoteMapping.__name__ = ["flixel","input","gamepad","mappings","WiiRemoteMapping"];
flixel_input_gamepad_mappings_WiiRemoteMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_WiiRemoteMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.supportsMotion = true;
		this.supportsPointer = false;
	}
	,getID: function(rawID) {
		var _g = this.attachment;
		switch(_g[1]) {
		case 0:
			return this.getIDNunchuk(rawID);
		case 1:
			return this.getIDClassicController(rawID);
		case 2:
			return this.getIDDefault(rawID);
		}
	}
	,getIDClassicController: function(rawID) {
		switch(rawID) {
		case 5:
			return 11;
		case 6:
			return 12;
		case 7:
			return 13;
		case 8:
			return 14;
		case 9:
			return 1;
		case 10:
			return 0;
		case 11:
			return 2;
		case 12:
			return 3;
		case 13:
			return 17;
		case 14:
			return 18;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 7;
		case 18:
			return 6;
		case 19:
			return 10;
		case 20:
			return 30;
		case 21:
			return 31;
		default:
			if(rawID == this.leftStick.rawUp) {
				return 34;
			} else if(rawID == this.leftStick.rawDown) {
				return 36;
			} else if(rawID == this.leftStick.rawLeft) {
				return 37;
			} else if(rawID == this.leftStick.rawRight) {
				return 35;
			} else if(rawID == this.rightStick.rawUp) {
				return 38;
			} else if(rawID == this.rightStick.rawDown) {
				return 40;
			} else if(rawID == this.rightStick.rawLeft) {
				return 41;
			} else if(rawID == this.rightStick.rawRight) {
				return 39;
			} else {
				return -1;
			}
		}
	}
	,getIDNunchuk: function(rawID) {
		switch(rawID) {
		case 5:
			return 11;
		case 6:
			return 12;
		case 7:
			return 13;
		case 8:
			return 14;
		case 9:
			return 0;
		case 10:
			return 1;
		case 11:
			return 4;
		case 12:
			return 17;
		case 13:
			return 2;
		case 14:
			return 3;
		case 15:
			return 7;
		case 16:
			return 6;
		case 17:
			return 10;
		default:
			return -1;
		}
	}
	,getIDDefault: function(rawID) {
		switch(rawID) {
		case 9:
			return 2;
		case 10:
			return 3;
		case 11:
			return 0;
		case 12:
			return 1;
		case 13:
			return 7;
		case 14:
			return 6;
		case 15:
			return 10;
		case 22:
			return 11;
		case 23:
			return 12;
		case 24:
			return 13;
		case 25:
			return 14;
		default:
			return -1;
		}
	}
	,getRawID: function(ID) {
		var _g = this.attachment;
		switch(_g[1]) {
		case 0:
			return this.getRawNunchuk(ID);
		case 1:
			return this.getRawClassicController(ID);
		case 2:
			return this.getRawDefault(ID);
		}
	}
	,getRawClassicController: function(ID) {
		switch(ID) {
		case 0:
			return 10;
		case 1:
			return 9;
		case 2:
			return 11;
		case 3:
			return 12;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 18;
		case 7:
			return 17;
		case 10:
			return 19;
		case 11:
			return 5;
		case 12:
			return 6;
		case 13:
			return 7;
		case 14:
			return 8;
		case 17:
			return 13;
		case 18:
			return 14;
		case 30:
			return 20;
		case 31:
			return 21;
		case 34:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getRawNunchuk: function(ID) {
		switch(ID) {
		case 0:
			return 9;
		case 1:
			return 10;
		case 2:
			return 13;
		case 3:
			return 14;
		case 4:
			return 11;
		case 6:
			return 16;
		case 7:
			return 15;
		case 10:
			return 17;
		case 11:
			return 5;
		case 12:
			return 6;
		case 13:
			return 7;
		case 14:
			return 8;
		case 17:
			return 12;
		case 26:
			return 3;
		case 27:
			return 2;
		case 34:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,getRawDefault: function(ID) {
		switch(ID) {
		case 0:
			return 11;
		case 1:
			return 12;
		case 2:
			return 9;
		case 3:
			return 10;
		case 6:
			return 14;
		case 7:
			return 13;
		case 10:
			return 15;
		case 11:
			return 22;
		case 12:
			return 23;
		case 13:
			return 24;
		case 14:
			return 25;
		case 26:
			return 2;
		case 27:
			return 3;
		default:
			return -1;
		}
	}
	,isAxisForMotion: function(ID) {
		if(this.attachment == flixel_input_gamepad_FlxGamepadAttachment.NONE) {
			if(ID == 2 || ID == 3) {
				return true;
			}
		} else if(this.attachment == flixel_input_gamepad_FlxGamepadAttachment.WII_NUNCHUCK) {
			if(ID == 3 || ID == 2) {
				return true;
			}
		}
		return false;
	}
	,isAxisFlipped: function(axisID) {
		return axisID == 4;
	}
	,set_attachment: function(attachment) {
		var tmp;
		switch(attachment[1]) {
		case 0:case 1:
			tmp = flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK;
			break;
		case 2:
			tmp = flixel_input_gamepad_id_WiiRemoteID.REMOTE_DPAD;
			break;
		}
		this.leftStick = tmp;
		this.rightStick = attachment[1] == 1 ? flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK : null;
		return flixel_input_gamepad_mappings_FlxGamepadMapping.prototype.set_attachment.call(this,attachment);
	}
	,__class__: flixel_input_gamepad_mappings_WiiRemoteMapping
});
var flixel_input_gamepad_mappings_XInputMapping = function(attachment) {
	flixel_input_gamepad_mappings_FlxGamepadMapping.call(this,attachment);
};
$hxClasses["flixel.input.gamepad.mappings.XInputMapping"] = flixel_input_gamepad_mappings_XInputMapping;
flixel_input_gamepad_mappings_XInputMapping.__name__ = ["flixel","input","gamepad","mappings","XInputMapping"];
flixel_input_gamepad_mappings_XInputMapping.__super__ = flixel_input_gamepad_mappings_FlxGamepadMapping;
flixel_input_gamepad_mappings_XInputMapping.prototype = $extend(flixel_input_gamepad_mappings_FlxGamepadMapping.prototype,{
	initValues: function() {
		this.leftStick = flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK;
		this.rightStick = flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK;
	}
	,getID: function(rawID) {
		switch(rawID) {
		case -1:
			return 10;
		case 4:
			return 17;
		case 5:
			return 18;
		case 6:
			return 1;
		case 7:
			return 0;
		case 8:
			return 3;
		case 9:
			return 2;
		case 10:
			return 6;
		case 12:
			return 7;
		case 13:
			return 8;
		case 14:
			return 9;
		case 15:
			return 4;
		case 16:
			return 5;
		case 17:
			return 11;
		case 18:
			return 12;
		case 19:
			return 13;
		case 20:
			return 14;
		default:
			if(rawID == this.leftStick.rawUp) {
				return 34;
			} else if(rawID == this.leftStick.rawDown) {
				return 36;
			} else if(rawID == this.leftStick.rawLeft) {
				return 37;
			} else if(rawID == this.leftStick.rawRight) {
				return 35;
			} else if(rawID == this.rightStick.rawUp) {
				return 38;
			} else if(rawID == this.rightStick.rawDown) {
				return 40;
			} else if(rawID == this.rightStick.rawLeft) {
				return 41;
			} else if(rawID == this.rightStick.rawRight) {
				return 39;
			} else {
				return -1;
			}
		}
	}
	,getRawID: function(ID) {
		switch(ID) {
		case 0:
			return 6;
		case 1:
			return 7;
		case 2:
			return 8;
		case 3:
			return 9;
		case 4:
			return 15;
		case 5:
			return 16;
		case 6:
			return 10;
		case 7:
			return 12;
		case 8:
			return 13;
		case 9:
			return 14;
		case 10:
			return -1;
		case 11:
			return 17;
		case 12:
			return 18;
		case 13:
			return 19;
		case 14:
			return 20;
		case 17:
			return 4;
		case 18:
			return 5;
		case 34:
			return flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK.rawUp;
		case 35:
			return flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK.rawRight;
		case 36:
			return flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK.rawDown;
		case 37:
			return flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK.rawLeft;
		case 38:
			return flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK.rawUp;
		case 39:
			return flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK.rawRight;
		case 40:
			return flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK.rawDown;
		case 41:
			return flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK.rawLeft;
		default:
			return -1;
		}
	}
	,__class__: flixel_input_gamepad_mappings_XInputMapping
});
var flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$ = {};
$hxClasses["flixel.input.keyboard._FlxKey.FlxKey_Impl_"] = flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.__name__ = ["flixel","input","keyboard","_FlxKey","FlxKey_Impl_"];
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.fromString = function(s) {
	s = s.toUpperCase();
	var _this = flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.fromStringMap;
	if(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s)) {
		var _this1 = flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.fromStringMap;
		if(__map_reserved[s] != null) {
			return _this1.getReserved(s);
		} else {
			return _this1.h[s];
		}
	} else {
		return -1;
	}
};
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.toString = function(this1) {
	return flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.toStringMap.h[this1];
};
var flixel_input_keyboard_FlxKeyList = function(status,keyManager) {
	flixel_input_FlxBaseKeyList.call(this,status,keyManager);
};
$hxClasses["flixel.input.keyboard.FlxKeyList"] = flixel_input_keyboard_FlxKeyList;
flixel_input_keyboard_FlxKeyList.__name__ = ["flixel","input","keyboard","FlxKeyList"];
flixel_input_keyboard_FlxKeyList.__super__ = flixel_input_FlxBaseKeyList;
flixel_input_keyboard_FlxKeyList.prototype = $extend(flixel_input_FlxBaseKeyList.prototype,{
	get_A: function() {
		return this.keyManager.checkStatus(65,this.status);
	}
	,get_B: function() {
		return this.keyManager.checkStatus(66,this.status);
	}
	,get_C: function() {
		return this.keyManager.checkStatus(67,this.status);
	}
	,get_D: function() {
		return this.keyManager.checkStatus(68,this.status);
	}
	,get_E: function() {
		return this.keyManager.checkStatus(69,this.status);
	}
	,get_F: function() {
		return this.keyManager.checkStatus(70,this.status);
	}
	,get_G: function() {
		return this.keyManager.checkStatus(71,this.status);
	}
	,get_H: function() {
		return this.keyManager.checkStatus(72,this.status);
	}
	,get_I: function() {
		return this.keyManager.checkStatus(73,this.status);
	}
	,get_J: function() {
		return this.keyManager.checkStatus(74,this.status);
	}
	,get_K: function() {
		return this.keyManager.checkStatus(75,this.status);
	}
	,get_L: function() {
		return this.keyManager.checkStatus(76,this.status);
	}
	,get_M: function() {
		return this.keyManager.checkStatus(77,this.status);
	}
	,get_N: function() {
		return this.keyManager.checkStatus(78,this.status);
	}
	,get_O: function() {
		return this.keyManager.checkStatus(79,this.status);
	}
	,get_P: function() {
		return this.keyManager.checkStatus(80,this.status);
	}
	,get_Q: function() {
		return this.keyManager.checkStatus(81,this.status);
	}
	,get_R: function() {
		return this.keyManager.checkStatus(82,this.status);
	}
	,get_S: function() {
		return this.keyManager.checkStatus(83,this.status);
	}
	,get_T: function() {
		return this.keyManager.checkStatus(84,this.status);
	}
	,get_U: function() {
		return this.keyManager.checkStatus(85,this.status);
	}
	,get_V: function() {
		return this.keyManager.checkStatus(86,this.status);
	}
	,get_W: function() {
		return this.keyManager.checkStatus(87,this.status);
	}
	,get_X: function() {
		return this.keyManager.checkStatus(88,this.status);
	}
	,get_Y: function() {
		return this.keyManager.checkStatus(89,this.status);
	}
	,get_Z: function() {
		return this.keyManager.checkStatus(90,this.status);
	}
	,get_ZERO: function() {
		return this.keyManager.checkStatus(48,this.status);
	}
	,get_ONE: function() {
		return this.keyManager.checkStatus(49,this.status);
	}
	,get_TWO: function() {
		return this.keyManager.checkStatus(50,this.status);
	}
	,get_THREE: function() {
		return this.keyManager.checkStatus(51,this.status);
	}
	,get_FOUR: function() {
		return this.keyManager.checkStatus(52,this.status);
	}
	,get_FIVE: function() {
		return this.keyManager.checkStatus(53,this.status);
	}
	,get_SIX: function() {
		return this.keyManager.checkStatus(54,this.status);
	}
	,get_SEVEN: function() {
		return this.keyManager.checkStatus(55,this.status);
	}
	,get_EIGHT: function() {
		return this.keyManager.checkStatus(56,this.status);
	}
	,get_NINE: function() {
		return this.keyManager.checkStatus(57,this.status);
	}
	,get_PAGEUP: function() {
		return this.keyManager.checkStatus(33,this.status);
	}
	,get_PAGEDOWN: function() {
		return this.keyManager.checkStatus(34,this.status);
	}
	,get_HOME: function() {
		return this.keyManager.checkStatus(36,this.status);
	}
	,get_END: function() {
		return this.keyManager.checkStatus(35,this.status);
	}
	,get_INSERT: function() {
		return this.keyManager.checkStatus(45,this.status);
	}
	,get_ESCAPE: function() {
		return this.keyManager.checkStatus(27,this.status);
	}
	,get_MINUS: function() {
		return this.keyManager.checkStatus(189,this.status);
	}
	,get_PLUS: function() {
		return this.keyManager.checkStatus(187,this.status);
	}
	,get_DELETE: function() {
		return this.keyManager.checkStatus(46,this.status);
	}
	,get_BACKSPACE: function() {
		return this.keyManager.checkStatus(8,this.status);
	}
	,get_LBRACKET: function() {
		return this.keyManager.checkStatus(219,this.status);
	}
	,get_RBRACKET: function() {
		return this.keyManager.checkStatus(221,this.status);
	}
	,get_BACKSLASH: function() {
		return this.keyManager.checkStatus(220,this.status);
	}
	,get_CAPSLOCK: function() {
		return this.keyManager.checkStatus(20,this.status);
	}
	,get_SEMICOLON: function() {
		return this.keyManager.checkStatus(186,this.status);
	}
	,get_QUOTE: function() {
		return this.keyManager.checkStatus(222,this.status);
	}
	,get_ENTER: function() {
		return this.keyManager.checkStatus(13,this.status);
	}
	,get_SHIFT: function() {
		return this.keyManager.checkStatus(16,this.status);
	}
	,get_COMMA: function() {
		return this.keyManager.checkStatus(188,this.status);
	}
	,get_PERIOD: function() {
		return this.keyManager.checkStatus(190,this.status);
	}
	,get_SLASH: function() {
		return this.keyManager.checkStatus(191,this.status);
	}
	,get_GRAVEACCENT: function() {
		return this.keyManager.checkStatus(192,this.status);
	}
	,get_CONTROL: function() {
		return this.keyManager.checkStatus(17,this.status);
	}
	,get_ALT: function() {
		return this.keyManager.checkStatus(18,this.status);
	}
	,get_SPACE: function() {
		return this.keyManager.checkStatus(32,this.status);
	}
	,get_UP: function() {
		return this.keyManager.checkStatus(38,this.status);
	}
	,get_DOWN: function() {
		return this.keyManager.checkStatus(40,this.status);
	}
	,get_LEFT: function() {
		return this.keyManager.checkStatus(37,this.status);
	}
	,get_RIGHT: function() {
		return this.keyManager.checkStatus(39,this.status);
	}
	,get_TAB: function() {
		return this.keyManager.checkStatus(9,this.status);
	}
	,get_PRINTSCREEN: function() {
		return this.keyManager.checkStatus(301,this.status);
	}
	,get_F1: function() {
		return this.keyManager.checkStatus(112,this.status);
	}
	,get_F2: function() {
		return this.keyManager.checkStatus(113,this.status);
	}
	,get_F3: function() {
		return this.keyManager.checkStatus(114,this.status);
	}
	,get_F4: function() {
		return this.keyManager.checkStatus(115,this.status);
	}
	,get_F5: function() {
		return this.keyManager.checkStatus(116,this.status);
	}
	,get_F6: function() {
		return this.keyManager.checkStatus(117,this.status);
	}
	,get_F7: function() {
		return this.keyManager.checkStatus(118,this.status);
	}
	,get_F8: function() {
		return this.keyManager.checkStatus(119,this.status);
	}
	,get_F9: function() {
		return this.keyManager.checkStatus(120,this.status);
	}
	,get_F10: function() {
		return this.keyManager.checkStatus(121,this.status);
	}
	,get_F11: function() {
		return this.keyManager.checkStatus(122,this.status);
	}
	,get_F12: function() {
		return this.keyManager.checkStatus(123,this.status);
	}
	,get_NUMPADONE: function() {
		return this.keyManager.checkStatus(97,this.status);
	}
	,get_NUMPADTWO: function() {
		return this.keyManager.checkStatus(98,this.status);
	}
	,get_NUMPADTHREE: function() {
		return this.keyManager.checkStatus(99,this.status);
	}
	,get_NUMPADFOUR: function() {
		return this.keyManager.checkStatus(100,this.status);
	}
	,get_NUMPADFIVE: function() {
		return this.keyManager.checkStatus(101,this.status);
	}
	,get_NUMPADSIX: function() {
		return this.keyManager.checkStatus(102,this.status);
	}
	,get_NUMPADSEVEN: function() {
		return this.keyManager.checkStatus(103,this.status);
	}
	,get_NUMPADEIGHT: function() {
		return this.keyManager.checkStatus(104,this.status);
	}
	,get_NUMPADNINE: function() {
		return this.keyManager.checkStatus(105,this.status);
	}
	,get_NUMPADZERO: function() {
		return this.keyManager.checkStatus(96,this.status);
	}
	,get_NUMPADMINUS: function() {
		return this.keyManager.checkStatus(109,this.status);
	}
	,get_NUMPADPLUS: function() {
		return this.keyManager.checkStatus(107,this.status);
	}
	,get_NUMPADPERIOD: function() {
		return this.keyManager.checkStatus(110,this.status);
	}
	,get_NUMPADMULTIPLY: function() {
		return this.keyManager.checkStatus(106,this.status);
	}
	,__class__: flixel_input_keyboard_FlxKeyList
	,__properties__: $extend(flixel_input_FlxBaseKeyList.prototype.__properties__,{get_NUMPADMULTIPLY:"get_NUMPADMULTIPLY",get_NUMPADPERIOD:"get_NUMPADPERIOD",get_NUMPADPLUS:"get_NUMPADPLUS",get_NUMPADMINUS:"get_NUMPADMINUS",get_NUMPADZERO:"get_NUMPADZERO",get_NUMPADNINE:"get_NUMPADNINE",get_NUMPADEIGHT:"get_NUMPADEIGHT",get_NUMPADSEVEN:"get_NUMPADSEVEN",get_NUMPADSIX:"get_NUMPADSIX",get_NUMPADFIVE:"get_NUMPADFIVE",get_NUMPADFOUR:"get_NUMPADFOUR",get_NUMPADTHREE:"get_NUMPADTHREE",get_NUMPADTWO:"get_NUMPADTWO",get_NUMPADONE:"get_NUMPADONE",get_F12:"get_F12",get_F11:"get_F11",get_F10:"get_F10",get_F9:"get_F9",get_F8:"get_F8",get_F7:"get_F7",get_F6:"get_F6",get_F5:"get_F5",get_F4:"get_F4",get_F3:"get_F3",get_F2:"get_F2",get_F1:"get_F1",get_PRINTSCREEN:"get_PRINTSCREEN",get_TAB:"get_TAB",get_RIGHT:"get_RIGHT",get_LEFT:"get_LEFT",get_DOWN:"get_DOWN",get_UP:"get_UP",get_SPACE:"get_SPACE",get_ALT:"get_ALT",get_CONTROL:"get_CONTROL",get_GRAVEACCENT:"get_GRAVEACCENT",get_SLASH:"get_SLASH",get_PERIOD:"get_PERIOD",get_COMMA:"get_COMMA",get_SHIFT:"get_SHIFT",get_ENTER:"get_ENTER",get_QUOTE:"get_QUOTE",get_SEMICOLON:"get_SEMICOLON",get_CAPSLOCK:"get_CAPSLOCK",get_BACKSLASH:"get_BACKSLASH",get_RBRACKET:"get_RBRACKET",get_LBRACKET:"get_LBRACKET",get_BACKSPACE:"get_BACKSPACE",get_DELETE:"get_DELETE",get_PLUS:"get_PLUS",get_MINUS:"get_MINUS",get_ESCAPE:"get_ESCAPE",get_INSERT:"get_INSERT",get_END:"get_END",get_HOME:"get_HOME",get_PAGEDOWN:"get_PAGEDOWN",get_PAGEUP:"get_PAGEUP",get_NINE:"get_NINE",get_EIGHT:"get_EIGHT",get_SEVEN:"get_SEVEN",get_SIX:"get_SIX",get_FIVE:"get_FIVE",get_FOUR:"get_FOUR",get_THREE:"get_THREE",get_TWO:"get_TWO",get_ONE:"get_ONE",get_ZERO:"get_ZERO",get_Z:"get_Z",get_Y:"get_Y",get_X:"get_X",get_W:"get_W",get_V:"get_V",get_U:"get_U",get_T:"get_T",get_S:"get_S",get_R:"get_R",get_Q:"get_Q",get_P:"get_P",get_O:"get_O",get_N:"get_N",get_M:"get_M",get_L:"get_L",get_K:"get_K",get_J:"get_J",get_I:"get_I",get_H:"get_H",get_G:"get_G",get_F:"get_F",get_E:"get_E",get_D:"get_D",get_C:"get_C",get_B:"get_B",get_A:"get_A"})
});
var flixel_input_keyboard_FlxKeyboard = function() {
	flixel_input_FlxKeyManager.call(this,flixel_input_keyboard_FlxKeyList);
	var _this = flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.fromStringMap;
	var code = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(code.hasNext()) {
		var code1 = code.next();
		if(code1 != -2 && code1 != -1) {
			var input = new flixel_input_FlxInput(code1);
			this._keyListArray.push(input);
			this._keyListMap.h[code1] = input;
		}
	}
};
$hxClasses["flixel.input.keyboard.FlxKeyboard"] = flixel_input_keyboard_FlxKeyboard;
flixel_input_keyboard_FlxKeyboard.__name__ = ["flixel","input","keyboard","FlxKeyboard"];
flixel_input_keyboard_FlxKeyboard.__super__ = flixel_input_FlxKeyManager;
flixel_input_keyboard_FlxKeyboard.prototype = $extend(flixel_input_FlxKeyManager.prototype,{
	onKeyUp: function(event) {
		flixel_input_FlxKeyManager.prototype.onKeyUp.call(this,event);
		if(flixel_FlxG.game["debugger"] != null && this.inKeyArray(flixel_FlxG["debugger"].toggleKeys,event)) {
			flixel_FlxG["debugger"].set_visible(!flixel_FlxG["debugger"].visible);
		}
	}
	,onKeyDown: function(event) {
		flixel_input_FlxKeyManager.prototype.onKeyDown.call(this,event);
	}
	,resolveKeyCode: function(e) {
		return e.keyCode;
	}
	,record: function() {
		var data = null;
		var _g = 0;
		var _g1 = this._keyListArray;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(key == null || (key.current == 0 || key.current == -1)) {
				continue;
			}
			if(data == null) {
				data = [];
			}
			data.push(new flixel_system_replay_CodeValuePair(key.ID,key.current));
		}
		return data;
	}
	,playback: function(Record) {
		var i = 0;
		var l = Record.length;
		while(i < l) {
			var o = Record[i++];
			var o2 = this._keyListMap.get(o.code);
			o2.current = o.value;
		}
	}
	,__class__: flixel_input_keyboard_FlxKeyboard
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.__usingPingPongTexture = false;
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBase64(base64,type,function(image) {
		_gthis.__fromImage(image);
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	var rawAlpha1 = rawAlpha;
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
		_gthis.__fromImage(image);
		if(rawAlpha1 != null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
			var data = image.buffer.data;
			var _g1 = 0;
			var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha1);
			while(_g1 < _g) {
				var i = _g1++;
				data[i * 4 + 3] = rawAlpha1.readUnsignedByte();
			}
			image.dirty = true;
		}
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.__asRenderTexture = function(width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	var b = new openfl_display_BitmapData(0,0);
	b.__resize(width,height);
	return b;
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,rect: null
	,transparent: null
	,width: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__isValid: null
	,__surface: null
	,__texture: null
	,__pingPongTexture: null
	,__usingPingPongTexture: null
	,__uvData: null
	,clone: function() {
		if(!this.__isValid) {
			return new openfl_display_BitmapData(this.width,this.height,this.transparent);
		} else {
			return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
		this.__usingPingPongTexture = false;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
		this.__usingPingPongTexture = false;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.__isValid || sourceBitmapData == null) {
			return;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? alphaPoint.__toLimeVector2() : null,mergeAlpha);
		this.__usingPingPongTexture = false;
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var renderSession = renderer.renderSession;
				var gl = renderSession.gl;
				if(gl != null) {
					gl.deleteTexture(this.__texture);
					this.__texture = null;
				}
			}
		}
		if(this.__pingPongTexture != null) {
			this.__pingPongTexture.destroy();
			this.__pingPongTexture = null;
		}
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(!this.__isValid) {
			return;
		}
		if(colorTransform != null) {
			var tmp;
			var copy;
			if(source == null) {
				copy = null;
			} else {
				var copy1;
				if(source.__properties__) {
					tmp = source.__properties__["get_" + "width"];
					copy1 = tmp;
				} else {
					copy1 = false;
				}
				if(copy1) {
					copy = source[tmp]();
				} else {
					copy = source["width"];
				}
			}
			var tmp1;
			var copy2;
			if(source == null) {
				copy2 = null;
			} else {
				var copy3;
				if(source.__properties__) {
					tmp1 = source.__properties__["get_" + "height"];
					copy3 = tmp1;
				} else {
					copy3 = false;
				}
				if(copy3) {
					copy2 = source[tmp1]();
				} else {
					copy2 = source["height"];
				}
			}
			var copy4 = new openfl_display_BitmapData(copy,copy2,true,0);
			copy4.draw(source);
			copy4.colorTransform(copy4.rect,colorTransform);
			source = copy4;
		}
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,true);
		var buffer = this.image.buffer;
		var renderSession = new openfl__$internal_renderer_RenderSession();
		renderSession.context = buffer.__srcContext;
		renderSession.roundPixels = true;
		renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = false;
			buffer.__srcContext.msImageSmoothingEnabled = false;
			buffer.__srcContext.imageSmoothingEnabled = false;
		}
		if(clipRect != null) {
			renderSession.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
		}
		var matrixCache = source.__worldTransform;
		source.__updateTransforms(matrix != null ? matrix : new openfl_geom_Matrix());
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__updateTransforms(matrixCache);
		source.__updateChildren(true);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = true;
			buffer.__srcContext.msImageSmoothingEnabled = true;
			buffer.__srcContext.imageSmoothingEnabled = true;
		}
		if(clipRect != null) {
			renderSession.maskManager.popMask();
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		this.image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingPingPongTexture = false;
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
	}
	,getSurface: function() {
		if(!this.__isValid) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		}
		return this.__surface;
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) {
			return;
		}
		this.image.setPixel(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,__createUVs: function(x0,y0,x1,y1,x2,y2,x3,y3) {
		if(y3 == null) {
			y3 = 1;
		}
		if(x3 == null) {
			x3 = 0;
		}
		if(y2 == null) {
			y2 = 1;
		}
		if(x2 == null) {
			x2 = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 1;
		}
		if(y0 == null) {
			y0 = 0;
		}
		if(x0 == null) {
			x0 = 0;
		}
		if(this.__uvData == null) {
			this.__uvData = new openfl_display_TextureUvs();
		}
		this.__uvData.x0 = x0;
		this.__uvData.y0 = y0;
		this.__uvData.x1 = x1;
		this.__uvData.y1 = y1;
		this.__uvData.x2 = x2;
		this.__uvData.y2 = y2;
		this.__uvData.x3 = x3;
		this.__uvData.y3 = y3;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_gthis.__fromImage(image);
			if(onload != null) {
				onload(_gthis);
			}
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__isValid = true;
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) {
			return;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		var context = renderSession.context;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		context.drawImage(this.image.get_src(),0,0);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform = overrideTransform;
		}
	}
	,__class__: openfl_display_BitmapData
};
var flixel_input_mouse__$FlxMouse_GraphicCursor = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_input_mouse__$FlxMouse_GraphicCursor.preload != null) {
		this.__fromImage(flixel_input_mouse__$FlxMouse_GraphicCursor.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_input_mouse__$FlxMouse_GraphicCursor.preload == null) {
				flixel_input_mouse__$FlxMouse_GraphicCursor.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_input_mouse__$FlxMouse_GraphicCursor.resourceName),flixel_input_mouse__$FlxMouse_GraphicCursor.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.input.mouse._FlxMouse.GraphicCursor"] = flixel_input_mouse__$FlxMouse_GraphicCursor;
flixel_input_mouse__$FlxMouse_GraphicCursor.__name__ = ["flixel","input","mouse","_FlxMouse","GraphicCursor"];
flixel_input_mouse__$FlxMouse_GraphicCursor.preload = null;
flixel_input_mouse__$FlxMouse_GraphicCursor.__super__ = openfl_display_BitmapData;
flixel_input_mouse__$FlxMouse_GraphicCursor.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_input_mouse__$FlxMouse_GraphicCursor
});
var flixel_input_mouse_FlxMouse = function(CursorContainer) {
	this._lastWheel = 0;
	this._lastY = 0;
	this._lastX = 0;
	this._visibleWhenFocusLost = true;
	this._wheelUsed = false;
	this._cursor = null;
	this.useSystemCursor = false;
	this.visible = true;
	this.wheel = 0;
	this.enabled = true;
	flixel_input_FlxPointer.call(this);
	this.cursorContainer = CursorContainer;
	this.cursorContainer.mouseChildren = false;
	this.cursorContainer.mouseEnabled = false;
	this._leftButton = new flixel_input_mouse_FlxMouseButton(-1);
	this._stage = openfl_Lib.current.stage;
	this._stage.addEventListener("mouseDown",($_=this._leftButton,$bind($_,$_.onDown)));
	this._stage.addEventListener("mouseUp",($_=this._leftButton,$bind($_,$_.onUp)));
	this._stage.addEventListener("mouseWheel",$bind(this,this.onMouseWheel));
	flixel_FlxG.signals.gameStarted.add($bind(this,this.onGameStart));
	openfl_ui_Mouse.hide();
};
$hxClasses["flixel.input.mouse.FlxMouse"] = flixel_input_mouse_FlxMouse;
flixel_input_mouse_FlxMouse.__name__ = ["flixel","input","mouse","FlxMouse"];
flixel_input_mouse_FlxMouse.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_mouse_FlxMouse.__super__ = flixel_input_FlxPointer;
flixel_input_mouse_FlxMouse.prototype = $extend(flixel_input_FlxPointer.prototype,{
	enabled: null
	,wheel: null
	,cursorContainer: null
	,visible: null
	,useSystemCursor: null
	,_leftButton: null
	,_cursor: null
	,_cursorBitmapData: null
	,_wheelUsed: null
	,_visibleWhenFocusLost: null
	,_lastX: null
	,_lastY: null
	,_lastWheel: null
	,_lastLeftButtonState: null
	,_stage: null
	,load: function(Graphic,Scale,XOffset,YOffset) {
		if(YOffset == null) {
			YOffset = 0;
		}
		if(XOffset == null) {
			XOffset = 0;
		}
		if(Scale == null) {
			Scale = 1;
		}
		if(this._cursor != null) {
			flixel_util_FlxDestroyUtil.removeChild(this.cursorContainer,this._cursor);
		}
		if(Graphic == null) {
			Graphic = new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0);
		}
		if(js_Boot.__instanceof(Graphic,Class)) {
			this._cursor = Type.createInstance(Graphic,[]);
		} else if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData)) {
			this._cursor = new openfl_display_Bitmap(Graphic);
		} else if(typeof(Graphic) == "string") {
			var id = Graphic;
			var tmp;
			if(openfl_Assets.exists(id)) {
				tmp = openfl_Assets.getBitmapData(id,false);
			} else {
				flixel_FlxG.log.advanced("Could not find a BitmapData asset with ID '" + id + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
				tmp = null;
			}
			this._cursor = new openfl_display_Bitmap(tmp);
		} else {
			this._cursor = new openfl_display_Bitmap(new flixel_input_mouse__$FlxMouse_GraphicCursor(0,0));
		}
		this._cursor.set_x(XOffset);
		this._cursor.set_y(YOffset);
		this._cursor.set_scaleX(Scale);
		this._cursor.set_scaleY(Scale);
		this.cursorContainer.addChild(this._cursor);
	}
	,unload: function() {
		if(this._cursor != null) {
			if(this.cursorContainer.get_visible()) {
				this.load();
			} else {
				this._cursor = flixel_util_FlxDestroyUtil.removeChild(this.cursorContainer,this._cursor);
			}
		}
	}
	,destroy: function() {
		if(this._stage != null) {
			this._stage.removeEventListener("mouseDown",($_=this._leftButton,$bind($_,$_.onDown)));
			this._stage.removeEventListener("mouseUp",($_=this._leftButton,$bind($_,$_.onUp)));
			this._stage.removeEventListener("mouseWheel",$bind(this,this.onMouseWheel));
		}
		this.cursorContainer = null;
		this._cursor = null;
		this._leftButton = flixel_util_FlxDestroyUtil.destroy(this._leftButton);
		this._cursorBitmapData = flixel_util_FlxDestroyUtil.dispose(this._cursorBitmapData);
		flixel_FlxG.signals.gameStarted.remove($bind(this,this.onGameStart));
	}
	,reset: function() {
		this._leftButton.reset();
	}
	,update: function() {
		var newX = flixel_FlxG.game.get_mouseX();
		var newY = flixel_FlxG.game.get_mouseY();
		this._globalScreenX = newX / flixel_FlxG.scaleMode.scale.x | 0;
		this._globalScreenY = newY / flixel_FlxG.scaleMode.scale.y | 0;
		this.updatePositions();
		if(this.visible) {
			this.cursorContainer.set_x(flixel_FlxG.game.get_mouseX());
			this.cursorContainer.set_y(flixel_FlxG.game.get_mouseY());
		}
		this._leftButton.update();
		if(!this._wheelUsed) {
			this.wheel = 0;
		}
		this._wheelUsed = false;
	}
	,onFocus: function() {
		this.reset();
		this.set_useSystemCursor(this.useSystemCursor);
		this.set_visible(this._visibleWhenFocusLost);
	}
	,onFocusLost: function() {
		this._visibleWhenFocusLost = this.visible;
		if(this.visible) {
			this.set_visible(false);
		}
		openfl_ui_Mouse.show();
	}
	,onGameStart: function() {
		this.set_visible(this.visible);
	}
	,onMouseWheel: function(FlashEvent) {
		if(this.enabled) {
			this._wheelUsed = true;
			this.wheel = FlashEvent.delta;
		}
	}
	,get_pressed: function() {
		var _this = this._leftButton;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this._leftButton.current == 2;
	}
	,get_justReleased: function() {
		return this._leftButton.current == -1;
	}
	,showSystemCursor: function() {
		this.cursorContainer.set_visible(false);
		openfl_ui_Mouse.show();
	}
	,hideSystemCursor: function() {
		openfl_ui_Mouse.hide();
		if(this.visible) {
			this.cursorContainer.set_visible(true);
		}
	}
	,set_useSystemCursor: function(Value) {
		if(Value) {
			this.showSystemCursor();
		} else {
			this.hideSystemCursor();
		}
		return this.useSystemCursor = Value;
	}
	,showCursor: function() {
		if(this.useSystemCursor) {
			openfl_ui_Mouse.show();
		} else {
			if(this._cursor == null) {
				this.load();
			}
			this.cursorContainer.set_visible(true);
			openfl_ui_Mouse.hide();
		}
	}
	,hideCursor: function() {
		this.cursorContainer.set_visible(false);
		openfl_ui_Mouse.hide();
	}
	,set_visible: function(Value) {
		if(Value) {
			this.showCursor();
		} else {
			this.hideCursor();
		}
		return this.visible = Value;
	}
	,record: function() {
		if(this._lastX == this._globalScreenX && this._lastY == this._globalScreenY && this._lastLeftButtonState == this._leftButton.current && this._lastWheel == this.wheel) {
			return null;
		}
		this._lastX = this._globalScreenX;
		this._lastY = this._globalScreenY;
		this._lastLeftButtonState = this._leftButton.current;
		this._lastWheel = this.wheel;
		return new flixel_system_replay_MouseRecord(this._lastX,this._lastY,this._leftButton.current,this._lastWheel);
	}
	,playback: function(Record) {
		if((this._lastLeftButtonState == 1 || this._lastLeftButtonState == 2) && (Record.button == 0 || Record.button == -1)) {
			this._stage.dispatchEvent(new openfl_events_MouseEvent("mouseUp",true,false,Record.x,Record.y));
		}
		this._lastLeftButtonState = this._leftButton.current = Record.button;
		this.wheel = Record.wheel;
		this._globalScreenX = Record.x;
		this._globalScreenY = Record.y;
		this.updatePositions();
	}
	,__class__: flixel_input_mouse_FlxMouse
	,__properties__: {get_justReleased:"get_justReleased",get_justPressed:"get_justPressed",get_pressed:"get_pressed",set_useSystemCursor:"set_useSystemCursor",set_visible:"set_visible"}
});
var flixel_input_mouse_FlxMouseButton = function(ID) {
	this.justPressedTimeInTicks = -1;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.justPressedPosition = point;
	flixel_input_FlxInput.call(this,ID);
};
$hxClasses["flixel.input.mouse.FlxMouseButton"] = flixel_input_mouse_FlxMouseButton;
flixel_input_mouse_FlxMouseButton.__name__ = ["flixel","input","mouse","FlxMouseButton"];
flixel_input_mouse_FlxMouseButton.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_input_mouse_FlxMouseButton.getByID = function(id) {
	if(id == -1) {
		return flixel_FlxG.mouse._leftButton;
	} else {
		return null;
	}
};
flixel_input_mouse_FlxMouseButton.__super__ = flixel_input_FlxInput;
flixel_input_mouse_FlxMouseButton.prototype = $extend(flixel_input_FlxInput.prototype,{
	justPressedPosition: null
	,justPressedTimeInTicks: null
	,update: function() {
		flixel_input_FlxInput.prototype.update.call(this);
		if(this.current == 2) {
			this.justPressedPosition.set(flixel_FlxG.mouse.screenX,flixel_FlxG.mouse.screenY);
			this.justPressedTimeInTicks = flixel_FlxG.game.ticks;
		} else if(this.current == -1) {
			flixel_FlxG.swipes.push(new flixel_input_FlxSwipe(this.ID,this.justPressedPosition,flixel_FlxG.mouse.getScreenPosition(),this.justPressedTimeInTicks));
		}
	}
	,destroy: function() {
		this.justPressedPosition = flixel_util_FlxDestroyUtil.put(this.justPressedPosition);
	}
	,onDown: function(_) {
		if(flixel_FlxG.mouse.enabled) {
			this.press();
		}
	}
	,onUp: function(_) {
		if(flixel_FlxG.mouse.enabled) {
			this.release();
		}
	}
	,__class__: flixel_input_mouse_FlxMouseButton
});
var flixel_input_mouse_FlxMouseEventManager = function() {
	flixel_FlxBasic.call(this);
	if(flixel_input_mouse_FlxMouseEventManager._registeredObjects != null) {
		this.clearRegistry();
	}
	flixel_input_mouse_FlxMouseEventManager._registeredObjects = [];
	flixel_input_mouse_FlxMouseEventManager._mouseOverObjects = [];
};
$hxClasses["flixel.input.mouse.FlxMouseEventManager"] = flixel_input_mouse_FlxMouseEventManager;
flixel_input_mouse_FlxMouseEventManager.__name__ = ["flixel","input","mouse","FlxMouseEventManager"];
flixel_input_mouse_FlxMouseEventManager.init = function() {
	if(flixel_FlxG.plugins.get(flixel_input_mouse_FlxMouseEventManager) == null) {
		flixel_FlxG.plugins.add_flixel_input_mouse_FlxMouseEventManager(new flixel_input_mouse_FlxMouseEventManager());
	}
};
flixel_input_mouse_FlxMouseEventManager.add = function(Object,OnMouseDown,OnMouseUp,OnMouseOver,OnMouseOut,MouseChildren,MouseEnabled,PixelPerfect,MouseButtons) {
	if(PixelPerfect == null) {
		PixelPerfect = true;
	}
	if(MouseEnabled == null) {
		MouseEnabled = true;
	}
	if(MouseChildren == null) {
		MouseChildren = false;
	}
	if(flixel_FlxG.plugins.get(flixel_input_mouse_FlxMouseEventManager) == null) {
		flixel_FlxG.plugins.add_flixel_input_mouse_FlxMouseEventManager(new flixel_input_mouse_FlxMouseEventManager());
	}
	var newReg = new flixel_input_mouse__$FlxMouseEventManager_ObjectMouseData(Object,OnMouseDown,OnMouseUp,OnMouseOver,OnMouseOut,MouseChildren,MouseEnabled,PixelPerfect,MouseButtons);
	if(js_Boot.__instanceof(Object,flixel_FlxSprite)) {
		newReg.sprite = Object;
	}
	flixel_input_mouse_FlxMouseEventManager._registeredObjects.unshift(newReg);
	return Object;
};
flixel_input_mouse_FlxMouseEventManager.remove = function(Object) {
	var _g = 0;
	var _g1 = flixel_input_mouse_FlxMouseEventManager._registeredObjects;
	while(_g < _g1.length) {
		var reg = _g1[_g];
		++_g;
		if(reg.object == Object) {
			reg.object = null;
			reg.sprite = null;
			reg.onMouseDown = null;
			reg.onMouseUp = null;
			reg.onMouseOver = null;
			reg.onMouseOut = null;
			HxOverrides.remove(flixel_input_mouse_FlxMouseEventManager._registeredObjects,reg);
		}
	}
	return Object;
};
flixel_input_mouse_FlxMouseEventManager.removeAll = function() {
	if(flixel_input_mouse_FlxMouseEventManager._registeredObjects != null) {
		var _g = 0;
		var _g1 = flixel_input_mouse_FlxMouseEventManager._registeredObjects;
		while(_g < _g1.length) {
			var reg = _g1[_g];
			++_g;
			flixel_input_mouse_FlxMouseEventManager.remove(reg.object);
		}
	}
	flixel_input_mouse_FlxMouseEventManager._registeredObjects = [];
	flixel_input_mouse_FlxMouseEventManager._mouseOverObjects = [];
};
flixel_input_mouse_FlxMouseEventManager.reorder = function() {
	var orderedObjects = [];
	flixel_input_mouse_FlxMouseEventManager.traverseFlxGroup(flixel_FlxG.game._state,orderedObjects);
	orderedObjects.reverse();
	flixel_input_mouse_FlxMouseEventManager._registeredObjects = orderedObjects;
};
flixel_input_mouse_FlxMouseEventManager.setMouseDownCallback = function(Object,OnMouseDown) {
	var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(Object);
	if(reg != null) {
		reg.onMouseDown = OnMouseDown;
	}
};
flixel_input_mouse_FlxMouseEventManager.setMouseUpCallback = function(Object,OnMouseUp) {
	var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(Object);
	if(reg != null) {
		reg.onMouseUp = OnMouseUp;
	}
};
flixel_input_mouse_FlxMouseEventManager.setMouseOverCallback = function(Object,OnMouseOver) {
	var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(Object);
	if(reg != null) {
		reg.onMouseOver = OnMouseOver;
	}
};
flixel_input_mouse_FlxMouseEventManager.setMouseOutCallback = function(Object,OnMouseOut) {
	var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(Object);
	if(reg != null) {
		reg.onMouseOut = OnMouseOut;
	}
};
flixel_input_mouse_FlxMouseEventManager.setObjectMouseEnabled = function(Object,MouseEnabled) {
	var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(Object);
	if(reg != null) {
		reg.mouseEnabled = MouseEnabled;
	}
};
flixel_input_mouse_FlxMouseEventManager.isObjectMouseEnabled = function(Object) {
	var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(Object);
	if(reg != null) {
		return reg.mouseEnabled;
	} else {
		return false;
	}
};
flixel_input_mouse_FlxMouseEventManager.setObjectMouseChildren = function(Object,MouseChildren) {
	var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(Object);
	if(reg != null) {
		reg.mouseChildren = MouseChildren;
	}
};
flixel_input_mouse_FlxMouseEventManager.isObjectMouseChildren = function(Object) {
	var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(Object);
	if(reg != null) {
		return reg.mouseChildren;
	} else {
		throw new js__$Boot_HaxeError(new openfl_errors_Error("FlxMouseEventManager , isObjectMouseChildren() : object not found"));
	}
};
flixel_input_mouse_FlxMouseEventManager.setObjectMouseButtons = function(object,mouseButtons) {
	var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(object);
	if(reg != null) {
		reg.mouseButtons = mouseButtons;
	}
};
flixel_input_mouse_FlxMouseEventManager.traverseFlxGroup = function(Group,OrderedObjects) {
	var _g = 0;
	var _g1 = Group.members;
	while(_g < _g1.length) {
		var basic = _g1[_g];
		++_g;
		var group = flixel_group_FlxTypedGroup.resolveGroup(basic);
		if(group != null) {
			flixel_input_mouse_FlxMouseEventManager.traverseFlxGroup(group,OrderedObjects);
		}
		if(js_Boot.__instanceof(basic,flixel_FlxObject)) {
			var reg = flixel_input_mouse_FlxMouseEventManager.getRegister(basic);
			if(reg != null) {
				OrderedObjects.push(reg);
			}
		}
	}
};
flixel_input_mouse_FlxMouseEventManager.getRegister = function(Object,Register) {
	if(Register == null) {
		Register = flixel_input_mouse_FlxMouseEventManager._registeredObjects;
	}
	var _g = 0;
	while(_g < Register.length) {
		var reg = Register[_g];
		++_g;
		if(reg.object == Object) {
			return reg;
		}
	}
	return null;
};
flixel_input_mouse_FlxMouseEventManager.__super__ = flixel_FlxBasic;
flixel_input_mouse_FlxMouseEventManager.prototype = $extend(flixel_FlxBasic.prototype,{
	destroy: function() {
		this.clearRegistry();
		flixel_input_mouse_FlxMouseEventManager._point = flixel_util_FlxDestroyUtil.put(flixel_input_mouse_FlxMouseEventManager._point);
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		flixel_FlxBasic.prototype.update.call(this,elapsed);
		var currentOverObjects = [];
		var _g = 0;
		var _g1 = flixel_input_mouse_FlxMouseEventManager._registeredObjects;
		while(_g < _g1.length) {
			var reg = _g1[_g];
			++_g;
			if(reg.object.acceleration == null) {
				flixel_input_mouse_FlxMouseEventManager.remove(reg.object);
				continue;
			}
			if(!reg.object.alive || !reg.object.exists || !reg.object.visible || !reg.mouseEnabled) {
				continue;
			}
			if(this.checkOverlap(reg)) {
				currentOverObjects.push(reg);
				if(!reg.mouseChildren) {
					break;
				}
			}
		}
		var _g2 = 0;
		while(_g2 < currentOverObjects.length) {
			var current = currentOverObjects[_g2];
			++_g2;
			if(current.onMouseOver != null) {
				if(current.object.exists && current.object.visible && flixel_input_mouse_FlxMouseEventManager.getRegister(current.object,flixel_input_mouse_FlxMouseEventManager._mouseOverObjects) == null) {
					current.onMouseOver(current.object);
				}
			}
		}
		var _g3 = 0;
		var _g11 = flixel_input_mouse_FlxMouseEventManager._mouseOverObjects;
		while(_g3 < _g11.length) {
			var over = _g11[_g3];
			++_g3;
			if(over.onMouseOut != null) {
				if(!over.object.exists || !over.object.visible || flixel_input_mouse_FlxMouseEventManager.getRegister(over.object,currentOverObjects) == null) {
					over.onMouseOut(over.object);
				}
			}
		}
		var _g4 = 0;
		while(_g4 < currentOverObjects.length) {
			var current1 = currentOverObjects[_g4];
			++_g4;
			if(current1.onMouseDown != null && current1.object.exists && current1.object.visible) {
				var _g12 = 0;
				var _g21 = current1.mouseButtons;
				while(_g12 < _g21.length) {
					var buttonID = _g21[_g12];
					++_g12;
					if(flixel_input_mouse_FlxMouseButton.getByID(buttonID).current == 2) {
						current1.onMouseDown(current1.object);
					}
				}
			}
		}
		var _g5 = 0;
		while(_g5 < currentOverObjects.length) {
			var current2 = currentOverObjects[_g5];
			++_g5;
			if(current2.onMouseUp != null && current2.object.exists && current2.object.visible) {
				var _g13 = 0;
				var _g22 = current2.mouseButtons;
				while(_g13 < _g22.length) {
					var buttonID1 = _g22[_g13];
					++_g13;
					if(flixel_input_mouse_FlxMouseButton.getByID(buttonID1).current == -1) {
						current2.onMouseUp(current2.object);
					}
				}
			}
		}
		flixel_input_mouse_FlxMouseEventManager._mouseOverObjects = currentOverObjects;
	}
	,clearRegistry: function() {
		flixel_input_mouse_FlxMouseEventManager._mouseOverObjects = null;
		var _g = 0;
		var _g1 = flixel_input_mouse_FlxMouseEventManager._registeredObjects;
		while(_g < _g1.length) {
			var reg = _g1[_g];
			++_g;
			flixel_input_mouse_FlxMouseEventManager.remove(reg.object);
		}
		flixel_input_mouse_FlxMouseEventManager._registeredObjects = null;
	}
	,checkOverlap: function(Register) {
		var _g = 0;
		var _g1 = Register.object.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			flixel_input_mouse_FlxMouseEventManager._point = flixel_FlxG.mouse.getWorldPosition(camera,flixel_input_mouse_FlxMouseEventManager._point);
			var Point = flixel_input_mouse_FlxMouseEventManager._point;
			var tmp;
			if(Register.pixelPerfect && Register.sprite != null) {
				var Sprite = Register.sprite;
				if(Sprite.angle != 0) {
					var X = Sprite.x + Sprite.origin.x;
					var Y = Sprite.y + Sprite.origin.y;
					var point = flixel_math_FlxPoint._pool.get().set(X,Y);
					point._inPool = false;
					point._weak = true;
					Point.rotate(point,-Sprite.angle);
				}
				tmp = Sprite.pixelsOverlapPoint(Point,1,camera);
			} else {
				tmp = Register.object.overlapsPoint(Point,true,camera);
			}
			if(tmp) {
				return true;
			}
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				flixel_input_mouse_FlxMouseEventManager._point = touch.getWorldPosition(camera,flixel_input_mouse_FlxMouseEventManager._point);
				var Point1 = flixel_input_mouse_FlxMouseEventManager._point;
				var tmp1;
				if(Register.pixelPerfect && Register.sprite != null) {
					var Sprite1 = Register.sprite;
					if(Sprite1.angle != 0) {
						var X1 = Sprite1.x + Sprite1.origin.x;
						var Y1 = Sprite1.y + Sprite1.origin.y;
						var point1 = flixel_math_FlxPoint._pool.get().set(X1,Y1);
						point1._inPool = false;
						point1._weak = true;
						Point1.rotate(point1,-Sprite1.angle);
					}
					tmp1 = Sprite1.pixelsOverlapPoint(Point1,1,camera);
				} else {
					tmp1 = Register.object.overlapsPoint(Point1,true,camera);
				}
				if(tmp1) {
					return true;
				}
			}
		}
		return false;
	}
	,checkOverlapWithPoint: function(Register,Point,Camera) {
		if(Register.pixelPerfect && Register.sprite != null) {
			var Sprite = Register.sprite;
			if(Sprite.angle != 0) {
				var X = Sprite.x + Sprite.origin.x;
				var Y = Sprite.y + Sprite.origin.y;
				var point = flixel_math_FlxPoint._pool.get().set(X,Y);
				point._inPool = false;
				point._weak = true;
				Point.rotate(point,-Sprite.angle);
			}
			return Sprite.pixelsOverlapPoint(Point,1,Camera);
		} else {
			return Register.object.overlapsPoint(Point,true,Camera);
		}
	}
	,checkPixelPerfectOverlap: function(Point,Sprite,Camera) {
		if(Sprite.angle != 0) {
			var X = Sprite.x + Sprite.origin.x;
			var Y = Sprite.y + Sprite.origin.y;
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			point._weak = true;
			Point.rotate(point,-Sprite.angle);
		}
		return Sprite.pixelsOverlapPoint(Point,1,Camera);
	}
	,__class__: flixel_input_mouse_FlxMouseEventManager
});
var flixel_input_mouse__$FlxMouseEventManager_ObjectMouseData = function(object,onMouseDown,onMouseUp,onMouseOver,onMouseOut,mouseChildren,mouseEnabled,pixelPerfect,mouseButtons) {
	this.object = object;
	this.onMouseDown = onMouseDown;
	this.onMouseUp = onMouseUp;
	this.onMouseOver = onMouseOver;
	this.onMouseOut = onMouseOut;
	this.mouseChildren = mouseChildren;
	this.mouseEnabled = mouseEnabled;
	this.pixelPerfect = pixelPerfect;
	this.mouseButtons = mouseButtons == null ? [-1] : mouseButtons;
};
$hxClasses["flixel.input.mouse._FlxMouseEventManager.ObjectMouseData"] = flixel_input_mouse__$FlxMouseEventManager_ObjectMouseData;
flixel_input_mouse__$FlxMouseEventManager_ObjectMouseData.__name__ = ["flixel","input","mouse","_FlxMouseEventManager","ObjectMouseData"];
flixel_input_mouse__$FlxMouseEventManager_ObjectMouseData.prototype = {
	object: null
	,onMouseDown: null
	,onMouseUp: null
	,onMouseOver: null
	,onMouseOut: null
	,mouseChildren: null
	,mouseEnabled: null
	,pixelPerfect: null
	,sprite: null
	,mouseButtons: null
	,currentMouseButton: null
	,__class__: flixel_input_mouse__$FlxMouseEventManager_ObjectMouseData
};
var flixel_input_touch_FlxTouch = function(x,y,pointID) {
	if(pointID == null) {
		pointID = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.justPressedTimeInTicks = -1;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.justPressedPosition = point;
	this.flashPoint = new openfl_geom_Point();
	flixel_input_FlxPointer.call(this);
	this.input = new flixel_input_FlxInput(pointID);
	this.setXY(x,y);
};
$hxClasses["flixel.input.touch.FlxTouch"] = flixel_input_touch_FlxTouch;
flixel_input_touch_FlxTouch.__name__ = ["flixel","input","touch","FlxTouch"];
flixel_input_touch_FlxTouch.__interfaces__ = [flixel_input_IFlxInput,flixel_util_IFlxDestroyable];
flixel_input_touch_FlxTouch.__super__ = flixel_input_FlxPointer;
flixel_input_touch_FlxTouch.prototype = $extend(flixel_input_FlxPointer.prototype,{
	input: null
	,flashPoint: null
	,justPressedPosition: null
	,justPressedTimeInTicks: null
	,destroy: function() {
		this.input = null;
		this.justPressedPosition = flixel_util_FlxDestroyUtil.put(this.justPressedPosition);
		this.flashPoint = null;
	}
	,recycle: function(x,y,pointID) {
		this.setXY(x,y);
		this.input.ID = pointID;
		this.input.reset();
	}
	,update: function() {
		this.input.update();
		if(this.input.current == 2) {
			this.justPressedPosition.set(this.screenX,this.screenY);
			this.justPressedTimeInTicks = flixel_FlxG.game.ticks;
		} else if(this.input.current == -1) {
			flixel_FlxG.swipes.push(new flixel_input_FlxSwipe(this.input.ID,this.justPressedPosition,this.getScreenPosition(),this.justPressedTimeInTicks));
		}
	}
	,setXY: function(X,Y) {
		this.flashPoint.setTo(X,Y);
		this.flashPoint = flixel_FlxG.game.globalToLocal(this.flashPoint);
		this._globalScreenX = this.flashPoint.x / flixel_FlxG.scaleMode.scale.x | 0;
		this._globalScreenY = this.flashPoint.y / flixel_FlxG.scaleMode.scale.y | 0;
		this.updatePositions();
	}
	,get_touchPointID: function() {
		return this.input.ID;
	}
	,get_justReleased: function() {
		return this.input.current == -1;
	}
	,get_released: function() {
		var _this = this.input;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this.input;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.input.current == 2;
	}
	,__class__: flixel_input_touch_FlxTouch
	,__properties__: {get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased",get_touchPointID:"get_touchPointID"}
});
var flixel_input_touch_FlxTouchManager = function() {
	this.list = [];
	this._inactiveTouches = [];
	this._touchesCache = new haxe_ds_IntMap();
	flixel_input_touch_FlxTouchManager.maxTouchPoints = openfl_ui_Multitouch.maxTouchPoints;
	openfl_Lib.current.stage.addEventListener("touchBegin",$bind(this,this.handleTouchBegin));
	openfl_Lib.current.stage.addEventListener("touchEnd",$bind(this,this.handleTouchEnd));
	openfl_Lib.current.stage.addEventListener("touchMove",$bind(this,this.handleTouchMove));
};
$hxClasses["flixel.input.touch.FlxTouchManager"] = flixel_input_touch_FlxTouchManager;
flixel_input_touch_FlxTouchManager.__name__ = ["flixel","input","touch","FlxTouchManager"];
flixel_input_touch_FlxTouchManager.__interfaces__ = [flixel_input_IFlxInputManager];
flixel_input_touch_FlxTouchManager.prototype = {
	list: null
	,_inactiveTouches: null
	,_touchesCache: null
	,getByID: function(TouchPointID) {
		return this._touchesCache.h[TouchPointID];
	}
	,getFirst: function() {
		if(this.list[0] != null) {
			return this.list[0];
		} else {
			return null;
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.destroy();
		}
		this.list = null;
		var _g2 = 0;
		var _g11 = this._inactiveTouches;
		while(_g2 < _g11.length) {
			var touch1 = _g11[_g2];
			++_g2;
			touch1.destroy();
		}
		this._inactiveTouches = null;
		this._touchesCache = null;
	}
	,justStarted: function(TouchArray) {
		if(TouchArray == null) {
			TouchArray = [];
		}
		var touchLen = TouchArray.length;
		if(touchLen > 0) {
			TouchArray.splice(0,touchLen);
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch.input.current == 2) {
				TouchArray.push(touch);
			}
		}
		return TouchArray;
	}
	,justReleased: function(TouchArray) {
		if(TouchArray == null) {
			TouchArray = [];
		}
		var touchLen = TouchArray.length;
		if(touchLen > 0) {
			TouchArray.splice(0,touchLen);
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			if(touch.input.current == -1) {
				TouchArray.push(touch);
			}
		}
		return TouchArray;
	}
	,reset: function() {
		var key = this._touchesCache.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			this._touchesCache.remove(key1);
		}
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			touch.input.reset();
			this._inactiveTouches.push(touch);
		}
		this.list.splice(0,this.list.length);
	}
	,handleTouchBegin: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			touch.setXY(FlashEvent.stageX | 0,FlashEvent.stageY | 0);
		} else {
			touch = this.recycle(FlashEvent.stageX | 0,FlashEvent.stageY | 0,FlashEvent.touchPointID);
		}
		touch.input.press();
	}
	,handleTouchEnd: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			touch.input.release();
		}
	}
	,handleTouchMove: function(FlashEvent) {
		var touch = this._touchesCache.h[FlashEvent.touchPointID];
		if(touch != null) {
			touch.setXY(FlashEvent.stageX | 0,FlashEvent.stageY | 0);
		}
	}
	,add: function(Touch) {
		this.list.push(Touch);
		this._touchesCache.h[Touch.input.ID] = Touch;
		return Touch;
	}
	,recycle: function(X,Y,PointID) {
		if(this._inactiveTouches.length > 0) {
			var touch = this._inactiveTouches.pop();
			touch.recycle(X,Y,PointID);
			return this.add(touch);
		}
		return this.add(new flixel_input_touch_FlxTouch(X,Y,PointID));
	}
	,update: function() {
		var i = this.list.length - 1;
		var touch;
		while(i >= 0) {
			touch = this.list[i];
			var tmp;
			var _this = touch.input;
			if(_this.current == 0 || _this.current == -1) {
				tmp = touch.input.current != -1;
			} else {
				tmp = false;
			}
			if(tmp) {
				touch.input.reset();
				this._touchesCache.remove(touch.input.ID);
				this.list.splice(i,1);
				this._inactiveTouches.push(touch);
			} else {
				touch.update();
			}
			--i;
		}
	}
	,onFocus: function() {
	}
	,onFocusLost: function() {
		this.reset();
	}
	,__class__: flixel_input_touch_FlxTouchManager
};
var flixel_math_FlxAngle = function() { };
$hxClasses["flixel.math.FlxAngle"] = flixel_math_FlxAngle;
flixel_math_FlxAngle.__name__ = ["flixel","math","FlxAngle"];
flixel_math_FlxAngle.__properties__ = {get_TO_RAD:"get_TO_RAD",get_TO_DEG:"get_TO_DEG"}
flixel_math_FlxAngle.wrapAngle = function(angle) {
	if(angle > 180) {
		angle = flixel_math_FlxAngle.wrapAngle(angle - 360);
	} else if(angle < -180) {
		angle = flixel_math_FlxAngle.wrapAngle(angle + 360);
	}
	return angle;
};
flixel_math_FlxAngle.asDegrees = function(radians) {
	return radians * (180 / Math.PI);
};
flixel_math_FlxAngle.asRadians = function(degrees) {
	return degrees * (Math.PI / 180);
};
flixel_math_FlxAngle.angleBetween = function(SpriteA,SpriteB,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	var dx = SpriteB.x + SpriteB.origin.x - (SpriteA.x + SpriteA.origin.x);
	var dy = SpriteB.y + SpriteB.origin.y - (SpriteA.y + SpriteA.origin.y);
	if(AsDegrees) {
		return Math.atan2(dy,dx) * (180 / Math.PI);
	} else {
		return Math.atan2(dy,dx);
	}
};
flixel_math_FlxAngle.angleBetweenPoint = function(Sprite,Target,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	var dx = Target.x - (Sprite.x + Sprite.origin.x);
	var dy = Target.y - (Sprite.y + Sprite.origin.y);
	if(Target._weak) {
		Target.put();
	}
	if(AsDegrees) {
		return Math.atan2(dy,dx) * (180 / Math.PI);
	} else {
		return Math.atan2(dy,dx);
	}
};
flixel_math_FlxAngle.angleBetweenMouse = function(Object,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	if(Object == null) {
		return 0;
	}
	var p = Object.getScreenPosition();
	var dx = flixel_FlxG.mouse.screenX - p.x;
	var dy = flixel_FlxG.mouse.screenY - p.y;
	p.put();
	if(AsDegrees) {
		return Math.atan2(dy,dx) * (180 / Math.PI);
	} else {
		return Math.atan2(dy,dx);
	}
};
flixel_math_FlxAngle.angleBetweenTouch = function(Object,Touch,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	var p = Object.getScreenPosition();
	var dx = Touch.screenX - p.x;
	var dy = Touch.screenY - p.y;
	p.put();
	if(AsDegrees) {
		return Math.atan2(dy,dx) * (180 / Math.PI);
	} else {
		return Math.atan2(dy,dx);
	}
};
flixel_math_FlxAngle.angleFromFacing = function(FacingBitmask,AsDegrees) {
	if(AsDegrees == null) {
		AsDegrees = false;
	}
	var degrees;
	switch(FacingBitmask) {
	case 1:
		degrees = 180;
		break;
	case 16:
		degrees = 0;
		break;
	case 256:
		degrees = -90;
		break;
	case 4096:
		degrees = 90;
		break;
	default:
		if(FacingBitmask == 257) {
			degrees = -135;
		} else if(FacingBitmask == 272) {
			degrees = -45;
		} else if(FacingBitmask == 4097) {
			degrees = 135;
		} else if(FacingBitmask == 4112) {
			degrees = 45;
		} else {
			degrees = 0;
		}
	}
	if(AsDegrees) {
		return degrees;
	} else {
		return degrees * (Math.PI / 180);
	}
};
flixel_math_FlxAngle.getCartesianCoords = function(Radius,Angle,point) {
	var p = point;
	if(point == null) {
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		p = point1;
	}
	p.set_x(Radius * Math.cos(Angle * (Math.PI / 180)));
	p.set_y(Radius * Math.sin(Angle * (Math.PI / 180)));
	return p;
};
flixel_math_FlxAngle.getPolarCoords = function(X,Y,point) {
	var p = point;
	if(point == null) {
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		p = point1;
	}
	p.set_x(Math.sqrt(X * X + Y * Y));
	p.set_y(Math.atan2(Y,X) * (180 / Math.PI));
	return p;
};
flixel_math_FlxAngle.get_TO_DEG = function() {
	return 180 / Math.PI;
};
flixel_math_FlxAngle.get_TO_RAD = function() {
	return Math.PI / 180;
};
var flixel_math_FlxMath = function() { };
$hxClasses["flixel.math.FlxMath"] = flixel_math_FlxMath;
flixel_math_FlxMath.__name__ = ["flixel","math","FlxMath"];
flixel_math_FlxMath.roundDecimal = function(Value,Precision) {
	var mult = 1;
	var _g1 = 0;
	while(_g1 < Precision) {
		++_g1;
		mult *= 10;
	}
	return Math.round(Value * mult) / mult;
};
flixel_math_FlxMath.bound = function(Value,Min,Max) {
	var lowerBound = Min != null && Value < Min ? Min : Value;
	if(Max != null && lowerBound > Max) {
		return Max;
	} else {
		return lowerBound;
	}
};
flixel_math_FlxMath.lerp = function(a,b,ratio) {
	return a + ratio * (b - a);
};
flixel_math_FlxMath.inBounds = function(Value,Min,Max) {
	if(Min == null || Value >= Min) {
		if(Max != null) {
			return Value <= Max;
		} else {
			return true;
		}
	} else {
		return false;
	}
};
flixel_math_FlxMath.isOdd = function(n) {
	return ((n | 0) & 1) != 0;
};
flixel_math_FlxMath.isEven = function(n) {
	return ((n | 0) & 1) == 0;
};
flixel_math_FlxMath.numericComparison = function(a,b) {
	if(b > a) {
		return -1;
	} else if(a > b) {
		return 1;
	}
	return 0;
};
flixel_math_FlxMath.pointInCoordinates = function(pointX,pointY,rectX,rectY,rectWidth,rectHeight) {
	if(pointX >= rectX && pointX <= rectX + rectWidth) {
		if(pointY >= rectY && pointY <= rectY + rectHeight) {
			return true;
		}
	}
	return false;
};
flixel_math_FlxMath.pointInFlxRect = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.x + rect.width && pointY >= rect.y) {
		return pointY <= rect.y + rect.height;
	} else {
		return false;
	}
};
flixel_math_FlxMath.mouseInFlxRect = function(useWorldCoords,rect) {
	if(rect == null) {
		return true;
	}
	if(useWorldCoords) {
		return flixel_math_FlxMath.pointInFlxRect(Math.floor(flixel_FlxG.mouse.x),Math.floor(flixel_FlxG.mouse.y),rect);
	} else {
		return flixel_math_FlxMath.pointInFlxRect(flixel_FlxG.mouse.screenX,flixel_FlxG.mouse.screenY,rect);
	}
};
flixel_math_FlxMath.pointInRectangle = function(pointX,pointY,rect) {
	if(pointX >= rect.x && pointX <= rect.get_right() && pointY >= rect.y) {
		return pointY <= rect.get_bottom();
	} else {
		return false;
	}
};
flixel_math_FlxMath.maxAdd = function(value,amount,max,min) {
	if(min == null) {
		min = 0;
	}
	value += amount;
	if(value > max) {
		value = max;
	} else if(value <= min) {
		value = min;
	}
	return value;
};
flixel_math_FlxMath.wrap = function(value,min,max) {
	var range = max - min + 1;
	if(value < min) {
		value += range * ((min - value) / range + 1 | 0);
	}
	return min + (value - min) % range;
};
flixel_math_FlxMath.remapToRange = function(value,start1,stop1,start2,stop2) {
	return start2 + (value - start1) * ((stop2 - start2) / (stop1 - start1));
};
flixel_math_FlxMath.dotProduct = function(ax,ay,bx,by) {
	return ax * bx + ay * by;
};
flixel_math_FlxMath.vectorLength = function(dx,dy) {
	return Math.sqrt(dx * dx + dy * dy);
};
flixel_math_FlxMath.distanceBetween = function(SpriteA,SpriteB) {
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	return Math.sqrt(dx * dx + dy * dy) | 0;
};
flixel_math_FlxMath.isDistanceWithin = function(SpriteA,SpriteB,Distance,IncludeEqual) {
	if(IncludeEqual == null) {
		IncludeEqual = false;
	}
	var dx = SpriteA.x + SpriteA.origin.x - (SpriteB.x + SpriteB.origin.x);
	var dy = SpriteA.y + SpriteA.origin.y - (SpriteB.y + SpriteB.origin.y);
	if(IncludeEqual) {
		return dx * dx + dy * dy <= Distance * Distance;
	} else {
		return dx * dx + dy * dy < Distance * Distance;
	}
};
flixel_math_FlxMath.distanceToPoint = function(Sprite,Target) {
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	if(Target._weak) {
		Target.put();
	}
	return Math.sqrt(dx * dx + dy * dy) | 0;
};
flixel_math_FlxMath.isDistanceToPointWithin = function(Sprite,Target,Distance,IncludeEqual) {
	if(IncludeEqual == null) {
		IncludeEqual = false;
	}
	var dx = Sprite.x + Sprite.origin.x - Target.x;
	var dy = Sprite.y + Sprite.origin.y - Target.y;
	if(Target._weak) {
		Target.put();
	}
	if(IncludeEqual) {
		return dx * dx + dy * dy <= Distance * Distance;
	} else {
		return dx * dx + dy * dy < Distance * Distance;
	}
};
flixel_math_FlxMath.distanceToMouse = function(Sprite) {
	var dx = Sprite.x + Sprite.origin.x - flixel_FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel_FlxG.mouse.screenY;
	return Math.sqrt(dx * dx + dy * dy) | 0;
};
flixel_math_FlxMath.isDistanceToMouseWithin = function(Sprite,Distance,IncludeEqual) {
	if(IncludeEqual == null) {
		IncludeEqual = false;
	}
	var dx = Sprite.x + Sprite.origin.x - flixel_FlxG.mouse.screenX;
	var dy = Sprite.y + Sprite.origin.y - flixel_FlxG.mouse.screenY;
	if(IncludeEqual) {
		return dx * dx + dy * dy <= Distance * Distance;
	} else {
		return dx * dx + dy * dy < Distance * Distance;
	}
};
flixel_math_FlxMath.distanceToTouch = function(Sprite,Touch) {
	var dx = Sprite.x + Sprite.origin.x - Touch.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch.screenY;
	return Math.sqrt(dx * dx + dy * dy) | 0;
};
flixel_math_FlxMath.isDistanceToTouchWithin = function(Sprite,Touch,Distance,IncludeEqual) {
	if(IncludeEqual == null) {
		IncludeEqual = false;
	}
	var dx = Sprite.x + Sprite.origin.x - Touch.screenX;
	var dy = Sprite.y + Sprite.origin.y - Touch.screenY;
	if(IncludeEqual) {
		return dx * dx + dy * dy <= Distance * Distance;
	} else {
		return dx * dx + dy * dy < Distance * Distance;
	}
};
flixel_math_FlxMath.getDecimals = function(n) {
	var helperArray = (n == null ? "null" : "" + n).split(".");
	var decimals = 0;
	if(helperArray.length > 1) {
		decimals = helperArray[1].length;
	}
	return decimals;
};
flixel_math_FlxMath.equal = function(aValueA,aValueB,aDiff) {
	if(aDiff == null) {
		aDiff = 0.0000001;
	}
	return Math.abs(aValueA - aValueB) <= aDiff;
};
flixel_math_FlxMath.signOf = function(n) {
	if(n < 0) {
		return -1;
	} else {
		return 1;
	}
};
flixel_math_FlxMath.sameSign = function(a,b) {
	return (a < 0 ? -1 : 1) == (b < 0 ? -1 : 1);
};
flixel_math_FlxMath.fastSin = function(n) {
	n *= 0.3183098862;
	if(n > 1) {
		n -= Math.ceil(n) >> 1 << 1;
	} else if(n < -1) {
		n += Math.ceil(-n) >> 1 << 1;
	}
	if(n > 0) {
		return n * (3.1 + n * (0.5 + n * (-7.2 + n * 3.6)));
	} else {
		return n * (3.1 - n * (0.5 + n * (7.2 + n * 3.6)));
	}
};
flixel_math_FlxMath.fastCos = function(n) {
	var n1 = n + 1.570796327;
	n1 *= 0.3183098862;
	if(n1 > 1) {
		n1 -= Math.ceil(n1) >> 1 << 1;
	} else if(n1 < -1) {
		n1 += Math.ceil(-n1) >> 1 << 1;
	}
	if(n1 > 0) {
		return n1 * (3.1 + n1 * (0.5 + n1 * (-7.2 + n1 * 3.6)));
	} else {
		return n1 * (3.1 - n1 * (0.5 + n1 * (7.2 + n1 * 3.6)));
	}
};
flixel_math_FlxMath.sinh = function(n) {
	return (Math.exp(n) - Math.exp(-n)) / 2;
};
flixel_math_FlxMath.maxInt = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
flixel_math_FlxMath.minInt = function(a,b) {
	if(a > b) {
		return b;
	} else {
		return a;
	}
};
flixel_math_FlxMath.absInt = function(n) {
	if(n > 0) {
		return n;
	} else {
		return -n;
	}
};
var flixel_math_FlxMatrix = function(a,b,c,d,tx,ty) {
	openfl_geom_Matrix.call(this,a,b,c,d,tx,ty);
};
$hxClasses["flixel.math.FlxMatrix"] = flixel_math_FlxMatrix;
flixel_math_FlxMatrix.__name__ = ["flixel","math","FlxMatrix"];
flixel_math_FlxMatrix.__super__ = openfl_geom_Matrix;
flixel_math_FlxMatrix.prototype = $extend(openfl_geom_Matrix.prototype,{
	rotateWithTrig: function(cos,sin) {
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
		return this;
	}
	,rotateBy180: function() {
		this.setTo(-this.a,-this.b,-this.c,-this.d,-this.tx,-this.ty);
		return this;
	}
	,rotateByPositive90: function() {
		this.setTo(-this.b,this.a,-this.d,this.c,-this.ty,this.tx);
		return this;
	}
	,rotateByNegative90: function() {
		this.setTo(this.b,-this.a,this.d,-this.c,this.ty,-this.tx);
		return this;
	}
	,transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__class__: flixel_math_FlxMatrix
});
var flixel_math_FlxCallbackPoint = function(setXCallback,setYCallback,setXYCallback) {
	flixel_math_FlxPoint.call(this);
	this._setXCallback = setXCallback;
	this._setYCallback = setXYCallback;
	this._setXYCallback = setXYCallback;
	if(this._setXCallback != null) {
		if(this._setYCallback == null) {
			this._setYCallback = setXCallback;
		}
		if(this._setXYCallback == null) {
			this._setXYCallback = setXCallback;
		}
	}
};
$hxClasses["flixel.math.FlxCallbackPoint"] = flixel_math_FlxCallbackPoint;
flixel_math_FlxCallbackPoint.__name__ = ["flixel","math","FlxCallbackPoint"];
flixel_math_FlxCallbackPoint.__super__ = flixel_math_FlxPoint;
flixel_math_FlxCallbackPoint.prototype = $extend(flixel_math_FlxPoint.prototype,{
	_setXCallback: null
	,_setYCallback: null
	,_setXYCallback: null
	,set: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		flixel_math_FlxPoint.prototype.set.call(this,X,Y);
		if(this._setXYCallback != null) {
			this._setXYCallback(this);
		}
		return this;
	}
	,set_x: function(Value) {
		flixel_math_FlxPoint.prototype.set_x.call(this,Value);
		if(this._setXCallback != null) {
			this._setXCallback(this);
		}
		return Value;
	}
	,set_y: function(Value) {
		flixel_math_FlxPoint.prototype.set_y.call(this,Value);
		if(this._setYCallback != null) {
			this._setYCallback(this);
		}
		return Value;
	}
	,destroy: function() {
		flixel_math_FlxPoint.prototype.destroy.call(this);
		this._setXCallback = null;
		this._setYCallback = null;
		this._setXYCallback = null;
	}
	,put: function() {
	}
	,__class__: flixel_math_FlxCallbackPoint
});
var flixel_util_FlxPool_$flixel_$math_$FlxVector = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_math_FlxVector"] = flixel_util_FlxPool_$flixel_$math_$FlxVector;
flixel_util_FlxPool_$flixel_$math_$FlxVector.__name__ = ["flixel","util","FlxPool_flixel_math_FlxVector"];
flixel_util_FlxPool_$flixel_$math_$FlxVector.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$math_$FlxVector.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$math_$FlxVector
	,__properties__: {get_length:"get_length"}
};
var flixel_math_FlxVector = function(X,Y) {
	flixel_math_FlxPoint.call(this,X,Y);
};
$hxClasses["flixel.math.FlxVector"] = flixel_math_FlxVector;
flixel_math_FlxVector.__name__ = ["flixel","math","FlxVector"];
flixel_math_FlxVector.get = function(X,Y) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	var vector = flixel_math_FlxVector._pool.get().set(X,Y);
	vector._inPool = false;
	return vector;
};
flixel_math_FlxVector.__super__ = flixel_math_FlxPoint;
flixel_math_FlxVector.prototype = $extend(flixel_math_FlxPoint.prototype,{
	put: function() {
		if(!this._inPool) {
			this._inPool = true;
			flixel_math_FlxVector._pool.putUnsafe(this);
		}
	}
	,set: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.set_x(X);
		this.set_y(Y);
		return this;
	}
	,scale: function(k) {
		flixel_math_FlxPoint.prototype.scale.call(this,k);
		return this;
	}
	,scaleNew: function(k) {
		return this.clone().scale(k);
	}
	,addNew: function(v) {
		var nv = this.clone();
		nv.addPoint(v);
		return nv;
	}
	,subtractNew: function(v) {
		var nv = this.clone();
		nv.subtractPoint(v);
		return nv;
	}
	,dotProduct: function(v) {
		return this.x * v.x + this.y * v.y;
	}
	,dotProdWithNormalizing: function(v) {
		var normalized = v.clone(flixel_math_FlxVector._vector1).normalize();
		return this.x * normalized.x + this.y * normalized.y;
	}
	,isPerpendicular: function(v) {
		return Math.abs(this.x * v.x + this.y * v.y) < 9.99999999999999841e-15;
	}
	,crossProductLength: function(v) {
		return this.x * v.y - this.y * v.x;
	}
	,isParallel: function(v) {
		return Math.abs(this.x * v.y - this.y * v.x) < 9.99999999999999841e-15;
	}
	,isZero: function() {
		if(Math.abs(this.x) < 0.0000001) {
			return Math.abs(this.y) < 0.0000001;
		} else {
			return false;
		}
	}
	,zero: function() {
		this.set_x(this.set_y(0));
		return this;
	}
	,normalize: function() {
		if(Math.abs(this.x) < 0.0000001 && Math.abs(this.y) < 0.0000001) {
			return this;
		}
		return this.scale(1 / Math.sqrt(this.x * this.x + this.y * this.y));
	}
	,isNormalized: function() {
		return Math.abs(this.x * this.x + this.y * this.y - 1) < 9.99999999999999841e-15;
	}
	,rotateByRadians: function(rads) {
		var s = Math.sin(rads);
		var c = Math.cos(rads);
		var tempX = this.x;
		this.set_x(tempX * c - this.y * s);
		this.set_y(tempX * s + this.y * c);
		return this;
	}
	,rotateByDegrees: function(degs) {
		var rads = degs * (Math.PI / 180);
		var s = Math.sin(rads);
		var c = Math.cos(rads);
		var tempX = this.x;
		this.set_x(tempX * c - this.y * s);
		this.set_y(tempX * s + this.y * c);
		return this;
	}
	,rotateWithTrig: function(sin,cos) {
		var tempX = this.x;
		this.set_x(tempX * cos - this.y * sin);
		this.set_y(tempX * sin + this.y * cos);
		return this;
	}
	,rightNormal: function(vec) {
		if(vec == null) {
			var vector = flixel_math_FlxVector._pool.get().set(0,0);
			vector._inPool = false;
			vec = vector;
		}
		vec.set(-this.y,this.x);
		return vec;
	}
	,leftNormal: function(vec) {
		if(vec == null) {
			var vector = flixel_math_FlxVector._pool.get().set(0,0);
			vector._inPool = false;
			vec = vector;
		}
		vec.set(this.y,-this.x);
		return vec;
	}
	,negate: function() {
		var _g = this;
		_g.set_x(_g.x * -1);
		var _g1 = this;
		_g1.set_y(_g1.y * -1);
		return this;
	}
	,negateNew: function() {
		var _this = this.clone();
		_this.set_x(_this.x * -1);
		_this.set_y(_this.y * -1);
		return _this;
	}
	,projectTo: function(v,proj) {
		var dp = this.x * v.x + this.y * v.y;
		var lenSq = v.x * v.x + v.y * v.y;
		if(proj == null) {
			var vector = flixel_math_FlxVector._pool.get().set(0,0);
			vector._inPool = false;
			proj = vector;
		}
		return proj.set(dp * v.x / lenSq,dp * v.y / lenSq);
	}
	,projectToNormalized: function(v,proj) {
		var dp = this.x * v.x + this.y * v.y;
		if(proj == null) {
			var vector = flixel_math_FlxVector._pool.get().set(0,0);
			vector._inPool = false;
			proj = vector;
		}
		return proj.set(dp * v.x,dp * v.y);
	}
	,perpProduct: function(v) {
		return this.y * v.x + -this.x * v.y;
	}
	,ratio: function(a,b,v) {
		if(Math.abs(this.x * v.y - this.y * v.x) < 9.99999999999999841e-15) {
			return NaN;
		}
		if(this.x * this.x + this.y * this.y < 9.99999999999999841e-15 || v.x * v.x + v.y * v.y < 9.99999999999999841e-15) {
			return NaN;
		}
		flixel_math_FlxVector._vector1 = b.clone(flixel_math_FlxVector._vector1);
		flixel_math_FlxVector._vector1.subtractPoint(a);
		var _this = flixel_math_FlxVector._vector1;
		return (_this.y * v.x + -_this.x * v.y) / (this.y * v.x + -this.x * v.y);
	}
	,findIntersection: function(a,b,v,intersection) {
		var t = this.ratio(a,b,v);
		if(intersection == null) {
			var vector = flixel_math_FlxVector._pool.get().set(0,0);
			vector._inPool = false;
			intersection = vector;
		}
		if(isNaN(t)) {
			return intersection.set(NaN,NaN);
		}
		return intersection.set(a.x + t * this.x,a.y + t * this.y);
	}
	,findIntersectionInBounds: function(a,b,v,intersection) {
		if(intersection == null) {
			var vector = flixel_math_FlxVector._pool.get().set(0,0);
			vector._inPool = false;
			intersection = vector;
		}
		var t1 = this.ratio(a,b,v);
		var t2 = v.ratio(b,a,this);
		if(!isNaN(t1) && !isNaN(t2) && t1 > 0 && t1 <= 1 && t2 > 0 && t2 <= 1) {
			return intersection.set(a.x + t1 * this.x,a.y + t1 * this.y);
		}
		return intersection.set(NaN,NaN);
	}
	,truncate: function(max) {
		var l = Math.min(max,Math.sqrt(this.x * this.x + this.y * this.y));
		if(!(Math.abs(this.x) < 0.0000001 && Math.abs(this.y) < 0.0000001)) {
			var a = this.get_radians();
			this.set_x(l * Math.cos(a));
			this.set_y(l * Math.sin(a));
		}
		return this;
	}
	,radiansBetween: function(v) {
		return Math.acos((this.x * v.x + this.y * v.y) / (Math.sqrt(this.x * this.x + this.y * this.y) * Math.sqrt(v.x * v.x + v.y * v.y)));
	}
	,degreesBetween: function(v) {
		return Math.acos((this.x * v.x + this.y * v.y) / (Math.sqrt(this.x * this.x + this.y * this.y) * Math.sqrt(v.x * v.x + v.y * v.y))) * (180 / Math.PI);
	}
	,sign: function(a,b) {
		var signFl = (a.x - this.x) * (b.y - this.y) - (a.y - this.y) * (b.x - this.x);
		if(signFl == 0) {
			return 0;
		}
		return Math.round(signFl / Math.abs(signFl));
	}
	,dist: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,distSquared: function(v) {
		var dx = v.x - this.x;
		var dy = v.y - this.y;
		return dx * dx + dy * dy;
	}
	,bounce: function(normal,bounceCoeff) {
		if(bounceCoeff == null) {
			bounceCoeff = 1;
		}
		var d = (1 + bounceCoeff) * (this.x * normal.x + this.y * normal.y);
		var _g = this;
		_g.set_x(_g.x - d * normal.x);
		var _g1 = this;
		_g1.set_y(_g1.y - d * normal.y);
		return this;
	}
	,bounceWithFriction: function(normal,bounceCoeff,friction) {
		if(friction == null) {
			friction = 0;
		}
		if(bounceCoeff == null) {
			bounceCoeff = 1;
		}
		var p1 = this.projectToNormalized(normal.rightNormal(flixel_math_FlxVector._vector3),flixel_math_FlxVector._vector1);
		var p2 = this.projectToNormalized(normal,flixel_math_FlxVector._vector2);
		var bounceX = -p2.x;
		var bounceY = -p2.y;
		var frictionX = p1.x;
		var frictionY = p1.y;
		this.set_x(bounceX * bounceCoeff + frictionX * friction);
		this.set_y(bounceY * bounceCoeff + frictionY * friction);
		return this;
	}
	,isValid: function() {
		if(!isNaN(this.x) && !isNaN(this.y) && isFinite(this.x)) {
			return isFinite(this.y);
		} else {
			return false;
		}
	}
	,clone: function(vec) {
		if(vec == null) {
			var vector = flixel_math_FlxVector._pool.get().set(0,0);
			vector._inPool = false;
			vec = vector;
		}
		vec.set_x(this.x);
		vec.set_y(this.y);
		return vec;
	}
	,get_dx: function() {
		if(Math.abs(this.x) < 0.0000001 && Math.abs(this.y) < 0.0000001) {
			return 0;
		}
		return this.x / Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_dy: function() {
		if(Math.abs(this.x) < 0.0000001 && Math.abs(this.y) < 0.0000001) {
			return 0;
		}
		return this.y / Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(l) {
		if(!(Math.abs(this.x) < 0.0000001 && Math.abs(this.y) < 0.0000001)) {
			var a = this.get_radians();
			this.set_x(l * Math.cos(a));
			this.set_y(l * Math.sin(a));
		}
		return l;
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y;
	}
	,get_degrees: function() {
		return this.get_radians() * (180 / Math.PI);
	}
	,set_degrees: function(degs) {
		var rads = degs * (Math.PI / 180);
		var len = Math.sqrt(this.x * this.x + this.y * this.y);
		this.set_x(len * Math.cos(rads));
		this.set_y(len * Math.sin(rads));
		return degs;
	}
	,get_radians: function() {
		if(Math.abs(this.x) < 0.0000001 && Math.abs(this.y) < 0.0000001) {
			return 0;
		}
		return Math.atan2(this.y,this.x);
	}
	,set_radians: function(rads) {
		var len = Math.sqrt(this.x * this.x + this.y * this.y);
		this.set_x(len * Math.cos(rads));
		this.set_y(len * Math.sin(rads));
		return rads;
	}
	,get_rx: function() {
		return -this.y;
	}
	,get_ry: function() {
		return this.x;
	}
	,get_lx: function() {
		return this.y;
	}
	,get_ly: function() {
		return -this.x;
	}
	,__class__: flixel_math_FlxVector
	,__properties__: $extend(flixel_math_FlxPoint.prototype.__properties__,{get_ly:"get_ly",get_lx:"get_lx",get_ry:"get_ry",get_rx:"get_rx",set_radians:"set_radians",get_radians:"get_radians",set_degrees:"set_degrees",get_degrees:"get_degrees",get_lengthSquared:"get_lengthSquared",set_length:"set_length",get_length:"get_length",get_dy:"get_dy",get_dx:"get_dx"})
});
var flixel_math_FlxVelocity = function() { };
$hxClasses["flixel.math.FlxVelocity"] = flixel_math_FlxVelocity;
flixel_math_FlxVelocity.__name__ = ["flixel","math","FlxVelocity"];
flixel_math_FlxVelocity.moveTowardsObject = function(Source,Dest,Speed,MaxTime) {
	if(MaxTime == null) {
		MaxTime = 0;
	}
	if(Speed == null) {
		Speed = 60;
	}
	var dx = Dest.x + Dest.origin.x - (Source.x + Source.origin.x);
	var dy = Dest.y + Dest.origin.y - (Source.y + Source.origin.y);
	var a = Math.atan2(dy,dx);
	if(MaxTime > 0) {
		var dx1 = Source.x + Source.origin.x - (Dest.x + Dest.origin.x);
		var dy1 = Source.y + Source.origin.y - (Dest.y + Dest.origin.y);
		var d = Math.sqrt(dx1 * dx1 + dy1 * dy1) | 0;
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_math_FlxVelocity.accelerateTowardsObject = function(Source,Dest,Acceleration,MaxSpeed) {
	var dx = Dest.x + Dest.origin.x - (Source.x + Source.origin.x);
	var dy = Dest.y + Dest.origin.y - (Source.y + Source.origin.y);
	var a = Math.atan2(dy,dx);
	var sinA = Math.sin(a);
	var cosA = Math.cos(a);
	Source.velocity.set(0,0);
	Source.acceleration.set(cosA * Acceleration,sinA * Acceleration);
	Source.maxVelocity.set(Math.abs(cosA * MaxSpeed),Math.abs(sinA * MaxSpeed));
};
flixel_math_FlxVelocity.moveTowardsMouse = function(Source,Speed,MaxTime) {
	if(MaxTime == null) {
		MaxTime = 0;
	}
	if(Speed == null) {
		Speed = 60;
	}
	var a = flixel_math_FlxAngle.angleBetweenMouse(Source);
	if(MaxTime > 0) {
		var dx = Source.x + Source.origin.x - flixel_FlxG.mouse.screenX;
		var dy = Source.y + Source.origin.y - flixel_FlxG.mouse.screenY;
		var d = Math.sqrt(dx * dx + dy * dy) | 0;
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_math_FlxVelocity.moveTowardsTouch = function(Source,Touch,Speed,MaxTime) {
	if(MaxTime == null) {
		MaxTime = 0;
	}
	if(Speed == null) {
		Speed = 60;
	}
	var p = Source.getScreenPosition();
	var dx = Touch.screenX - p.x;
	var dy = Touch.screenY - p.y;
	p.put();
	var a = Math.atan2(dy,dx);
	if(MaxTime > 0) {
		var dx1 = Source.x + Source.origin.x - Touch.screenX;
		var dy1 = Source.y + Source.origin.y - Touch.screenY;
		var d = Math.sqrt(dx1 * dx1 + dy1 * dy1) | 0;
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
};
flixel_math_FlxVelocity.accelerateTowardsMouse = function(Source,Acceleration,MaxSpeed) {
	var a = flixel_math_FlxAngle.angleBetweenMouse(Source);
	var sinA = Math.sin(a);
	var cosA = Math.cos(a);
	Source.velocity.set(0,0);
	Source.acceleration.set(cosA * Acceleration,sinA * Acceleration);
	Source.maxVelocity.set(Math.abs(cosA * MaxSpeed),Math.abs(sinA * MaxSpeed));
};
flixel_math_FlxVelocity.accelerateTowardsTouch = function(Source,Touch,Acceleration,MaxSpeed) {
	var p = Source.getScreenPosition();
	var dx = Touch.screenX - p.x;
	var dy = Touch.screenY - p.y;
	p.put();
	var a = Math.atan2(dy,dx);
	var sinA = Math.sin(a);
	var cosA = Math.cos(a);
	Source.velocity.set(0,0);
	Source.acceleration.set(cosA * Acceleration,sinA * Acceleration);
	Source.maxVelocity.set(Math.abs(cosA * MaxSpeed),Math.abs(sinA * MaxSpeed));
};
flixel_math_FlxVelocity.moveTowardsPoint = function(Source,Target,Speed,MaxTime) {
	if(MaxTime == null) {
		MaxTime = 0;
	}
	if(Speed == null) {
		Speed = 60;
	}
	var a = flixel_math_FlxAngle.angleBetweenPoint(Source,Target);
	if(MaxTime > 0) {
		var dx = Source.x + Source.origin.x - Target.x;
		var dy = Source.y + Source.origin.y - Target.y;
		if(Target._weak) {
			Target.put();
		}
		var d = Math.sqrt(dx * dx + dy * dy) | 0;
		Speed = d / (MaxTime / 1000) | 0;
	}
	Source.velocity.set_x(Math.cos(a) * Speed);
	Source.velocity.set_y(Math.sin(a) * Speed);
	if(Target._weak) {
		Target.put();
	}
};
flixel_math_FlxVelocity.accelerateTowardsPoint = function(Source,Target,Acceleration,MaxSpeed) {
	var a = flixel_math_FlxAngle.angleBetweenPoint(Source,Target);
	var sinA = Math.sin(a);
	var cosA = Math.cos(a);
	Source.velocity.set(0,0);
	Source.acceleration.set(cosA * Acceleration,sinA * Acceleration);
	Source.maxVelocity.set(Math.abs(cosA * MaxSpeed),Math.abs(sinA * MaxSpeed));
	if(Target._weak) {
		Target.put();
	}
};
flixel_math_FlxVelocity.velocityFromAngle = function(Angle,Speed) {
	var a = Angle * (Math.PI / 180);
	var X = Math.cos(a) * Speed;
	var Y = Math.sin(a) * Speed;
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_math_FlxVelocity.velocityFromFacing = function(Parent,Speed) {
	var FacingBitmask = Parent.facing;
	var degrees;
	switch(FacingBitmask) {
	case 1:
		degrees = 180;
		break;
	case 16:
		degrees = 0;
		break;
	case 256:
		degrees = -90;
		break;
	case 4096:
		degrees = 90;
		break;
	default:
		if(FacingBitmask == 257) {
			degrees = -135;
		} else if(FacingBitmask == 272) {
			degrees = -45;
		} else if(FacingBitmask == 4097) {
			degrees = 135;
		} else if(FacingBitmask == 4112) {
			degrees = 45;
		} else {
			degrees = 0;
		}
	}
	var a = degrees * (Math.PI / 180);
	var X = Math.cos(a) * Speed;
	var Y = Math.sin(a) * Speed;
	var point = flixel_math_FlxPoint._pool.get().set(X,Y);
	point._inPool = false;
	return point;
};
flixel_math_FlxVelocity.computeVelocity = function(Velocity,Acceleration,Drag,Max,Elapsed) {
	if(Acceleration != 0) {
		Velocity += Acceleration * Elapsed;
	} else if(Drag != 0) {
		var drag = Drag * Elapsed;
		if(Velocity - drag > 0) {
			Velocity -= drag;
		} else if(Velocity + drag < 0) {
			Velocity += drag;
		} else {
			Velocity = 0;
		}
	}
	if(Velocity != 0 && Max != 0) {
		if(Velocity > Max) {
			Velocity = Max;
		} else if(Velocity < -Max) {
			Velocity = -Max;
		}
	}
	return Velocity;
};
flixel_math_FlxVelocity.accelerateFromAngle = function(source,radians,acceleration,maxSpeed,resetVelocity) {
	if(resetVelocity == null) {
		resetVelocity = true;
	}
	var sinA = Math.sin(radians);
	var cosA = Math.cos(radians);
	if(resetVelocity) {
		source.velocity.set(0,0);
	}
	source.acceleration.set(cosA * acceleration,sinA * acceleration);
	source.maxVelocity.set(Math.abs(cosA * maxSpeed),Math.abs(sinA * maxSpeed));
};
var flixel_system_GraphicLogo = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_GraphicLogo.preload != null) {
		this.__fromImage(flixel_system_GraphicLogo.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_GraphicLogo.preload == null) {
				flixel_system_GraphicLogo.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_GraphicLogo.resourceName),flixel_system_GraphicLogo.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.GraphicLogo"] = flixel_system_GraphicLogo;
flixel_system_GraphicLogo.__name__ = ["flixel","system","GraphicLogo"];
flixel_system_GraphicLogo.preload = null;
flixel_system_GraphicLogo.__super__ = openfl_display_BitmapData;
flixel_system_GraphicLogo.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_GraphicLogo
});
var flixel_system_GraphicVirtualInput = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_GraphicVirtualInput.preload != null) {
		this.__fromImage(flixel_system_GraphicVirtualInput.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_GraphicVirtualInput.preload == null) {
				flixel_system_GraphicVirtualInput.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_GraphicVirtualInput.resourceName),flixel_system_GraphicVirtualInput.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.GraphicVirtualInput"] = flixel_system_GraphicVirtualInput;
flixel_system_GraphicVirtualInput.__name__ = ["flixel","system","GraphicVirtualInput"];
flixel_system_GraphicVirtualInput.preload = null;
flixel_system_GraphicVirtualInput.__super__ = openfl_display_BitmapData;
flixel_system_GraphicVirtualInput.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_GraphicVirtualInput
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	__class__: openfl_utils_IDataOutput
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	__class__: openfl_utils_IDataInput
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	this.__endian = 0;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	position: null
	,__endian: null
	,__length: null
	,readUnsignedByte: function() {
		if(this.position < this.__length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
		this.__length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			bytes.blit(0,this,0,this.length);
			this.b = bytes.b;
			this.length = bytes.length;
			this.data = bytes.data;
		}
		if(this.__length < size) {
			this.__length = size;
		}
	}
	,__class__: openfl_utils_ByteArrayData
});
var flixel_system_VirtualInputData = function(length) {
	if(length == null) {
		length = 0;
	}
	openfl_utils_ByteArrayData.call(this);
	var bytes = haxe_Resource.getBytes(flixel_system_VirtualInputData.resourceName);
	this.__fromBytes(bytes);
};
$hxClasses["flixel.system.VirtualInputData"] = flixel_system_VirtualInputData;
flixel_system_VirtualInputData.__name__ = ["flixel","system","VirtualInputData"];
flixel_system_VirtualInputData.__super__ = openfl_utils_ByteArrayData;
flixel_system_VirtualInputData.prototype = $extend(openfl_utils_ByteArrayData.prototype,{
	__class__: flixel_system_VirtualInputData
});
var flixel_system_FlxAssets = function() { };
$hxClasses["flixel.system.FlxAssets"] = flixel_system_FlxAssets;
flixel_system_FlxAssets.__name__ = ["flixel","system","FlxAssets"];
flixel_system_FlxAssets.drawLogo = function(graph) {
	graph.beginFill(47394);
	graph.moveTo(50,13);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(87,51);
	graph.lineTo(51,87);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(13,50);
	graph.lineTo(50,13);
	graph.endFill();
	graph.beginFill(16761138);
	graph.moveTo(0,0);
	graph.lineTo(25,0);
	graph.lineTo(50,13);
	graph.lineTo(13,50);
	graph.lineTo(0,25);
	graph.lineTo(0,0);
	graph.endFill();
	graph.beginFill(16066382);
	graph.moveTo(100,0);
	graph.lineTo(75,0);
	graph.lineTo(51,13);
	graph.lineTo(87,50);
	graph.lineTo(100,25);
	graph.lineTo(100,0);
	graph.endFill();
	graph.beginFill(3555839);
	graph.moveTo(0,100);
	graph.lineTo(25,100);
	graph.lineTo(50,87);
	graph.lineTo(13,51);
	graph.lineTo(0,75);
	graph.lineTo(0,100);
	graph.endFill();
	graph.beginFill(314875);
	graph.moveTo(100,100);
	graph.lineTo(75,100);
	graph.lineTo(51,87);
	graph.lineTo(87,51);
	graph.lineTo(100,75);
	graph.lineTo(100,100);
	graph.endFill();
};
flixel_system_FlxAssets.getBitmapData = function(id) {
	if(openfl_Assets.exists(id)) {
		return openfl_Assets.getBitmapData(id,false);
	}
	flixel_FlxG.log.advanced("Could not find a BitmapData asset with ID '" + id + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
	return null;
};
flixel_system_FlxAssets.getBitmapFromClass = function(source) {
	return Type.createInstance(source,[0,0]);
};
flixel_system_FlxAssets.resolveBitmapData = function(Graphic) {
	if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData)) {
		return Graphic;
	} else if(js_Boot.__instanceof(Graphic,Class)) {
		return Type.createInstance(Graphic,[0,0]);
	} else if(typeof(Graphic) == "string") {
		if(openfl_Assets.exists(Graphic)) {
			return openfl_Assets.getBitmapData(Graphic,false);
		} else {
			flixel_FlxG.log.advanced("Could not find a BitmapData asset with ID '" + Graphic + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
			return null;
		}
	}
	return null;
};
flixel_system_FlxAssets.resolveKey = function(Graphic,Key) {
	if(Key != null) {
		return Key;
	}
	if(js_Boot.__instanceof(Graphic,openfl_display_BitmapData)) {
		return Key;
	} else if(js_Boot.__instanceof(Graphic,Class)) {
		return Type.getClassName(Graphic);
	} else if(typeof(Graphic) == "string") {
		return Graphic;
	}
	return null;
};
flixel_system_FlxAssets.getSound = function(id) {
	return openfl_Assets.getSound(id + ".ogg");
};
flixel_system_FlxAssets.getVirtualInputFrames = function() {
	var graphic = flixel_graphics_FlxGraphic.fromClass(flixel_system_GraphicVirtualInput);
	return flixel_graphics_frames_FlxAtlasFrames.fromSpriteSheetPacker(graphic,Std.string(new flixel_system_VirtualInputData()));
};
var flixel_system_FlxBGSprite = function() {
	flixel_FlxSprite.call(this);
	this.makeGraphic(1,1,-1,true,flixel_FlxG.bitmap.getUniqueKey("bg_graphic_"));
	this.scrollFactor.set();
};
$hxClasses["flixel.system.FlxBGSprite"] = flixel_system_FlxBGSprite;
flixel_system_FlxBGSprite.__name__ = ["flixel","system","FlxBGSprite"];
flixel_system_FlxBGSprite.__super__ = flixel_FlxSprite;
flixel_system_FlxBGSprite.prototype = $extend(flixel_FlxSprite.prototype,{
	draw: function() {
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			if(!camera.visible || !camera.exists) {
				continue;
			}
			this._matrix.identity();
			this._matrix.scale(camera.width,camera.height);
			camera.drawPixels(this.frame,null,this._matrix,this.colorTransform);
			flixel_FlxBasic.visibleCount++;
		}
	}
	,__class__: flixel_system_FlxBGSprite
});
var flixel_system_FlxBasePreloader = function(MinDisplayTime,AllowedURLs) {
	if(MinDisplayTime == null) {
		MinDisplayTime = 0;
	}
	this._urlChecked = false;
	this._loaded = false;
	this._percent = 0;
	this.siteLockURLIndex = 0;
	this.minDisplayTime = 0;
	NMEPreloader.call(this);
	this.removeChild(this.progress);
	this.removeChild(this.outline);
	this.minDisplayTime = MinDisplayTime;
	if(AllowedURLs != null) {
		this.allowedURLs = AllowedURLs;
	} else {
		this.allowedURLs = [];
	}
	this._startTime = new Date().getTime();
};
$hxClasses["flixel.system.FlxBasePreloader"] = flixel_system_FlxBasePreloader;
flixel_system_FlxBasePreloader.__name__ = ["flixel","system","FlxBasePreloader"];
flixel_system_FlxBasePreloader.__super__ = NMEPreloader;
flixel_system_FlxBasePreloader.prototype = $extend(NMEPreloader.prototype,{
	minDisplayTime: null
	,allowedURLs: null
	,siteLockURLIndex: null
	,_percent: null
	,_width: null
	,_height: null
	,_loaded: null
	,_urlChecked: null
	,_startTime: null
	,create: function() {
	}
	,onInit: function() {
		NMEPreloader.prototype.onInit.call(this);
		openfl_Lib.current.stage.scaleMode = 2;
		openfl_Lib.current.stage.align = 6;
		this.create();
		this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
		this.checkSiteLock();
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		this._percent = bytesTotal != 0 ? bytesLoaded / bytesTotal : 0;
	}
	,onEnterFrame: function(E) {
		var time = new Date().getTime() - this._startTime;
		var min = this.minDisplayTime * 1000;
		var percent = this._percent;
		if(min > 0 && this._percent > time / min) {
			percent = time / min;
		}
		this.update(percent);
		if(this._loaded && (min <= 0 || time / min >= 1)) {
			this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
			NMEPreloader.prototype.onLoaded.call(this);
			this.destroy();
		}
	}
	,destroy: function() {
	}
	,update: function(Percent) {
	}
	,onLoaded: function() {
		this._loaded = true;
		this._percent = 1;
	}
	,createBitmap: function(bitmapDataClass,onLoad) {
		var bmp = new openfl_display_Bitmap();
		bmp.bitmapData = Type.createInstance(bitmapDataClass,[0,0,true,-1,function(_) {
			onLoad(bmp);
		}]);
		return bmp;
	}
	,loadBitmapData: function(bitmapDataClass,onLoad) {
		return Type.createInstance(bitmapDataClass,[0,0,true,-1,onLoad]);
	}
	,checkSiteLock: function() {
		if(!this._urlChecked && this.allowedURLs != null) {
			if(!this.isHostUrlAllowed()) {
				var tmp = new openfl_display_Bitmap(new openfl_display_BitmapData(this.stage.stageWidth,this.stage.stageHeight,true,-1));
				this.addChild(tmp);
				var format = new openfl_text_TextFormat();
				format.color = 0;
				format.size = 16;
				format.align = 0;
				format.bold = true;
				format.font = "system";
				var textField = new openfl_text_TextField();
				textField.set_width(tmp.get_width() - 16);
				textField.set_height(tmp.get_height() - 16);
				textField.set_y(8);
				textField.set_multiline(true);
				textField.set_wordWrap(true);
				textField.set_defaultTextFormat(format);
				textField.set_text("Hi there!  It looks like somebody copied this game without my permission.  Just click anywhere, or copy-paste this URL into your browser.\n\n" + this.allowedURLs[0] + "\n\nto play the game at my site.  Thanks, and have fun!");
				this.addChild(textField);
				textField.addEventListener("click",$bind(this,this.goToMyURL));
				tmp.addEventListener("click",$bind(this,this.goToMyURL));
				this.removeEventListener("enterFrame",$bind(this,this.onEnterFrame));
			} else {
				this._urlChecked = true;
			}
		}
	}
	,goToMyURL: function(e) {
		if(this.allowedURLs[this.siteLockURLIndex] != "localhost") {
			var URL = this.allowedURLs[this.siteLockURLIndex];
			var prefix = "";
			if(!new EReg("^https?://","").match(URL)) {
				prefix = "http://";
			}
			openfl_Lib.getURL(new openfl_net_URLRequest(prefix + URL),"_blank");
		} else {
			openfl_Lib.getURL(new openfl_net_URLRequest(this.allowedURLs[this.siteLockURLIndex]));
		}
	}
	,isHostUrlAllowed: function() {
		if(this.allowedURLs.length == 0) {
			return true;
		}
		var homeDomain = flixel_util_FlxStringUtil.getDomain(window.location.href);
		var _g = 0;
		var _g1 = this.allowedURLs;
		while(_g < _g1.length) {
			var allowedURL = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getDomain(allowedURL) == homeDomain) {
				return true;
			} else if(allowedURL == "localhost" && homeDomain == "localhost") {
				return true;
			}
		}
		return false;
	}
	,__class__: flixel_system_FlxBasePreloader
});
var flixel_system_FlxLinkedList = function() {
	this.exists = true;
};
$hxClasses["flixel.system.FlxLinkedList"] = flixel_system_FlxLinkedList;
flixel_system_FlxLinkedList.__name__ = ["flixel","system","FlxLinkedList"];
flixel_system_FlxLinkedList.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_system_FlxLinkedList._cachedListsHead = null;
flixel_system_FlxLinkedList.recycle = function() {
	if(flixel_system_FlxLinkedList._cachedListsHead != null) {
		var cachedList = flixel_system_FlxLinkedList._cachedListsHead;
		flixel_system_FlxLinkedList._cachedListsHead = flixel_system_FlxLinkedList._cachedListsHead.next;
		flixel_system_FlxLinkedList._NUM_CACHED_FLX_LIST--;
		cachedList.exists = true;
		cachedList.next = null;
		return cachedList;
	} else {
		return new flixel_system_FlxLinkedList();
	}
};
flixel_system_FlxLinkedList.clearCache = function() {
	while(flixel_system_FlxLinkedList._cachedListsHead != null) {
		var node = flixel_system_FlxLinkedList._cachedListsHead;
		flixel_system_FlxLinkedList._cachedListsHead = flixel_system_FlxLinkedList._cachedListsHead.next;
		node.object = null;
		node.next = null;
	}
	flixel_system_FlxLinkedList._NUM_CACHED_FLX_LIST = 0;
};
flixel_system_FlxLinkedList.prototype = {
	object: null
	,next: null
	,exists: null
	,destroy: function() {
		if(!this.exists) {
			return;
		}
		this.object = null;
		if(this.next != null) {
			this.next.destroy();
		}
		this.exists = false;
		this.next = flixel_system_FlxLinkedList._cachedListsHead;
		flixel_system_FlxLinkedList._cachedListsHead = this;
		flixel_system_FlxLinkedList._NUM_CACHED_FLX_LIST++;
	}
	,__class__: flixel_system_FlxLinkedList
};
var flixel_system__$FlxPreloader_GraphicLogoLight = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system__$FlxPreloader_GraphicLogoLight.preload != null) {
		this.__fromImage(flixel_system__$FlxPreloader_GraphicLogoLight.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system__$FlxPreloader_GraphicLogoLight.preload == null) {
				flixel_system__$FlxPreloader_GraphicLogoLight.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system__$FlxPreloader_GraphicLogoLight.resourceName),flixel_system__$FlxPreloader_GraphicLogoLight.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system._FlxPreloader.GraphicLogoLight"] = flixel_system__$FlxPreloader_GraphicLogoLight;
flixel_system__$FlxPreloader_GraphicLogoLight.__name__ = ["flixel","system","_FlxPreloader","GraphicLogoLight"];
flixel_system__$FlxPreloader_GraphicLogoLight.preload = null;
flixel_system__$FlxPreloader_GraphicLogoLight.__super__ = openfl_display_BitmapData;
flixel_system__$FlxPreloader_GraphicLogoLight.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system__$FlxPreloader_GraphicLogoLight
});
var flixel_system__$FlxPreloader_GraphicLogoCorners = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system__$FlxPreloader_GraphicLogoCorners.preload != null) {
		this.__fromImage(flixel_system__$FlxPreloader_GraphicLogoCorners.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system__$FlxPreloader_GraphicLogoCorners.preload == null) {
				flixel_system__$FlxPreloader_GraphicLogoCorners.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system__$FlxPreloader_GraphicLogoCorners.resourceName),flixel_system__$FlxPreloader_GraphicLogoCorners.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system._FlxPreloader.GraphicLogoCorners"] = flixel_system__$FlxPreloader_GraphicLogoCorners;
flixel_system__$FlxPreloader_GraphicLogoCorners.__name__ = ["flixel","system","_FlxPreloader","GraphicLogoCorners"];
flixel_system__$FlxPreloader_GraphicLogoCorners.preload = null;
flixel_system__$FlxPreloader_GraphicLogoCorners.__super__ = openfl_display_BitmapData;
flixel_system__$FlxPreloader_GraphicLogoCorners.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system__$FlxPreloader_GraphicLogoCorners
});
var flixel_system_FlxPreloader = function(MinDisplayTime,AllowedURLs) {
	if(MinDisplayTime == null) {
		MinDisplayTime = 0;
	}
	flixel_system_FlxBasePreloader.call(this,MinDisplayTime,AllowedURLs);
};
$hxClasses["flixel.system.FlxPreloader"] = flixel_system_FlxPreloader;
flixel_system_FlxPreloader.__name__ = ["flixel","system","FlxPreloader"];
flixel_system_FlxPreloader.__super__ = flixel_system_FlxBasePreloader;
flixel_system_FlxPreloader.prototype = $extend(flixel_system_FlxBasePreloader.prototype,{
	_buffer: null
	,_bmpBar: null
	,_text: null
	,_logo: null
	,_logoGlow: null
	,create: function() {
		var _gthis = this;
		this._buffer = new openfl_display_Sprite();
		this._buffer.set_scaleX(this._buffer.set_scaleY(2));
		this.addChild(this._buffer);
		this._width = openfl_Lib.current.stage.stageWidth / this._buffer.get_scaleX() | 0;
		this._height = openfl_Lib.current.stage.stageHeight / this._buffer.get_scaleY() | 0;
		this._buffer.addChild(new openfl_display_Bitmap(new openfl_display_BitmapData(this._width,this._height,false,13406)));
		var logoLight = this.createBitmap(flixel_system__$FlxPreloader_GraphicLogoLight,function(logoLight1) {
			logoLight1.set_width(logoLight1.set_height(_gthis._height));
			logoLight1.set_x((_gthis._width - logoLight1.get_width()) / 2);
		});
		logoLight.smoothing = true;
		this._buffer.addChild(logoLight);
		this._bmpBar = new openfl_display_Bitmap(new openfl_display_BitmapData(1,7,false,6253311));
		this._bmpBar.set_x(4);
		this._bmpBar.set_y(this._height - 11);
		this._buffer.addChild(this._bmpBar);
		this._text = new openfl_text_TextField();
		this._text.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,8,6253311));
		this._text.set_embedFonts(true);
		this._text.set_selectable(false);
		this._text.set_multiline(false);
		this._text.set_x(2);
		this._text.set_y(this._bmpBar.get_y() - 11);
		this._text.set_width(200);
		this._buffer.addChild(this._text);
		this._logo = new openfl_display_Sprite();
		flixel_system_FlxAssets.drawLogo(this._logo.get_graphics());
		this._logo.set_scaleX(this._logo.set_scaleY(this._height / 8 * 0.04));
		this._logo.set_x((this._width - this._logo.get_width()) / 2);
		this._logo.set_y((this._height - this._logo.get_height()) / 2);
		this._buffer.addChild(this._logo);
		this._logoGlow = new openfl_display_Sprite();
		flixel_system_FlxAssets.drawLogo(this._logoGlow.get_graphics());
		this._logoGlow.set_blendMode(12);
		this._logoGlow.set_scaleX(this._logoGlow.set_scaleY(this._height / 8 * 0.04));
		this._logoGlow.set_x((this._width - this._logoGlow.get_width()) / 2);
		this._logoGlow.set_y((this._height - this._logoGlow.get_height()) / 2);
		this._buffer.addChild(this._logoGlow);
		var corners = this.createBitmap(flixel_system__$FlxPreloader_GraphicLogoCorners,function(corners1) {
			corners1.set_width(_gthis._width);
			corners1.set_height(_gthis.get_height());
		});
		corners.smoothing = true;
		this._buffer.addChild(corners);
		var bitmap = new openfl_display_Bitmap(new openfl_display_BitmapData(this._width,this._height,false,16777215));
		var i = 0;
		var j = 0;
		while(i < this._height) {
			j = 0;
			while(j < this._width) bitmap.bitmapData.setPixel(j++,i,0);
			i += 2;
		}
		bitmap.set_blendMode(11);
		bitmap.set_alpha(0.25);
		this._buffer.addChild(bitmap);
		flixel_system_FlxBasePreloader.prototype.create.call(this);
	}
	,destroy: function() {
		if(this._buffer != null) {
			this.removeChild(this._buffer);
		}
		this._buffer = null;
		this._bmpBar = null;
		this._text = null;
		this._logo = null;
		this._logoGlow = null;
		flixel_system_FlxBasePreloader.prototype.destroy.call(this);
	}
	,update: function(Percent) {
		this._bmpBar.set_scaleX(Percent * (this._width - 8));
		this._text.set_text(Std.string(flixel_FlxG.VERSION) + " " + (Percent * 100 | 0) + "%");
		if(Percent < 0.1) {
			this._logoGlow.set_alpha(0);
			this._logo.set_alpha(0);
		} else if(Percent < 0.15) {
			this._logoGlow.set_alpha(Math.random());
			this._logo.set_alpha(0);
		} else if(Percent < 0.2) {
			this._logoGlow.set_alpha(0);
			this._logo.set_alpha(0);
		} else if(Percent < 0.25) {
			this._logoGlow.set_alpha(0);
			this._logo.set_alpha(Math.random());
		} else if(Percent < 0.7) {
			this._logoGlow.set_alpha((Percent - 0.45) / 0.45);
			this._logo.set_alpha(1);
		} else if(Percent > 0.8 && Percent < 0.9) {
			this._logoGlow.set_alpha(1 - (Percent - 0.8) / 0.1);
			this._logo.set_alpha(0);
		} else if(Percent > 0.9) {
			this._buffer.set_alpha(1 - (Percent - 0.9) / 0.1);
		}
	}
	,__class__: flixel_system_FlxPreloader
});
var flixel_system_FlxQuadTree = function(X,Y,Width,Height,Parent) {
	flixel_math_FlxRect.call(this);
	this.x = X;
	this.y = Y;
	this.width = Width;
	this.height = Height;
	this.reset(X,Y,Width,Height,Parent);
};
$hxClasses["flixel.system.FlxQuadTree"] = flixel_system_FlxQuadTree;
flixel_system_FlxQuadTree.__name__ = ["flixel","system","FlxQuadTree"];
flixel_system_FlxQuadTree.divisions = null;
flixel_system_FlxQuadTree._min = null;
flixel_system_FlxQuadTree._object = null;
flixel_system_FlxQuadTree._objectLeftEdge = null;
flixel_system_FlxQuadTree._objectTopEdge = null;
flixel_system_FlxQuadTree._objectRightEdge = null;
flixel_system_FlxQuadTree._objectBottomEdge = null;
flixel_system_FlxQuadTree._list = null;
flixel_system_FlxQuadTree._useBothLists = null;
flixel_system_FlxQuadTree._processingCallback = null;
flixel_system_FlxQuadTree._notifyCallback = null;
flixel_system_FlxQuadTree._iterator = null;
flixel_system_FlxQuadTree._objectHullX = null;
flixel_system_FlxQuadTree._objectHullY = null;
flixel_system_FlxQuadTree._objectHullWidth = null;
flixel_system_FlxQuadTree._objectHullHeight = null;
flixel_system_FlxQuadTree._checkObjectHullX = null;
flixel_system_FlxQuadTree._checkObjectHullY = null;
flixel_system_FlxQuadTree._checkObjectHullWidth = null;
flixel_system_FlxQuadTree._checkObjectHullHeight = null;
flixel_system_FlxQuadTree._cachedTreesHead = null;
flixel_system_FlxQuadTree.recycle = function(X,Y,Width,Height,Parent) {
	if(flixel_system_FlxQuadTree._cachedTreesHead != null) {
		var cachedTree = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = flixel_system_FlxQuadTree._cachedTreesHead.next;
		flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES--;
		cachedTree.reset(X,Y,Width,Height,Parent);
		return cachedTree;
	} else {
		return new flixel_system_FlxQuadTree(X,Y,Width,Height,Parent);
	}
};
flixel_system_FlxQuadTree.clearCache = function() {
	while(flixel_system_FlxQuadTree._cachedTreesHead != null) {
		var node = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = flixel_system_FlxQuadTree._cachedTreesHead.next;
		node.next = null;
	}
	flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;
};
flixel_system_FlxQuadTree.__super__ = flixel_math_FlxRect;
flixel_system_FlxQuadTree.prototype = $extend(flixel_math_FlxRect.prototype,{
	exists: null
	,_canSubdivide: null
	,_headA: null
	,_tailA: null
	,_headB: null
	,_tailB: null
	,_northWestTree: null
	,_northEastTree: null
	,_southEastTree: null
	,_southWestTree: null
	,_leftEdge: null
	,_rightEdge: null
	,_topEdge: null
	,_bottomEdge: null
	,_halfWidth: null
	,_halfHeight: null
	,_midpointX: null
	,_midpointY: null
	,next: null
	,reset: function(X,Y,Width,Height,Parent) {
		this.exists = true;
		this.x = X;
		this.y = Y;
		this.width = Width;
		this.height = Height;
		this._headA = this._tailA = flixel_system_FlxLinkedList.recycle();
		this._headB = this._tailB = flixel_system_FlxLinkedList.recycle();
		if(Parent != null) {
			var iterator;
			var ot;
			if(Parent._headA.object != null) {
				iterator = Parent._headA;
				while(iterator != null) {
					if(this._tailA.object != null) {
						ot = this._tailA;
						this._tailA = flixel_system_FlxLinkedList.recycle();
						ot.next = this._tailA;
					}
					this._tailA.object = iterator.object;
					iterator = iterator.next;
				}
			}
			if(Parent._headB.object != null) {
				iterator = Parent._headB;
				while(iterator != null) {
					if(this._tailB.object != null) {
						ot = this._tailB;
						this._tailB = flixel_system_FlxLinkedList.recycle();
						ot.next = this._tailB;
					}
					this._tailB.object = iterator.object;
					iterator = iterator.next;
				}
			}
		} else {
			flixel_system_FlxQuadTree._min = Math.floor((this.width + this.height) / (2 * flixel_system_FlxQuadTree.divisions));
		}
		this._canSubdivide = this.width > flixel_system_FlxQuadTree._min || this.height > flixel_system_FlxQuadTree._min;
		this._northWestTree = null;
		this._northEastTree = null;
		this._southEastTree = null;
		this._southWestTree = null;
		this._leftEdge = this.x;
		this._rightEdge = this.x + this.width;
		this._halfWidth = this.width / 2;
		this._midpointX = this._leftEdge + this._halfWidth;
		this._topEdge = this.y;
		this._bottomEdge = this.y + this.height;
		this._halfHeight = this.height / 2;
		this._midpointY = this._topEdge + this._halfHeight;
	}
	,destroy: function() {
		this._headA = flixel_util_FlxDestroyUtil.destroy(this._headA);
		this._headB = flixel_util_FlxDestroyUtil.destroy(this._headB);
		this._tailA = flixel_util_FlxDestroyUtil.destroy(this._tailA);
		this._tailB = flixel_util_FlxDestroyUtil.destroy(this._tailB);
		this._northWestTree = flixel_util_FlxDestroyUtil.destroy(this._northWestTree);
		this._northEastTree = flixel_util_FlxDestroyUtil.destroy(this._northEastTree);
		this._southWestTree = flixel_util_FlxDestroyUtil.destroy(this._southWestTree);
		this._southEastTree = flixel_util_FlxDestroyUtil.destroy(this._southEastTree);
		flixel_system_FlxQuadTree._object = null;
		flixel_system_FlxQuadTree._processingCallback = null;
		flixel_system_FlxQuadTree._notifyCallback = null;
		this.exists = false;
		this.next = flixel_system_FlxQuadTree._cachedTreesHead;
		flixel_system_FlxQuadTree._cachedTreesHead = this;
		flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES++;
		flixel_math_FlxRect.prototype.destroy.call(this);
	}
	,load: function(ObjectOrGroup1,ObjectOrGroup2,NotifyCallback,ProcessCallback) {
		this.add(ObjectOrGroup1,0);
		if(ObjectOrGroup2 != null) {
			this.add(ObjectOrGroup2,1);
			flixel_system_FlxQuadTree._useBothLists = true;
		} else {
			flixel_system_FlxQuadTree._useBothLists = false;
		}
		flixel_system_FlxQuadTree._notifyCallback = NotifyCallback;
		flixel_system_FlxQuadTree._processingCallback = ProcessCallback;
	}
	,add: function(ObjectOrGroup,list) {
		flixel_system_FlxQuadTree._list = list;
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			var i = 0;
			var basic;
			var members = group.members;
			var l = group.length;
			while(i < l) {
				basic = members[i++];
				if(basic != null && basic.exists) {
					group = flixel_group_FlxTypedGroup.resolveGroup(basic);
					if(group != null) {
						this.add(group,list);
					} else {
						flixel_system_FlxQuadTree._object = basic;
						if(flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions != 0) {
							flixel_system_FlxQuadTree._objectLeftEdge = flixel_system_FlxQuadTree._object.x;
							flixel_system_FlxQuadTree._objectTopEdge = flixel_system_FlxQuadTree._object.y;
							flixel_system_FlxQuadTree._objectRightEdge = flixel_system_FlxQuadTree._object.x + flixel_system_FlxQuadTree._object.get_width();
							flixel_system_FlxQuadTree._objectBottomEdge = flixel_system_FlxQuadTree._object.y + flixel_system_FlxQuadTree._object.get_height();
							this.addObject();
						}
					}
				}
			}
		} else {
			flixel_system_FlxQuadTree._object = ObjectOrGroup;
			if(flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions != 0) {
				flixel_system_FlxQuadTree._objectLeftEdge = flixel_system_FlxQuadTree._object.x;
				flixel_system_FlxQuadTree._objectTopEdge = flixel_system_FlxQuadTree._object.y;
				flixel_system_FlxQuadTree._objectRightEdge = flixel_system_FlxQuadTree._object.x + flixel_system_FlxQuadTree._object.get_width();
				flixel_system_FlxQuadTree._objectBottomEdge = flixel_system_FlxQuadTree._object.y + flixel_system_FlxQuadTree._object.get_height();
				this.addObject();
			}
		}
	}
	,addObject: function() {
		if(!this._canSubdivide || this._leftEdge >= flixel_system_FlxQuadTree._objectLeftEdge && this._rightEdge <= flixel_system_FlxQuadTree._objectRightEdge && this._topEdge >= flixel_system_FlxQuadTree._objectTopEdge && this._bottomEdge <= flixel_system_FlxQuadTree._objectBottomEdge) {
			this.addToList();
			return;
		}
		if(flixel_system_FlxQuadTree._objectLeftEdge > this._leftEdge && flixel_system_FlxQuadTree._objectRightEdge < this._midpointX) {
			if(flixel_system_FlxQuadTree._objectTopEdge > this._topEdge && flixel_system_FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northWestTree == null) {
					this._northWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
				}
				this._northWestTree.addObject();
				return;
			}
			if(flixel_system_FlxQuadTree._objectTopEdge > this._midpointY && flixel_system_FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southWestTree == null) {
					this._southWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
				}
				this._southWestTree.addObject();
				return;
			}
		}
		if(flixel_system_FlxQuadTree._objectLeftEdge > this._midpointX && flixel_system_FlxQuadTree._objectRightEdge < this._rightEdge) {
			if(flixel_system_FlxQuadTree._objectTopEdge > this._topEdge && flixel_system_FlxQuadTree._objectBottomEdge < this._midpointY) {
				if(this._northEastTree == null) {
					this._northEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
				}
				this._northEastTree.addObject();
				return;
			}
			if(flixel_system_FlxQuadTree._objectTopEdge > this._midpointY && flixel_system_FlxQuadTree._objectBottomEdge < this._bottomEdge) {
				if(this._southEastTree == null) {
					this._southEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
				}
				this._southEastTree.addObject();
				return;
			}
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._leftEdge && flixel_system_FlxQuadTree._objectLeftEdge < this._midpointX && flixel_system_FlxQuadTree._objectBottomEdge > this._topEdge && flixel_system_FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northWestTree == null) {
				this._northWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._topEdge,this._halfWidth,this._halfHeight,this);
			}
			this._northWestTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._midpointX && flixel_system_FlxQuadTree._objectLeftEdge < this._rightEdge && flixel_system_FlxQuadTree._objectBottomEdge > this._topEdge && flixel_system_FlxQuadTree._objectTopEdge < this._midpointY) {
			if(this._northEastTree == null) {
				this._northEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._topEdge,this._halfWidth,this._halfHeight,this);
			}
			this._northEastTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._midpointX && flixel_system_FlxQuadTree._objectLeftEdge < this._rightEdge && flixel_system_FlxQuadTree._objectBottomEdge > this._midpointY && flixel_system_FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southEastTree == null) {
				this._southEastTree = flixel_system_FlxQuadTree.recycle(this._midpointX,this._midpointY,this._halfWidth,this._halfHeight,this);
			}
			this._southEastTree.addObject();
		}
		if(flixel_system_FlxQuadTree._objectRightEdge > this._leftEdge && flixel_system_FlxQuadTree._objectLeftEdge < this._midpointX && flixel_system_FlxQuadTree._objectBottomEdge > this._midpointY && flixel_system_FlxQuadTree._objectTopEdge < this._bottomEdge) {
			if(this._southWestTree == null) {
				this._southWestTree = flixel_system_FlxQuadTree.recycle(this._leftEdge,this._midpointY,this._halfWidth,this._halfHeight,this);
			}
			this._southWestTree.addObject();
		}
	}
	,addToList: function() {
		var ot;
		if(flixel_system_FlxQuadTree._list == 0) {
			if(this._tailA.object != null) {
				ot = this._tailA;
				this._tailA = flixel_system_FlxLinkedList.recycle();
				ot.next = this._tailA;
			}
			this._tailA.object = flixel_system_FlxQuadTree._object;
		} else {
			if(this._tailB.object != null) {
				ot = this._tailB;
				this._tailB = flixel_system_FlxLinkedList.recycle();
				ot.next = this._tailB;
			}
			this._tailB.object = flixel_system_FlxQuadTree._object;
		}
		if(!this._canSubdivide) {
			return;
		}
		if(this._northWestTree != null) {
			this._northWestTree.addToList();
		}
		if(this._northEastTree != null) {
			this._northEastTree.addToList();
		}
		if(this._southEastTree != null) {
			this._southEastTree.addToList();
		}
		if(this._southWestTree != null) {
			this._southWestTree.addToList();
		}
	}
	,execute: function() {
		var overlapProcessed = false;
		if(this._headA.object != null) {
			var iterator = this._headA;
			while(iterator != null) {
				flixel_system_FlxQuadTree._object = iterator.object;
				if(flixel_system_FlxQuadTree._useBothLists) {
					flixel_system_FlxQuadTree._iterator = this._headB;
				} else {
					flixel_system_FlxQuadTree._iterator = iterator.next;
				}
				if(flixel_system_FlxQuadTree._object != null && flixel_system_FlxQuadTree._object.exists && flixel_system_FlxQuadTree._object.allowCollisions > 0 && flixel_system_FlxQuadTree._iterator != null && flixel_system_FlxQuadTree._iterator.object != null && this.overlapNode()) {
					overlapProcessed = true;
				}
				iterator = iterator.next;
			}
		}
		if(this._northWestTree != null && this._northWestTree.execute()) {
			overlapProcessed = true;
		}
		if(this._northEastTree != null && this._northEastTree.execute()) {
			overlapProcessed = true;
		}
		if(this._southEastTree != null && this._southEastTree.execute()) {
			overlapProcessed = true;
		}
		if(this._southWestTree != null && this._southWestTree.execute()) {
			overlapProcessed = true;
		}
		return overlapProcessed;
	}
	,overlapNode: function() {
		flixel_system_FlxQuadTree._objectHullX = flixel_system_FlxQuadTree._object.x < flixel_system_FlxQuadTree._object.last.x ? flixel_system_FlxQuadTree._object.x : flixel_system_FlxQuadTree._object.last.x;
		flixel_system_FlxQuadTree._objectHullY = flixel_system_FlxQuadTree._object.y < flixel_system_FlxQuadTree._object.last.y ? flixel_system_FlxQuadTree._object.y : flixel_system_FlxQuadTree._object.last.y;
		flixel_system_FlxQuadTree._objectHullWidth = flixel_system_FlxQuadTree._object.x - flixel_system_FlxQuadTree._object.last.x;
		flixel_system_FlxQuadTree._objectHullWidth = flixel_system_FlxQuadTree._object.get_width() + (flixel_system_FlxQuadTree._objectHullWidth > 0 ? flixel_system_FlxQuadTree._objectHullWidth : -flixel_system_FlxQuadTree._objectHullWidth);
		flixel_system_FlxQuadTree._objectHullHeight = flixel_system_FlxQuadTree._object.y - flixel_system_FlxQuadTree._object.last.y;
		flixel_system_FlxQuadTree._objectHullHeight = flixel_system_FlxQuadTree._object.get_height() + (flixel_system_FlxQuadTree._objectHullHeight > 0 ? flixel_system_FlxQuadTree._objectHullHeight : -flixel_system_FlxQuadTree._objectHullHeight);
		var overlapProcessed = false;
		var checkObject;
		while(flixel_system_FlxQuadTree._iterator != null) {
			checkObject = flixel_system_FlxQuadTree._iterator.object;
			if(flixel_system_FlxQuadTree._object == checkObject || !checkObject.exists || checkObject.allowCollisions <= 0) {
				flixel_system_FlxQuadTree._iterator = flixel_system_FlxQuadTree._iterator.next;
				continue;
			}
			flixel_system_FlxQuadTree._checkObjectHullX = checkObject.x < checkObject.last.x ? checkObject.x : checkObject.last.x;
			flixel_system_FlxQuadTree._checkObjectHullY = checkObject.y < checkObject.last.y ? checkObject.y : checkObject.last.y;
			flixel_system_FlxQuadTree._checkObjectHullWidth = checkObject.x - checkObject.last.x;
			flixel_system_FlxQuadTree._checkObjectHullWidth = checkObject.get_width() + (flixel_system_FlxQuadTree._checkObjectHullWidth > 0 ? flixel_system_FlxQuadTree._checkObjectHullWidth : -flixel_system_FlxQuadTree._checkObjectHullWidth);
			flixel_system_FlxQuadTree._checkObjectHullHeight = checkObject.y - checkObject.last.y;
			flixel_system_FlxQuadTree._checkObjectHullHeight = checkObject.get_height() + (flixel_system_FlxQuadTree._checkObjectHullHeight > 0 ? flixel_system_FlxQuadTree._checkObjectHullHeight : -flixel_system_FlxQuadTree._checkObjectHullHeight);
			if(flixel_system_FlxQuadTree._objectHullX + flixel_system_FlxQuadTree._objectHullWidth > flixel_system_FlxQuadTree._checkObjectHullX && flixel_system_FlxQuadTree._objectHullX < flixel_system_FlxQuadTree._checkObjectHullX + flixel_system_FlxQuadTree._checkObjectHullWidth && flixel_system_FlxQuadTree._objectHullY + flixel_system_FlxQuadTree._objectHullHeight > flixel_system_FlxQuadTree._checkObjectHullY && flixel_system_FlxQuadTree._objectHullY < flixel_system_FlxQuadTree._checkObjectHullY + flixel_system_FlxQuadTree._checkObjectHullHeight) {
				if(flixel_system_FlxQuadTree._processingCallback == null || flixel_system_FlxQuadTree._processingCallback(flixel_system_FlxQuadTree._object,checkObject)) {
					overlapProcessed = true;
					if(flixel_system_FlxQuadTree._notifyCallback != null) {
						flixel_system_FlxQuadTree._notifyCallback(flixel_system_FlxQuadTree._object,checkObject);
					}
				}
			}
			if(flixel_system_FlxQuadTree._iterator != null) {
				flixel_system_FlxQuadTree._iterator = flixel_system_FlxQuadTree._iterator.next;
			}
		}
		return overlapProcessed;
	}
	,__class__: flixel_system_FlxQuadTree
});
var flixel_system_FlxSound = function() {
	this._alreadyPaused = false;
	this._volumeAdjust = 1.0;
	this._length = 0;
	this._time = 0;
	this.loopTime = 0;
	flixel_FlxBasic.call(this);
	this.reset();
};
$hxClasses["flixel.system.FlxSound"] = flixel_system_FlxSound;
flixel_system_FlxSound.__name__ = ["flixel","system","FlxSound"];
flixel_system_FlxSound.__super__ = flixel_FlxBasic;
flixel_system_FlxSound.prototype = $extend(flixel_FlxBasic.prototype,{
	x: null
	,y: null
	,persist: null
	,name: null
	,artist: null
	,amplitude: null
	,amplitudeLeft: null
	,amplitudeRight: null
	,autoDestroy: null
	,onComplete: null
	,playing: null
	,group: null
	,looped: null
	,loopTime: null
	,endTime: null
	,fadeTween: null
	,_sound: null
	,_channel: null
	,_transform: null
	,_paused: null
	,_volume: null
	,_time: null
	,_length: null
	,_volumeAdjust: null
	,_target: null
	,_radius: null
	,_proximityPan: null
	,_alreadyPaused: null
	,reset: function() {
		this.destroy();
		this.x = 0;
		this.y = 0;
		this._time = 0;
		this._paused = false;
		this._volume = 1.0;
		this._volumeAdjust = 1.0;
		this.looped = false;
		this.loopTime = 0.0;
		this.endTime = 0.0;
		this._target = null;
		this._radius = 0;
		this._proximityPan = false;
		this.set_visible(false);
		this.amplitude = 0;
		this.amplitudeLeft = 0;
		this.amplitudeRight = 0;
		this.autoDestroy = false;
		if(this._transform == null) {
			this._transform = new openfl_media_SoundTransform();
		}
		this._transform.pan = 0;
	}
	,destroy: function() {
		this._transform = null;
		this.set_exists(false);
		this.set_active(false);
		this._target = null;
		this.name = null;
		this.artist = null;
		if(this._channel != null) {
			this._channel.removeEventListener("soundComplete",$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		if(this._sound != null) {
			this._sound.removeEventListener("id3",$bind(this,this.gotID3));
			this._sound = null;
		}
		this.onComplete = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		if(this._channel == null) {
			return;
		}
		this._time = this._channel.get_position();
		var radialMultiplier = 1.0;
		if(this._target != null) {
			var targetPosition = this._target.getPosition();
			var X = this.x;
			var Y = this.y;
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			point._weak = true;
			radialMultiplier = targetPosition.distanceTo(point) / this._radius;
			targetPosition.put();
			var lowerBound = radialMultiplier < 0 ? 0 : radialMultiplier;
			radialMultiplier = 1 - (lowerBound > 1 ? 1 : lowerBound);
			if(this._proximityPan) {
				var d = (this.x - this._target.x) / this._radius;
				var lowerBound1 = d < -1 ? -1 : d;
				this._transform.pan = lowerBound1 > 1 ? 1 : lowerBound1;
			}
		}
		this._volumeAdjust = radialMultiplier;
		this.updateTransform();
		if(this._transform.volume > 0) {
			this.amplitudeLeft = this._channel.leftPeak / this._transform.volume;
			this.amplitudeRight = this._channel.rightPeak / this._transform.volume;
			this.amplitude = (this.amplitudeLeft + this.amplitudeRight) * 0.5;
		} else {
			this.amplitudeLeft = 0;
			this.amplitudeRight = 0;
			this.amplitude = 0;
		}
		if(this.endTime != null && this._time >= this.endTime) {
			this.stopped();
		}
	}
	,kill: function() {
		flixel_FlxBasic.prototype.kill.call(this);
		this.cleanup(false);
	}
	,loadEmbedded: function(EmbeddedSound,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) {
			AutoDestroy = false;
		}
		if(Looped == null) {
			Looped = false;
		}
		if(EmbeddedSound == null) {
			return this;
		}
		this.cleanup(true);
		if(js_Boot.__instanceof(EmbeddedSound,openfl_media_Sound)) {
			this._sound = EmbeddedSound;
		} else if(js_Boot.__instanceof(EmbeddedSound,Class)) {
			this._sound = Type.createInstance(EmbeddedSound,[]);
		} else if(typeof(EmbeddedSound) == "string") {
			if(openfl_Assets.exists(EmbeddedSound,"SOUND") || openfl_Assets.exists(EmbeddedSound,"MUSIC")) {
				this._sound = openfl_Assets.getSound(EmbeddedSound);
			} else {
				($_=flixel_FlxG.log,$bind($_,$_.error))("Could not find a Sound asset with an ID of '" + EmbeddedSound + "'.");
			}
		}
		return this.init(Looped,AutoDestroy,OnComplete);
	}
	,loadStream: function(SoundURL,Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) {
			AutoDestroy = false;
		}
		if(Looped == null) {
			Looped = false;
		}
		this.cleanup(true);
		this._sound = new openfl_media_Sound();
		this._sound.addEventListener("id3",$bind(this,this.gotID3));
		this._sound.load(new openfl_net_URLRequest(SoundURL));
		return this.init(Looped,AutoDestroy,OnComplete);
	}
	,init: function(Looped,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) {
			AutoDestroy = false;
		}
		if(Looped == null) {
			Looped = false;
		}
		this.looped = Looped;
		this.autoDestroy = AutoDestroy;
		this.updateTransform();
		this.set_exists(true);
		this.onComplete = OnComplete;
		this._length = this._sound == null ? 0 : this._sound.get_length();
		this.endTime = this._length;
		return this;
	}
	,proximity: function(X,Y,TargetObject,Radius,Pan) {
		if(Pan == null) {
			Pan = true;
		}
		this.x = X;
		this.y = Y;
		this._target = TargetObject;
		this._radius = Radius;
		this._proximityPan = Pan;
		return this;
	}
	,play: function(ForceRestart,StartTime,EndTime) {
		if(StartTime == null) {
			StartTime = 0.0;
		}
		if(ForceRestart == null) {
			ForceRestart = false;
		}
		if(!this.exists) {
			return this;
		}
		if(ForceRestart) {
			this.cleanup(false,true);
		} else if(this._channel != null) {
			return this;
		}
		if(this._paused) {
			this.resume();
		} else {
			this.startSound(StartTime);
		}
		this.endTime = EndTime;
		return this;
	}
	,resume: function() {
		if(this._paused) {
			this.startSound(this._time);
		}
		return this;
	}
	,pause: function() {
		if(this._channel == null) {
			return this;
		}
		this._time = this._channel.get_position();
		this._paused = true;
		this.cleanup(false,false);
		return this;
	}
	,stop: function() {
		this.cleanup(this.autoDestroy,true);
		return this;
	}
	,fadeOut: function(Duration,To,onComplete) {
		if(To == null) {
			To = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(this.fadeTween != null) {
			this.fadeTween.cancel();
		}
		this.fadeTween = flixel_tweens_FlxTween.num(this._volume,To,Duration,{ onComplete : onComplete},$bind(this,this.volumeTween));
		return this;
	}
	,fadeIn: function(Duration,From,To,onComplete) {
		if(To == null) {
			To = 1;
		}
		if(From == null) {
			From = 0;
		}
		if(Duration == null) {
			Duration = 1;
		}
		if(this._channel == null) {
			this.play();
		}
		if(this.fadeTween != null) {
			this.fadeTween.cancel();
		}
		this.fadeTween = flixel_tweens_FlxTween.num(From,To,Duration,{ onComplete : onComplete},$bind(this,this.volumeTween));
		return this;
	}
	,volumeTween: function(f) {
		this.set_volume(f);
	}
	,getActualVolume: function() {
		return this._volume * this._volumeAdjust;
	}
	,setPosition: function(X,Y) {
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		this.x = X;
		this.y = Y;
	}
	,updateTransform: function() {
		this._transform.volume = (flixel_FlxG.sound.muted ? 0 : 1) * flixel_FlxG.sound.volume * (this.group != null ? this.group.volume : 1) * this._volume * this._volumeAdjust;
		if(this._channel != null) {
			this._channel.set_soundTransform(this._transform);
		}
	}
	,startSound: function(StartTime) {
		if(this._sound == null) {
			return;
		}
		this._time = StartTime;
		this._paused = false;
		this._channel = this._sound.play(this._time,0,this._transform);
		if(this._channel != null) {
			this._channel.addEventListener("soundComplete",$bind(this,this.stopped));
			this.set_active(true);
		} else {
			this.set_exists(false);
			this.set_active(false);
		}
	}
	,stopped: function(_) {
		if(this.onComplete != null) {
			this.onComplete();
		}
		if(this.looped) {
			this.cleanup(false);
			this.play(false,this.loopTime,this.endTime);
		} else {
			this.cleanup(this.autoDestroy);
		}
	}
	,cleanup: function(destroySound,resetPosition) {
		if(resetPosition == null) {
			resetPosition = true;
		}
		if(destroySound) {
			this.reset();
			return;
		}
		if(this._channel != null) {
			this._channel.removeEventListener("soundComplete",$bind(this,this.stopped));
			this._channel.stop();
			this._channel = null;
		}
		this.set_active(false);
		if(resetPosition) {
			this._time = 0;
			this._paused = false;
		}
	}
	,gotID3: function(_) {
		this.name = this._sound.get_id3().songName;
		this.artist = this._sound.get_id3().artist;
		this._sound.removeEventListener("id3",$bind(this,this.gotID3));
	}
	,onFocus: function() {
		if(!this._alreadyPaused) {
			this.resume();
		}
	}
	,onFocusLost: function() {
		this._alreadyPaused = this._paused;
		this.pause();
	}
	,set_group: function(group) {
		if(this.group != group) {
			var oldGroup = this.group;
			this.group = group;
			if(oldGroup != null) {
				oldGroup.remove(this);
			}
			if(group != null) {
				group.add(this);
			}
			this.updateTransform();
		}
		return group;
	}
	,get_playing: function() {
		return this._channel != null;
	}
	,get_volume: function() {
		return this._volume;
	}
	,set_volume: function(Volume) {
		var lowerBound = Volume < 0 ? 0 : Volume;
		this._volume = lowerBound > 1 ? 1 : lowerBound;
		this.updateTransform();
		return Volume;
	}
	,get_pan: function() {
		return this._transform.pan;
	}
	,set_pan: function(pan) {
		return this._transform.pan = pan;
	}
	,get_time: function() {
		return this._time;
	}
	,set_time: function(time) {
		if(this._channel != null) {
			this.cleanup(false,true);
			this.startSound(time);
		}
		return this._time = time;
	}
	,get_length: function() {
		return this._length;
	}
	,toString: function() {
		var value = this._channel != null;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "playing";
		_this.value = value;
		var value1 = this._time;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "time";
		_this1.value = value1;
		var value2 = this._length;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "length";
		_this2.value = value2;
		var value3 = this._volume;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "volume";
		_this3.value = value3;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,__class__: flixel_system_FlxSound
	,__properties__: $extend(flixel_FlxBasic.prototype.__properties__,{set_group:"set_group",get_length:"get_length",set_time:"set_time",get_time:"get_time",set_volume:"set_volume",get_volume:"get_volume",get_playing:"get_playing",set_pan:"set_pan",get_pan:"get_pan"})
});
var flixel_system_FlxSoundGroup = function(volume) {
	if(volume == null) {
		volume = 1;
	}
	this.sounds = [];
	this.set_volume(volume);
};
$hxClasses["flixel.system.FlxSoundGroup"] = flixel_system_FlxSoundGroup;
flixel_system_FlxSoundGroup.__name__ = ["flixel","system","FlxSoundGroup"];
flixel_system_FlxSoundGroup.prototype = {
	sounds: null
	,volume: null
	,add: function(sound) {
		if(this.sounds.indexOf(sound) < 0) {
			sound.set_group(this);
			this.sounds.push(sound);
			return true;
		}
		return false;
	}
	,remove: function(sound) {
		if(this.sounds.indexOf(sound) >= 0) {
			sound.set_group(null);
			return HxOverrides.remove(this.sounds,sound);
		}
		return false;
	}
	,set_volume: function(volume) {
		this.volume = volume;
		var _g = 0;
		var _g1 = this.sounds;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			sound.updateTransform();
		}
		return volume;
	}
	,__class__: flixel_system_FlxSoundGroup
	,__properties__: {set_volume:"set_volume"}
};
var flixel_system_FlxSplash = function(MaxSize) {
	this._curPart = 0;
	flixel_FlxState.call(this,MaxSize);
};
$hxClasses["flixel.system.FlxSplash"] = flixel_system_FlxSplash;
flixel_system_FlxSplash.__name__ = ["flixel","system","FlxSplash"];
flixel_system_FlxSplash.nextState = null;
flixel_system_FlxSplash.__super__ = flixel_FlxState;
flixel_system_FlxSplash.prototype = $extend(flixel_FlxState.prototype,{
	_sprite: null
	,_gfx: null
	,_text: null
	,_times: null
	,_colors: null
	,_functions: null
	,_curPart: null
	,_cachedBgColor: null
	,_cachedTimestep: null
	,_cachedAutoPause: null
	,create: function() {
		this._cachedBgColor = flixel_FlxG.cameras.get_bgColor();
		flixel_FlxG.cameras.set_bgColor(-16777216);
		this._cachedTimestep = flixel_FlxG.fixedTimestep;
		flixel_FlxG.fixedTimestep = false;
		this._cachedAutoPause = flixel_FlxG.autoPause;
		flixel_FlxG.autoPause = false;
		flixel_FlxG.keys.enabled = false;
		this._times = [0.041,0.184,0.334,0.495,0.636];
		this._colors = [47394,16761138,16066382,3555839,314875];
		this._functions = [$bind(this,this.drawGreen),$bind(this,this.drawYellow),$bind(this,this.drawRed),$bind(this,this.drawBlue),$bind(this,this.drawLightBlue)];
		var _g = 0;
		var _g1 = this._times;
		while(_g < _g1.length) {
			var time = _g1[_g];
			++_g;
			new flixel_util_FlxTimer().start(time,$bind(this,this.timerCallback));
		}
		var stageWidth = openfl_Lib.current.stage.stageWidth;
		var stageHeight = openfl_Lib.current.stage.stageHeight;
		this._sprite = new openfl_display_Sprite();
		openfl_Lib.current.stage.addChild(this._sprite);
		this._gfx = this._sprite.get_graphics();
		this._text = new openfl_text_TextField();
		this._text.set_selectable(false);
		this._text.set_embedFonts(true);
		var dtf = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,16,16777215);
		dtf.align = 0;
		this._text.set_defaultTextFormat(dtf);
		this._text.set_text("HaxeFlixel");
		openfl_Lib.current.stage.addChild(this._text);
		this.onResize(stageWidth,stageHeight);
		flixel_FlxG.sound.load(openfl_Assets.getSound("flixel/sounds/flixel" + ".ogg")).play();
	}
	,destroy: function() {
		this._sprite = null;
		this._gfx = null;
		this._text = null;
		this._times = null;
		this._colors = null;
		this._functions = null;
		flixel_FlxState.prototype.destroy.call(this);
	}
	,onResize: function(Width,Height) {
		flixel_FlxState.prototype.onResize.call(this,Width,Height);
		this._sprite.set_x(Width / 2);
		this._sprite.set_y(Height / 2 - 20 * flixel_FlxG.game.get_scaleY());
		this._text.set_width(Width / flixel_FlxG.game.get_scaleX());
		this._text.set_x(0);
		this._text.set_y(this._sprite.get_y() + 80 * flixel_FlxG.game.get_scaleY());
		this._sprite.set_scaleX(this._text.set_scaleX(flixel_FlxG.game.get_scaleX()));
		this._sprite.set_scaleY(this._text.set_scaleY(flixel_FlxG.game.get_scaleY()));
	}
	,timerCallback: function(Timer) {
		this._functions[this._curPart]();
		this._text.set_textColor(this._colors[this._curPart]);
		this._text.set_text("HaxeFlixel");
		this._curPart++;
		if(this._curPart == 5) {
			flixel_tweens_FlxTween.tween(this._sprite,{ alpha : 0},3.0,{ ease : flixel_tweens_FlxEase.quadOut, onComplete : $bind(this,this.onComplete)});
			flixel_tweens_FlxTween.tween(this._text,{ alpha : 0},3.0,{ ease : flixel_tweens_FlxEase.quadOut});
		}
	}
	,drawGreen: function() {
		this._gfx.beginFill(47394);
		this._gfx.moveTo(0,-37);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(0,-37);
		this._gfx.endFill();
	}
	,drawYellow: function() {
		this._gfx.beginFill(16761138);
		this._gfx.moveTo(-50,-50);
		this._gfx.lineTo(-25,-50);
		this._gfx.lineTo(0,-37);
		this._gfx.lineTo(-37,0);
		this._gfx.lineTo(-50,-25);
		this._gfx.lineTo(-50,-50);
		this._gfx.endFill();
	}
	,drawRed: function() {
		this._gfx.beginFill(16066382);
		this._gfx.moveTo(50,-50);
		this._gfx.lineTo(25,-50);
		this._gfx.lineTo(1,-37);
		this._gfx.lineTo(37,0);
		this._gfx.lineTo(50,-25);
		this._gfx.lineTo(50,-50);
		this._gfx.endFill();
	}
	,drawBlue: function() {
		this._gfx.beginFill(3555839);
		this._gfx.moveTo(-50,50);
		this._gfx.lineTo(-25,50);
		this._gfx.lineTo(0,37);
		this._gfx.lineTo(-37,1);
		this._gfx.lineTo(-50,25);
		this._gfx.lineTo(-50,50);
		this._gfx.endFill();
	}
	,drawLightBlue: function() {
		this._gfx.beginFill(314875);
		this._gfx.moveTo(50,50);
		this._gfx.lineTo(25,50);
		this._gfx.lineTo(1,37);
		this._gfx.lineTo(37,1);
		this._gfx.lineTo(50,25);
		this._gfx.lineTo(50,50);
		this._gfx.endFill();
	}
	,onComplete: function(Tween) {
		flixel_FlxG.cameras.set_bgColor(this._cachedBgColor);
		flixel_FlxG.fixedTimestep = this._cachedTimestep;
		flixel_FlxG.autoPause = this._cachedAutoPause;
		flixel_FlxG.keys.enabled = true;
		openfl_Lib.current.stage.removeChild(this._sprite);
		openfl_Lib.current.stage.removeChild(this._text);
		var nextState = Type.createInstance(flixel_system_FlxSplash.nextState,[]);
		if(flixel_FlxG.game._state.switchTo(nextState)) {
			flixel_FlxG.game._requestedState = nextState;
		}
		flixel_FlxG.game._gameJustStarted = true;
	}
	,__class__: flixel_system_FlxSplash
});
var flixel_system_debug_DebuggerUtil = function() { };
$hxClasses["flixel.system.debug.DebuggerUtil"] = flixel_system_debug_DebuggerUtil;
flixel_system_debug_DebuggerUtil.__name__ = ["flixel","system","debug","DebuggerUtil"];
flixel_system_debug_DebuggerUtil.createTextField = function(X,Y,Color,Size) {
	if(Size == null) {
		Size = 12;
	}
	if(Color == null) {
		Color = -1;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	return flixel_system_debug_DebuggerUtil.initTextField(new openfl_text_TextField(),X,Y,Color,Size);
};
flixel_system_debug_DebuggerUtil.initTextField = function(tf,X,Y,Color,Size) {
	if(Size == null) {
		Size = 12;
	}
	if(Color == null) {
		Color = -1;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	tf.set_x(X);
	tf.set_y(Y);
	tf.set_multiline(false);
	tf.set_wordWrap(false);
	tf.set_embedFonts(true);
	tf.set_selectable(false);
	tf.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,Size,Color & 16777215));
	tf.set_alpha((Color >> 24 & 255) / 255);
	tf.set_autoSize(1);
	return tf;
};
flixel_system_debug_DebuggerUtil.fixSize = function(bitmapData) {
	var tmp;
	var tmp1;
	if(bitmapData.__properties__) {
		tmp = bitmapData.__properties__["set_" + "width"];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		bitmapData[tmp](11);
	} else {
		bitmapData["width"] = 11;
	}
	var tmp2;
	var tmp3;
	if(bitmapData.__properties__) {
		tmp2 = bitmapData.__properties__["set_" + "height"];
		tmp3 = tmp2;
	} else {
		tmp3 = false;
	}
	if(tmp3) {
		bitmapData[tmp2](11);
	} else {
		bitmapData["height"] = 11;
	}
	return bitmapData;
};
var flixel_system_debug__$FlxDebugger_GraphicFlixel = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload != null) {
		this.__fromImage(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$FlxDebugger_GraphicFlixel.preload == null) {
				flixel_system_debug__$FlxDebugger_GraphicFlixel.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceName),flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._FlxDebugger.GraphicFlixel"] = flixel_system_debug__$FlxDebugger_GraphicFlixel;
flixel_system_debug__$FlxDebugger_GraphicFlixel.__name__ = ["flixel","system","debug","_FlxDebugger","GraphicFlixel"];
flixel_system_debug__$FlxDebugger_GraphicFlixel.preload = null;
flixel_system_debug__$FlxDebugger_GraphicFlixel.__super__ = openfl_display_BitmapData;
flixel_system_debug__$FlxDebugger_GraphicFlixel.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$FlxDebugger_GraphicFlixel
});
var flixel_system_debug__$FlxDebugger_GraphicDrawDebug = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload != null) {
		this.__fromImage(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload == null) {
				flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceName),flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._FlxDebugger.GraphicDrawDebug"] = flixel_system_debug__$FlxDebugger_GraphicDrawDebug;
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.__name__ = ["flixel","system","debug","_FlxDebugger","GraphicDrawDebug"];
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.preload = null;
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.__super__ = openfl_display_BitmapData;
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$FlxDebugger_GraphicDrawDebug
});
var flixel_system_debug_GraphicLog = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicLog.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicLog.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_GraphicLog.preload == null) {
				flixel_system_debug_GraphicLog.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicLog.resourceName),flixel_system_debug_GraphicLog.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicLog"] = flixel_system_debug_GraphicLog;
flixel_system_debug_GraphicLog.__name__ = ["flixel","system","debug","GraphicLog"];
flixel_system_debug_GraphicLog.preload = null;
flixel_system_debug_GraphicLog.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicLog.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicLog
});
var flixel_system_debug_GraphicStats = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicStats.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicStats.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_GraphicStats.preload == null) {
				flixel_system_debug_GraphicStats.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicStats.resourceName),flixel_system_debug_GraphicStats.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicStats"] = flixel_system_debug_GraphicStats;
flixel_system_debug_GraphicStats.__name__ = ["flixel","system","debug","GraphicStats"];
flixel_system_debug_GraphicStats.preload = null;
flixel_system_debug_GraphicStats.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicStats.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicStats
});
var flixel_system_debug_GraphicWatch = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicWatch.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicWatch.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_GraphicWatch.preload == null) {
				flixel_system_debug_GraphicWatch.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicWatch.resourceName),flixel_system_debug_GraphicWatch.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicWatch"] = flixel_system_debug_GraphicWatch;
flixel_system_debug_GraphicWatch.__name__ = ["flixel","system","debug","GraphicWatch"];
flixel_system_debug_GraphicWatch.preload = null;
flixel_system_debug_GraphicWatch.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicWatch.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicWatch
});
var flixel_system_debug_GraphicBitmapLog = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicBitmapLog.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicBitmapLog.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_GraphicBitmapLog.preload == null) {
				flixel_system_debug_GraphicBitmapLog.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicBitmapLog.resourceName),flixel_system_debug_GraphicBitmapLog.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicBitmapLog"] = flixel_system_debug_GraphicBitmapLog;
flixel_system_debug_GraphicBitmapLog.__name__ = ["flixel","system","debug","GraphicBitmapLog"];
flixel_system_debug_GraphicBitmapLog.preload = null;
flixel_system_debug_GraphicBitmapLog.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicBitmapLog.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicBitmapLog
});
var flixel_system_debug_GraphicConsole = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicConsole.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicConsole.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_GraphicConsole.preload == null) {
				flixel_system_debug_GraphicConsole.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicConsole.resourceName),flixel_system_debug_GraphicConsole.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicConsole"] = flixel_system_debug_GraphicConsole;
flixel_system_debug_GraphicConsole.__name__ = ["flixel","system","debug","GraphicConsole"];
flixel_system_debug_GraphicConsole.preload = null;
flixel_system_debug_GraphicConsole.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicConsole.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicConsole
});
var flixel_system_debug_GraphicArrowLeft = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicArrowLeft.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicArrowLeft.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_GraphicArrowLeft.preload == null) {
				flixel_system_debug_GraphicArrowLeft.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicArrowLeft.resourceName),flixel_system_debug_GraphicArrowLeft.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicArrowLeft"] = flixel_system_debug_GraphicArrowLeft;
flixel_system_debug_GraphicArrowLeft.__name__ = ["flixel","system","debug","GraphicArrowLeft"];
flixel_system_debug_GraphicArrowLeft.preload = null;
flixel_system_debug_GraphicArrowLeft.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicArrowLeft.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicArrowLeft
});
var flixel_system_debug_GraphicArrowRight = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicArrowRight.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicArrowRight.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_GraphicArrowRight.preload == null) {
				flixel_system_debug_GraphicArrowRight.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicArrowRight.resourceName),flixel_system_debug_GraphicArrowRight.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicArrowRight"] = flixel_system_debug_GraphicArrowRight;
flixel_system_debug_GraphicArrowRight.__name__ = ["flixel","system","debug","GraphicArrowRight"];
flixel_system_debug_GraphicArrowRight.preload = null;
flixel_system_debug_GraphicArrowRight.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicArrowRight.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicArrowRight
});
var flixel_system_debug_GraphicCloseButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicCloseButton.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicCloseButton.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_GraphicCloseButton.preload == null) {
				flixel_system_debug_GraphicCloseButton.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicCloseButton.resourceName),flixel_system_debug_GraphicCloseButton.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicCloseButton"] = flixel_system_debug_GraphicCloseButton;
flixel_system_debug_GraphicCloseButton.__name__ = ["flixel","system","debug","GraphicCloseButton"];
flixel_system_debug_GraphicCloseButton.preload = null;
flixel_system_debug_GraphicCloseButton.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicCloseButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicCloseButton
});
var flixel_system_debug_GraphicInteractive = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_GraphicInteractive.preload != null) {
		this.__fromImage(flixel_system_debug_GraphicInteractive.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_GraphicInteractive.preload == null) {
				flixel_system_debug_GraphicInteractive.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_GraphicInteractive.resourceName),flixel_system_debug_GraphicInteractive.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.GraphicInteractive"] = flixel_system_debug_GraphicInteractive;
flixel_system_debug_GraphicInteractive.__name__ = ["flixel","system","debug","GraphicInteractive"];
flixel_system_debug_GraphicInteractive.preload = null;
flixel_system_debug_GraphicInteractive.__super__ = openfl_display_BitmapData;
flixel_system_debug_GraphicInteractive.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_GraphicInteractive
});
var flixel_system_debug_FlxDebugger = function(Width,Height) {
	this._wasUsingSystemCursor = false;
	this._wasMouseVisible = true;
	this._usingSystemCursor = false;
	this._windows = [];
	var _g = new haxe_ds_EnumValueMap();
	_g.set(flixel_util_FlxHorizontalAlign.LEFT,[]);
	_g.set(flixel_util_FlxHorizontalAlign.CENTER,[]);
	_g.set(flixel_util_FlxHorizontalAlign.RIGHT,[]);
	this._buttons = _g;
	this._screen = new openfl_geom_Point();
	this._layout = flixel_system_debug_FlxDebuggerLayout.STANDARD;
	openfl_display_Sprite.call(this);
	this.set_visible(false);
	flixel_system_debug_Tooltip.init(this);
	this._topBar = new openfl_display_Sprite();
	this._topBar.get_graphics().beginFill(0,0.66666666666666663);
	this._topBar.get_graphics().drawRect(0,0,openfl_Lib.current.stage.stageWidth,20);
	this._topBar.get_graphics().endFill();
	this.addChild(this._topBar);
	var txt = new openfl_text_TextField();
	txt.set_height(20);
	txt.set_selectable(false);
	txt.set_y(-9);
	txt.set_multiline(false);
	txt.set_embedFonts(true);
	var format = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,12,16777215);
	txt.set_defaultTextFormat(format);
	txt.set_autoSize(1);
	txt.set_text(Std.string(flixel_FlxG.VERSION));
	var $window = this.log = new flixel_system_debug_log_Log();
	this._windows.push($window);
	this.addChild($window);
	if(this._screenBounds != null) {
		this.updateBounds();
		$window.bound();
	}
	var window1 = this.bitmapLog = new flixel_system_debug_log_BitmapLog();
	this._windows.push(window1);
	this.addChild(window1);
	if(this._screenBounds != null) {
		this.updateBounds();
		window1.bound();
	}
	var window2 = this.watch = new flixel_system_debug_watch_Watch();
	this._windows.push(window2);
	this.addChild(window2);
	if(this._screenBounds != null) {
		this.updateBounds();
		window2.bound();
	}
	this.completionList = new flixel_system_debug_completion_CompletionList(5);
	var window3 = this.console = new flixel_system_debug_console_Console(this.completionList);
	this._windows.push(window3);
	this.addChild(window3);
	if(this._screenBounds != null) {
		this.updateBounds();
		window3.bound();
	}
	var window4 = this.stats = new flixel_system_debug_stats_Stats();
	this._windows.push(window4);
	this.addChild(window4);
	if(this._screenBounds != null) {
		this.updateBounds();
		window4.bound();
	}
	var window5 = this.interaction = new flixel_system_debug_interaction_Interaction(this);
	this._windows.push(window5);
	this.addChild(window5);
	if(this._screenBounds != null) {
		this.updateBounds();
		window5.bound();
	}
	this.vcr = new flixel_system_debug_VCR(this);
	this.addButton(flixel_util_FlxHorizontalAlign.LEFT,new flixel_system_debug__$FlxDebugger_GraphicFlixel(0,0),$bind(this,this.openHomepage));
	this.addButton(flixel_util_FlxHorizontalAlign.LEFT,null,$bind(this,this.openGitHub)).addChild(txt);
	this.addWindowToggleButton(this.interaction,flixel_system_debug_GraphicInteractive);
	this.addWindowToggleButton(this.bitmapLog,flixel_system_debug_GraphicBitmapLog);
	this.addWindowToggleButton(this.log,flixel_system_debug_GraphicLog);
	this.addWindowToggleButton(this.watch,flixel_system_debug_GraphicWatch);
	this.addWindowToggleButton(this.console,flixel_system_debug_GraphicConsole);
	this.addWindowToggleButton(this.stats,flixel_system_debug_GraphicStats);
	var drawDebugButton = this.addButton(flixel_util_FlxHorizontalAlign.RIGHT,new flixel_system_debug__$FlxDebugger_GraphicDrawDebug(0,0),$bind(this,this.toggleDrawDebug),true);
	drawDebugButton.set_toggled(!flixel_FlxG["debugger"].drawDebug);
	flixel_FlxG["debugger"].drawDebugChanged.add(function() {
		drawDebugButton.set_toggled(!flixel_FlxG["debugger"].drawDebug);
	});
	this.addChild(this.completionList);
	this.onResize(Width,Height);
	this.addEventListener("mouseOver",$bind(this,this.onMouseOver));
	this.addEventListener("mouseOut",$bind(this,this.onMouseOut));
	flixel_FlxG.signals.stateSwitched.add(flixel_system_debug_watch_Tracker.onStateSwitch);
};
$hxClasses["flixel.system.debug.FlxDebugger"] = flixel_system_debug_FlxDebugger;
flixel_system_debug_FlxDebugger.__name__ = ["flixel","system","debug","FlxDebugger"];
flixel_system_debug_FlxDebugger.__super__ = openfl_display_Sprite;
flixel_system_debug_FlxDebugger.prototype = $extend(openfl_display_Sprite.prototype,{
	stats: null
	,log: null
	,watch: null
	,bitmapLog: null
	,vcr: null
	,console: null
	,interaction: null
	,completionList: null
	,_layout: null
	,_screen: null
	,_screenBounds: null
	,_buttons: null
	,_topBar: null
	,_windows: null
	,_usingSystemCursor: null
	,_wasMouseVisible: null
	,_wasUsingSystemCursor: null
	,destroy: function() {
		this._screen = null;
		this._buttons = null;
		this.removeChild(this._topBar);
		this._topBar = null;
		if(this.log != null) {
			this.removeChild(this.log);
			this.log.destroy();
			this.log = null;
		}
		if(this.watch != null) {
			this.removeChild(this.watch);
			this.watch.destroy();
			this.watch = null;
		}
		if(this.bitmapLog != null) {
			this.removeChild(this.bitmapLog);
			this.bitmapLog.destroy();
			this.bitmapLog = null;
		}
		if(this.stats != null) {
			this.removeChild(this.stats);
			this.stats.destroy();
			this.stats = null;
		}
		if(this.console != null) {
			this.removeChild(this.console);
			this.console.destroy();
			this.console = null;
		}
		this._windows = null;
		this.removeEventListener("mouseOver",$bind(this,this.onMouseOver));
		this.removeEventListener("mouseOut",$bind(this,this.onMouseOut));
	}
	,update: function() {
		var _g = 0;
		var _g1 = this._windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.update();
		}
	}
	,setLayout: function(Layout) {
		this._layout = Layout;
		this.resetLayout();
	}
	,resetLayout: function() {
		var _g = this._layout;
		switch(_g[1]) {
		case 0:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(2,this._screen.y);
			this.log.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.log.reposition(0,this._screen.y - this.log.get_height() - this.console.get_height() - 3.);
			this.watch.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.watch.reposition(this._screen.x,this._screen.y - this.watch.get_height() - this.console.get_height() - 3.);
			this.stats.reposition(this._screen.x,0);
			this.bitmapLog.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.bitmapLog.reposition(0,this.log.get_y() - 2 - this.bitmapLog.get_height());
			break;
		case 1:
			this.log.resize(this._screen.x / 4,68);
			this.log.reposition(0,this._screen.y);
			this.console.resize(this._screen.x / 2 - 8,35);
			this.console.reposition(this.log.get_x() + this.log.get_width() + 2,this._screen.y);
			this.watch.resize(this._screen.x / 4,68);
			this.watch.reposition(this._screen.x,this._screen.y);
			this.stats.reposition(this._screen.x,0);
			this.bitmapLog.resize(this._screen.x / 4,68);
			this.bitmapLog.reposition(0,this._screen.y - 136 - 4);
			break;
		case 2:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(2,this._screen.y);
			this.log.resize((this._screen.x - 6) / 2,this._screen.y / 2);
			this.log.reposition(0,this._screen.y - this.log.get_height() - this.console.get_height() - 3.);
			this.watch.resize((this._screen.x - 6) / 2,this._screen.y / 2);
			this.watch.reposition(this._screen.x,this._screen.y - this.watch.get_height() - this.console.get_height() - 3.);
			this.stats.reposition(this._screen.x,0);
			this.bitmapLog.resize((this._screen.x - 6) / 2,this._screen.y - 4 - this._screen.y / 2 - 70);
			this.bitmapLog.reposition(0,3.);
			break;
		case 3:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(0,0);
			this.log.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.log.reposition(0,this.console.get_height() + 2 + 15);
			this.watch.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.watch.reposition(this._screen.x,this.console.get_height() + 2 + 15);
			this.stats.reposition(this._screen.x,this._screen.y);
			this.bitmapLog.resize((this._screen.x - 6) / 2,this._screen.y / 4);
			this.bitmapLog.reposition(0,this.console.get_height() + 4 + 15 + this._screen.y / 4 + 2);
			break;
		case 4:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(2,this._screen.y);
			this.log.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2 - 2);
			this.log.reposition(0,0);
			this.watch.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2);
			this.watch.reposition(0,this.log.get_y() + this.log.get_height() + 2);
			this.stats.reposition(this._screen.x,0);
			this.bitmapLog.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2 - 2);
			this.bitmapLog.reposition(this._screen.x / 3 + 4,0);
			break;
		case 5:
			this.console.resize(this._screen.x - 4,35);
			this.console.reposition(2,this._screen.y);
			this.log.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2 - 2);
			this.log.reposition(this._screen.x,0);
			this.watch.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2);
			this.watch.reposition(this._screen.x,this.log.get_y() + this.log.get_height() + 2);
			this.stats.reposition(0,0);
			this.bitmapLog.resize(this._screen.x / 3,(this._screen.y - 15 - 5.) / 2 - this.console.get_height() / 2 - 2);
			this.bitmapLog.reposition(this._screen.x - 4 - this._screen.x / 3 * 2,0);
			break;
		}
	}
	,onResize: function(Width,Height) {
		this._screen.x = Width;
		this._screen.y = Height;
		this.updateBounds();
		this._topBar.set_width(openfl_Lib.current.stage.stageWidth);
		this.resetButtonLayout();
		this.resetLayout();
		this.set_scaleX(this.set_scaleY(1));
		this.set_x(-flixel_FlxG.scaleMode.offset.x);
		this.set_y(-flixel_FlxG.scaleMode.offset.y);
	}
	,updateBounds: function() {
		this._screenBounds = new openfl_geom_Rectangle(2,21.,this._screen.x - 4,this._screen.y - 4 - 20);
		var _g = 0;
		var _g1 = this._windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.updateBounds(this._screenBounds);
		}
	}
	,hAlignButtons: function(Sprites,Padding,Set,LeftOffset) {
		if(LeftOffset == null) {
			LeftOffset = 0;
		}
		if(Set == null) {
			Set = true;
		}
		if(Padding == null) {
			Padding = 0;
		}
		var width = 0;
		var last = LeftOffset;
		var _g1 = 0;
		var _g = Sprites.length;
		while(_g1 < _g) {
			var i = _g1++;
			var o = Sprites[i];
			width += o.get_width() + Padding;
			if(Set) {
				o.set_x(last);
			}
			last = o.get_x() + o.get_width() + Padding;
		}
		return width;
	}
	,resetButtonLayout: function() {
		this.hAlignButtons(this._buttons.get(flixel_util_FlxHorizontalAlign.LEFT),10,true,10);
		var offset = openfl_Lib.current.stage.stageWidth * 0.5 - this.hAlignButtons(this._buttons.get(flixel_util_FlxHorizontalAlign.CENTER),10,false) * 0.5;
		this.hAlignButtons(this._buttons.get(flixel_util_FlxHorizontalAlign.CENTER),10,true,offset);
		var offset1 = openfl_Lib.current.stage.stageWidth - this.hAlignButtons(this._buttons.get(flixel_util_FlxHorizontalAlign.RIGHT),10,false);
		this.hAlignButtons(this._buttons.get(flixel_util_FlxHorizontalAlign.RIGHT),10,true,offset1);
	}
	,addButton: function(Position,Icon,UpHandler,ToggleMode,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = false;
		}
		if(ToggleMode == null) {
			ToggleMode = false;
		}
		var button = new flixel_system_ui_FlxSystemButton(Icon,UpHandler,ToggleMode);
		button.set_y(10. - button.get_height() / 2);
		this._buttons.get(Position).push(button);
		this.addChild(button);
		if(UpdateLayout) {
			this.resetButtonLayout();
		}
		return button;
	}
	,removeButton: function(Button,UpdateLayout) {
		if(UpdateLayout == null) {
			UpdateLayout = true;
		}
		this.removeChild(Button);
		Button.destroy();
		HxOverrides.remove(this._buttons.get(flixel_util_FlxHorizontalAlign.LEFT),Button);
		HxOverrides.remove(this._buttons.get(flixel_util_FlxHorizontalAlign.CENTER),Button);
		HxOverrides.remove(this._buttons.get(flixel_util_FlxHorizontalAlign.RIGHT),Button);
		if(UpdateLayout) {
			this.resetButtonLayout();
		}
	}
	,addWindowToggleButton: function(window,icon) {
		var button = this.addButton(flixel_util_FlxHorizontalAlign.RIGHT,Type.createInstance(icon,[0,0]),$bind(window,window.toggleVisible),true,true);
		window.toggleButton = button;
		button.set_toggled(!window.get_visible());
	}
	,addWindow: function(window) {
		this._windows.push(window);
		this.addChild(window);
		if(this._screenBounds != null) {
			this.updateBounds();
			window.bound();
		}
		return window;
	}
	,removeWindow: function(window) {
		if(this.contains(window)) {
			this.removeChild(window);
		}
		var array = this._windows;
		var index = array.indexOf(window);
		if(index != -1) {
			array[index] = array[array.length - 1];
			array.pop();
		}
	}
	,addChild: function(child) {
		var result = openfl_display_Sprite.prototype.addChild.call(this,child);
		if(this.completionList != null) {
			openfl_display_Sprite.prototype.addChild.call(this,this.completionList);
		}
		return result;
	}
	,onMouseOver: function(_) {
		this.onMouseFocus();
	}
	,onMouseOut: function(_) {
		this.onMouseFocusLost();
	}
	,onMouseFocus: function() {
		flixel_FlxG.mouse.enabled = false;
		this._wasMouseVisible = flixel_FlxG.mouse.visible;
		this._wasUsingSystemCursor = flixel_FlxG.mouse.useSystemCursor;
		flixel_FlxG.mouse.set_useSystemCursor(true);
		this._usingSystemCursor = true;
	}
	,onMouseFocusLost: function() {
		if(this._usingSystemCursor) {
			flixel_FlxG.mouse.enabled = true;
			flixel_FlxG.mouse.set_useSystemCursor(this._wasUsingSystemCursor);
			flixel_FlxG.mouse.set_visible(this._wasMouseVisible);
		}
	}
	,toggleDrawDebug: function() {
		flixel_FlxG["debugger"].set_drawDebug(!flixel_FlxG["debugger"].drawDebug);
	}
	,openHomepage: function() {
		var prefix = "";
		if(!new EReg("^https?://","").match("http://www.haxeflixel.com")) {
			prefix = "http://";
		}
		openfl_Lib.getURL(new openfl_net_URLRequest(prefix + "http://www.haxeflixel.com"),"_blank");
	}
	,openGitHub: function() {
		var url = "https://github.com/HaxeFlixel/flixel";
		if(flixel_system_FlxVersion.sha != "") {
			url = "https://github.com/HaxeFlixel/flixel" + ("/commit/" + Std.string(flixel_system_FlxVersion.sha));
		}
		var prefix = "";
		if(!new EReg("^https?://","").match(url)) {
			prefix = "http://";
		}
		openfl_Lib.getURL(new openfl_net_URLRequest(prefix + url),"_blank");
	}
	,__class__: flixel_system_debug_FlxDebugger
});
var flixel_system_debug_FlxDebuggerLayout = $hxClasses["flixel.system.debug.FlxDebuggerLayout"] = { __ename__ : ["flixel","system","debug","FlxDebuggerLayout"], __constructs__ : ["STANDARD","MICRO","BIG","TOP","LEFT","RIGHT"] };
flixel_system_debug_FlxDebuggerLayout.STANDARD = ["STANDARD",0];
flixel_system_debug_FlxDebuggerLayout.STANDARD.toString = $estr;
flixel_system_debug_FlxDebuggerLayout.STANDARD.__enum__ = flixel_system_debug_FlxDebuggerLayout;
flixel_system_debug_FlxDebuggerLayout.MICRO = ["MICRO",1];
flixel_system_debug_FlxDebuggerLayout.MICRO.toString = $estr;
flixel_system_debug_FlxDebuggerLayout.MICRO.__enum__ = flixel_system_debug_FlxDebuggerLayout;
flixel_system_debug_FlxDebuggerLayout.BIG = ["BIG",2];
flixel_system_debug_FlxDebuggerLayout.BIG.toString = $estr;
flixel_system_debug_FlxDebuggerLayout.BIG.__enum__ = flixel_system_debug_FlxDebuggerLayout;
flixel_system_debug_FlxDebuggerLayout.TOP = ["TOP",3];
flixel_system_debug_FlxDebuggerLayout.TOP.toString = $estr;
flixel_system_debug_FlxDebuggerLayout.TOP.__enum__ = flixel_system_debug_FlxDebuggerLayout;
flixel_system_debug_FlxDebuggerLayout.LEFT = ["LEFT",4];
flixel_system_debug_FlxDebuggerLayout.LEFT.toString = $estr;
flixel_system_debug_FlxDebuggerLayout.LEFT.__enum__ = flixel_system_debug_FlxDebuggerLayout;
flixel_system_debug_FlxDebuggerLayout.RIGHT = ["RIGHT",5];
flixel_system_debug_FlxDebuggerLayout.RIGHT.toString = $estr;
flixel_system_debug_FlxDebuggerLayout.RIGHT.__enum__ = flixel_system_debug_FlxDebuggerLayout;
flixel_system_debug_FlxDebuggerLayout.__empty_constructs__ = [flixel_system_debug_FlxDebuggerLayout.STANDARD,flixel_system_debug_FlxDebuggerLayout.MICRO,flixel_system_debug_FlxDebuggerLayout.BIG,flixel_system_debug_FlxDebuggerLayout.TOP,flixel_system_debug_FlxDebuggerLayout.LEFT,flixel_system_debug_FlxDebuggerLayout.RIGHT];
var flixel_system_debug_Tooltip = function() { };
$hxClasses["flixel.system.debug.Tooltip"] = flixel_system_debug_Tooltip;
flixel_system_debug_Tooltip.__name__ = ["flixel","system","debug","Tooltip"];
flixel_system_debug_Tooltip._container = null;
flixel_system_debug_Tooltip.init = function(container) {
	flixel_system_debug_Tooltip._container = container;
};
flixel_system_debug_Tooltip.add = function(element,text) {
	var tooltip = new flixel_system_debug_TooltipOverlay(element,text);
	flixel_system_debug_Tooltip._container.addChild(tooltip);
	flixel_system_debug_Tooltip._tooltips.push(tooltip);
};
flixel_system_debug_Tooltip.remove = function(element) {
	var removed = false;
	var _g1 = 0;
	var _g = flixel_system_debug_Tooltip._tooltips.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(flixel_system_debug_Tooltip._tooltips[i] != null && flixel_system_debug_Tooltip._tooltips[i].owner == element) {
			var tooltip = flixel_system_debug_Tooltip._tooltips.splice(i,1)[0];
			tooltip.destroy();
			removed = true;
			break;
		}
	}
	return removed;
};
var flixel_system_debug_TooltipOverlay = function(target,text,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	openfl_display_Sprite.call(this);
	this.owner = target;
	this.maxSize = new openfl_geom_Point(width,height);
	this._shadow = new openfl_display_Bitmap(new openfl_display_BitmapData(1,2,true,-16777216));
	this._background = new openfl_display_Bitmap(new openfl_display_BitmapData(1,1,true,-12961222));
	this._text = flixel_system_debug_DebuggerUtil.createTextField(2,1);
	this._text.set_alpha(0.8);
	this._text.set_text(text);
	this._text.set_wordWrap(true);
	this.addChild(this._shadow);
	this.addChild(this._background);
	this.addChild(this._text);
	this.updateSize();
	this.setVisible(false);
	this.owner.addEventListener("mouseOver",$bind(this,this.handleMouseEvents));
	this.owner.addEventListener("mouseOut",$bind(this,this.handleMouseEvents));
};
$hxClasses["flixel.system.debug.TooltipOverlay"] = flixel_system_debug_TooltipOverlay;
flixel_system_debug_TooltipOverlay.__name__ = ["flixel","system","debug","TooltipOverlay"];
flixel_system_debug_TooltipOverlay.__super__ = openfl_display_Sprite;
flixel_system_debug_TooltipOverlay.prototype = $extend(openfl_display_Sprite.prototype,{
	_width: null
	,_height: null
	,_background: null
	,_shadow: null
	,_text: null
	,owner: null
	,maxSize: null
	,destroy: function() {
		this._shadow = flixel_util_FlxDestroyUtil.removeChild(this,this._shadow);
		this._background = flixel_util_FlxDestroyUtil.removeChild(this,this._background);
		this._text = flixel_util_FlxDestroyUtil.removeChild(this,this._text);
		this.maxSize = null;
		this.owner.removeEventListener("mouseOver",$bind(this,this.handleMouseEvents));
		this.owner.removeEventListener("mouseOut",$bind(this,this.handleMouseEvents));
		this.owner = null;
	}
	,resize: function(Width,Height) {
		this.maxSize.x = Math.abs(Width) | 0;
		this.maxSize.y = Math.abs(Height) | 0;
		this.updateSize();
	}
	,reposition: function(X,Y) {
		this.set_x(X);
		this.set_y(Y);
		this.ensureOnScreen();
	}
	,setVisible: function(Value) {
		this.set_visible(Value);
		if(this.get_visible()) {
			this.parent.addChild(this);
			this.ensureOnScreen();
		}
	}
	,toggleVisible: function() {
		this.setVisible(!this.get_visible());
	}
	,putOnTop: function() {
		this.parent.addChild(this);
	}
	,update: function() {
	}
	,updateSize: function() {
		this._width = ((this.maxSize.x <= 0 ? this._text.get_textWidth() : Math.abs(this.maxSize.x)) | 0) + 8;
		this._height = ((this.maxSize.y <= 0 ? this._text.get_textHeight() : Math.abs(this.maxSize.y)) | 0) + 8;
		this._background.set_scaleX(this._width);
		this._background.set_scaleY(this._height);
		this._shadow.set_scaleX(this._width);
		this._shadow.set_y(this._height);
		this._text.set_width(this._width);
	}
	,ensureOnScreen: function() {
		this.set_x(this.get_x() < 0 ? 0 : this.get_x());
		this.set_y(this.get_y() < 0 ? 0 : this.get_y());
		var offsetX = this.get_x() + this.get_width() >= openfl_Lib.current.stage.stageWidth ? openfl_Lib.current.stage.stageWidth - (this.get_x() + this.get_width()) : 0;
		var offsetY = this.get_y() + this.get_height() >= openfl_Lib.current.stage.stageHeight ? openfl_Lib.current.stage.stageHeight - (this.get_y() + this.get_height()) : 0;
		var _g = this;
		_g.set_x(_g.get_x() + offsetX);
		var _g1 = this;
		_g1.set_y(_g1.get_y() + offsetY);
	}
	,handleMouseEvents: function(event) {
		if(event.type == "mouseOver" && !this.get_visible()) {
			this.set_x(event.stageX + 10);
			this.set_y(event.stageY + 10);
			this.setVisible(true);
		} else if(event.type == "mouseOut") {
			this.setVisible(false);
		}
	}
	,__class__: flixel_system_debug_TooltipOverlay
});
var flixel_system_debug__$VCR_GraphicOpen = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicOpen.preload != null) {
		this.__fromImage(flixel_system_debug__$VCR_GraphicOpen.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$VCR_GraphicOpen.preload == null) {
				flixel_system_debug__$VCR_GraphicOpen.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicOpen.resourceName),flixel_system_debug__$VCR_GraphicOpen.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._VCR.GraphicOpen"] = flixel_system_debug__$VCR_GraphicOpen;
flixel_system_debug__$VCR_GraphicOpen.__name__ = ["flixel","system","debug","_VCR","GraphicOpen"];
flixel_system_debug__$VCR_GraphicOpen.preload = null;
flixel_system_debug__$VCR_GraphicOpen.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicOpen.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicOpen
});
var flixel_system_debug__$VCR_GraphicPause = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicPause.preload != null) {
		this.__fromImage(flixel_system_debug__$VCR_GraphicPause.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$VCR_GraphicPause.preload == null) {
				flixel_system_debug__$VCR_GraphicPause.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicPause.resourceName),flixel_system_debug__$VCR_GraphicPause.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._VCR.GraphicPause"] = flixel_system_debug__$VCR_GraphicPause;
flixel_system_debug__$VCR_GraphicPause.__name__ = ["flixel","system","debug","_VCR","GraphicPause"];
flixel_system_debug__$VCR_GraphicPause.preload = null;
flixel_system_debug__$VCR_GraphicPause.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicPause.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicPause
});
var flixel_system_debug__$VCR_GraphicRecordOff = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicRecordOff.preload != null) {
		this.__fromImage(flixel_system_debug__$VCR_GraphicRecordOff.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$VCR_GraphicRecordOff.preload == null) {
				flixel_system_debug__$VCR_GraphicRecordOff.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicRecordOff.resourceName),flixel_system_debug__$VCR_GraphicRecordOff.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._VCR.GraphicRecordOff"] = flixel_system_debug__$VCR_GraphicRecordOff;
flixel_system_debug__$VCR_GraphicRecordOff.__name__ = ["flixel","system","debug","_VCR","GraphicRecordOff"];
flixel_system_debug__$VCR_GraphicRecordOff.preload = null;
flixel_system_debug__$VCR_GraphicRecordOff.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicRecordOff.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicRecordOff
});
var flixel_system_debug__$VCR_GraphicRecordOn = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicRecordOn.preload != null) {
		this.__fromImage(flixel_system_debug__$VCR_GraphicRecordOn.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$VCR_GraphicRecordOn.preload == null) {
				flixel_system_debug__$VCR_GraphicRecordOn.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicRecordOn.resourceName),flixel_system_debug__$VCR_GraphicRecordOn.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._VCR.GraphicRecordOn"] = flixel_system_debug__$VCR_GraphicRecordOn;
flixel_system_debug__$VCR_GraphicRecordOn.__name__ = ["flixel","system","debug","_VCR","GraphicRecordOn"];
flixel_system_debug__$VCR_GraphicRecordOn.preload = null;
flixel_system_debug__$VCR_GraphicRecordOn.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicRecordOn.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicRecordOn
});
var flixel_system_debug__$VCR_GraphicRestart = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicRestart.preload != null) {
		this.__fromImage(flixel_system_debug__$VCR_GraphicRestart.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$VCR_GraphicRestart.preload == null) {
				flixel_system_debug__$VCR_GraphicRestart.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicRestart.resourceName),flixel_system_debug__$VCR_GraphicRestart.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._VCR.GraphicRestart"] = flixel_system_debug__$VCR_GraphicRestart;
flixel_system_debug__$VCR_GraphicRestart.__name__ = ["flixel","system","debug","_VCR","GraphicRestart"];
flixel_system_debug__$VCR_GraphicRestart.preload = null;
flixel_system_debug__$VCR_GraphicRestart.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicRestart.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicRestart
});
var flixel_system_debug__$VCR_GraphicStep = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicStep.preload != null) {
		this.__fromImage(flixel_system_debug__$VCR_GraphicStep.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$VCR_GraphicStep.preload == null) {
				flixel_system_debug__$VCR_GraphicStep.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicStep.resourceName),flixel_system_debug__$VCR_GraphicStep.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._VCR.GraphicStep"] = flixel_system_debug__$VCR_GraphicStep;
flixel_system_debug__$VCR_GraphicStep.__name__ = ["flixel","system","debug","_VCR","GraphicStep"];
flixel_system_debug__$VCR_GraphicStep.preload = null;
flixel_system_debug__$VCR_GraphicStep.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicStep.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicStep
});
var flixel_system_debug__$VCR_GraphicStop = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$VCR_GraphicStop.preload != null) {
		this.__fromImage(flixel_system_debug__$VCR_GraphicStop.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$VCR_GraphicStop.preload == null) {
				flixel_system_debug__$VCR_GraphicStop.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$VCR_GraphicStop.resourceName),flixel_system_debug__$VCR_GraphicStop.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._VCR.GraphicStop"] = flixel_system_debug__$VCR_GraphicStop;
flixel_system_debug__$VCR_GraphicStop.__name__ = ["flixel","system","debug","_VCR","GraphicStop"];
flixel_system_debug__$VCR_GraphicStop.preload = null;
flixel_system_debug__$VCR_GraphicStop.__super__ = openfl_display_BitmapData;
flixel_system_debug__$VCR_GraphicStop.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$VCR_GraphicStop
});
var flixel_system_debug_VCR = function(Debugger) {
	this.runtime = 0;
	this.restartBtn = Debugger.addButton(flixel_util_FlxHorizontalAlign.CENTER,new flixel_system_debug__$VCR_GraphicRestart(0,0),flixel_FlxG.resetState);
	this.playbackToggleBtn = Debugger.addButton(flixel_util_FlxHorizontalAlign.CENTER,new flixel_system_debug__$VCR_GraphicPause(0,0),($_=flixel_FlxG.vcr,$bind($_,$_.pause)));
	this.stepBtn = Debugger.addButton(flixel_util_FlxHorizontalAlign.CENTER,new flixel_system_debug__$VCR_GraphicStep(0,0),$bind(this,this.onStep));
};
$hxClasses["flixel.system.debug.VCR"] = flixel_system_debug_VCR;
flixel_system_debug_VCR.__name__ = ["flixel","system","debug","VCR"];
flixel_system_debug_VCR.prototype = {
	runtimeDisplay: null
	,runtime: null
	,playbackToggleBtn: null
	,stepBtn: null
	,restartBtn: null
	,recordBtn: null
	,openBtn: null
	,onPause: function() {
		this.playbackToggleBtn.upHandler = ($_=flixel_FlxG.vcr,$bind($_,$_.resume));
		this.playbackToggleBtn.changeIcon(new flixel_system_debug_GraphicArrowRight(0,0));
	}
	,onResume: function() {
		this.playbackToggleBtn.upHandler = ($_=flixel_FlxG.vcr,$bind($_,$_.pause));
		this.playbackToggleBtn.changeIcon(new flixel_system_debug__$VCR_GraphicPause(0,0));
	}
	,onStep: function() {
		if(!flixel_FlxG.vcr.paused) {
			flixel_FlxG.vcr.pause();
		}
		flixel_FlxG.vcr.stepRequested = true;
	}
	,__class__: flixel_system_debug_VCR
};
var flixel_system_debug__$Window_GraphicWindowHandle = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug__$Window_GraphicWindowHandle.preload != null) {
		this.__fromImage(flixel_system_debug__$Window_GraphicWindowHandle.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug__$Window_GraphicWindowHandle.preload == null) {
				flixel_system_debug__$Window_GraphicWindowHandle.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug__$Window_GraphicWindowHandle.resourceName),flixel_system_debug__$Window_GraphicWindowHandle.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug._Window.GraphicWindowHandle"] = flixel_system_debug__$Window_GraphicWindowHandle;
flixel_system_debug__$Window_GraphicWindowHandle.__name__ = ["flixel","system","debug","_Window","GraphicWindowHandle"];
flixel_system_debug__$Window_GraphicWindowHandle.preload = null;
flixel_system_debug__$Window_GraphicWindowHandle.__super__ = openfl_display_BitmapData;
flixel_system_debug__$Window_GraphicWindowHandle.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug__$Window_GraphicWindowHandle
});
var flixel_system_debug_Window = function(Title,Icon,Width,Height,Resizable,Bounds,Closable) {
	if(Closable == null) {
		Closable = false;
	}
	if(Resizable == null) {
		Resizable = true;
	}
	if(Height == null) {
		Height = 0;
	}
	if(Width == null) {
		Width = 0;
	}
	openfl_display_Sprite.call(this);
	this.minSize = new openfl_geom_Point(50,30);
	this._width = Math.abs(Width) | 0;
	this._height = Math.abs(Height) | 0;
	this.updateBounds(Bounds);
	this._drag = new openfl_geom_Point();
	this._resizable = Resizable;
	this._closable = Closable;
	this._shadow = new openfl_display_Bitmap(new openfl_display_BitmapData(1,2,true,-16777216));
	this._background = new openfl_display_Bitmap(new openfl_display_BitmapData(1,1,true,-580952225));
	this._header = new openfl_display_Bitmap(new openfl_display_BitmapData(1,15,true,-1157627904));
	this._background.set_y(this._header.get_height());
	this._title = flixel_system_debug_DebuggerUtil.createTextField(2,-1);
	this._title.set_alpha(0.8);
	this._title.set_text(Title);
	this.addChild(this._shadow);
	this.addChild(this._background);
	this.addChild(this._header);
	this.addChild(this._title);
	if(Icon != null) {
		flixel_system_debug_DebuggerUtil.fixSize(Icon);
		var icon = new openfl_display_Bitmap(Icon);
		icon.set_x(5);
		icon.set_y(2);
		icon.set_alpha(0.8);
		this._title.set_x(icon.get_x() + icon.get_width() + 2);
		this.addChild(icon);
	}
	if(this._resizable) {
		this._handle = new openfl_display_Bitmap(flixel_system_debug_DebuggerUtil.fixSize(new flixel_system_debug__$Window_GraphicWindowHandle(0,0)));
		this.addChild(this._handle);
	}
	if(Closable) {
		this._closeButton = new flixel_system_ui_FlxSystemButton(new flixel_system_debug_GraphicCloseButton(0,0),$bind(this,this.close));
		this._closeButton.set_alpha(0.8);
		this.addChild(this._closeButton);
	} else {
		this._id = flixel_system_debug_Window.WINDOW_AMOUNT;
		this.loadSaveData();
		flixel_system_debug_Window.WINDOW_AMOUNT++;
	}
	if(this._width != 0 || this._height != 0) {
		this.updateSize();
	}
	this.bound();
	this.addEventListener("enterFrame",$bind(this,this.init));
};
$hxClasses["flixel.system.debug.Window"] = flixel_system_debug_Window;
flixel_system_debug_Window.__name__ = ["flixel","system","debug","Window"];
flixel_system_debug_Window.__super__ = openfl_display_Sprite;
flixel_system_debug_Window.prototype = $extend(openfl_display_Sprite.prototype,{
	minSize: null
	,maxSize: null
	,toggleButton: null
	,_width: null
	,_height: null
	,_bounds: null
	,_background: null
	,_header: null
	,_shadow: null
	,_title: null
	,_handle: null
	,_closeButton: null
	,_overHeader: null
	,_overHandle: null
	,_drag: null
	,_dragging: null
	,_resizing: null
	,_resizable: null
	,_closable: null
	,_id: null
	,destroy: function() {
		this.minSize = null;
		this.maxSize = null;
		this._bounds = null;
		if(this._shadow != null) {
			this.removeChild(this._shadow);
		}
		this._shadow = null;
		if(this._background != null) {
			this.removeChild(this._background);
		}
		this._background = null;
		if(this._header != null) {
			this.removeChild(this._header);
		}
		this._header = null;
		if(this._title != null) {
			this.removeChild(this._title);
		}
		this._title = null;
		if(this._handle != null) {
			this.removeChild(this._handle);
		}
		this._handle = null;
		this._drag = null;
		this._closeButton = flixel_util_FlxDestroyUtil.destroy(this._closeButton);
		var stage = openfl_Lib.current.stage;
		if(stage.hasEventListener("mouseMove")) {
			stage.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
		}
		if(this.hasEventListener("mouseDown")) {
			this.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
		}
		if(stage.hasEventListener("mouseUp")) {
			stage.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
		}
	}
	,resize: function(Width,Height) {
		this._width = Math.abs(Width) | 0;
		this._height = Math.abs(Height) | 0;
		this.updateSize();
	}
	,reposition: function(X,Y) {
		this.set_x(X);
		this.set_y(Y);
		this.bound();
	}
	,updateBounds: function(Bounds) {
		this._bounds = Bounds;
		if(this._bounds != null) {
			this.maxSize = new openfl_geom_Point(this._bounds.width,this._bounds.height);
		} else {
			this.maxSize = new openfl_geom_Point(1.79e+308,1.79e+308);
		}
	}
	,setVisible: function(Value) {
		this.set_visible(Value);
		if(!this._closable) {
			flixel_FlxG.save.data.windowSettings[this._id] = this.get_visible();
			flixel_FlxG.save.flush();
		}
		if(this.toggleButton != null) {
			this.toggleButton.set_toggled(!this.get_visible());
		}
		if(this.get_visible()) {
			this.parent.addChild(this);
		}
	}
	,toggleVisible: function() {
		this.setVisible(!this.get_visible());
	}
	,putOnTop: function() {
		this.parent.addChild(this);
	}
	,loadSaveData: function() {
		if(flixel_FlxG.save.data.windowSettings != null) {
			this.set_visible(flixel_FlxG.save.data.windowSettings[this._id]);
		} else {
			this.initSaveData();
			this.loadSaveData();
		}
	}
	,initSaveData: function() {
		var settings = [];
		var _g = 0;
		while(_g < 10) {
			var i = _g++;
			settings[i] = true;
		}
		flixel_FlxG.save.data.windowSettings = settings;
		flixel_FlxG.save.flush();
	}
	,update: function() {
	}
	,init: function(E) {
		if(this.stage == null) {
			return;
		}
		this.removeEventListener("enterFrame",$bind(this,this.init));
		this.stage.addEventListener("mouseMove",$bind(this,this.onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.addEventListener("mouseDown",$bind(this,this.onMouseDown));
	}
	,onMouseMove: function(E) {
		var mouseX = this.get_mouseX() < 0 ? 0 : this.get_mouseX();
		var mouseY = this.get_mouseY() < 0 ? 0 : this.get_mouseY();
		if(!this.parent.get_visible()) {
			this._overHandle = this._overHeader = false;
			return;
		}
		if(this._dragging) {
			this._overHeader = true;
			this.reposition(this.parent.get_mouseX() - this._drag.x,this.parent.get_mouseY() - this._drag.y);
		} else if(this._resizing) {
			this._overHandle = true;
			this.resize(mouseX - this._drag.x,mouseY - this._drag.y);
		} else if(mouseX >= 0 && mouseX <= this._width && mouseY >= 0 && mouseY <= this._height) {
			this._overHeader = mouseX <= this._header.get_width() && mouseY <= this._header.get_height();
			if(this._resizable) {
				this._overHandle = mouseX >= this._width - this._handle.get_width() && mouseY >= this._height - this._handle.get_height();
			}
		} else {
			this._overHandle = this._overHeader = false;
		}
	}
	,onMouseDown: function(E) {
		if(this._overHeader) {
			this.parent.addChild(this);
			this._dragging = true;
			this._drag.x = this.get_mouseX();
			this._drag.y = this.get_mouseY();
		} else if(this._overHandle) {
			this.parent.addChild(this);
			this._resizing = true;
			var tmp = this._width;
			var tmp1 = this.get_mouseX();
			this._drag.x = tmp - tmp1;
			var tmp2 = this._height;
			var tmp3 = this.get_mouseY();
			this._drag.y = tmp2 - tmp3;
		}
	}
	,onMouseUp: function(E) {
		this._dragging = false;
		this._resizing = false;
	}
	,bound: function() {
		if(this._bounds != null) {
			var Value = this.get_x();
			var Min = this._bounds.get_left();
			var Max = this._bounds.get_right() - this._width;
			var lowerBound = Min != null && Value < Min ? Min : Value;
			this.set_x(Max != null && lowerBound > Max ? Max : lowerBound);
			var Value1 = this.get_y();
			var Min1 = this._bounds.get_top();
			var Max1 = this._bounds.get_bottom() - this._height;
			var lowerBound1 = Min1 != null && Value1 < Min1 ? Min1 : Value1;
			this.set_y(Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1);
		}
	}
	,updateSize: function() {
		var Value = this._width;
		var Min = this.minSize.x;
		var Max = this.maxSize.x;
		var lowerBound = Min != null && Value < Min ? Min : Value;
		this._width = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
		var Value1 = this._height;
		var Min1 = this.minSize.y;
		var Max1 = this.maxSize.y;
		var lowerBound1 = Min1 != null && Value1 < Min1 ? Min1 : Value1;
		this._height = (Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1) | 0;
		this._header.set_scaleX(this._width);
		this._background.set_scaleX(this._width);
		this._background.set_scaleY(this._height - this._header.get_height());
		this._shadow.set_scaleX(this._width);
		this._shadow.set_y(this._height);
		this._title.set_width(this._width - 4);
		if(this._resizable) {
			this._handle.set_x(this._width - this._handle.get_width());
			this._handle.set_y(this._height - this._handle.get_height());
		}
		if(this._closeButton != null) {
			this._closeButton.set_x(this._width - this._closeButton.get_width() - 3);
			this._closeButton.set_y(3);
		}
	}
	,close: function() {
		this.destroy();
		var _this = flixel_FlxG.game["debugger"];
		if(_this.contains(this)) {
			_this.removeChild(this);
		}
		var array = _this._windows;
		var index = array.indexOf(this);
		if(index != -1) {
			array[index] = array[array.length - 1];
			array.pop();
		}
	}
	,__class__: flixel_system_debug_Window
});
var flixel_system_debug_completion_CompletionHandler = function(completionList,input) {
	this.watchingSelection = false;
	this.completionList = completionList;
	this.input = input;
	completionList.completed = $bind(this,this.completed);
	completionList.selectionChanged = $bind(this,this.selectionChanged);
	completionList.closed = $bind(this,this.completionClosed);
	input.addEventListener("keyUp",$bind(this,this.onKeyUp));
};
$hxClasses["flixel.system.debug.completion.CompletionHandler"] = flixel_system_debug_completion_CompletionHandler;
flixel_system_debug_completion_CompletionHandler.__name__ = ["flixel","system","debug","completion","CompletionHandler"];
flixel_system_debug_completion_CompletionHandler.prototype = {
	completionList: null
	,input: null
	,watchingSelection: null
	,getTextUntilCaret: function() {
		return this.input.get_text().substring(0,this.getCaretIndex());
	}
	,getCaretIndex: function() {
		return this.input.get_caretIndex();
	}
	,onKeyUp: function(e) {
		var text = this.getTextUntilCaret();
		if(StringTools.endsWith(text,")") || StringTools.endsWith(text,"\"") || StringTools.endsWith(text,"'")) {
			this.completionList.close();
			return;
		}
		var _g = e.keyCode;
		switch(_g) {
		case 13:case 27:case 38:case 40:
			break;
		case 37:case 39:
			this.completionList.close();
			break;
		default:
			this.invokeCompletion(this.getPathBeforeDot(text),e.keyCode == 190);
			if(this.completionList.get_visible()) {
				this.completionList.set_filter(this.getWordAfterDot(text));
			}
		}
	}
	,invokeCompletion: function(path,isPeriod) {
		var items = null;
		try {
			if(path.length != 0) {
				var output = flixel_system_debug_console_ConsoleUtil.runCommand(path);
				items = flixel_system_debug_console_ConsoleUtil.getFields(output);
			}
		} catch( e ) {
			if(isPeriod) {
				this.completionList.close();
				return;
			}
		}
		if(items == null) {
			items = this.getGlobals();
		}
		if(items.length > 0) {
			this.completionList.show(this.getCharXPosition(),items);
		} else {
			this.completionList.close();
		}
	}
	,getGlobals: function() {
		return flixel_util_FlxStringUtil.sortAlphabetically(flixel_system_debug_console_ConsoleUtil.interp.getGlobals());
	}
	,getCharXPosition: function() {
		var pos = 0.0;
		var _g1 = 0;
		var _g = this.getCaretIndex();
		while(_g1 < _g) {
			++_g1;
			pos += 6;
		}
		return pos;
	}
	,getCompletedText: function(text,selectedItem) {
		var _this_r = new RegExp(this.getWordAfterDot(text) + "$","g".split("u").join(""));
		return text.replace(_this_r,selectedItem);
	}
	,completed: function(selectedItem) {
		var textUntilCaret = this.getTextUntilCaret();
		var insert = this.getCompletedText(textUntilCaret,selectedItem);
		this.input.set_text(insert + HxOverrides.substr(this.input.get_text(),this.getCaretIndex(),null));
		this.input.setSelection(insert.length,insert.length);
	}
	,selectionChanged: function(selectedItem) {
		try {
			var lastWord = this.getLastWord(this.input.get_text());
			var command = this.getCompletedText(lastWord,selectedItem);
			var output = flixel_system_debug_console_ConsoleUtil.runCommand(command);
			this.watchingSelection = true;
			flixel_FlxG.game["debugger"].watch.add("Selection",flixel_system_debug_watch_WatchEntryData.QUICK(output));
		} catch( e ) {
		}
	}
	,completionClosed: function() {
		if(!this.watchingSelection) {
			return;
		}
		flixel_FlxG.game["debugger"].watch.remove("Selection",flixel_system_debug_watch_WatchEntryData.QUICK(null));
		this.watchingSelection = false;
	}
	,getPathBeforeDot: function(text) {
		var lastWord = this.getLastWord(text);
		var dotIndex = lastWord.lastIndexOf(".");
		return HxOverrides.substr(lastWord,0,dotIndex);
	}
	,getWordAfterDot: function(text) {
		var lastWord = this.getLastWord(text);
		var index = lastWord.lastIndexOf(".");
		if(index < 0) {
			index = 0;
		} else {
			++index;
		}
		var word = HxOverrides.substr(lastWord,index,null);
		if(word == null) {
			return "";
		} else {
			return word;
		}
	}
	,getLastWord: function(text) {
		return flixel_util_FlxArrayUtil.last(new EReg("([^.a-zA-Z0-9_\\[\\]\"']+)","g").split(text));
	}
	,__class__: flixel_system_debug_completion_CompletionHandler
};
var flixel_system_debug_completion_CompletionList = function(capacity) {
	this.upperVisibleIndex = 0;
	this.lowerVisibleIndex = 0;
	this.selectedIndex = 0;
	this.entries = [];
	openfl_display_Sprite.call(this);
	this.set_visible(false);
	this.upperVisibleIndex = capacity - 1;
	this.actualHeight = capacity * 20;
	this.createPopupEntries(capacity);
	this.createScrollBar();
	this.updateSelectedItem();
	openfl_Lib.current.stage.addEventListener("keyDown",$bind(this,this.onKeyDown));
};
$hxClasses["flixel.system.debug.completion.CompletionList"] = flixel_system_debug_completion_CompletionList;
flixel_system_debug_completion_CompletionList.__name__ = ["flixel","system","debug","completion","CompletionList"];
flixel_system_debug_completion_CompletionList.__super__ = openfl_display_Sprite;
flixel_system_debug_completion_CompletionList.prototype = $extend(openfl_display_Sprite.prototype,{
	completed: null
	,selectionChanged: null
	,closed: null
	,filter: null
	,items: null
	,entries: null
	,originalItems: null
	,selectedIndex: null
	,lowerVisibleIndex: null
	,upperVisibleIndex: null
	,scrollBar: null
	,actualHeight: null
	,show: function(x,items) {
		this.set_visible(true);
		this.set_x(x);
		this.originalItems = items;
		this.set_filter("");
		this.updateEntries();
	}
	,setY: function(y) {
		this.set_y(y - this.actualHeight);
	}
	,close: function() {
		this.set_visible(false);
		this.set_filter(null);
		if(this.closed != null) {
			this.closed();
		}
	}
	,createPopupEntries: function(amount) {
		var _g1 = 0;
		while(_g1 < amount) {
			var i = _g1++;
			var entry = new flixel_system_debug_completion_CompletionListEntry();
			this.entries.push(entry);
			this.addChild(entry);
			entry.set_y(20 * i);
		}
	}
	,createScrollBar: function() {
		this.scrollBar = new flixel_system_debug_completion_CompletionListScrollBar(150,0,5,this.actualHeight);
		this.addChild(this.scrollBar);
	}
	,onKeyDown: function(e) {
		if(!this.get_visible()) {
			return;
		}
		var _g = e.keyCode;
		switch(_g) {
		case 13:
			if(this.completed != null) {
				this.completed(this.items[this.selectedIndex]);
			}
			this.close();
			return;
		case 27:
			this.close();
			return;
		case 38:
			this.updateIndices(-1);
			break;
		case 40:
			this.updateIndices(1);
			break;
		}
		this.updateEntries();
	}
	,updateIndices: function(modifier) {
		this.selectedIndex = this.bound(this.selectedIndex + modifier);
		var Value = this.selectedIndex;
		var Min = this.lowerVisibleIndex;
		var Max = this.upperVisibleIndex;
		if((Min == null || Value >= Min) && (Max == null || Value <= Max)) {
			return;
		}
		this.lowerVisibleIndex = this.bound(this.lowerVisibleIndex + modifier);
		this.upperVisibleIndex = this.bound(this.upperVisibleIndex + modifier);
		var range = this.upperVisibleIndex - this.lowerVisibleIndex;
		if(range == this.items.length) {
			return;
		}
		if(this.lowerVisibleIndex == 0) {
			this.upperVisibleIndex = this.entries.length - 1;
		} else if(this.upperVisibleIndex == this.items.length - 1) {
			this.lowerVisibleIndex = this.items.length - this.entries.length;
		}
	}
	,bound: function(index) {
		var Max = this.items.length - 1;
		var lowerBound = index < 0 ? 0 : index;
		return (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
	}
	,updateEntries: function() {
		this.updateLabels();
		this.updateSelectedItem();
		this.scrollBar.updateHandle(this.lowerVisibleIndex,this.items.length,this.entries.length);
	}
	,updateLabels: function() {
		var _g1 = 0;
		var _g = this.entries.length;
		while(_g1 < _g) {
			var i = _g1++;
			var selectedItem = this.items[this.lowerVisibleIndex + i];
			if(selectedItem == null) {
				selectedItem = "";
			}
			this.entries[i].setItem(selectedItem);
		}
	}
	,updateSelectedItem: function() {
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			entry.set_selected(false);
		}
		this.entries[this.selectedIndex - this.lowerVisibleIndex].set_selected(true);
		if(this.selectionChanged != null) {
			this.selectionChanged(this.items[this.selectedIndex]);
		}
	}
	,setItems: function(items) {
		if(items == null) {
			return;
		}
		if(items.length == 0) {
			this.close();
		}
		this.items = items;
		this.selectedIndex = 0;
		this.lowerVisibleIndex = 0;
		this.upperVisibleIndex = this.entries.length - 1;
		this.updateEntries();
	}
	,filterItems: function(filter) {
		if(filter == null) {
			filter = "";
		}
		var tmp = this.originalItems.filter(function(item) {
			return item.toLowerCase().indexOf(filter.toLowerCase()) != -1;
		});
		return this.sortItems(filter,tmp);
	}
	,sortItems: function(filter,items) {
		var _gthis = this;
		if(filter == "") {
			return items;
		}
		items.sort(function(a,b) {
			var valueA = _gthis.startsWithExt(a,filter);
			var valueB = _gthis.startsWithExt(b,filter);
			if(valueA > valueB) {
				return -valueA;
			}
			if(valueB > valueA) {
				return valueB;
			}
			if(valueA == valueB) {
				return a.length - b.length | 0;
			}
			return 0;
		});
		return items;
	}
	,startsWithExt: function(s,start) {
		var _this_r;
		if(StringTools.startsWith(s,start)) {
			return 2;
		}
		_this_r = new RegExp("^[_]+","".split("u").join(""));
		if(StringTools.startsWith(s.replace(_this_r,""),start)) {
			return 1;
		}
		return 0;
	}
	,set_filter: function(filter) {
		if(filter == this.filter) {
			return filter;
		}
		this.setItems(this.filterItems(filter));
		return this.filter = filter;
	}
	,__class__: flixel_system_debug_completion_CompletionList
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_filter:"set_filter"})
});
var flixel_system_debug_completion_CompletionListEntry = function() {
	this.selected = false;
	openfl_display_Sprite.call(this);
	this.initBitmapDatas();
	this.addChild(this.background = new openfl_display_Bitmap());
	this.background.bitmapData = flixel_system_debug_completion_CompletionListEntry.normalBitmapData;
	this.label = flixel_system_debug_DebuggerUtil.createTextField();
	this.label.set_x(4);
	this.addChild(this.label);
};
$hxClasses["flixel.system.debug.completion.CompletionListEntry"] = flixel_system_debug_completion_CompletionListEntry;
flixel_system_debug_completion_CompletionListEntry.__name__ = ["flixel","system","debug","completion","CompletionListEntry"];
flixel_system_debug_completion_CompletionListEntry.normalBitmapData = null;
flixel_system_debug_completion_CompletionListEntry.highlightBitmapData = null;
flixel_system_debug_completion_CompletionListEntry.__super__ = openfl_display_Sprite;
flixel_system_debug_completion_CompletionListEntry.prototype = $extend(openfl_display_Sprite.prototype,{
	selected: null
	,background: null
	,label: null
	,initBitmapDatas: function() {
		if(flixel_system_debug_completion_CompletionListEntry.normalBitmapData == null) {
			flixel_system_debug_completion_CompletionListEntry.normalBitmapData = new openfl_display_BitmapData(150,20,true,-10526881);
		}
		if(flixel_system_debug_completion_CompletionListEntry.highlightBitmapData == null) {
			flixel_system_debug_completion_CompletionListEntry.highlightBitmapData = new openfl_display_BitmapData(150,20,true,-9605779);
		}
	}
	,setItem: function(item) {
		this.label.set_text(item);
		if(this.label.get_width() > 150) {
			this.label.set_width(150);
			this.label.set_autoSize(2);
		}
	}
	,set_selected: function(selected) {
		if(selected == this.selected) {
			return selected;
		}
		this.background.bitmapData = selected ? flixel_system_debug_completion_CompletionListEntry.highlightBitmapData : flixel_system_debug_completion_CompletionListEntry.normalBitmapData;
		return this.selected = selected;
	}
	,__class__: flixel_system_debug_completion_CompletionListEntry
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_selected:"set_selected"})
});
var flixel_system_debug_completion_CompletionListScrollBar = function(x,y,width,height) {
	openfl_display_Sprite.call(this);
	this.set_x(x);
	this.set_y(y);
	this.addChild(new openfl_display_Bitmap(new openfl_display_BitmapData(width,height,true,-12303292)));
	this.handle = new openfl_display_Bitmap(new openfl_display_BitmapData(width,1,true,-14540254));
	this.addChild(this.handle);
};
$hxClasses["flixel.system.debug.completion.CompletionListScrollBar"] = flixel_system_debug_completion_CompletionListScrollBar;
flixel_system_debug_completion_CompletionListScrollBar.__name__ = ["flixel","system","debug","completion","CompletionListScrollBar"];
flixel_system_debug_completion_CompletionListScrollBar.__super__ = openfl_display_Sprite;
flixel_system_debug_completion_CompletionListScrollBar.prototype = $extend(openfl_display_Sprite.prototype,{
	handle: null
	,updateHandle: function(lower,items,entries) {
		this.handle.set_scaleY(Math.min(this.get_height() / items * entries,this.get_height()));
		this.handle.set_y(this.get_height() / items * lower);
		var tmp = this.handle;
		var Value = this.handle.get_y();
		var Max = this.get_height() - this.handle.get_scaleY();
		var lowerBound = Value < 0 ? 0 : Value;
		tmp.set_y(Max != null && lowerBound > Max ? Max : lowerBound);
	}
	,__class__: flixel_system_debug_completion_CompletionListScrollBar
});
var flixel_system_debug_console_Console = function(completionList) {
	this.objectStack = [];
	this.registeredHelp = new haxe_ds_StringMap();
	this.registeredFunctions = new haxe_ds_StringMap();
	this.registeredObjects = new haxe_ds_StringMap();
	flixel_system_debug_Window.call(this,"Console",new flixel_system_debug_GraphicConsole(0,0),0,0,false);
	this.completionList = completionList;
	completionList.setY(this.get_y() + 15);
	flixel_system_debug_console_ConsoleUtil.init();
	this.history = new flixel_system_debug_console_ConsoleHistory();
	this.createInputTextField();
	new flixel_system_debug_completion_CompletionHandler(completionList,this.input);
	this.registerEventListeners();
	new flixel_system_debug_console_ConsoleCommands(this);
};
$hxClasses["flixel.system.debug.console.Console"] = flixel_system_debug_console_Console;
flixel_system_debug_console_Console.__name__ = ["flixel","system","debug","console","Console"];
flixel_system_debug_console_Console.__super__ = flixel_system_debug_Window;
flixel_system_debug_console_Console.prototype = $extend(flixel_system_debug_Window.prototype,{
	registeredObjects: null
	,registeredFunctions: null
	,registeredHelp: null
	,objectStack: null
	,input: null
	,history: null
	,completionList: null
	,createInputTextField: function() {
		this.input = new openfl_text_TextField();
		this.input.set_embedFonts(true);
		this.input.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,12,16777215,false,false,false));
		this.input.set_text("(Click here / press [Tab] to enter command. Type 'help' for help.)");
		this.input.set_width(this._width - 4);
		this.input.set_height(this._height - 15);
		this.input.set_x(2);
		this.input.set_y(15);
		this.addChild(this.input);
	}
	,registerEventListeners: function() {
		this.input.set_type(1);
		this.input.addEventListener("focusIn",$bind(this,this.onFocus));
		this.input.addEventListener("focusOut",$bind(this,this.onFocusLost));
		this.input.addEventListener("keyDown",$bind(this,this.onKeyDown));
	}
	,onFocus: function(_) {
		if(flixel_FlxG.console.autoPause) {
			flixel_FlxG.vcr.pause();
		}
		flixel_FlxG.keys.enabled = false;
		if(this.input.get_text() == "(Click here / press [Tab] to enter command. Type 'help' for help.)") {
			this.input.set_text("");
		}
	}
	,onFocusLost: function(_) {
		if(flixel_FlxG.console.autoPause) {
			flixel_FlxG.vcr.resume();
		}
		flixel_FlxG.keys.enabled = true;
		if(this.input.get_text() == "") {
			this.input.set_text("(Click here / press [Tab] to enter command. Type 'help' for help.)");
		}
		this.completionList.close();
		flixel_FlxG.game["debugger"].onMouseFocusLost();
	}
	,onKeyDown: function(e) {
		if(this.completionList.get_visible()) {
			return;
		}
		var _g = e.keyCode;
		switch(_g) {
		case 13:
			if(this.input.get_text() != "") {
				this.processCommand();
			}
			break;
		case 27:
			openfl_Lib.current.stage.set_focus(null);
			break;
		case 38:
			if(!this.history.get_isEmpty()) {
				this.setText(this.history.getPreviousCommand());
			}
			break;
		case 40:
			if(!this.history.get_isEmpty()) {
				this.setText(this.history.getNextCommand());
			}
			break;
		case 46:
			this.input.set_text("");
			break;
		}
	}
	,setText: function(text) {
		this.input.set_text(text);
		this.input.setSelection(text.length,text.length);
	}
	,processCommand: function() {
		try {
			var text = StringTools.trim(this.input.get_text());
			var _this = this.registeredFunctions;
			if((__map_reserved[text] != null ? _this.getReserved(text) : _this.h[text]) != null) {
				text += "()";
			}
			var output = flixel_system_debug_console_ConsoleUtil.runCommand(text);
			if(output != null) {
				flixel_FlxG.log.advanced([output],flixel_system_debug_log_LogStyle.CONSOLE);
			}
			this.history.addCommand(this.input.get_text());
			if(flixel_FlxG.vcr.paused && flixel_FlxG.console.stepAfterCommand) {
				flixel_FlxG.game["debugger"].vcr.onStep();
			}
			this.input.set_text("");
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			flixel_FlxG.log.advanced("Console: Invalid syntax: '" + Std.string(e) + "'",flixel_system_debug_log_LogStyle.ERROR,true);
		}
	}
	,reposition: function(X,Y) {
		flixel_system_debug_Window.prototype.reposition.call(this,X,Y);
		this.completionList.setY(this.get_y() + 15);
		this.completionList.close();
	}
	,registerFunction: function(functionAlias,func,helpText) {
		var _this = this.registeredFunctions;
		if(__map_reserved[functionAlias] != null) {
			_this.setReserved(functionAlias,func);
		} else {
			_this.h[functionAlias] = func;
		}
		flixel_system_debug_console_ConsoleUtil.registerFunction(functionAlias,func);
		if(helpText != null) {
			var _this1 = this.registeredHelp;
			if(__map_reserved[functionAlias] != null) {
				_this1.setReserved(functionAlias,helpText);
			} else {
				_this1.h[functionAlias] = helpText;
			}
		}
	}
	,registerObject: function(objectAlias,anyObject) {
		var _this = this.registeredObjects;
		if(__map_reserved[objectAlias] != null) {
			_this.setReserved(objectAlias,anyObject);
		} else {
			_this.h[objectAlias] = anyObject;
		}
		flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias,anyObject);
	}
	,registerClass: function(cl) {
		var objectAlias = flixel_util_FlxStringUtil.getClassName(cl,true);
		this.registeredObjects.set(objectAlias,cl);
		flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias,cl);
	}
	,destroy: function() {
		flixel_system_debug_Window.prototype.destroy.call(this);
		this.input.removeEventListener("focusIn",$bind(this,this.onFocus));
		this.input.removeEventListener("focusOut",$bind(this,this.onFocusLost));
		this.input.removeEventListener("keyDown",$bind(this,this.onKeyDown));
		if(this.input != null) {
			this.removeChild(this.input);
			this.input = null;
		}
		this.registeredObjects = null;
		this.registeredFunctions = null;
		this.registeredHelp = null;
		this.objectStack = null;
	}
	,updateSize: function() {
		flixel_system_debug_Window.prototype.updateSize.call(this);
		this.input.set_width(this._width - 4);
		this.input.set_height(this._height - 15);
	}
	,__class__: flixel_system_debug_console_Console
});
var flixel_system_debug_console_ConsoleCommands = function(console) {
	this._watchingMouse = false;
	this._console = console;
	var func = $bind(this,this.help);
	console.registeredFunctions.set("help",func);
	flixel_system_debug_console_ConsoleUtil.registerFunction("help",func);
	console.registeredHelp.set("help","Displays the help text of a registered object or function. See \"help\".");
	var func1 = $bind(this,this.close);
	console.registeredFunctions.set("close",func1);
	flixel_system_debug_console_ConsoleUtil.registerFunction("close",func1);
	console.registeredHelp.set("close","Closes the debugger overlay.");
	var func2 = ($_=this._console.history,$bind($_,$_.clear));
	console.registeredFunctions.set("clearHistory",func2);
	flixel_system_debug_console_ConsoleUtil.registerFunction("clearHistory",func2);
	console.registeredHelp.set("clearHistory","Closes the debugger overlay.");
	var func3 = ($_=flixel_FlxG.log,$bind($_,$_.clear));
	console.registeredFunctions.set("clearLog",func3);
	flixel_system_debug_console_ConsoleUtil.registerFunction("clearLog",func3);
	console.registeredHelp.set("clearLog","Clears the command history.");
	var func4 = $bind(this,this.fields);
	console.registeredFunctions.set("fields",func4);
	flixel_system_debug_console_ConsoleUtil.registerFunction("fields",func4);
	console.registeredHelp.set("fields","Lists the fields of a class or instance");
	var func5 = $bind(this,this.listObjects);
	console.registeredFunctions.set("listObjects",func5);
	flixel_system_debug_console_ConsoleUtil.registerFunction("listObjects",func5);
	console.registeredHelp.set("listObjects","Lists the aliases of all registered objects.");
	var func6 = $bind(this,this.listFunctions);
	console.registeredFunctions.set("listFunctions",func6);
	flixel_system_debug_console_ConsoleUtil.registerFunction("listFunctions",func6);
	console.registeredHelp.set("listFunctions","Lists the aliases of all registered functions.");
	var func7 = $bind(this,this.step);
	console.registeredFunctions.set("step",func7);
	flixel_system_debug_console_ConsoleUtil.registerFunction("step",func7);
	console.registeredHelp.set("step","Steps the game forward one frame if currently paused. No effect if unpaused.");
	var func8 = $bind(this,this.pause);
	console.registeredFunctions.set("pause",func8);
	flixel_system_debug_console_ConsoleUtil.registerFunction("pause",func8);
	console.registeredHelp.set("pause","Toggles the game between paused and unpaused.");
	var func9 = ($_=flixel_FlxG.bitmapLog,$bind($_,$_.clear));
	console.registeredFunctions.set("clearBitmapLog",func9);
	flixel_system_debug_console_ConsoleUtil.registerFunction("clearBitmapLog",func9);
	console.registeredHelp.set("clearBitmapLog","Clears the bitmapLog window.");
	var func10 = ($_=flixel_FlxG.bitmapLog,$bind($_,$_.viewCache));
	console.registeredFunctions.set("viewCache",func10);
	flixel_system_debug_console_ConsoleUtil.registerFunction("viewCache",func10);
	console.registeredHelp.set("viewCache","Adds the cache to the bitmapLog window.");
	var func11 = $bind(this,this.create);
	console.registeredFunctions.set("create",func11);
	flixel_system_debug_console_ConsoleUtil.registerFunction("create",func11);
	console.registeredHelp.set("create","Creates a new FlxObject and registers it - by default at the mouse position. \"create(ObjClass:Class<T>, PlaceAtMouse:Bool, ExtraParams:Array<Dynamic>)\" Ex: \"create(FlxSprite, false, [100, 100])\"");
	var func12 = ($_=flixel_FlxG.watch,$bind($_,$_.add));
	console.registeredFunctions.set("watch",func12);
	flixel_system_debug_console_ConsoleUtil.registerFunction("watch",func12);
	console.registeredHelp.set("watch","Adds the specified field of an object to the watch window.");
	var func13 = ($_=flixel_FlxG.watch,$bind($_,$_.addExpression));
	console.registeredFunctions.set("watchExpression",func13);
	flixel_system_debug_console_ConsoleUtil.registerFunction("watchExpression",func13);
	console.registeredHelp.set("watchExpression","Adds the specified expression to the watch window. Be sure any objects, functions, and classes used are registered!");
	var func14 = $bind(this,this.watchMouse);
	console.registeredFunctions.set("watchMouse",func14);
	flixel_system_debug_console_ConsoleUtil.registerFunction("watchMouse",func14);
	console.registeredHelp.set("watchMouse","Adds the mouse coordinates to the watch window.");
	var func15 = ($_=flixel_FlxG["debugger"],$bind($_,$_.track));
	console.registeredFunctions.set("track",func15);
	flixel_system_debug_console_ConsoleUtil.registerFunction("track",func15);
	console.registeredHelp.set("track","Adds a tracker window for the specified object or class.");
	var cl = Math;
	var objectAlias = flixel_util_FlxStringUtil.getClassName(cl,true);
	console.registeredObjects.set(objectAlias,cl);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias,cl);
	var cl1 = Reflect;
	var objectAlias1 = flixel_util_FlxStringUtil.getClassName(cl1,true);
	console.registeredObjects.set(objectAlias1,cl1);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias1,cl1);
	var cl2 = Std;
	var objectAlias2 = flixel_util_FlxStringUtil.getClassName(cl2,true);
	console.registeredObjects.set(objectAlias2,cl2);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias2,cl2);
	var cl3 = StringTools;
	var objectAlias3 = flixel_util_FlxStringUtil.getClassName(cl3,true);
	console.registeredObjects.set(objectAlias3,cl3);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias3,cl3);
	var cl4 = Type;
	var objectAlias4 = flixel_util_FlxStringUtil.getClassName(cl4,true);
	console.registeredObjects.set(objectAlias4,cl4);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias4,cl4);
	var cl5 = flixel_FlxG;
	var objectAlias5 = flixel_util_FlxStringUtil.getClassName(cl5,true);
	console.registeredObjects.set(objectAlias5,cl5);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias5,cl5);
	var cl6 = flixel_FlxObject;
	var objectAlias6 = flixel_util_FlxStringUtil.getClassName(cl6,true);
	console.registeredObjects.set(objectAlias6,cl6);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias6,cl6);
	var cl7 = flixel_FlxSprite;
	var objectAlias7 = flixel_util_FlxStringUtil.getClassName(cl7,true);
	console.registeredObjects.set(objectAlias7,cl7);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias7,cl7);
	var cl8 = flixel_math_FlxMath;
	var objectAlias8 = flixel_util_FlxStringUtil.getClassName(cl8,true);
	console.registeredObjects.set(objectAlias8,cl8);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias8,cl8);
	var cl9 = flixel_tweens_FlxTween;
	var objectAlias9 = flixel_util_FlxStringUtil.getClassName(cl9,true);
	console.registeredObjects.set(objectAlias9,cl9);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias9,cl9);
	var cl10 = flixel_FlxCamera;
	var objectAlias10 = flixel_util_FlxStringUtil.getClassName(cl10,true);
	console.registeredObjects.set(objectAlias10,cl10);
	flixel_system_debug_console_ConsoleUtil.registerObject(objectAlias10,cl10);
	var anyObject = flixel_system_debug_FlxDebuggerLayout;
	console.registeredObjects.set("FlxDebuggerLayout",anyObject);
	flixel_system_debug_console_ConsoleUtil.registerObject("FlxDebuggerLayout",anyObject);
};
$hxClasses["flixel.system.debug.console.ConsoleCommands"] = flixel_system_debug_console_ConsoleCommands;
flixel_system_debug_console_ConsoleCommands.__name__ = ["flixel","system","debug","console","ConsoleCommands"];
flixel_system_debug_console_ConsoleCommands.prototype = {
	_console: null
	,_watchingMouse: null
	,help: function(Alias) {
		if(Alias == null || Alias.length == 0) {
			var output = "System classes and commands: ";
			var obj = this._console.registeredObjects.keys();
			while(obj.hasNext()) {
				var obj1 = obj.next();
				output += obj1 + ", ";
			}
			var func = this._console.registeredFunctions.keys();
			while(func.hasNext()) {
				var func1 = func.next();
				output += func1 + "(), ";
			}
			return output + "\nTry 'help(\"command\")' for more information about a specific command.";
		} else {
			var _this = this._console.registeredHelp;
			if(__map_reserved[Alias] != null ? _this.existsReserved(Alias) : _this.h.hasOwnProperty(Alias)) {
				var tmp;
				var _this1 = this._console.registeredFunctions;
				if(__map_reserved[Alias] != null ? _this1.existsReserved(Alias) : _this1.h.hasOwnProperty(Alias)) {
					tmp = "()";
				} else {
					tmp = "";
				}
				var _this2 = this._console.registeredHelp;
				return Alias + tmp + ": " + (__map_reserved[Alias] != null ? _this2.getReserved(Alias) : _this2.h[Alias]);
			} else {
				flixel_FlxG.log.advanced("Help: The command '" + Alias + "' does not have help text.",flixel_system_debug_log_LogStyle.ERROR,true);
				return null;
			}
		}
	}
	,close: function() {
		flixel_FlxG["debugger"].set_visible(false);
	}
	,create: function(ObjClass,MousePos,Params) {
		if(MousePos == null) {
			MousePos = true;
		}
		if(Params == null) {
			Params = [];
		}
		var obj = Type.createInstance(ObjClass,Params);
		if(obj == null) {
			return;
		}
		if(MousePos) {
			obj.set_x(flixel_FlxG.game.get_mouseX());
			obj.set_y(flixel_FlxG.game.get_mouseY());
		}
		flixel_FlxG.game._state.add(obj);
		if(Params.length == 0) {
			flixel_FlxG.log.advanced(["create: New " + Std.string(ObjClass) + " created at X = " + obj.x + " Y = " + obj.y],flixel_system_debug_log_LogStyle.CONSOLE);
		} else {
			flixel_FlxG.log.advanced(["create: New " + Std.string(ObjClass) + " created at X = " + obj.x + " Y = " + obj.y + " with params " + Std.string(Params)],flixel_system_debug_log_LogStyle.CONSOLE);
		}
		this._console.objectStack.push(obj);
		var name = "Object_" + this._console.objectStack.length;
		this._console.registeredObjects.set(name,obj);
		flixel_system_debug_console_ConsoleUtil.registerObject(name,obj);
		flixel_FlxG.log.advanced(["create: " + Std.string(ObjClass) + " registered as '" + name + "'"],flixel_system_debug_log_LogStyle.CONSOLE);
	}
	,fields: function(Object) {
		return "Fields of " + Type.getClassName(Object) + ":\n" + StringTools.trim(flixel_system_debug_console_ConsoleUtil.getFields(Object).join("\n"));
	}
	,listObjects: function() {
		var Text = "Objects registered: \n" + flixel_util_FlxStringUtil.formatStringMap(this._console.registeredObjects);
		flixel_FlxG.log.advanced([Text],flixel_system_debug_log_LogStyle.CONSOLE);
	}
	,listFunctions: function() {
		var Text = "Functions registered: \n" + flixel_util_FlxStringUtil.formatStringMap(this._console.registeredFunctions);
		flixel_FlxG.log.advanced([Text],flixel_system_debug_log_LogStyle.CONSOLE);
	}
	,watchMouse: function() {
		if(!this._watchingMouse) {
			flixel_FlxG.game["debugger"].watch.add("Mouse Position",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_FlxG,"mouse"));
			flixel_FlxG.log.advanced(["watchMouse: Mouse position added to watch window"],flixel_system_debug_log_LogStyle.CONSOLE);
		} else {
			flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_FlxG,"mouse"));
			flixel_FlxG.log.advanced(["watchMouse: Mouse position removed from watch window"],flixel_system_debug_log_LogStyle.CONSOLE);
		}
		this._watchingMouse = !this._watchingMouse;
	}
	,pause: function() {
		if(flixel_FlxG.vcr.paused) {
			flixel_FlxG.vcr.resume();
			flixel_FlxG.log.advanced(["pause: Game unpaused"],flixel_system_debug_log_LogStyle.CONSOLE);
		} else {
			flixel_FlxG.vcr.pause();
			flixel_FlxG.log.advanced(["pause: Game paused"],flixel_system_debug_log_LogStyle.CONSOLE);
		}
	}
	,step: function() {
		if(flixel_FlxG.vcr.paused) {
			flixel_FlxG.game["debugger"].vcr.onStep();
		}
	}
	,__class__: flixel_system_debug_console_ConsoleCommands
};
var flixel_system_debug_console_ConsoleHistory = function() {
	this.index = 0;
	if(flixel_FlxG.save.data.history != null) {
		this.commands = flixel_FlxG.save.data.history;
		this.index = this.commands.length;
	} else {
		this.commands = [];
		flixel_FlxG.save.data.history = this.commands;
	}
};
$hxClasses["flixel.system.debug.console.ConsoleHistory"] = flixel_system_debug_console_ConsoleHistory;
flixel_system_debug_console_ConsoleHistory.__name__ = ["flixel","system","debug","console","ConsoleHistory"];
flixel_system_debug_console_ConsoleHistory.prototype = {
	commands: null
	,index: null
	,getPreviousCommand: function() {
		if(this.index > 0) {
			this.index--;
		}
		return this.commands[this.index];
	}
	,getNextCommand: function() {
		if(this.index < this.commands.length) {
			this.index++;
		}
		if(this.commands[this.index] != null) {
			return this.commands[this.index];
		} else {
			return "";
		}
	}
	,addCommand: function(command) {
		if(this.get_isEmpty() || this.getPreviousCommand() != command) {
			this.commands.push(command);
			flixel_FlxG.save.flush();
			if(this.commands.length > 50) {
				this.commands.shift();
			}
		}
		this.index = this.commands.length;
	}
	,clear: function() {
		this.commands.splice(0,this.commands.length);
		flixel_FlxG.save.flush();
	}
	,get_isEmpty: function() {
		return this.commands.length == 0;
	}
	,__class__: flixel_system_debug_console_ConsoleHistory
	,__properties__: {get_isEmpty:"get_isEmpty"}
};
var flixel_system_debug_console_ConsoleUtil = function() { };
$hxClasses["flixel.system.debug.console.ConsoleUtil"] = flixel_system_debug_console_ConsoleUtil;
flixel_system_debug_console_ConsoleUtil.__name__ = ["flixel","system","debug","console","ConsoleUtil"];
flixel_system_debug_console_ConsoleUtil.parser = null;
flixel_system_debug_console_ConsoleUtil.interp = null;
flixel_system_debug_console_ConsoleUtil.init = function() {
	flixel_system_debug_console_ConsoleUtil.parser = new hscript_Parser();
	flixel_system_debug_console_ConsoleUtil.parser.allowJSON = true;
	flixel_system_debug_console_ConsoleUtil.parser.allowTypes = true;
	flixel_system_debug_console_ConsoleUtil.interp = new flixel_system_debug_console__$ConsoleUtil_Interp();
};
flixel_system_debug_console_ConsoleUtil.parseCommand = function(Input) {
	if(StringTools.endsWith(Input,";")) {
		Input = HxOverrides.substr(Input,0,-1);
	}
	return flixel_system_debug_console_ConsoleUtil.parser.parseString(Input);
};
flixel_system_debug_console_ConsoleUtil.runCommand = function(Input) {
	return flixel_system_debug_console_ConsoleUtil.interp.expr(flixel_system_debug_console_ConsoleUtil.parseCommand(Input));
};
flixel_system_debug_console_ConsoleUtil.registerObject = function(ObjectAlias,AnyObject) {
	if(Reflect.isObject(AnyObject)) {
		var _this = flixel_system_debug_console_ConsoleUtil.interp.variables;
		if(__map_reserved[ObjectAlias] != null) {
			_this.setReserved(ObjectAlias,AnyObject);
		} else {
			_this.h[ObjectAlias] = AnyObject;
		}
	}
};
flixel_system_debug_console_ConsoleUtil.registerFunction = function(FunctionAlias,Function) {
	if(Reflect.isFunction(Function)) {
		var _this = flixel_system_debug_console_ConsoleUtil.interp.variables;
		if(__map_reserved[FunctionAlias] != null) {
			_this.setReserved(FunctionAlias,Function);
		} else {
			_this.h[FunctionAlias] = Function;
		}
	}
};
flixel_system_debug_console_ConsoleUtil.getFields = function(Object) {
	var fields = [];
	if(js_Boot.__instanceof(Object,Class)) {
		fields = Type.getClassFields(Object);
	} else if(Reflect.isObject(Object)) {
		fields = Type.getInstanceFields(Object == null ? null : js_Boot.getClass(Object));
	}
	var filteredFields = [];
	var _g = 0;
	while(_g < fields.length) {
		var field = fields[_g];
		++_g;
		if(StringTools.startsWith(field,"get_") || StringTools.startsWith(field,"set_")) {
			var name = HxOverrides.substr(field,4,null);
			if(fields.indexOf(name) == -1 && filteredFields.indexOf(name) == -1) {
				filteredFields.push(name);
			}
		} else {
			filteredFields.push(field);
		}
	}
	return flixel_system_debug_console_ConsoleUtil.sortFields(filteredFields);
};
flixel_system_debug_console_ConsoleUtil.sortFields = function(fields) {
	var underscoreList = [];
	fields = fields.filter(function(field) {
		if(StringTools.startsWith(field,"_")) {
			underscoreList.push(field);
			return false;
		}
		return true;
	});
	flixel_util_FlxStringUtil.sortAlphabetically(fields);
	flixel_util_FlxStringUtil.sortAlphabetically(underscoreList);
	return fields.concat(underscoreList);
};
flixel_system_debug_console_ConsoleUtil.log = function(Text) {
	flixel_FlxG.log.advanced([Text],flixel_system_debug_log_LogStyle.CONSOLE);
};
var hscript_Interp = function() {
	this.variables = new haxe_ds_StringMap();
	this.locals = new haxe_ds_StringMap();
	this.declared = [];
	var _this = this.variables;
	if(__map_reserved["null"] != null) {
		_this.setReserved("null",null);
	} else {
		_this.h["null"] = null;
	}
	var _this1 = this.variables;
	if(__map_reserved["true"] != null) {
		_this1.setReserved("true",true);
	} else {
		_this1.h["true"] = true;
	}
	var _this2 = this.variables;
	if(__map_reserved["false"] != null) {
		_this2.setReserved("false",false);
	} else {
		_this2.h["false"] = false;
	}
	var _this3 = this.variables;
	if(__map_reserved["trace"] != null) {
		_this3.setReserved("trace",function(e1) {
			haxe_Log.trace(Std.string(e1),{ fileName : "hscript", lineNumber : 0});
		});
	} else {
		_this3.h["trace"] = function(e1) {
			haxe_Log.trace(Std.string(e1),{ fileName : "hscript", lineNumber : 0});
		};
	}
	this.initOps();
};
$hxClasses["hscript.Interp"] = hscript_Interp;
hscript_Interp.__name__ = ["hscript","Interp"];
hscript_Interp.prototype = {
	variables: null
	,locals: null
	,binops: null
	,depth: null
	,inTry: null
	,declared: null
	,initOps: function() {
		var me = this;
		this.binops = new haxe_ds_StringMap();
		var _this = this.binops;
		if(__map_reserved["+"] != null) {
			_this.setReserved("+",function(e11,e21) {
				return me.expr(e11) + me.expr(e21);
			});
		} else {
			_this.h["+"] = function(e11,e21) {
				return me.expr(e11) + me.expr(e21);
			};
		}
		var _this1 = this.binops;
		if(__map_reserved["-"] != null) {
			_this1.setReserved("-",function(e121,e221) {
				return me.expr(e121) - me.expr(e221);
			});
		} else {
			_this1.h["-"] = function(e121,e221) {
				return me.expr(e121) - me.expr(e221);
			};
		}
		var _this2 = this.binops;
		if(__map_reserved["*"] != null) {
			_this2.setReserved("*",function(e131,e231) {
				return me.expr(e131) * me.expr(e231);
			});
		} else {
			_this2.h["*"] = function(e131,e231) {
				return me.expr(e131) * me.expr(e231);
			};
		}
		var _this3 = this.binops;
		if(__map_reserved["/"] != null) {
			_this3.setReserved("/",function(e141,e241) {
				return me.expr(e141) / me.expr(e241);
			});
		} else {
			_this3.h["/"] = function(e141,e241) {
				return me.expr(e141) / me.expr(e241);
			};
		}
		var _this4 = this.binops;
		if(__map_reserved["%"] != null) {
			_this4.setReserved("%",function(e151,e251) {
				return me.expr(e151) % me.expr(e251);
			});
		} else {
			_this4.h["%"] = function(e151,e251) {
				return me.expr(e151) % me.expr(e251);
			};
		}
		var _this5 = this.binops;
		if(__map_reserved["&"] != null) {
			_this5.setReserved("&",function(e161,e261) {
				return me.expr(e161) & me.expr(e261);
			});
		} else {
			_this5.h["&"] = function(e161,e261) {
				return me.expr(e161) & me.expr(e261);
			};
		}
		var _this6 = this.binops;
		if(__map_reserved["|"] != null) {
			_this6.setReserved("|",function(e171,e271) {
				return me.expr(e171) | me.expr(e271);
			});
		} else {
			_this6.h["|"] = function(e171,e271) {
				return me.expr(e171) | me.expr(e271);
			};
		}
		var _this7 = this.binops;
		if(__map_reserved["^"] != null) {
			_this7.setReserved("^",function(e181,e281) {
				return me.expr(e181) ^ me.expr(e281);
			});
		} else {
			_this7.h["^"] = function(e181,e281) {
				return me.expr(e181) ^ me.expr(e281);
			};
		}
		var _this8 = this.binops;
		if(__map_reserved["<<"] != null) {
			_this8.setReserved("<<",function(e191,e291) {
				return me.expr(e191) << me.expr(e291);
			});
		} else {
			_this8.h["<<"] = function(e191,e291) {
				return me.expr(e191) << me.expr(e291);
			};
		}
		var _this9 = this.binops;
		if(__map_reserved[">>"] != null) {
			_this9.setReserved(">>",function(e1101,e2101) {
				return me.expr(e1101) >> me.expr(e2101);
			});
		} else {
			_this9.h[">>"] = function(e1101,e2101) {
				return me.expr(e1101) >> me.expr(e2101);
			};
		}
		var _this10 = this.binops;
		if(__map_reserved[">>>"] != null) {
			_this10.setReserved(">>>",function(e1111,e2111) {
				return me.expr(e1111) >>> me.expr(e2111);
			});
		} else {
			_this10.h[">>>"] = function(e1111,e2111) {
				return me.expr(e1111) >>> me.expr(e2111);
			};
		}
		var _this11 = this.binops;
		if(__map_reserved["=="] != null) {
			_this11.setReserved("==",function(e1121,e2121) {
				return me.expr(e1121) == me.expr(e2121);
			});
		} else {
			_this11.h["=="] = function(e1121,e2121) {
				return me.expr(e1121) == me.expr(e2121);
			};
		}
		var _this12 = this.binops;
		if(__map_reserved["!="] != null) {
			_this12.setReserved("!=",function(e1131,e2131) {
				return me.expr(e1131) != me.expr(e2131);
			});
		} else {
			_this12.h["!="] = function(e1131,e2131) {
				return me.expr(e1131) != me.expr(e2131);
			};
		}
		var _this13 = this.binops;
		if(__map_reserved[">="] != null) {
			_this13.setReserved(">=",function(e1141,e2141) {
				return me.expr(e1141) >= me.expr(e2141);
			});
		} else {
			_this13.h[">="] = function(e1141,e2141) {
				return me.expr(e1141) >= me.expr(e2141);
			};
		}
		var _this14 = this.binops;
		if(__map_reserved["<="] != null) {
			_this14.setReserved("<=",function(e1151,e2151) {
				return me.expr(e1151) <= me.expr(e2151);
			});
		} else {
			_this14.h["<="] = function(e1151,e2151) {
				return me.expr(e1151) <= me.expr(e2151);
			};
		}
		var _this15 = this.binops;
		if(__map_reserved[">"] != null) {
			_this15.setReserved(">",function(e1161,e2161) {
				return me.expr(e1161) > me.expr(e2161);
			});
		} else {
			_this15.h[">"] = function(e1161,e2161) {
				return me.expr(e1161) > me.expr(e2161);
			};
		}
		var _this16 = this.binops;
		if(__map_reserved["<"] != null) {
			_this16.setReserved("<",function(e1171,e2171) {
				return me.expr(e1171) < me.expr(e2171);
			});
		} else {
			_this16.h["<"] = function(e1171,e2171) {
				return me.expr(e1171) < me.expr(e2171);
			};
		}
		var _this17 = this.binops;
		if(__map_reserved["||"] != null) {
			_this17.setReserved("||",function(e1181,e2181) {
				if(me.expr(e1181) != true) {
					return me.expr(e2181) == true;
				} else {
					return true;
				}
			});
		} else {
			_this17.h["||"] = function(e1181,e2181) {
				if(me.expr(e1181) != true) {
					return me.expr(e2181) == true;
				} else {
					return true;
				}
			};
		}
		var _this18 = this.binops;
		if(__map_reserved["&&"] != null) {
			_this18.setReserved("&&",function(e1191,e2191) {
				if(me.expr(e1191) == true) {
					return me.expr(e2191) == true;
				} else {
					return false;
				}
			});
		} else {
			_this18.h["&&"] = function(e1191,e2191) {
				if(me.expr(e1191) == true) {
					return me.expr(e2191) == true;
				} else {
					return false;
				}
			};
		}
		var _this19 = this.binops;
		var value = $bind(this,this.assign);
		if(__map_reserved["="] != null) {
			_this19.setReserved("=",value);
		} else {
			_this19.h["="] = value;
		}
		var _this20 = this.binops;
		if(__map_reserved["..."] != null) {
			_this20.setReserved("...",function(e1201,e2201) {
				return new IntIterator(me.expr(e1201),me.expr(e2201));
			});
		} else {
			_this20.h["..."] = function(e1201,e2201) {
				return new IntIterator(me.expr(e1201),me.expr(e2201));
			};
		}
		this.assignOp("+=",function(v1,v2) {
			return v1 + v2;
		});
		this.assignOp("-=",function(v11,v21) {
			return v11 - v21;
		});
		this.assignOp("*=",function(v12,v22) {
			return v12 * v22;
		});
		this.assignOp("/=",function(v13,v23) {
			return v13 / v23;
		});
		this.assignOp("%=",function(v14,v24) {
			return v14 % v24;
		});
		this.assignOp("&=",function(v15,v25) {
			return v15 & v25;
		});
		this.assignOp("|=",function(v16,v26) {
			return v16 | v26;
		});
		this.assignOp("^=",function(v17,v27) {
			return v17 ^ v27;
		});
		this.assignOp("<<=",function(v18,v28) {
			return v18 << v28;
		});
		this.assignOp(">>=",function(v19,v29) {
			return v19 >> v29;
		});
		this.assignOp(">>>=",function(v110,v210) {
			return v110 >>> v210;
		});
	}
	,assign: function(e1,e2) {
		var v = this.expr(e2);
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			if(l == null) {
				this.variables.set(id,v);
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			v = this.set(this.expr(e),f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			this.expr(e3)[this.expr(index)] = v;
			break;
		default:
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidOp("="));
		}
		return v;
	}
	,assignOp: function(op,fop) {
		var me = this;
		var _this = this.binops;
		if(__map_reserved[op] != null) {
			_this.setReserved(op,function(e11,e21) {
				return me.evalAssignOp(op,fop,e11,e21);
			});
		} else {
			_this.h[op] = function(e11,e21) {
				return me.evalAssignOp(op,fop,e11,e21);
			};
		}
	}
	,evalAssignOp: function(op,fop,e1,e2) {
		var v;
		switch(e1[1]) {
		case 1:
			var id = e1[2];
			var l = this.locals.get(id);
			v = fop(this.expr(e1),this.expr(e2));
			if(l == null) {
				this.variables.set(id,v);
			} else {
				l.r = v;
			}
			break;
		case 5:
			var f = e1[3];
			var e = e1[2];
			var obj = this.expr(e);
			v = fop(this.get(obj,f),this.expr(e2));
			v = this.set(obj,f,v);
			break;
		case 16:
			var index = e1[3];
			var e3 = e1[2];
			var arr = this.expr(e3);
			var index1 = this.expr(index);
			v = fop(arr[index1],this.expr(e2));
			arr[index1] = v;
			break;
		default:
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidOp(op));
		}
		return v;
	}
	,increment: function(e,prefix,delta) {
		switch(e[1]) {
		case 1:
			var id = e[2];
			var l = this.locals.get(id);
			var v = l == null ? this.variables.get(id) : l.r;
			if(prefix) {
				v += delta;
				if(l == null) {
					this.variables.set(id,v);
				} else {
					l.r = v;
				}
			} else if(l == null) {
				this.variables.set(id,v + delta);
			} else {
				l.r = v + delta;
			}
			return v;
		case 5:
			var f = e[3];
			var e1 = e[2];
			var obj = this.expr(e1);
			var v1 = this.get(obj,f);
			if(prefix) {
				v1 += delta;
				this.set(obj,f,v1);
			} else {
				this.set(obj,f,v1 + delta);
			}
			return v1;
		case 16:
			var index = e[3];
			var e2 = e[2];
			var arr = this.expr(e2);
			var index1 = this.expr(index);
			var v2 = arr[index1];
			if(prefix) {
				v2 += delta;
				arr[index1] = v2;
			} else {
				arr[index1] = v2 + delta;
			}
			return v2;
		default:
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidOp(delta > 0 ? "++" : "--"));
		}
	}
	,exprReturn: function(e) {
		try {
			return this.expr(e);
		} catch( e1 ) {
			if (e1 instanceof js__$Boot_HaxeError) e1 = e1.val;
			if( js_Boot.__instanceof(e1,hscript__$Interp_Stop) ) {
				switch(e1[1]) {
				case 0:
					throw new js__$Boot_HaxeError("Invalid break");
					break;
				case 1:
					throw new js__$Boot_HaxeError("Invalid continue");
					break;
				case 2:
					var v = e1[2];
					return v;
				}
			} else throw(e1);
		}
	}
	,duplicate: function(h) {
		var h2 = new haxe_ds_StringMap();
		var k = h.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var value = __map_reserved[k1] != null ? h.getReserved(k1) : h.h[k1];
			if(__map_reserved[k1] != null) {
				h2.setReserved(k1,value);
			} else {
				h2.h[k1] = value;
			}
		}
		return h2;
	}
	,restore: function(old) {
		while(this.declared.length > old) {
			var d = this.declared.pop();
			var key = d.n;
			var value = d.old;
			var _this = this.locals;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
		}
	}
	,resolve: function(id) {
		var _this = this.locals;
		var l = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
		if(l != null) {
			return l.r;
		}
		var _this1 = this.variables;
		var v = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		var tmp;
		if(v == null) {
			var _this2 = this.variables;
			tmp = !(__map_reserved[id] != null ? _this2.existsReserved(id) : _this2.h.hasOwnProperty(id));
		} else {
			tmp = false;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(hscript_Error.EUnknownVariable(id));
		}
		return v;
	}
	,expr: function(e) {
		var _gthis = this;
		switch(e[1]) {
		case 0:
			var c = e[2];
			switch(c[1]) {
			case 0:
				var v = c[2];
				return v;
			case 1:
				var f = c[2];
				return f;
			case 2:
				var s = c[2];
				return s;
			}
			break;
		case 1:
			var id = e[2];
			return this.resolve(id);
		case 2:
			var e1 = e[4];
			var n = e[2];
			this.declared.push({ n : n, old : this.locals.get(n)});
			this.locals.set(n,{ r : e1 == null ? null : this.expr(e1)});
			return null;
		case 3:
			var e2 = e[2];
			return this.expr(e2);
		case 4:
			var exprs = e[2];
			var old = this.declared.length;
			var v1 = null;
			var _g = 0;
			while(_g < exprs.length) {
				var e3 = exprs[_g];
				++_g;
				v1 = this.expr(e3);
			}
			this.restore(old);
			return v1;
		case 5:
			var f1 = e[3];
			var e4 = e[2];
			return this.get(this.expr(e4),f1);
		case 6:
			var e21 = e[4];
			var e11 = e[3];
			var op = e[2];
			var fop = this.binops.get(op);
			if(fop == null) {
				throw new js__$Boot_HaxeError(hscript_Error.EInvalidOp(op));
			}
			return fop(e11,e21);
		case 7:
			var e5 = e[4];
			var prefix = e[3];
			var op1 = e[2];
			switch(op1) {
			case "!":
				return this.expr(e5) != true;
			case "++":
				return this.increment(e5,prefix,1);
			case "-":
				return -this.expr(e5);
			case "--":
				return this.increment(e5,prefix,-1);
			case "~":
				return ~this.expr(e5);
			default:
				throw new js__$Boot_HaxeError(hscript_Error.EInvalidOp(op1));
			}
			break;
		case 8:
			var params = e[3];
			var e6 = e[2];
			var args = [];
			var _g1 = 0;
			while(_g1 < params.length) {
				var p = params[_g1];
				++_g1;
				args.push(this.expr(p));
			}
			if(e6[1] == 5) {
				var f2 = e6[3];
				var e7 = e6[2];
				var obj = this.expr(e7);
				if(obj == null) {
					throw new js__$Boot_HaxeError(hscript_Error.EInvalidAccess(f2));
				}
				return this.fcall(obj,f2,args);
			} else {
				return this.call(null,this.expr(e6),args);
			}
			break;
		case 9:
			var e22 = e[4];
			var e12 = e[3];
			var econd = e[2];
			if(this.expr(econd) == true) {
				return this.expr(e12);
			} else if(e22 == null) {
				return null;
			} else {
				return this.expr(e22);
			}
			break;
		case 10:
			var e8 = e[3];
			var econd1 = e[2];
			this.whileLoop(econd1,e8);
			return null;
		case 11:
			var e9 = e[4];
			var it = e[3];
			var v2 = e[2];
			this.forLoop(v2,it,e9);
			return null;
		case 12:
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SBreak);
			break;
		case 13:
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SContinue);
			break;
		case 14:
			var name = e[4];
			var fexpr = e[3];
			var params1 = e[2];
			var capturedLocals = this.duplicate(this.locals);
			var me = this;
			var minParams = 0;
			var _g2 = 0;
			while(_g2 < params1.length) {
				var p1 = params1[_g2];
				++_g2;
				if(!p1.opt) {
					minParams += 1;
				}
			}
			var f3 = function(args1) {
				if(args1.length != params1.length) {
					if(args1.length < minParams) {
						var str = "Invalid number of parameters. Got " + args1.length + ", required " + minParams;
						if(name != null) {
							str += " for function '" + name + "'";
						}
						throw new js__$Boot_HaxeError(str);
					}
					var args2 = [];
					var extraParams = args1.length - minParams;
					var pos = 0;
					var _g3 = 0;
					while(_g3 < params1.length) {
						var p2 = params1[_g3];
						++_g3;
						if(p2.opt) {
							if(extraParams > 0) {
								args2.push(args1[pos++]);
								--extraParams;
							} else {
								args2.push(null);
							}
						} else {
							args2.push(args1[pos++]);
						}
					}
					args1 = args2;
				}
				var old1 = me.locals;
				var depth = me.depth;
				me.depth++;
				me.locals = me.duplicate(capturedLocals);
				var _g11 = 0;
				var _g4 = params1.length;
				while(_g11 < _g4) {
					var i = _g11++;
					me.locals.set(params1[i].name,{ r : args1[i]});
				}
				var r = null;
				if(_gthis.inTry) {
					try {
						r = me.exprReturn(fexpr);
					} catch( e10 ) {
						if (e10 instanceof js__$Boot_HaxeError) e10 = e10.val;
						me.locals = old1;
						me.depth = depth;
						throw js__$Boot_HaxeError.wrap(e10);
					}
				} else {
					r = me.exprReturn(fexpr);
				}
				me.locals = old1;
				me.depth = depth;
				return r;
			};
			var f4 = Reflect.makeVarArgs(f3);
			if(name != null) {
				if(this.depth == 0) {
					this.variables.set(name,f4);
				} else {
					var tmp = this.declared;
					var tmp1 = this.locals.get(name);
					tmp.push({ n : name, old : tmp1});
					var ref = { r : f4};
					this.locals.set(name,ref);
					if(__map_reserved[name] != null) {
						capturedLocals.setReserved(name,ref);
					} else {
						capturedLocals.h[name] = ref;
					}
				}
			}
			return f4;
		case 15:
			var e13 = e[2];
			throw new js__$Boot_HaxeError(hscript__$Interp_Stop.SReturn(e13 == null ? null : this.expr(e13)));
			break;
		case 16:
			var index = e[3];
			var e14 = e[2];
			return this.expr(e14)[this.expr(index)];
		case 17:
			var arr = e[2];
			var a = [];
			var _g5 = 0;
			while(_g5 < arr.length) {
				var e15 = arr[_g5];
				++_g5;
				a.push(this.expr(e15));
			}
			return a;
		case 18:
			var params2 = e[3];
			var cl = e[2];
			var a1 = [];
			var _g6 = 0;
			while(_g6 < params2.length) {
				var e16 = params2[_g6];
				++_g6;
				a1.push(this.expr(e16));
			}
			return this.cnew(cl,a1);
		case 19:
			var e17 = e[2];
			throw js__$Boot_HaxeError.wrap(this.expr(e17));
			break;
		case 20:
			var ecatch = e[5];
			var n1 = e[3];
			var e18 = e[2];
			var old2 = this.declared.length;
			var oldTry = this.inTry;
			try {
				this.inTry = true;
				var v3 = this.expr(e18);
				this.restore(old2);
				this.inTry = oldTry;
				return v3;
			} catch( $e0 ) {
				if ($e0 instanceof js__$Boot_HaxeError) $e0 = $e0.val;
				if( js_Boot.__instanceof($e0,hscript__$Interp_Stop) ) {
					var err = $e0;
					this.inTry = oldTry;
					throw new js__$Boot_HaxeError(err);
				} else {
				var err1 = $e0;
				this.restore(old2);
				this.inTry = oldTry;
				this.declared.push({ n : n1, old : this.locals.get(n1)});
				this.locals.set(n1,{ r : err1});
				var v4 = this.expr(ecatch);
				this.restore(old2);
				return v4;
				}
			}
			break;
		case 21:
			var fl = e[2];
			var o = { };
			var _g7 = 0;
			while(_g7 < fl.length) {
				var f5 = fl[_g7];
				++_g7;
				this.set(o,f5.name,this.expr(f5.e));
			}
			return o;
		case 22:
			var e23 = e[4];
			var e19 = e[3];
			var econd2 = e[2];
			if(this.expr(econd2) == true) {
				return this.expr(e19);
			} else {
				return this.expr(e23);
			}
			break;
		case 23:
			var def = e[4];
			var cases = e[3];
			var e20 = e[2];
			var val = this.expr(e20);
			var match = false;
			var _g8 = 0;
			while(_g8 < cases.length) {
				var c1 = cases[_g8];
				++_g8;
				var _g12 = 0;
				var _g21 = c1.values;
				while(_g12 < _g21.length) {
					var v5 = _g21[_g12];
					++_g12;
					if(this.expr(v5) == val) {
						match = true;
						break;
					}
				}
				if(match) {
					val = this.expr(c1.expr);
					break;
				}
			}
			if(!match) {
				if(def == null) {
					val = null;
				} else {
					val = this.expr(def);
				}
			}
			return val;
		}
	}
	,whileLoop: function(econd,e) {
		var old = this.declared.length;
		try {
			while(this.expr(econd) == true) try {
				this.expr(e);
			} catch( err ) {
				if (err instanceof js__$Boot_HaxeError) err = err.val;
				if( js_Boot.__instanceof(err,hscript__$Interp_Stop) ) {
					switch(err[1]) {
					case 0:
						throw "__break__";
						break;
					case 1:
						break;
					case 2:
						throw new js__$Boot_HaxeError(err);
						break;
					}
				} else throw(err);
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,makeIterator: function(v) {
		try {
			v = $iterator(v)();
		} catch( e ) {
		}
		if(v.hasNext == null || v.next == null) {
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidIterator(v));
		}
		return v;
	}
	,forLoop: function(n,it,e) {
		var old = this.declared.length;
		var _this = this.locals;
		this.declared.push({ n : n, old : __map_reserved[n] != null ? _this.getReserved(n) : _this.h[n]});
		var it1 = this.makeIterator(this.expr(it));
		try {
			while(it1.hasNext()) {
				var this1 = this.locals;
				var value = { r : it1.next()};
				var _this1 = this1;
				if(__map_reserved[n] != null) {
					_this1.setReserved(n,value);
				} else {
					_this1.h[n] = value;
				}
				try {
					this.expr(e);
				} catch( err ) {
					if (err instanceof js__$Boot_HaxeError) err = err.val;
					if( js_Boot.__instanceof(err,hscript__$Interp_Stop) ) {
						switch(err[1]) {
						case 0:
							throw "__break__";
							break;
						case 1:
							break;
						case 2:
							throw new js__$Boot_HaxeError(err);
							break;
						}
					} else throw(err);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		this.restore(old);
	}
	,get: function(o,f) {
		if(o == null) {
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidAccess(f));
		}
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + f];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o[f];
			}
		}
		return tmp1;
	}
	,set: function(o,f,v) {
		if(o == null) {
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidAccess(f));
		}
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + f];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](v);
		} else {
			o[f] = v;
		}
		return v;
	}
	,fcall: function(o,f,args) {
		return this.call(o,this.get(o,f),args);
	}
	,call: function(o,f,args) {
		return f.apply(o,args);
	}
	,cnew: function(cl,args) {
		var c = Type.resolveClass(cl);
		if(c == null) {
			c = this.resolve(cl);
		}
		return Type.createInstance(c,args);
	}
	,__class__: hscript_Interp
};
var flixel_system_debug_console__$ConsoleUtil_Interp = function() {
	hscript_Interp.call(this);
};
$hxClasses["flixel.system.debug.console._ConsoleUtil.Interp"] = flixel_system_debug_console__$ConsoleUtil_Interp;
flixel_system_debug_console__$ConsoleUtil_Interp.__name__ = ["flixel","system","debug","console","_ConsoleUtil","Interp"];
flixel_system_debug_console__$ConsoleUtil_Interp.__super__ = hscript_Interp;
flixel_system_debug_console__$ConsoleUtil_Interp.prototype = $extend(hscript_Interp.prototype,{
	getGlobals: function() {
		return this.toArray(this.locals.keys()).concat(this.toArray(this.variables.keys()));
	}
	,toArray: function(iterator) {
		var array = [];
		while(iterator.hasNext()) {
			var element = iterator.next();
			array.push(element);
		}
		return array;
	}
	,get: function(o,f) {
		if(o == null) {
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidAccess(f));
		}
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + f];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o[f];
			}
		}
		return tmp1;
	}
	,set: function(o,f,v) {
		if(o == null) {
			throw new js__$Boot_HaxeError(hscript_Error.EInvalidAccess(f));
		}
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + f];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](v);
		} else {
			o[f] = v;
		}
		return v;
	}
	,__class__: flixel_system_debug_console__$ConsoleUtil_Interp
});
var flixel_system_debug_interaction_Interaction = function(container) {
	this._flixelPointer = new flixel_input_FlxPointer();
	this._debuggerInteraction = false;
	this._keysUp = new haxe_ds_IntMap();
	this._keysDown = new haxe_ds_IntMap();
	this._turn = 2;
	this._tools = [];
	this.pointerPressed = false;
	this.pointerJustReleased = false;
	this.pointerJustPressed = false;
	this.flixelPointer = new flixel_math_FlxPoint();
	this.selectedItems = new flixel_group_FlxTypedGroup();
	flixel_system_debug_Window.call(this,"Tools",new flixel_system_debug_GraphicInteractive(0,0),40,25,false);
	this.reposition(2,100);
	this._container = container;
	this._customCursor = new openfl_display_Sprite();
	this._customCursor.mouseEnabled = false;
	this._container.addChild(this._customCursor);
	this.addTool(new flixel_system_debug_interaction_tools_Pointer());
	this.addTool(new flixel_system_debug_interaction_tools_Mover());
	this.addTool(new flixel_system_debug_interaction_tools_Eraser());
	flixel_FlxG.signals.postDraw.add($bind(this,this.postDraw));
	flixel_FlxG["debugger"].visibilityChanged.add($bind(this,this.handleDebuggerVisibilityChanged));
	openfl_Lib.current.stage.addEventListener("mouseMove",$bind(this,this.updateMouse));
	openfl_Lib.current.stage.addEventListener("mouseDown",$bind(this,this.handleMouseClick));
	openfl_Lib.current.stage.addEventListener("mouseUp",$bind(this,this.handleMouseClick));
	openfl_Lib.current.stage.addEventListener("keyDown",$bind(this,this.handleKeyEvent));
	openfl_Lib.current.stage.addEventListener("keyUp",$bind(this,this.handleKeyEvent));
	this._container.addEventListener("mouseOver",$bind(this,this.handleMouseInDebugger));
	this._container.addEventListener("mouseOut",$bind(this,this.handleMouseInDebugger));
};
$hxClasses["flixel.system.debug.interaction.Interaction"] = flixel_system_debug_interaction_Interaction;
flixel_system_debug_interaction_Interaction.__name__ = ["flixel","system","debug","interaction","Interaction"];
flixel_system_debug_interaction_Interaction.__super__ = flixel_system_debug_Window;
flixel_system_debug_interaction_Interaction.prototype = $extend(flixel_system_debug_Window.prototype,{
	activeTool: null
	,selectedItems: null
	,flixelPointer: null
	,pointerJustPressed: null
	,pointerJustReleased: null
	,pointerPressed: null
	,_container: null
	,_customCursor: null
	,_tools: null
	,_turn: null
	,_keysDown: null
	,_keysUp: null
	,_wasMouseVisible: null
	,_wasUsingSystemCursor: null
	,_debuggerInteraction: null
	,_flixelPointer: null
	,handleDebuggerVisibilityChanged: function() {
		if(flixel_FlxG["debugger"].visible) {
			this.saveSystemCursorInfo();
		} else {
			this.restoreSystemCursor();
		}
	}
	,updateMouse: function(event) {
		if(event.stageX == null || event.stageY == null) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		if(this.activeTool != null) {
			var cursorIcon = this.activeTool.cursor;
			if(cursorIcon != null) {
				offsetX = cursorIcon.width / flixel_FlxG.scaleMode.scale.x / 2;
				offsetY = cursorIcon.height / flixel_FlxG.scaleMode.scale.y / 2;
			}
		}
		this._customCursor.set_x(event.stageX + offsetX);
		this._customCursor.set_y(event.stageY + offsetY);
		var _this = this._flixelPointer;
		_this._globalScreenX = event.stageX / flixel_FlxG.scaleMode.scale.x | 0;
		_this._globalScreenY = event.stageY / flixel_FlxG.scaleMode.scale.y | 0;
		_this.updatePositions();
		this.flixelPointer.set_x(this._flixelPointer.x + offsetX);
		this.flixelPointer.set_y(this._flixelPointer.y + offsetY);
	}
	,handleMouseClick: function(event) {
		if(js_Boot.__instanceof(event.target,flixel_system_ui_FlxSystemButton)) {
			return;
		}
		this.pointerJustPressed = event.type == "mouseDown";
		this.pointerJustReleased = event.type == "mouseUp";
		if(this.pointerJustPressed) {
			this.pointerPressed = true;
		} else if(this.pointerJustReleased) {
			this.pointerPressed = false;
		}
	}
	,handleMouseInDebugger: function(event) {
		if(!this.isActive()) {
			return;
		}
		if(event.type == "mouseOver") {
			this._debuggerInteraction = true;
		} else if(event.type == "mouseOut") {
			this._debuggerInteraction = false;
		}
		event.stopPropagation();
	}
	,handleKeyEvent: function(event) {
		if(event.type == "keyDown") {
			this._keysDown.h[event.keyCode] = this._turn;
		} else if(event.type == "keyUp") {
			this._keysUp.h[event.keyCode] = this._turn;
		}
	}
	,addTool: function(tool) {
		tool.init(this);
		this._tools.push(tool);
		var button = tool.button;
		if(button == null) {
			return;
		}
		button.set_x(-10 + this._tools.length * 20);
		button.set_y(20);
		this.addChild(button);
		this.resize(Math.max(this._tools.length * 20,55),35);
	}
	,destroy: function() {
		flixel_FlxG.signals.postDraw.remove($bind(this,this.postDraw));
		flixel_FlxG["debugger"].visibilityChanged.remove($bind(this,this.handleDebuggerVisibilityChanged));
		openfl_Lib.current.stage.removeEventListener("mouseMove",$bind(this,this.updateMouse));
		openfl_Lib.current.stage.removeEventListener("mouseDown",$bind(this,this.handleMouseClick));
		openfl_Lib.current.stage.removeEventListener("mouseUp",$bind(this,this.handleMouseClick));
		openfl_Lib.current.stage.removeEventListener("keyDown",$bind(this,this.handleKeyEvent));
		openfl_Lib.current.stage.removeEventListener("keyUp",$bind(this,this.handleKeyEvent));
		if(this._container != null) {
			this._container.removeEventListener("mouseOver",$bind(this,this.handleMouseInDebugger));
			this._container.removeEventListener("mouseOut",$bind(this,this.handleMouseInDebugger));
		}
		if(this._customCursor != null) {
			this._customCursor.parent.removeChild(this._customCursor);
			this._customCursor = null;
		}
		this._tools = flixel_util_FlxDestroyUtil.destroyArray(this._tools);
		this.selectedItems = flixel_util_FlxDestroyUtil.destroy(this.selectedItems);
		this.flixelPointer = flixel_util_FlxDestroyUtil.destroy(this.flixelPointer);
		this._keysDown = null;
		this._keysUp = null;
	}
	,isActive: function() {
		if(flixel_FlxG["debugger"].visible) {
			return this.get_visible();
		} else {
			return false;
		}
	}
	,update: function() {
		if(!this.isActive()) {
			return;
		}
		this.updateCustomCursors();
		var _g = 0;
		var _g1 = this._tools;
		while(_g < _g1.length) {
			var tool = _g1[_g];
			++_g;
			tool.update();
		}
		this.pointerJustPressed = false;
		this.pointerJustReleased = false;
		this._turn++;
	}
	,postDraw: function() {
		if(!this.isActive()) {
			return;
		}
		var _g = 0;
		var _g1 = this._tools;
		while(_g < _g1.length) ++_g;
		this.drawItemsSelection();
	}
	,getDebugGraphics: function() {
		if(flixel_FlxG.renderBlit) {
			flixel_util_FlxSpriteUtil.flashGfx.clear();
			return flixel_util_FlxSpriteUtil.flashGfx;
		}
		return flixel_FlxG.camera.debugLayer.get_graphics();
	}
	,drawItemsSelection: function() {
		var gfx = this.getDebugGraphics();
		if(gfx == null) {
			return;
		}
		var member = new flixel_group_FlxTypedGroupIterator(this.selectedItems.members,null);
		while(member.hasNext()) {
			var member1 = member.next();
			if(member1 != null && member1.scrollFactor != null && member1.isOnScreen()) {
				gfx.lineStyle(1.5,16711680);
				gfx.drawRect(member1.x - flixel_FlxG.camera.scroll.x,member1.y - flixel_FlxG.camera.scroll.y,member1.get_width(),member1.get_height());
			}
		}
		if(flixel_FlxG.renderBlit) {
			flixel_FlxG.camera.buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
		}
	}
	,getTool: function(className) {
		var _g = 0;
		var _g1 = this._tools;
		while(_g < _g1.length) {
			var tool = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(tool,className)) {
				return tool;
			}
		}
		return null;
	}
	,toggleVisible: function() {
		flixel_system_debug_Window.prototype.toggleVisible.call(this);
		if(!this.get_visible()) {
			this.setActiveTool(null);
			this.restoreSystemCursor();
		}
	}
	,registerCustomCursor: function(name,icon) {
		if(icon == null) {
			return;
		}
		var sprite = new openfl_display_Sprite();
		sprite.set_visible(false);
		sprite.set_name(name);
		sprite.addChild(new openfl_display_Bitmap(icon));
		this._customCursor.addChild(sprite);
	}
	,updateCustomCursors: function() {
		if(this.activeTool != null && !this._debuggerInteraction) {
			if(this.activeTool.cursor != null) {
				var _g1 = 0;
				var _g = this._customCursor.get_numChildren();
				while(_g1 < _g) {
					var i = _g1++;
					var sprite = this._customCursor.getChildAt(i);
					sprite.set_visible(sprite.get_name() == this.activeTool.get_name());
				}
			} else {
				flixel_FlxG.mouse.set_useSystemCursor(true);
			}
		} else {
			flixel_FlxG.mouse.set_useSystemCursor(true);
		}
	}
	,saveSystemCursorInfo: function() {
		this._wasMouseVisible = flixel_FlxG.mouse.visible;
		this._wasUsingSystemCursor = flixel_FlxG.mouse.useSystemCursor;
	}
	,restoreSystemCursor: function() {
		flixel_FlxG.mouse.set_useSystemCursor(this._wasUsingSystemCursor);
		flixel_FlxG.mouse.set_visible(this._wasMouseVisible);
		this._customCursor.set_visible(false);
	}
	,setActiveTool: function(value) {
		if(this.activeTool != null) {
			this.activeTool.button.set_toggled(true);
		}
		if(this.activeTool == value) {
			value = null;
		}
		this.activeTool = value;
		if(this.activeTool != null) {
			this.setToolsCursorVisibility(true);
			this.activeTool.button.set_toggled(false);
			this.activeTool.activate();
			this.updateCustomCursors();
		} else {
			this.setSystemCursorVisibility(true);
		}
	}
	,setSystemCursorVisibility: function(status) {
		flixel_FlxG.mouse.set_useSystemCursor(status);
		this._customCursor.set_visible(!status);
	}
	,setToolsCursorVisibility: function(status) {
		flixel_FlxG.mouse.set_useSystemCursor(false);
		this._customCursor.set_visible(status);
		if(status) {
			return;
		}
		var _g1 = 0;
		var _g = this._customCursor.get_numChildren();
		while(_g1 < _g) {
			var i = _g1++;
			this._customCursor.getChildAt(i).set_visible(false);
		}
	}
	,clearSelection: function() {
		this.selectedItems.clear();
	}
	,keyPressed: function(key) {
		var value = this._keysDown.h[key] == null ? 0 : this._keysDown.h[key];
		return this._turn <= value;
	}
	,keyJustPressed: function(key) {
		var value = this._keysUp.h[key] == null ? 0 : this._keysUp.h[key];
		return this._turn - value == 1;
	}
	,__class__: flixel_system_debug_interaction_Interaction
});
var flixel_system_debug_interaction_tools_GraphicEraserTool = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools_GraphicEraserTool.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools_GraphicEraserTool.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_interaction_tools_GraphicEraserTool.preload == null) {
				flixel_system_debug_interaction_tools_GraphicEraserTool.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools_GraphicEraserTool.resourceName),flixel_system_debug_interaction_tools_GraphicEraserTool.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools.GraphicEraserTool"] = flixel_system_debug_interaction_tools_GraphicEraserTool;
flixel_system_debug_interaction_tools_GraphicEraserTool.__name__ = ["flixel","system","debug","interaction","tools","GraphicEraserTool"];
flixel_system_debug_interaction_tools_GraphicEraserTool.preload = null;
flixel_system_debug_interaction_tools_GraphicEraserTool.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools_GraphicEraserTool.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools_GraphicEraserTool
});
var flixel_system_debug_interaction_tools_Tool = function() {
	this._name = "(Unknown tool)";
	openfl_display_Sprite.call(this);
};
$hxClasses["flixel.system.debug.interaction.tools.Tool"] = flixel_system_debug_interaction_tools_Tool;
flixel_system_debug_interaction_tools_Tool.__name__ = ["flixel","system","debug","interaction","tools","Tool"];
flixel_system_debug_interaction_tools_Tool.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_system_debug_interaction_tools_Tool.__super__ = openfl_display_Sprite;
flixel_system_debug_interaction_tools_Tool.prototype = $extend(openfl_display_Sprite.prototype,{
	button: null
	,cursor: null
	,_name: null
	,_shortcut: null
	,_brain: null
	,init: function(brain) {
		this._brain = brain;
		return this;
	}
	,update: function() {
	}
	,draw: function() {
	}
	,activate: function() {
	}
	,deactivate: function() {
	}
	,destroy: function() {
	}
	,isActive: function() {
		if(this._brain.activeTool == this) {
			return this._brain.get_visible();
		} else {
			return false;
		}
	}
	,setButton: function(Icon) {
		this.button = new flixel_system_ui_FlxSystemButton(Type.createInstance(Icon,[0,0]),$bind(this,this.onButtonClicked),true);
		this.button.set_toggled(true);
		var tooltip = this._name;
		if(this._shortcut != null) {
			tooltip += " (" + this._shortcut + ")";
		}
		flixel_system_debug_Tooltip.add(this.button,tooltip);
	}
	,setCursor: function(Icon) {
		this.cursor = Icon;
		this._brain.registerCustomCursor(this._name,this.cursor);
	}
	,onButtonClicked: function() {
		this._brain.setActiveTool(this);
	}
	,getName: function() {
		return this._name;
	}
	,__class__: flixel_system_debug_interaction_tools_Tool
});
var flixel_system_debug_interaction_tools_Eraser = function() {
	flixel_system_debug_interaction_tools_Tool.call(this);
};
$hxClasses["flixel.system.debug.interaction.tools.Eraser"] = flixel_system_debug_interaction_tools_Eraser;
flixel_system_debug_interaction_tools_Eraser.__name__ = ["flixel","system","debug","interaction","tools","Eraser"];
flixel_system_debug_interaction_tools_Eraser.__super__ = flixel_system_debug_interaction_tools_Tool;
flixel_system_debug_interaction_tools_Eraser.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{
	init: function(Brain) {
		flixel_system_debug_interaction_tools_Tool.prototype.init.call(this,Brain);
		this._name = "Eraser";
		return this;
	}
	,update: function() {
		if(this._brain.keyJustPressed(46)) {
			this.doDeletion(this._brain.keyPressed(16));
		}
	}
	,activate: function() {
		this.doDeletion(this._brain.keyPressed(16));
		this._brain.setActiveTool(null);
	}
	,doDeletion: function(remove) {
		var selectedItems = this._brain.selectedItems;
		if(selectedItems != null) {
			this.findAndDelete(selectedItems,remove);
			selectedItems.clear();
		}
	}
	,findAndDelete: function(items,remove) {
		if(remove == null) {
			remove = false;
		}
		var member = new flixel_group_FlxTypedGroupIterator(items.members,null);
		while(member.hasNext()) {
			var member1 = member.next();
			if(member1 == null) {
				continue;
			}
			if(!js_Boot.__instanceof(member1,flixel_group_FlxTypedGroup)) {
				member1.kill();
				if(remove) {
					this.removeFromMemory(member1,flixel_FlxG.game._state);
				}
			}
		}
	}
	,removeFromMemory: function(item,parentGroup) {
		var _g = 0;
		var _g1 = parentGroup.members;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(member == null) {
				continue;
			}
			if(js_Boot.__instanceof(member,flixel_group_FlxTypedGroup)) {
				this.removeFromMemory(item,member);
			} else if(member == item) {
				parentGroup.remove(member);
			}
		}
	}
	,__class__: flixel_system_debug_interaction_tools_Eraser
});
var flixel_system_debug_interaction_tools_GraphicMoverTool = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools_GraphicMoverTool.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools_GraphicMoverTool.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_interaction_tools_GraphicMoverTool.preload == null) {
				flixel_system_debug_interaction_tools_GraphicMoverTool.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools_GraphicMoverTool.resourceName),flixel_system_debug_interaction_tools_GraphicMoverTool.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools.GraphicMoverTool"] = flixel_system_debug_interaction_tools_GraphicMoverTool;
flixel_system_debug_interaction_tools_GraphicMoverTool.__name__ = ["flixel","system","debug","interaction","tools","GraphicMoverTool"];
flixel_system_debug_interaction_tools_GraphicMoverTool.preload = null;
flixel_system_debug_interaction_tools_GraphicMoverTool.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools_GraphicMoverTool.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools_GraphicMoverTool
});
var flixel_system_debug_interaction_tools_Mover = function() {
	this._dragging = false;
	flixel_system_debug_interaction_tools_Tool.call(this);
};
$hxClasses["flixel.system.debug.interaction.tools.Mover"] = flixel_system_debug_interaction_tools_Mover;
flixel_system_debug_interaction_tools_Mover.__name__ = ["flixel","system","debug","interaction","tools","Mover"];
flixel_system_debug_interaction_tools_Mover.__super__ = flixel_system_debug_interaction_tools_Tool;
flixel_system_debug_interaction_tools_Mover.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{
	_dragging: null
	,_lastCursorPosition: null
	,init: function(brain) {
		flixel_system_debug_interaction_tools_Tool.prototype.init.call(this,brain);
		this._lastCursorPosition = new flixel_math_FlxPoint(brain.flixelPointer.x,brain.flixelPointer.x);
		this._name = "Mover";
		this._shortcut = "Shift";
		this.setButton(flixel_system_debug_interaction_tools_GraphicMoverTool);
		this.setCursor(new flixel_system_debug_interaction_tools_GraphicMoverTool(0,0));
		return this;
	}
	,update: function() {
		if(!this.isActive() && !this._brain.keyPressed(16)) {
			return;
		}
		if(this._brain.pointerPressed && !this._dragging) {
			this._dragging = true;
		} else if(this._brain.pointerPressed && this._dragging) {
			this.doDragging();
		} else if(this._brain.pointerJustReleased) {
			this._dragging = false;
		}
		this._lastCursorPosition.set_x(this._brain.flixelPointer.x);
		this._lastCursorPosition.set_y(this._brain.flixelPointer.y);
	}
	,doDragging: function() {
		var dx = this._brain.flixelPointer.x - this._lastCursorPosition.x;
		var dy = this._brain.flixelPointer.y - this._lastCursorPosition.y;
		var _g = 0;
		var _g1 = this._brain.selectedItems.members;
		while(_g < _g1.length) {
			var member = _g1[_g];
			++_g;
			if(!js_Boot.__instanceof(member,flixel_FlxObject)) {
				continue;
			}
			if(member != null) {
				member.set_x(member.x + dx);
				member.set_y(member.y + dy);
			}
		}
	}
	,__class__: flixel_system_debug_interaction_tools_Mover
});
var flixel_system_debug_interaction_tools_GraphicCursorCross = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_interaction_tools_GraphicCursorCross.preload != null) {
		this.__fromImage(flixel_system_debug_interaction_tools_GraphicCursorCross.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_interaction_tools_GraphicCursorCross.preload == null) {
				flixel_system_debug_interaction_tools_GraphicCursorCross.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_interaction_tools_GraphicCursorCross.resourceName),flixel_system_debug_interaction_tools_GraphicCursorCross.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.interaction.tools.GraphicCursorCross"] = flixel_system_debug_interaction_tools_GraphicCursorCross;
flixel_system_debug_interaction_tools_GraphicCursorCross.__name__ = ["flixel","system","debug","interaction","tools","GraphicCursorCross"];
flixel_system_debug_interaction_tools_GraphicCursorCross.preload = null;
flixel_system_debug_interaction_tools_GraphicCursorCross.__super__ = openfl_display_BitmapData;
flixel_system_debug_interaction_tools_GraphicCursorCross.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_interaction_tools_GraphicCursorCross
});
var flixel_system_debug_interaction_tools_Pointer = function() {
	flixel_system_debug_interaction_tools_Tool.call(this);
};
$hxClasses["flixel.system.debug.interaction.tools.Pointer"] = flixel_system_debug_interaction_tools_Pointer;
flixel_system_debug_interaction_tools_Pointer.__name__ = ["flixel","system","debug","interaction","tools","Pointer"];
flixel_system_debug_interaction_tools_Pointer.__super__ = flixel_system_debug_interaction_tools_Tool;
flixel_system_debug_interaction_tools_Pointer.prototype = $extend(flixel_system_debug_interaction_tools_Tool.prototype,{
	init: function(brain) {
		flixel_system_debug_interaction_tools_Tool.prototype.init.call(this,brain);
		this._name = "Pointer";
		this.setButton(flixel_system_debug_interaction_tools_GraphicCursorCross);
		this.setCursor(new flixel_system_debug_interaction_tools_GraphicCursorCross(0,0));
		return this;
	}
	,update: function() {
		if(!this.isActive()) {
			return;
		}
		if(!this._brain.pointerJustPressed && !this._brain.pointerJustReleased) {
			return;
		}
		var item = this.pinpointItemInGroup(flixel_FlxG.game._state.members,this._brain.flixelPointer);
		if(item != null) {
			this.handleItemClick(item);
		} else if(this._brain.pointerJustPressed) {
			this._brain.clearSelection();
		}
	}
	,handleItemClick: function(item) {
		var selectedItems = this._brain.selectedItems;
		if(selectedItems.length == 0 || this._brain.keyPressed(17)) {
			selectedItems.add(item);
		} else {
			if(selectedItems.members.indexOf(item) == -1) {
				this._brain.clearSelection();
			}
			selectedItems.add(item);
		}
	}
	,pinpointItemInGroup: function(members,cursor) {
		var target = null;
		var i = members.length;
		while(i-- > 0) {
			var member = members[i];
			if(member == null || !member.visible || !member.exists) {
				continue;
			}
			var group = flixel_group_FlxTypedGroup.resolveGroup(member);
			if(group != null) {
				target = this.pinpointItemInGroup(group.members,cursor);
			} else if(js_Boot.__instanceof(member,flixel_FlxSprite) && (js_Boot.__cast(member , flixel_FlxSprite)).overlapsPoint(cursor,true)) {
				target = member;
			}
			if(target != null) {
				break;
			}
		}
		return target;
	}
	,__class__: flixel_system_debug_interaction_tools_Pointer
});
var flixel_system_debug_log_BitmapLog = function() {
	this._middleMouseDown = false;
	this._matrix = new openfl_geom_Matrix();
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this._curMouseOffset = point;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	this._lastMousePos = point1;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,0);
	point2._inPool = false;
	this._point = point2;
	this._curIndex = 0;
	this._entries = [];
	this.zoom = 1;
	flixel_system_debug_Window.call(this,"BitmapLog",new flixel_system_debug_GraphicBitmapLog(0,0));
	this.minSize.x = 165;
	this.minSize.y = 31;
	this._canvasBitmap = new openfl_display_Bitmap(new openfl_display_BitmapData(this.get_width() | 0,this.get_height() - 15 | 0,true,0));
	this._canvasBitmap.set_x(0);
	this._canvasBitmap.set_y(15);
	this.addChild(this._canvasBitmap);
	this.createHeaderUI();
	this.createFooterUI();
	this.setVisible(false);
	this.addEventListener("mouseWheel",$bind(this,this.onMouseWheel));
	flixel_FlxG.signals.stateSwitched.add($bind(this,this.clear));
	this.removeChild(this._handle);
	this.addChild(this._handle);
	this.removeChild(this._shadow);
};
$hxClasses["flixel.system.debug.log.BitmapLog"] = flixel_system_debug_log_BitmapLog;
flixel_system_debug_log_BitmapLog.__name__ = ["flixel","system","debug","log","BitmapLog"];
flixel_system_debug_log_BitmapLog.__super__ = flixel_system_debug_Window;
flixel_system_debug_log_BitmapLog.prototype = $extend(flixel_system_debug_Window.prototype,{
	zoom: null
	,_canvasBitmap: null
	,_entries: null
	,_curIndex: null
	,_point: null
	,_lastMousePos: null
	,_curMouseOffset: null
	,_matrix: null
	,_buttonLeft: null
	,_buttonText: null
	,_buttonRight: null
	,_counterText: null
	,_dimensionsText: null
	,_ui: null
	,_middleMouseDown: null
	,_footer: null
	,_footerText: null
	,createHeaderUI: function() {
		var _gthis = this;
		this._ui = new openfl_display_Sprite();
		this._ui.set_y(2);
		this._buttonLeft = new flixel_system_ui_FlxSystemButton(new flixel_system_debug_GraphicArrowLeft(0,0),$bind(this,this.previous));
		this._dimensionsText = flixel_system_debug_DebuggerUtil.createTextField();
		this._counterText = flixel_system_debug_DebuggerUtil.createTextField(0,-3);
		this._counterText.set_text("0/0");
		this._buttonText = new flixel_system_ui_FlxSystemButton(null,function() {
			_gthis.set_zoom(1);
			_gthis._curMouseOffset.set();
			_gthis.refreshCanvas();
		});
		this._buttonText.addChild(this._counterText);
		this._buttonRight = new flixel_system_ui_FlxSystemButton(new flixel_system_debug_GraphicArrowRight(0,0),$bind(this,this.next));
		this._buttonRight.set_x(60);
		this._ui.addChild(this._buttonLeft);
		this._ui.addChild(this._buttonText);
		this._ui.addChild(this._buttonRight);
		this.addChild(this._ui);
		this.addChild(this._dimensionsText);
	}
	,createFooterUI: function() {
		this._footer = new openfl_display_Bitmap(new openfl_display_BitmapData(1,15,true,-1157627904));
		this._footer.set_alpha(0.8);
		this.addChild(this._footer);
		this._footerText = flixel_system_debug_DebuggerUtil.createTextField();
		this.addChild(this._footerText);
	}
	,destroy: function() {
		flixel_system_debug_Window.prototype.destroy.call(this);
		this.clear();
		this.removeChild(this._canvasBitmap);
		flixel_util_FlxDestroyUtil.dispose(this._canvasBitmap.bitmapData);
		this._canvasBitmap.bitmapData = null;
		this._canvasBitmap = null;
		this._entries = null;
		this.removeEventListener("mouseWheel",$bind(this,this.onMouseWheel));
		flixel_FlxG.signals.stateSwitched.remove($bind(this,this.clear));
	}
	,update: function() {
		if(this._middleMouseDown) {
			var X = this.get_mouseX();
			var Y = this.get_mouseY();
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			this._curMouseOffset.addPoint(point.subtractPoint(this._lastMousePos));
			this.refreshCanvas();
			this._lastMousePos.set(this.get_mouseX(),this.get_mouseY());
		}
	}
	,updateSize: function() {
		flixel_system_debug_Window.prototype.updateSize.call(this);
		this._background.set_scaleY(this._height - this._header.get_height() * 2);
	}
	,resize: function(Width,Height) {
		flixel_system_debug_Window.prototype.resize.call(this,Width,Height);
		this._canvasBitmap.bitmapData = flixel_util_FlxDestroyUtil.dispose(this._canvasBitmap.bitmapData);
		var newWidth = this._width - this._canvasBitmap.get_x() | 0;
		var newHeight = this._height - this._canvasBitmap.get_y() - this._footer.get_height() | 0;
		if(newWidth > 0 && newHeight > 0) {
			this._canvasBitmap.bitmapData = new openfl_display_BitmapData(newWidth,newHeight,true,0);
			this.refreshCanvas(this._curIndex);
		}
		this._ui.set_x(this._header.get_width() - this._ui.get_width() - 5);
		this._footer.set_width(this._width);
		this._footer.set_y(this._height - this._footer.get_height());
		this.resizeTexts();
	}
	,resizeTexts: function() {
		this._dimensionsText.set_x(this._header.get_width() / 2 - this._dimensionsText.get_textWidth() / 2);
		this._dimensionsText.set_visible(this._width > 200);
		this._footerText.set_y(this._height - this._footer.get_height());
		this._footerText.set_x(this._width / 2 - this._footerText.get_textWidth() / 2);
		this._footerText.set_width(this._footer.get_width());
		if(this._footerText.get_x() < 0) {
			this._footerText.set_x(0);
		}
		this._buttonText.set_x(33 - this._counterText.get_textWidth() / 2);
	}
	,next: function() {
		this.set_zoom(1);
		this._curMouseOffset.set();
		this.refreshCanvas(this._curIndex + 1);
	}
	,previous: function() {
		this.set_zoom(1);
		this._curMouseOffset.set();
		this.refreshCanvas(this._curIndex - 1);
	}
	,resetSettings: function() {
		this.set_zoom(1);
		this._curMouseOffset.set();
	}
	,add: function(bmp,name) {
		if(name == null) {
			name = "";
		}
		if(bmp == null) {
			return false;
		}
		this.setVisible(true);
		this._entries.push({ bitmap : bmp.clone(), name : name});
		return this.refreshCanvas();
	}
	,clearAt: function(Index) {
		if(Index == null) {
			Index = -1;
		}
		if(Index == -1) {
			Index = this._entries.length - 1;
		}
		flixel_util_FlxDestroyUtil.dispose(this._entries[Index].bitmap);
		this._entries[Index] = null;
		this._entries.splice(Index,1);
		if(this._curIndex > this._entries.length - 1) {
			this._curIndex = this._entries.length - 1;
		}
		this.refreshCanvas(this._curIndex);
	}
	,clear: function() {
		var _g1 = 0;
		var _g = this._entries.length;
		while(_g1 < _g) {
			var i = _g1++;
			flixel_util_FlxDestroyUtil.dispose(this._entries[i].bitmap);
			this._entries[i] = null;
		}
		this._entries = [];
		if(this._canvasBitmap.bitmapData != null) {
			this._canvasBitmap.bitmapData.fillRect(this._canvasBitmap.bitmapData.rect,0);
		}
		this._dimensionsText.set_text("");
		this._counterText.set_text("0/0");
		this._footerText.set_text("");
	}
	,refreshCanvas: function(Index) {
		if(this._entries == null || this._entries.length <= 0) {
			this._curIndex = 0;
			return false;
		}
		if(Index == null) {
			Index = this._curIndex;
		}
		this._canvasBitmap.bitmapData.fillRect(this._canvasBitmap.bitmapData.rect,0);
		if(Index < 0) {
			Index = this._entries.length - 1;
		} else if(Index >= this._entries.length) {
			Index = 0;
		}
		this._curIndex = Index;
		this._point.set_x(this._canvasBitmap.bitmapData.width / 2 - this._entries[this._curIndex].bitmap.width * this.zoom / 2);
		this._point.set_y(this._canvasBitmap.bitmapData.height / 2 - this._entries[this._curIndex].bitmap.height * this.zoom / 2);
		this._point.addPoint(this._curMouseOffset);
		this._matrix.identity();
		this._matrix.scale(this.zoom,this.zoom);
		this._matrix.translate(this._point.x,this._point.y);
		this._canvasBitmap.bitmapData.draw(this._entries[this._curIndex].bitmap,this._matrix,null,null,this._canvasBitmap.bitmapData.rect,false);
		this.drawBoundingBox(this._entries[this._curIndex].bitmap);
		this._canvasBitmap.bitmapData.draw(flixel_util_FlxSpriteUtil.flashGfxSprite,this._matrix,null,null,this._canvasBitmap.bitmapData.rect,false);
		this.refreshTexts();
		return true;
	}
	,refreshTexts: function() {
		this._dimensionsText.set_text(this._entries[this._curIndex].bitmap.width + "x" + this._entries[this._curIndex].bitmap.height);
		this._counterText.set_text("" + (this._curIndex + 1) + "/" + this._entries.length);
		var entryName = this._entries[this._curIndex].name;
		var name = entryName == "" ? "" : "\"" + entryName + "\" | ";
		var bitmapData = this._entries[this._curIndex].bitmap;
		this._footerText.set_text(name + flixel_util_FlxStringUtil.formatBytes(bitmapData.width * bitmapData.height * 4));
		this.resizeTexts();
	}
	,drawBoundingBox: function(bitmap) {
		var gfx = flixel_util_FlxSpriteUtil.flashGfx;
		gfx.clear();
		gfx.lineStyle(1,-65536,0.75,false,1);
		var offset = 1 / this.zoom;
		gfx.drawRect(-offset,-offset,bitmap.width + offset,bitmap.height + offset);
	}
	,onMouseWheel: function(e) {
		var _g = this;
		_g.set_zoom(_g.zoom + (e.delta < 0 ? -1 : 1) * 0.25 * this.zoom);
		this.refreshCanvas();
	}
	,onMiddleDown: function(e) {
		this._middleMouseDown = true;
		this._lastMousePos.set(this.get_mouseX(),this.get_mouseY());
	}
	,onMiddleUp: function(e) {
		this._middleMouseDown = false;
	}
	,set_zoom: function(Value) {
		if(Value < 0) {
			Value = 0;
		}
		return this.zoom = Value;
	}
	,get__canvas: function() {
		return this._canvasBitmap.bitmapData;
	}
	,get__curEntry: function() {
		return this._entries[this._curIndex];
	}
	,get__curBitmap: function() {
		return this._entries[this._curIndex].bitmap;
	}
	,__class__: flixel_system_debug_log_BitmapLog
	,__properties__: $extend(flixel_system_debug_Window.prototype.__properties__,{get__curBitmap:"get__curBitmap",get__curEntry:"get__curEntry",get__canvas:"get__canvas",set_zoom:"set_zoom"})
});
var flixel_system_debug_log_Log = function() {
	flixel_system_debug_Window.call(this,"Log",new flixel_system_debug_GraphicLog(0,0));
	this._text = new openfl_text_TextField();
	this._text.set_x(2);
	this._text.set_y(15);
	this._text.set_multiline(true);
	this._text.set_wordWrap(true);
	this._text.set_selectable(true);
	this._text.set_embedFonts(true);
	this._text.set_defaultTextFormat(new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,12,16777215));
	this.addChild(this._text);
	this._lines = [];
};
$hxClasses["flixel.system.debug.log.Log"] = flixel_system_debug_log_Log;
flixel_system_debug_log_Log.__name__ = ["flixel","system","debug","log","Log"];
flixel_system_debug_log_Log.__super__ = flixel_system_debug_Window;
flixel_system_debug_log_Log.prototype = $extend(flixel_system_debug_Window.prototype,{
	_text: null
	,_lines: null
	,destroy: function() {
		if(this._text != null) {
			this.removeChild(this._text);
			this._text = null;
		}
		this._lines = null;
		flixel_system_debug_Window.prototype.destroy.call(this);
	}
	,add: function(Data,Style,FireOnce) {
		if(FireOnce == null) {
			FireOnce = false;
		}
		if(Data == null) {
			return false;
		}
		var texts = [];
		var _g1 = 0;
		var _g = Data.length;
		while(_g1 < _g) {
			var i = _g1++;
			texts[i] = Std.string(Data[i]);
			texts[i] = StringTools.htmlEscape(texts[i]);
		}
		var text = Style.prefix + texts.join(" ");
		if(FireOnce) {
			var _g2 = 0;
			var _g11 = this._lines;
			while(_g2 < _g11.length) {
				var line = _g11[_g2];
				++_g2;
				if(text == line) {
					return false;
				}
			}
		}
		if(this._lines.length <= 0) {
			this._text.set_text("");
		}
		this._lines.push(text);
		if(this._lines.length > 200) {
			this._lines.shift();
			var newText = "";
			var _g12 = 0;
			var _g3 = this._lines.length;
			while(_g12 < _g3) {
				var i1 = _g12++;
				newText += this._lines[i1] + "\n";
			}
			this._text.set_text(newText);
		} else {
			var _g4 = this._text;
			_g4.set_text(_g4.get_text() + (text + "\n"));
		}
		this._text.set_scrollV(this._text.get_maxScrollV() | 0);
		return true;
	}
	,clear: function() {
		this._text.set_text("");
		this._lines.splice(0,this._lines.length);
	}
	,updateSize: function() {
		flixel_system_debug_Window.prototype.updateSize.call(this);
		this._text.set_width(this._width - 10);
		this._text.set_height(this._height - 15);
	}
	,__class__: flixel_system_debug_log_Log
});
var flixel_system_debug_log_LogStyle = function(Prefix,Color,Size,Bold,Italic,Underlined,ErrorSound,OpenConsole,CallbackFunction) {
	if(OpenConsole == null) {
		OpenConsole = false;
	}
	if(Underlined == null) {
		Underlined = false;
	}
	if(Italic == null) {
		Italic = false;
	}
	if(Bold == null) {
		Bold = false;
	}
	if(Size == null) {
		Size = 12;
	}
	if(Color == null) {
		Color = "FFFFFF";
	}
	if(Prefix == null) {
		Prefix = "";
	}
	this.prefix = Prefix;
	this.color = Color;
	this.size = Size;
	this.bold = Bold;
	this.italic = Italic;
	this.underlined = Underlined;
	this.errorSound = ErrorSound;
	this.openConsole = OpenConsole;
	this.callbackFunction = CallbackFunction;
};
$hxClasses["flixel.system.debug.log.LogStyle"] = flixel_system_debug_log_LogStyle;
flixel_system_debug_log_LogStyle.__name__ = ["flixel","system","debug","log","LogStyle"];
flixel_system_debug_log_LogStyle.prototype = {
	prefix: null
	,color: null
	,size: null
	,bold: null
	,italic: null
	,underlined: null
	,errorSound: null
	,openConsole: null
	,callbackFunction: null
	,__class__: flixel_system_debug_log_LogStyle
};
var flixel_system_debug_stats__$Stats_GraphicMinimizeButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload != null) {
		this.__fromImage(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload == null) {
				flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceName),flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.stats._Stats.GraphicMinimizeButton"] = flixel_system_debug_stats__$Stats_GraphicMinimizeButton;
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.__name__ = ["flixel","system","debug","stats","_Stats","GraphicMinimizeButton"];
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.preload = null;
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.__super__ = openfl_display_BitmapData;
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_stats__$Stats_GraphicMinimizeButton
});
var flixel_system_debug_stats__$Stats_GraphicMaximizeButton = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload != null) {
		this.__fromImage(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload == null) {
				flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceName),flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.system.debug.stats._Stats.GraphicMaximizeButton"] = flixel_system_debug_stats__$Stats_GraphicMaximizeButton;
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.__name__ = ["flixel","system","debug","stats","_Stats","GraphicMaximizeButton"];
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.preload = null;
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.__super__ = openfl_display_BitmapData;
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_system_debug_stats__$Stats_GraphicMaximizeButton
});
var flixel_system_debug_stats_Stats = function() {
	this._paused = true;
	this._activeObjectMarker = 0;
	this._activeObject = [];
	this._visibleObjectMarker = 0;
	this._visibleObject = [];
	this._drawCallsMarker = 0;
	this._drawCalls = [];
	this._drawMarker = 0;
	this._draw = [];
	this._updateMarker = 0;
	this._update = [];
	this._updateTimer = 0;
	this._lastTime = 0;
	this.drawCallsCount = 0;
	this.drawTime = 0;
	this.updateTime = 0;
	this.activeCount = 0;
	this.visibleCount = 0;
	this.flashPlayerFramerate = 0;
	this._itvTime = 0;
	flixel_system_debug_Window.call(this,"Stats",new flixel_system_debug_GraphicStats(0,0),0,0,false);
	if(flixel_system_debug_stats_Stats.MIN_HEIGHT == 0) {
		if(!flixel_FlxG.renderTile) {
			flixel_system_debug_stats_Stats.MIN_HEIGHT = 185;
		} else {
			flixel_system_debug_stats_Stats.MIN_HEIGHT = 200;
		}
	}
	this.minSize.y = flixel_system_debug_stats_Stats.MIN_HEIGHT;
	this.resize(160,flixel_system_debug_stats_Stats.MIN_HEIGHT);
	this.start();
	this._update = [];
	this._draw = [];
	this._activeObject = [];
	this._visibleObject = [];
	if(flixel_FlxG.renderTile) {
		this._drawCalls = [];
	}
	var graphY = (this._header.get_height() | 0) + 5;
	this.fpsGraph = new flixel_system_debug_stats_StatsGraph(5,graphY,140,40,-6881536,"fps");
	this.addChild(this.fpsGraph);
	this.fpsGraph.maxValue = flixel_FlxG.drawFramerate;
	this.fpsGraph.minValue = 0;
	graphY = (this._header.get_height() | 0) + 40 + 20;
	this.memoryGraph = new flixel_system_debug_stats_StatsGraph(5,graphY,140,40,-16737025,"MB");
	this.addChild(this.memoryGraph);
	graphY = (this._header.get_height() | 0) + 5;
	this.updateTimeGraph = new flixel_system_debug_stats_StatsGraph(170,graphY,130,40,-2305024,"ms",35,"Update");
	this.updateTimeGraph.set_visible(false);
	this.addChild(this.updateTimeGraph);
	graphY = (this._header.get_height() | 0) + 40 + 20;
	this.drawTimeGraph = new flixel_system_debug_stats_StatsGraph(170,graphY,130,40,-5898236,"ms",35,"Draw");
	this.drawTimeGraph.set_visible(false);
	this.addChild(this.drawTimeGraph);
	this.addChild(this._leftTextField = flixel_system_debug_DebuggerUtil.createTextField(5,125,-1426063361,11));
	this.addChild(this._rightTextField = flixel_system_debug_DebuggerUtil.createTextField(75,125,-1,11));
	this._leftTextField.set_multiline(this._rightTextField.set_multiline(true));
	this._leftTextField.set_wordWrap(this._rightTextField.set_wordWrap(true));
	this._leftTextField.set_text("Update: \nDraw:" + (flixel_FlxG.renderTile ? "\nDrawTiles:" : "") + "\nQuadTrees: \nLists:");
	this._toggleSizeButton = new flixel_system_ui_FlxSystemButton(new flixel_system_debug_stats__$Stats_GraphicMaximizeButton(0,0),$bind(this,this.toggleSize));
	this._toggleSizeButton.set_alpha(0.8);
	this.addChild(this._toggleSizeButton);
	this.updateSize();
};
$hxClasses["flixel.system.debug.stats.Stats"] = flixel_system_debug_stats_Stats;
flixel_system_debug_stats_Stats.__name__ = ["flixel","system","debug","stats","Stats"];
flixel_system_debug_stats_Stats.__super__ = flixel_system_debug_Window;
flixel_system_debug_stats_Stats.prototype = $extend(flixel_system_debug_Window.prototype,{
	_leftTextField: null
	,_rightTextField: null
	,_itvTime: null
	,_frameCount: null
	,_currentTime: null
	,fpsGraph: null
	,memoryGraph: null
	,drawTimeGraph: null
	,updateTimeGraph: null
	,flashPlayerFramerate: null
	,visibleCount: null
	,activeCount: null
	,updateTime: null
	,drawTime: null
	,drawCallsCount: null
	,_lastTime: null
	,_updateTimer: null
	,_update: null
	,_updateMarker: null
	,_draw: null
	,_drawMarker: null
	,_drawCalls: null
	,_drawCallsMarker: null
	,_visibleObject: null
	,_visibleObjectMarker: null
	,_activeObject: null
	,_activeObjectMarker: null
	,_paused: null
	,_toggleSizeButton: null
	,start: function() {
		if(this._paused) {
			this._paused = false;
			this._itvTime = flixel_FlxG.game.ticks;
			this._frameCount = 0;
		}
	}
	,stop: function() {
		this._paused = true;
	}
	,destroy: function() {
		if(this.fpsGraph != null) {
			this.fpsGraph.destroy();
			this.removeChild(this.fpsGraph);
		}
		this.fpsGraph = null;
		if(this.memoryGraph != null) {
			this.removeChild(this.memoryGraph);
		}
		this.memoryGraph = null;
		if(this._leftTextField != null) {
			this.removeChild(this._leftTextField);
		}
		this._leftTextField = null;
		if(this._rightTextField != null) {
			this.removeChild(this._rightTextField);
		}
		this._rightTextField = null;
		this._update = null;
		this._draw = null;
		this._activeObject = null;
		this._visibleObject = null;
		this._drawCalls = null;
		flixel_system_debug_Window.prototype.destroy.call(this);
	}
	,update: function() {
		if(this._paused) {
			return;
		}
		var time = this._currentTime = flixel_FlxG.game.ticks;
		var elapsed = time - this._lastTime;
		if(elapsed > 250) {
			elapsed = 250;
		}
		this._lastTime = time;
		this._updateTimer += elapsed;
		this._frameCount++;
		if(this._updateTimer > 250) {
			this.fpsGraph.update(this._frameCount / ((this._currentTime - this._itvTime) / 1000));
			this.memoryGraph.update(openfl_system_System.get_totalMemory() / 1024 / 1000);
			this.updateTexts();
			this._frameCount = 0;
			this._itvTime = this._currentTime;
			this.updateTime = 0;
			var _g1 = 0;
			var _g = this._updateMarker;
			while(_g1 < _g) {
				var i = _g1++;
				this.updateTime += this._update[i];
			}
			var _g11 = 0;
			var _g2 = this._activeObjectMarker;
			while(_g11 < _g2) {
				var i1 = _g11++;
				this.activeCount += this._activeObject[i1];
			}
			this.activeCount = this.divide(this.activeCount,this._activeObjectMarker) | 0;
			this.drawTime = 0;
			var _g12 = 0;
			var _g3 = this._drawMarker;
			while(_g12 < _g3) {
				var i2 = _g12++;
				this.drawTime += this._draw[i2];
			}
			var _g13 = 0;
			var _g4 = this._visibleObjectMarker;
			while(_g13 < _g4) {
				var i3 = _g13++;
				this.visibleCount += this._visibleObject[i3];
			}
			this.visibleCount = this.divide(this.visibleCount,this._visibleObjectMarker) | 0;
			if(flixel_FlxG.renderTile) {
				var _g14 = 0;
				var _g5 = this._drawCallsMarker;
				while(_g14 < _g5) {
					var i4 = _g14++;
					this.drawCallsCount += this._drawCalls[i4];
				}
				this.drawCallsCount = this.divide(this.drawCallsCount,this._drawCallsMarker) | 0;
			}
			this._updateMarker = 0;
			this._drawMarker = 0;
			this._activeObjectMarker = 0;
			this._visibleObjectMarker = 0;
			if(flixel_FlxG.renderTile) {
				this._drawCallsMarker = 0;
			}
			this._updateTimer -= 250;
		}
	}
	,updateTexts: function() {
		var updTime = flixel_math_FlxMath.roundDecimal(this.divide(this.updateTime,this._updateMarker),1);
		var drwTime = flixel_math_FlxMath.roundDecimal(this.divide(this.drawTime,this._drawMarker),1);
		this.drawTimeGraph.update(drwTime);
		this.updateTimeGraph.update(updTime);
		this._rightTextField.set_text(this.activeCount + " (" + updTime + "ms)\n" + this.visibleCount + " (" + drwTime + "ms)\n" + (flixel_FlxG.renderTile ? this.drawCallsCount + "\n" : "") + flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES + "\n" + flixel_system_FlxLinkedList._NUM_CACHED_FLX_LIST);
	}
	,divide: function(f1,f2) {
		if(f2 == 0) {
			return 0;
		}
		return f1 / f2;
	}
	,currentFps: function() {
		return this._frameCount / ((this._currentTime - this._itvTime) / 1000);
	}
	,intervalTime: function() {
		return (this._currentTime - this._itvTime) / 1000;
	}
	,currentMem: function() {
		return openfl_system_System.get_totalMemory() / 1024 / 1000;
	}
	,flixelUpdate: function(Time) {
		if(this._paused) {
			return;
		}
		this._update[this._updateMarker++] = Time;
	}
	,flixelDraw: function(Time) {
		if(this._paused) {
			return;
		}
		this._draw[this._drawMarker++] = Time;
	}
	,activeObjects: function(Count) {
		if(this._paused) {
			return;
		}
		this._activeObject[this._activeObjectMarker++] = Count;
	}
	,visibleObjects: function(Count) {
		if(this._paused) {
			return;
		}
		this._visibleObject[this._visibleObjectMarker++] = Count;
	}
	,drawCalls: function(Drawcalls) {
		if(this._paused) {
			return;
		}
		this._drawCalls[this._drawCallsMarker++] = Drawcalls;
	}
	,onFocus: function() {
		this._paused = false;
	}
	,onFocusLost: function() {
		this._paused = true;
	}
	,toggleSize: function() {
		if(this._width == 160) {
			this.resize(320,this._height);
			var _g = this;
			_g.set_x(_g.get_x() - 160);
			this.drawTimeGraph.set_visible(true);
			this.updateTimeGraph.set_visible(true);
			this._toggleSizeButton.changeIcon(new flixel_system_debug_stats__$Stats_GraphicMinimizeButton(0,0));
		} else {
			this.resize(160,this._height);
			var _g1 = this;
			_g1.set_x(_g1.get_x() + 160);
			this.drawTimeGraph.set_visible(false);
			this.updateTimeGraph.set_visible(false);
			this._toggleSizeButton.changeIcon(new flixel_system_debug_stats__$Stats_GraphicMaximizeButton(0,0));
		}
		this.updateSize();
		this.bound();
	}
	,updateSize: function() {
		flixel_system_debug_Window.prototype.updateSize.call(this);
		if(this._toggleSizeButton != null) {
			this._toggleSizeButton.set_x(this._width - this._toggleSizeButton.get_width() - 3);
			this._toggleSizeButton.set_y(3);
		}
	}
	,__class__: flixel_system_debug_stats_Stats
});
var flixel_system_debug_stats_StatsGraph = function(X,Y,Width,Height,GraphColor,Unit,LabelWidth,Label) {
	if(LabelWidth == null) {
		LabelWidth = 45;
	}
	this.history = [];
	this.maxValue = 0.0000000000000001;
	this.minValue = 1.79e+308;
	openfl_display_Sprite.call(this);
	this.set_x(X);
	this.set_y(Y);
	this._width = Width - LabelWidth;
	this._height = Height;
	this.graphColor = GraphColor;
	this._unit = Unit;
	this._labelWidth = LabelWidth;
	this._label = Label == null ? "" : Label;
	this._axis = new openfl_display_Shape();
	this._axis.set_x(this._labelWidth + 10);
	this.maxLabel = flixel_system_debug_DebuggerUtil.createTextField(0,0,-1426063361,11);
	this.curLabel = flixel_system_debug_DebuggerUtil.createTextField(0,this._height / 2 - 5.5,this.graphColor,11);
	this.minLabel = flixel_system_debug_DebuggerUtil.createTextField(0,this._height - 11,-1426063361,11);
	this.avgLabel = flixel_system_debug_DebuggerUtil.createTextField(this._labelWidth + 20,this._height / 2 - 5.5 - 10,-1426063361,11);
	this.avgLabel.set_width(this._width);
	this.avgLabel.get_defaultTextFormat().align = 0;
	this.avgLabel.set_alpha(0.5);
	this.addChild(this._axis);
	this.addChild(this.maxLabel);
	this.addChild(this.curLabel);
	this.addChild(this.minLabel);
	this.addChild(this.avgLabel);
	this.drawAxes();
};
$hxClasses["flixel.system.debug.stats.StatsGraph"] = flixel_system_debug_stats_StatsGraph;
flixel_system_debug_stats_StatsGraph.__name__ = ["flixel","system","debug","stats","StatsGraph"];
flixel_system_debug_stats_StatsGraph.__super__ = openfl_display_Sprite;
flixel_system_debug_stats_StatsGraph.prototype = $extend(openfl_display_Sprite.prototype,{
	minLabel: null
	,curLabel: null
	,maxLabel: null
	,avgLabel: null
	,minValue: null
	,maxValue: null
	,graphColor: null
	,history: null
	,_axis: null
	,_width: null
	,_height: null
	,_unit: null
	,_labelWidth: null
	,_label: null
	,drawAxes: function() {
		var gfx = this._axis.get_graphics();
		gfx.clear();
		gfx.lineStyle(1,16777215,0.5);
		gfx.moveTo(0,0);
		gfx.lineTo(0,this._height);
		gfx.moveTo(0,this._height);
		gfx.lineTo(this._width,this._height);
	}
	,drawGraph: function() {
		var gfx = this.get_graphics();
		gfx.clear();
		gfx.lineStyle(1,this.graphColor,1);
		var inc = this._width / 29;
		var range = Math.max(this.maxValue - this.minValue,this.maxValue * 0.1);
		var graphX = this._axis.get_x() + 1;
		var _g1 = 0;
		var _g = this.history.length;
		while(_g1 < _g) {
			var i = _g1++;
			var value = (this.history[i] - this.minValue) / range;
			var pointY = -value * this._height - 1 + this._height;
			if(i == 0) {
				gfx.moveTo(graphX,this._axis.get_y() + pointY);
			}
			gfx.lineTo(graphX + i * inc,pointY);
		}
	}
	,update: function(Value) {
		this.history.unshift(Value);
		if(this.history.length > 30) {
			this.history.pop();
		}
		this.maxValue = Math.max(this.maxValue,Value);
		this.minValue = Math.min(this.minValue,Value);
		this.minLabel.set_text(this.formatValue(this.minValue));
		this.curLabel.set_text(this.formatValue(Value));
		this.maxLabel.set_text(this.formatValue(this.maxValue));
		this.avgLabel.set_text(this._label + "\nAvg: " + this.formatValue(this.average()));
		this.drawGraph();
	}
	,formatValue: function(value) {
		return flixel_math_FlxMath.roundDecimal(value,1) + " " + this._unit;
	}
	,average: function() {
		var sum = 0;
		var _g = 0;
		var _g1 = this.history;
		while(_g < _g1.length) {
			var value = _g1[_g];
			++_g;
			sum += value;
		}
		return sum / this.history.length;
	}
	,destroy: function() {
		this._axis = flixel_util_FlxDestroyUtil.removeChild(this,this._axis);
		this.minLabel = flixel_util_FlxDestroyUtil.removeChild(this,this.minLabel);
		this.curLabel = flixel_util_FlxDestroyUtil.removeChild(this,this.curLabel);
		this.maxLabel = flixel_util_FlxDestroyUtil.removeChild(this,this.maxLabel);
		this.avgLabel = flixel_util_FlxDestroyUtil.removeChild(this,this.avgLabel);
		this.history = null;
	}
	,__class__: flixel_system_debug_stats_StatsGraph
});
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__graphics = new openfl_display_Graphics();
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__tabEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__selectionIndex: null
	,__showCursor: null
	,__textEngine: null
	,__textFormat: null
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) {
			return null;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) {
					var i = _g3++;
					x += group.advances[i];
				}
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		this.replaceText(startIndex,endIndex,value);
		this.__caretIndex = startIndex + value.length;
		this.__selectionIndex = this.__caretIndex;
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__textEngine.text.length || newText == null) {
			return;
		}
		var tmp = this.__textEngine.text.substring(0,beginIndex) + newText;
		var tmp1 = this.__textEngine.text.substring(endIndex);
		this.__textEngine.text = tmp + tmp1;
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.length) {
			range = this.__textEngine.textFormatRanges[i];
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				this.__textEngine.textFormatRanges.splice(i,1);
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(format.font != null) {
			this.__textFormat.font = format.font;
		}
		if(format.size != null) {
			this.__textFormat.size = format.size;
		}
		if(format.color != null) {
			this.__textFormat.color = format.color;
		}
		if(format.bold != null) {
			this.__textFormat.bold = format.bold;
		}
		if(format.italic != null) {
			this.__textFormat.italic = format.italic;
		}
		if(format.underline != null) {
			this.__textFormat.underline = format.underline;
		}
		if(format.url != null) {
			this.__textFormat.url = format.url;
		}
		if(format.target != null) {
			this.__textFormat.target = format.target;
		}
		if(format.align != null) {
			this.__textFormat.align = format.align;
		}
		if(format.leftMargin != null) {
			this.__textFormat.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.__textFormat.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.__textFormat.indent = format.indent;
		}
		if(format.leading != null) {
			this.__textFormat.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.__textFormat.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.__textFormat.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.__textFormat.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.__textFormat.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.__textFormat.tabStops = format.tabStops;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		this.__textEngine.bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		} else {
			return null;
		}
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) {
			var i = _g1++;
			y += this.__textEngine.lineHeights[i];
		}
		if(y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			group = this.__textEngine.layoutGroups[i1];
			if(i1 < this.__textEngine.layoutGroups.length - 1) {
				nextGroup = this.__textEngine.layoutGroups[i1 + 1];
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i2 = _g3++;
						advance += group.advances[i2];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i2]) + group.advances[i2] / 2) {
								return group.startIndex + i2;
							} else if(group.startIndex + i2 < group.endIndex) {
								return group.startIndex + i2 + 1;
							} else {
								return group.endIndex;
							}
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__textEngine.text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getWorldTransform();
		this.__updateLayout();
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getWorldTransform();
		this.__updateLayout();
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__dirty) {
			var textEngine = this.__textEngine;
			this.__updateLayout();
			if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				var bounds = textEngine.bounds;
				if(this.__graphics == null || this.__graphics.__canvas == null) {
					if(this.__graphics == null) {
						this.__graphics = new openfl_display_Graphics();
					}
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
					this.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
				}
				var graphics = this.__graphics;
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(textEngine.displayAsPassword) {
						var length = text.length;
						var mask = "";
						var _g1 = 0;
						var _g = length;
						while(_g1 < _g) {
							var i = _g1++;
							mask += "*";
						}
						text = mask;
					}
					graphics.__canvas.width = Math.ceil(bounds.width);
					graphics.__canvas.height = Math.ceil(bounds.height);
					if(textEngine.antiAliasType != 0 || textEngine.gridFitType != 1) {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					} else {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							var tmp = StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							var tmp1 = StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g11 = 0;
					var _g2 = this.get_scrollV() - 1;
					while(_g11 < _g2) {
						var i1 = _g11++;
						scrollY -= textEngine.lineHeights[i1];
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g3 = 0;
					var _g12 = textEngine.layoutGroups;
					while(_g3 < _g12.length) {
						var group = _g12[_g3];
						++_g3;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						var tmp2 = StringTools.hex(group.format.color,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp2;
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g31 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g31 < _g21) {
										var i2 = _g31++;
										if(group.advances.length <= i2) {
											break;
										}
										advance += group.advances[i2];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= textEngine.text.length) {
									end = this.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					graphics.__canvas.width = Math.ceil(bounds.width);
					graphics.__canvas.height = Math.ceil(bounds.height);
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							var tmp3 = StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + tmp3;
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							var tmp4 = StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + tmp4;
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__textEngine.text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				var cacheWidth = this.__textEngine.width;
				var _g = this.__textEngine.autoSize;
				switch(_g) {
				case 0:case 1:case 3:
					if(!this.__textEngine.wordWrap) {
						this.__textEngine.width = this.__textEngine.textWidth + 4;
					}
					this.__textEngine.height = this.__textEngine.textHeight + 4;
					break;
				default:
				}
				if(this.__textEngine.width != cacheWidth) {
					var _g1 = this.__textEngine.autoSize;
					switch(_g1) {
					case 0:
						var _g11 = this;
						_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g12 = this;
						_g12.set_x(_g12.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
		}
		return this.__textEngine.background = value;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleY(1);
		return this.__textEngine.height = value;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		if(value > this.__textEngine.maxScrollV) {
			value = this.__textEngine.maxScrollV;
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.scrollV) {
			this.__dirty = true;
		}
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_text: function() {
		return this.__textEngine.text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.length > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
		}
		var range = this.__textEngine.textFormatRanges[0];
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		return this.__textEngine.text = value;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.removeEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__textEngine.width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleX(1);
		return this.__textEngine.width = value;
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 99:
			if(modifier == 64 || modifier == 128) {
				this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex);
			}
			break;
		case 118:
			if(modifier == 64 || modifier == 128) {
				var text = lime_system_Clipboard.get_text();
				if(text != null) {
					this.replaceSelectedText(text);
				} else {
					this.replaceSelectedText("");
				}
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else {
				this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
			}
			break;
		case 120:
			if(modifier == 64 || modifier == 128) {
				this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex);
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__textEngine.text.length) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__textEngine.text.length) {
					this.__caretIndex++;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__textEngine.text.length) {
						this.__caretIndex++;
					}
				} else {
					this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) {
					this.__caretIndex--;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) {
						this.__caretIndex--;
					}
				} else {
					this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",get_maxScrollV:"get_maxScrollV",get_caretIndex:"get_caretIndex",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",set_textColor:"set_textColor",set_text:"set_text",get_text:"get_text",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",get_scrollH:"get_scrollH",set_multiline:"set_multiline",set_embedFonts:"set_embedFonts",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",set_background:"set_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize"})
});
var flixel_system_debug_watch_EditableTextField = function(allowEditing,defaultFormat,submitValue,expectedType) {
	openfl_text_TextField.call(this);
	this.allowEditing = allowEditing;
	this.submitValue = submitValue;
	this.defaultFormat = defaultFormat;
	this.expectedType = expectedType;
	if(allowEditing) {
		this.editFormat = new openfl_text_TextFormat(defaultFormat.font,defaultFormat.size,0);
		this.addEventListener("keyUp",$bind(this,this.onKeyUp));
		this.addEventListener("keyDown",$bind(this,this.onKeyDown));
		this.addEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.addEventListener("focusOut",$bind(this,this.onFocusLost));
	}
};
$hxClasses["flixel.system.debug.watch.EditableTextField"] = flixel_system_debug_watch_EditableTextField;
flixel_system_debug_watch_EditableTextField.__name__ = ["flixel","system","debug","watch","EditableTextField"];
flixel_system_debug_watch_EditableTextField.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_system_debug_watch_EditableTextField.__super__ = openfl_text_TextField;
flixel_system_debug_watch_EditableTextField.prototype = $extend(openfl_text_TextField.prototype,{
	isEditing: null
	,allowEditing: null
	,submitValue: null
	,expectedType: null
	,defaultFormat: null
	,editFormat: null
	,destroy: function() {
		if(this.allowEditing) {
			this.removeEventListener("keyUp",$bind(this,this.onKeyUp));
			this.removeEventListener("keyDown",$bind(this,this.onKeyDown));
			this.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
			this.removeEventListener("focusOut",$bind(this,this.onFocusLost));
		}
	}
	,onMouseUp: function(_) {
		this.setIsEditing(true);
	}
	,onKeyUp: function(e) {
		var _g = e.keyCode;
		switch(_g) {
		case 13:
			this.submit();
			break;
		case 27:
			this.setIsEditing(false);
			break;
		}
	}
	,onKeyDown: function(e) {
		var modifier = 1.0;
		if(e.altKey) {
			modifier = 0.1;
		}
		if(e.shiftKey) {
			modifier = 10.0;
		}
		var _g = e.keyCode;
		switch(_g) {
		case 38:
			this.cycleValue(modifier,0);
			break;
		case 40:
			this.cycleValue(-modifier,this.get_text().length);
			break;
		}
	}
	,cycleValue: function(modifier,selection) {
		var _g = this.expectedType;
		switch(_g[1]) {
		case 1:case 2:
			this.cycleNumericValue(modifier);
			this.selectEnd();
			break;
		case 3:
			this.set_text(this.get_text() == "true" ? "false" : "true");
			this.selectEnd();
			break;
		case 7:
			var e = _g[2];
			this.cycleEnumValue(e,modifier < 0 ? -1 : 1);
			this.selectEnd();
			break;
		default:
			this.setSelection(selection,selection);
		}
	}
	,selectEnd: function() {
		this.setSelection(this.get_text().length,this.get_text().length);
	}
	,cycleNumericValue: function(modifier) {
		var value = parseFloat(this.get_text());
		if(isNaN(value)) {
			return;
		}
		value += modifier;
		value = flixel_math_FlxMath.roundDecimal(value,flixel_FlxG["debugger"].precision);
		this.set_text(value == null ? "null" : "" + value);
	}
	,cycleEnumValue: function(e,modifier) {
		var values = e.__constructs__.slice();
		var index = values.indexOf(this.get_text());
		if(index == -1) {
			index = 0;
		} else {
			index += modifier;
			index = flixel_math_FlxMath.wrap(index,0,values.length - 1) | 0;
		}
		this.set_text(Std.string(values[index]));
	}
	,onFocusLost: function(_) {
		this.setIsEditing(false);
	}
	,submit: function() {
		var value;
		var _g = this.expectedType;
		switch(_g[1]) {
		case 3:
			if(this.get_text() == "true") {
				value = true;
			} else if(this.get_text() == "false") {
				value = false;
			} else {
				value = this.get_text();
			}
			break;
		case 7:
			var e = _g[2];
			try {
				value = Type.createEnum(e,this.get_text());
			} catch( _ ) {
				value = null;
			}
			break;
		default:
			value = this.get_text();
		}
		try {
			this.submitValue(value);
		} catch( e1 ) {
		}
		this.setIsEditing(false);
	}
	,setIsEditing: function(isEditing) {
		this.isEditing = isEditing;
		flixel_FlxG.keys.enabled = !isEditing;
		this.set_type(isEditing ? 1 : 0);
		this.set_background(isEditing);
		this.set_defaultTextFormat(isEditing ? this.editFormat : this.defaultFormat);
		this.setTextFormat(this.get_defaultTextFormat());
	}
	,__class__: flixel_system_debug_watch_EditableTextField
});
var flixel_system_debug_watch_Watch = function(closable) {
	if(closable == null) {
		closable = false;
	}
	this.entries = [];
	var point = flixel_math_FlxPoint._pool.get().set(2,15);
	point._inPool = false;
	this.entriesContainerOffset = point;
	flixel_system_debug_Window.call(this,"Watch",new flixel_system_debug_GraphicWatch(0,0),0,0,true,null,closable);
	this.entriesContainer = new openfl_display_Sprite();
	this.entriesContainer.set_x(this.entriesContainerOffset.x);
	this.entriesContainer.set_y(this.entriesContainerOffset.y);
	this.addChild(this.entriesContainer);
	flixel_FlxG.signals.stateSwitched.add($bind(this,this.removeAll));
};
$hxClasses["flixel.system.debug.watch.Watch"] = flixel_system_debug_watch_Watch;
flixel_system_debug_watch_Watch.__name__ = ["flixel","system","debug","watch","Watch"];
flixel_system_debug_watch_Watch.__super__ = flixel_system_debug_Window;
flixel_system_debug_watch_Watch.prototype = $extend(flixel_system_debug_Window.prototype,{
	entriesContainer: null
	,entriesContainerOffset: null
	,entries: null
	,add: function(displayName,data) {
		if(this.isInvalid(displayName,data)) {
			return;
		}
		var existing = this.getExistingEntry(displayName,data);
		if(existing != null) {
			if(data[1] == 1) {
				existing.data = data;
			}
			return;
		}
		this.addEntry(displayName,data);
	}
	,isInvalid: function(displayName,data) {
		switch(data[1]) {
		case 0:
			var field = data[3];
			var object = data[2];
			if(object != null) {
				return field == null;
			} else {
				return true;
			}
			break;
		case 1:
			if(displayName != null) {
				return displayName.length == 0;
			} else {
				return true;
			}
			break;
		case 2:
			var expression = data[2];
			if(expression != null) {
				return expression.length == 0;
			} else {
				return true;
			}
			break;
		}
	}
	,getExistingEntry: function(displayName,data) {
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(data[1] == 1) {
				if(entry.displayName == displayName) {
					return entry;
				}
			} else if(Type.enumEq(entry.data,data)) {
				return entry;
			}
		}
		return null;
	}
	,addEntry: function(displayName,data) {
		var entry = new flixel_system_debug_watch_WatchEntry(displayName,data,$bind(this,this.removeEntry));
		this.entries.push(entry);
		this.entriesContainer.addChild(entry);
		this.resetEntries();
	}
	,remove: function(displayName,data) {
		var existing = this.getExistingEntry(displayName,data);
		if(existing != null) {
			this.removeEntry(existing);
		}
	}
	,removeEntry: function(entry) {
		var array = this.entries;
		var index = array.indexOf(entry);
		if(index != -1) {
			array[index] = array[array.length - 1];
			array.pop();
		}
		this.entriesContainer.removeChild(entry);
		entry.destroy();
		this.resetEntries();
	}
	,removeAll: function() {
		var _g = 0;
		var _g1 = this.entries.slice();
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			this.removeEntry(entry);
		}
		this.entries = [];
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			entry.updateValue();
		}
	}
	,updateSize: function() {
		this.minSize.setTo(this.getMaxMinWidth() + this.entriesContainerOffset.x,this.entriesContainer.get_height() + this.entriesContainerOffset.y);
		flixel_system_debug_Window.prototype.updateSize.call(this);
		this.resetEntries();
	}
	,resetEntries: function() {
		var _g1 = 0;
		var _g = this.entries.length;
		while(_g1 < _g) {
			var i = _g1++;
			var entry = this.entries[i];
			entry.set_y(i * 15);
			entry.updateSize(this.getMaxNameWidth(),this._width);
		}
	}
	,getMaxNameWidth: function() {
		return this.getMax(function(entry) {
			return entry.getNameWidth();
		});
	}
	,getMaxMinWidth: function() {
		return this.getMax(function(entry) {
			return entry.getMinWidth();
		});
	}
	,getMax: function(getValue) {
		var max = 0.0;
		var _g = 0;
		var _g1 = this.entries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			var value = getValue(entry);
			if(value > max) {
				max = value;
			}
		}
		return max;
	}
	,__class__: flixel_system_debug_watch_Watch
});
var flixel_system_debug_watch_Tracker = function(Profile,ObjectOrClass,WindowTitle) {
	flixel_system_debug_watch_Watch.call(this,true);
	flixel_system_debug_watch_Tracker.initProfiles();
	this._object = ObjectOrClass;
	flixel_system_debug_watch_Tracker.objectsBeingTracked.push(this._object);
	this.initWatchEntries(Profile);
	this._title.set_text(WindowTitle == null ? flixel_util_FlxStringUtil.getClassName(this._object,true) : WindowTitle);
	this.set_visible(true);
	this.resize(200,this.entriesContainer.get_height() + 30);
	this.set_x(flixel_system_debug_watch_Tracker._numTrackerWindows * 80);
	this.set_y(flixel_system_debug_watch_Tracker._numTrackerWindows * 25 + 20);
	flixel_system_debug_watch_Tracker._numTrackerWindows++;
	flixel_FlxG.signals.stateSwitched.add($bind(this,this.close));
};
$hxClasses["flixel.system.debug.watch.Tracker"] = flixel_system_debug_watch_Tracker;
flixel_system_debug_watch_Tracker.__name__ = ["flixel","system","debug","watch","Tracker"];
flixel_system_debug_watch_Tracker.profiles = null;
flixel_system_debug_watch_Tracker.addProfile = function(Profile) {
	if(Profile != null) {
		flixel_system_debug_watch_Tracker.initProfiles();
		flixel_system_debug_watch_Tracker.profiles.push(Profile);
	}
};
flixel_system_debug_watch_Tracker.findProfile = function(Object) {
	flixel_system_debug_watch_Tracker.initProfiles();
	var lastMatchingProfile = null;
	var _g = 0;
	var _g1 = flixel_system_debug_watch_Tracker.profiles;
	while(_g < _g1.length) {
		var profile = _g1[_g];
		++_g;
		if(js_Boot.__instanceof(Object,profile.objectClass) || Object == profile.objectClass) {
			lastMatchingProfile = profile;
		}
	}
	return lastMatchingProfile;
};
flixel_system_debug_watch_Tracker.onStateSwitch = function() {
	flixel_system_debug_watch_Tracker._numTrackerWindows = 0;
};
flixel_system_debug_watch_Tracker.initProfiles = function() {
	if(flixel_system_debug_watch_Tracker.profiles == null) {
		flixel_system_debug_watch_Tracker.profiles = [];
		var Profile = new flixel_system_debug_watch_TrackerProfile(flixel_FlxG,["width","height","worldBounds.x","worldBounds.y","worldBounds.width","worldBounds.height","worldDivisions","updateFramerate","drawFramerate","elapsed","maxElapsed","autoPause","fixedTimestep","timeScale"]);
		if(Profile != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile);
		}
		var Profile1 = new flixel_system_debug_watch_TrackerProfile(flixel_math_FlxPoint,["x","y"]);
		if(Profile1 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile1);
		}
		var Profile2 = new flixel_system_debug_watch_TrackerProfile(flixel_math_FlxRect,["width","height"],[flixel_math_FlxPoint]);
		if(Profile2 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile2);
		}
		var Profile3 = new flixel_system_debug_watch_TrackerProfile(flixel_FlxBasic,["active","visible","alive","exists"]);
		if(Profile3 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile3);
		}
		var Profile4 = new flixel_system_debug_watch_TrackerProfile(flixel_FlxObject,["velocity","acceleration","drag","angle","immovable"],[flixel_math_FlxRect,flixel_FlxBasic]);
		if(Profile4 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile4);
		}
		var Profile5 = new flixel_system_debug_watch_TrackerProfile(flixel_tile_FlxTilemap,["auto","widthInTiles","heightInTiles","totalTiles","scale"],[flixel_FlxObject]);
		if(Profile5 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile5);
		}
		var Profile6 = new flixel_system_debug_watch_TrackerProfile(flixel_FlxSprite,["frameWidth","frameHeight","alpha","origin","offset","scale"],[flixel_FlxObject]);
		if(Profile6 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile6);
		}
		var Profile7 = new flixel_system_debug_watch_TrackerProfile(flixel_ui_FlxTypedButton,["status","labelAlphas"],[flixel_FlxSprite]);
		if(Profile7 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile7);
		}
		var Profile8 = new flixel_system_debug_watch_TrackerProfile(flixel_ui_FlxBar,["min","max","range","pct","pxPerPercent","value"],[flixel_FlxSprite]);
		if(Profile8 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile8);
		}
		var Profile9 = new flixel_system_debug_watch_TrackerProfile(flixel_text_FlxText,["text","size","font","embedded","bold","italic","wordWrap","borderSize","borderStyle"],[flixel_FlxSprite]);
		if(Profile9 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile9);
		}
		var Profile10 = new flixel_system_debug_watch_TrackerProfile(flixel_group_FlxTypedGroup,["length","members.length","maxSize"],[flixel_FlxBasic]);
		if(Profile10 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile10);
		}
		var Profile11 = new flixel_system_debug_watch_TrackerProfile(flixel_group_FlxTypedSpriteGroup,null,[flixel_FlxSprite,flixel_group_FlxTypedGroup]);
		if(Profile11 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile11);
		}
		var Profile12 = new flixel_system_debug_watch_TrackerProfile(flixel_FlxState,["persistentUpdate","persistentDraw","destroySubStates","bgColor"],[flixel_group_FlxTypedGroup]);
		if(Profile12 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile12);
		}
		var Profile13 = new flixel_system_debug_watch_TrackerProfile(flixel_FlxCamera,["style","followLerp","followLead","deadzone","bounds","zoom","alpha","angle"],[flixel_FlxBasic,flixel_math_FlxRect]);
		if(Profile13 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile13);
		}
		var Profile14 = new flixel_system_debug_watch_TrackerProfile(flixel_tweens_FlxTween,["active","duration","type","percent","finished","scale","backward","executions","startDelay","loopDelay"]);
		if(Profile14 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile14);
		}
		var Profile15 = new flixel_system_debug_watch_TrackerProfile(flixel_util_FlxPath,["speed","angle","autoCenter","nodeIndex","active","finished"]);
		if(Profile15 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile15);
		}
		var Profile16 = new flixel_system_debug_watch_TrackerProfile(flixel_util_FlxTimer,["time","loops","active","finished","timeLeft","elapsedTime","loopsLeft","elapsedLoops","progress"]);
		if(Profile16 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile16);
		}
		var Profile17 = new flixel_system_debug_watch_TrackerProfile(flixel_animation_FlxAnimationController,["frameIndex","frameName","name","paused","finished","frames"]);
		if(Profile17 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile17);
		}
		var Profile18 = new flixel_system_debug_watch_TrackerProfile(flixel_effects_particles_FlxTypedEmitter,["emitting","frequency","bounce"],[flixel_group_FlxTypedGroup,flixel_math_FlxRect]);
		if(Profile18 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile18);
		}
		var Profile19 = new flixel_system_debug_watch_TrackerProfile(flixel_input_mouse_FlxMouse,["screenX","screenY","wheel","visible","useSystemCursor","pressed","justPressed","justReleased"],[flixel_math_FlxPoint]);
		if(Profile19 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile19);
		}
		var Profile20 = new flixel_system_debug_watch_TrackerProfile(flixel_input_touch_FlxTouch,["screenX","screenY","touchPointID","pressed","justPressed","justReleased","isActive"],[flixel_math_FlxPoint]);
		if(Profile20 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile20);
		}
		var Profile21 = new flixel_system_debug_watch_TrackerProfile(flixel_input_FlxSwipe,["ID","startPosition","endPosition","distance","angle","duration"]);
		if(Profile21 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile21);
		}
		var Profile22 = new flixel_system_debug_watch_TrackerProfile(openfl_display_DisplayObject,["z","scaleX","scaleY","mouseX","mouseY","rotationX","rotationY","visible"],[flixel_math_FlxRect]);
		if(Profile22 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile22);
		}
		var Profile23 = new flixel_system_debug_watch_TrackerProfile(openfl_geom_Point,null,[flixel_math_FlxPoint]);
		if(Profile23 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile23);
		}
		var Profile24 = new flixel_system_debug_watch_TrackerProfile(openfl_geom_Rectangle,null,[flixel_math_FlxRect]);
		if(Profile24 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile24);
		}
		var Profile25 = new flixel_system_debug_watch_TrackerProfile(openfl_geom_Matrix,["a","b","c","d","tx","ty"]);
		if(Profile25 != null) {
			flixel_system_debug_watch_Tracker.initProfiles();
			flixel_system_debug_watch_Tracker.profiles.push(Profile25);
		}
	}
};
flixel_system_debug_watch_Tracker.__super__ = flixel_system_debug_watch_Watch;
flixel_system_debug_watch_Tracker.prototype = $extend(flixel_system_debug_watch_Watch.prototype,{
	_object: null
	,destroy: function() {
		flixel_FlxG.signals.stateSwitched.remove($bind(this,this.close));
		flixel_system_debug_watch_Tracker._numTrackerWindows--;
		HxOverrides.remove(flixel_system_debug_watch_Tracker.objectsBeingTracked,this._object);
		this._object = null;
		flixel_system_debug_watch_Watch.prototype.destroy.call(this);
	}
	,findProfileByClass: function(ObjectClass) {
		var _g = 0;
		var _g1 = flixel_system_debug_watch_Tracker.profiles;
		while(_g < _g1.length) {
			var profile = _g1[_g];
			++_g;
			if(profile.objectClass == ObjectClass) {
				return profile;
			}
		}
		return null;
	}
	,initWatchEntries: function(Profile) {
		if(Profile != null) {
			this.addExtensions(Profile);
			this.addVariables(Profile.variables);
		}
	}
	,addExtensions: function(Profile) {
		if(Profile.extensions == null) {
			return;
		}
		var _g = 0;
		var _g1 = Profile.extensions;
		while(_g < _g1.length) {
			var extension = _g1[_g];
			++_g;
			if(extension == null) {
				continue;
			}
			var extensionProfile = this.findProfileByClass(extension);
			if(extensionProfile != null) {
				this.addVariables(extensionProfile.variables);
				this.addExtensions(extensionProfile);
			}
		}
	}
	,addVariables: function(Variables) {
		if(Variables == null) {
			return;
		}
		var _g = 0;
		while(_g < Variables.length) {
			var variable = Variables[_g];
			++_g;
			this.add(variable,flixel_system_debug_watch_WatchEntryData.FIELD(this._object,variable));
		}
	}
	,__class__: flixel_system_debug_watch_Tracker
});
var flixel_system_debug_watch_TrackerProfile = function(ObjectClass,Variables,Extensions) {
	this.objectClass = ObjectClass;
	this.variables = Variables;
	this.extensions = Extensions;
};
$hxClasses["flixel.system.debug.watch.TrackerProfile"] = flixel_system_debug_watch_TrackerProfile;
flixel_system_debug_watch_TrackerProfile.__name__ = ["flixel","system","debug","watch","TrackerProfile"];
flixel_system_debug_watch_TrackerProfile.prototype = {
	objectClass: null
	,variables: null
	,extensions: null
	,toString: function() {
		var value = this.variables;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "variables";
		_this.value = value;
		var value1 = this.extensions;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "extensions";
		_this1.value = value1;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,__class__: flixel_system_debug_watch_TrackerProfile
};
var flixel_system_debug_watch_WatchEntry = function(displayName,data,removeEntry) {
	openfl_display_Sprite.call(this);
	this.displayName = displayName;
	this.data = data;
	this.defaultFormat = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEBUGGER,12,this.getTextColor());
	this.nameText = this.initTextField(flixel_system_debug_DebuggerUtil.createTextField());
	var expectedType = Type["typeof"](this.getValue());
	this.valueText = this.initTextField(flixel_system_debug_DebuggerUtil.initTextField(new flixel_system_debug_watch_EditableTextField(data[1] == 0,this.defaultFormat,$bind(this,this.submitValue),expectedType)));
	this.updateName();
	var f = removeEntry;
	var a1 = this;
	var tmp = function() {
		f(a1);
	};
	this.addChild(this.removeButton = new flixel_system_ui_FlxSystemButton(new flixel_system_debug_GraphicCloseButton(0,0),tmp));
	this.removeButton.set_y((20 - this.removeButton.get_height()) / 2);
	this.removeButton.set_alpha(0.3);
};
$hxClasses["flixel.system.debug.watch.WatchEntry"] = flixel_system_debug_watch_WatchEntry;
flixel_system_debug_watch_WatchEntry.__name__ = ["flixel","system","debug","watch","WatchEntry"];
flixel_system_debug_watch_WatchEntry.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_system_debug_watch_WatchEntry.__super__ = openfl_display_Sprite;
flixel_system_debug_watch_WatchEntry.prototype = $extend(openfl_display_Sprite.prototype,{
	data: null
	,displayName: null
	,nameText: null
	,valueText: null
	,removeButton: null
	,defaultFormat: null
	,getTextColor: function() {
		var _g = this.data;
		switch(_g[1]) {
		case 0:
			return 16777215;
		case 1:
			return 10875373;
		case 2:
			return 12910211;
		}
	}
	,initTextField: function(textField) {
		textField.set_selectable(true);
		textField.set_defaultTextFormat(this.defaultFormat);
		textField.set_autoSize(2);
		textField.set_height(20);
		this.addChild(textField);
		return textField;
	}
	,updateSize: function(nameWidth,windowWidth) {
		var textWidth = windowWidth - this.removeButton.get_width() - 4;
		this.nameText.set_width(nameWidth);
		this.valueText.set_x(nameWidth + 4);
		this.valueText.set_width(textWidth - nameWidth - 4);
		this.removeButton.set_x(textWidth);
	}
	,updateName: function() {
		if(this.displayName != null) {
			this.setNameText(this.displayName);
			return;
		}
		var _g = this.data;
		switch(_g[1]) {
		case 0:
			var field = _g[3];
			var object = _g[2];
			this.setNameText(flixel_util_FlxStringUtil.getClassName(object,true) + "." + field);
			break;
		case 1:
			break;
		case 2:
			var expression = _g[2];
			this.setNameText(expression);
			break;
		}
	}
	,setNameText: function(name) {
		this.nameText.set_text(name);
		var currentWidth = this.nameText.get_textWidth() + 4;
		this.nameText.set_width(Math.min(currentWidth,125));
	}
	,getValue: function() {
		var _g = this.data;
		switch(_g[1]) {
		case 0:
			var field = _g[3];
			var object = _g[2];
			var tmp;
			var tmp1;
			if(object == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(object.__properties__) {
					tmp = object.__properties__["get_" + field];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = object[tmp]();
				} else {
					tmp1 = object[field];
				}
			}
			return tmp1;
		case 1:
			var value = _g[2];
			return value;
		case 2:
			var expression = _g[2];
			return flixel_system_debug_console_ConsoleUtil.runCommand(expression);
		}
	}
	,getFormattedValue: function() {
		var value = this.getValue();
		if(typeof(value) == "number") {
			value = flixel_math_FlxMath.roundDecimal(value,flixel_FlxG["debugger"].precision);
		}
		return Std.string(value);
	}
	,submitValue: function(value) {
		var _g = this.data;
		if(_g[1] == 0) {
			var field = _g[3];
			var object = _g[2];
			var tmp;
			var tmp1;
			if(object.__properties__) {
				tmp = object.__properties__["set_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				object[tmp](value);
			} else {
				object[field] = value;
			}
		}
	}
	,updateValue: function() {
		if(!this.valueText.isEditing) {
			this.valueText.set_text(this.getFormattedValue());
		}
	}
	,getNameWidth: function() {
		return this.nameText.get_width();
	}
	,getMinWidth: function() {
		return this.valueText.get_x() + 8 + this.removeButton.get_width();
	}
	,destroy: function() {
		this.nameText = flixel_util_FlxDestroyUtil.removeChild(this,this.nameText);
		flixel_util_FlxDestroyUtil.destroy(this.valueText);
		this.valueText = flixel_util_FlxDestroyUtil.removeChild(this,this.valueText);
	}
	,__class__: flixel_system_debug_watch_WatchEntry
});
var flixel_system_debug_watch_WatchEntryData = $hxClasses["flixel.system.debug.watch.WatchEntryData"] = { __ename__ : ["flixel","system","debug","watch","WatchEntryData"], __constructs__ : ["FIELD","QUICK","EXPRESSION"] };
flixel_system_debug_watch_WatchEntryData.FIELD = function(object,field) { var $x = ["FIELD",0,object,field]; $x.__enum__ = flixel_system_debug_watch_WatchEntryData; $x.toString = $estr; return $x; };
flixel_system_debug_watch_WatchEntryData.QUICK = function(value) { var $x = ["QUICK",1,value]; $x.__enum__ = flixel_system_debug_watch_WatchEntryData; $x.toString = $estr; return $x; };
flixel_system_debug_watch_WatchEntryData.EXPRESSION = function(expression) { var $x = ["EXPRESSION",2,expression]; $x.__enum__ = flixel_system_debug_watch_WatchEntryData; $x.toString = $estr; return $x; };
flixel_system_debug_watch_WatchEntryData.__empty_constructs__ = [];
var flixel_system_frontEnds_FlxBrowser = $hxClasses["flixel.system.frontEnds.FlxBrowser"] = { __ename__ : ["flixel","system","frontEnds","FlxBrowser"], __constructs__ : ["INTERNET_EXPLORER","CHROME","FIREFOX","SAFARI","OPERA","UNKNOWN"] };
flixel_system_frontEnds_FlxBrowser.INTERNET_EXPLORER = ["INTERNET_EXPLORER",0];
flixel_system_frontEnds_FlxBrowser.INTERNET_EXPLORER.toString = $estr;
flixel_system_frontEnds_FlxBrowser.INTERNET_EXPLORER.__enum__ = flixel_system_frontEnds_FlxBrowser;
flixel_system_frontEnds_FlxBrowser.CHROME = ["CHROME",1];
flixel_system_frontEnds_FlxBrowser.CHROME.toString = $estr;
flixel_system_frontEnds_FlxBrowser.CHROME.__enum__ = flixel_system_frontEnds_FlxBrowser;
flixel_system_frontEnds_FlxBrowser.FIREFOX = ["FIREFOX",2];
flixel_system_frontEnds_FlxBrowser.FIREFOX.toString = $estr;
flixel_system_frontEnds_FlxBrowser.FIREFOX.__enum__ = flixel_system_frontEnds_FlxBrowser;
flixel_system_frontEnds_FlxBrowser.SAFARI = ["SAFARI",3];
flixel_system_frontEnds_FlxBrowser.SAFARI.toString = $estr;
flixel_system_frontEnds_FlxBrowser.SAFARI.__enum__ = flixel_system_frontEnds_FlxBrowser;
flixel_system_frontEnds_FlxBrowser.OPERA = ["OPERA",4];
flixel_system_frontEnds_FlxBrowser.OPERA.toString = $estr;
flixel_system_frontEnds_FlxBrowser.OPERA.__enum__ = flixel_system_frontEnds_FlxBrowser;
flixel_system_frontEnds_FlxBrowser.UNKNOWN = ["UNKNOWN",5];
flixel_system_frontEnds_FlxBrowser.UNKNOWN.toString = $estr;
flixel_system_frontEnds_FlxBrowser.UNKNOWN.__enum__ = flixel_system_frontEnds_FlxBrowser;
flixel_system_frontEnds_FlxBrowser.__empty_constructs__ = [flixel_system_frontEnds_FlxBrowser.INTERNET_EXPLORER,flixel_system_frontEnds_FlxBrowser.CHROME,flixel_system_frontEnds_FlxBrowser.FIREFOX,flixel_system_frontEnds_FlxBrowser.SAFARI,flixel_system_frontEnds_FlxBrowser.OPERA,flixel_system_frontEnds_FlxBrowser.UNKNOWN];
var flixel_system_frontEnds_FlxPlatform = $hxClasses["flixel.system.frontEnds.FlxPlatform"] = { __ename__ : ["flixel","system","frontEnds","FlxPlatform"], __constructs__ : ["WINDOWS","LINUX","MAC","ANDROID","BLACKBERRY","WINDOWS_PHONE","IOS","UNKNOWN"] };
flixel_system_frontEnds_FlxPlatform.WINDOWS = ["WINDOWS",0];
flixel_system_frontEnds_FlxPlatform.WINDOWS.toString = $estr;
flixel_system_frontEnds_FlxPlatform.WINDOWS.__enum__ = flixel_system_frontEnds_FlxPlatform;
flixel_system_frontEnds_FlxPlatform.LINUX = ["LINUX",1];
flixel_system_frontEnds_FlxPlatform.LINUX.toString = $estr;
flixel_system_frontEnds_FlxPlatform.LINUX.__enum__ = flixel_system_frontEnds_FlxPlatform;
flixel_system_frontEnds_FlxPlatform.MAC = ["MAC",2];
flixel_system_frontEnds_FlxPlatform.MAC.toString = $estr;
flixel_system_frontEnds_FlxPlatform.MAC.__enum__ = flixel_system_frontEnds_FlxPlatform;
flixel_system_frontEnds_FlxPlatform.ANDROID = ["ANDROID",3];
flixel_system_frontEnds_FlxPlatform.ANDROID.toString = $estr;
flixel_system_frontEnds_FlxPlatform.ANDROID.__enum__ = flixel_system_frontEnds_FlxPlatform;
flixel_system_frontEnds_FlxPlatform.BLACKBERRY = ["BLACKBERRY",4];
flixel_system_frontEnds_FlxPlatform.BLACKBERRY.toString = $estr;
flixel_system_frontEnds_FlxPlatform.BLACKBERRY.__enum__ = flixel_system_frontEnds_FlxPlatform;
flixel_system_frontEnds_FlxPlatform.WINDOWS_PHONE = ["WINDOWS_PHONE",5];
flixel_system_frontEnds_FlxPlatform.WINDOWS_PHONE.toString = $estr;
flixel_system_frontEnds_FlxPlatform.WINDOWS_PHONE.__enum__ = flixel_system_frontEnds_FlxPlatform;
flixel_system_frontEnds_FlxPlatform.IOS = function(device) { var $x = ["IOS",6,device]; $x.__enum__ = flixel_system_frontEnds_FlxPlatform; $x.toString = $estr; return $x; };
flixel_system_frontEnds_FlxPlatform.UNKNOWN = ["UNKNOWN",7];
flixel_system_frontEnds_FlxPlatform.UNKNOWN.toString = $estr;
flixel_system_frontEnds_FlxPlatform.UNKNOWN.__enum__ = flixel_system_frontEnds_FlxPlatform;
flixel_system_frontEnds_FlxPlatform.__empty_constructs__ = [flixel_system_frontEnds_FlxPlatform.WINDOWS,flixel_system_frontEnds_FlxPlatform.LINUX,flixel_system_frontEnds_FlxPlatform.MAC,flixel_system_frontEnds_FlxPlatform.ANDROID,flixel_system_frontEnds_FlxPlatform.BLACKBERRY,flixel_system_frontEnds_FlxPlatform.WINDOWS_PHONE,flixel_system_frontEnds_FlxPlatform.UNKNOWN];
var flixel_system_frontEnds_FlxIOSDevice = $hxClasses["flixel.system.frontEnds.FlxIOSDevice"] = { __ename__ : ["flixel","system","frontEnds","FlxIOSDevice"], __constructs__ : ["IPHONE","IPAD","IPOD"] };
flixel_system_frontEnds_FlxIOSDevice.IPHONE = ["IPHONE",0];
flixel_system_frontEnds_FlxIOSDevice.IPHONE.toString = $estr;
flixel_system_frontEnds_FlxIOSDevice.IPHONE.__enum__ = flixel_system_frontEnds_FlxIOSDevice;
flixel_system_frontEnds_FlxIOSDevice.IPAD = ["IPAD",1];
flixel_system_frontEnds_FlxIOSDevice.IPAD.toString = $estr;
flixel_system_frontEnds_FlxIOSDevice.IPAD.__enum__ = flixel_system_frontEnds_FlxIOSDevice;
flixel_system_frontEnds_FlxIOSDevice.IPOD = ["IPOD",2];
flixel_system_frontEnds_FlxIOSDevice.IPOD.toString = $estr;
flixel_system_frontEnds_FlxIOSDevice.IPOD.__enum__ = flixel_system_frontEnds_FlxIOSDevice;
flixel_system_frontEnds_FlxIOSDevice.__empty_constructs__ = [flixel_system_frontEnds_FlxIOSDevice.IPHONE,flixel_system_frontEnds_FlxIOSDevice.IPAD,flixel_system_frontEnds_FlxIOSDevice.IPOD];
var flixel_system_frontEnds_PluginFrontEnd = function() {
	this.list = [];
	this.add_flixel_util_FlxTimerManager(flixel_util_FlxTimer.globalManager = new flixel_util_FlxTimerManager());
	this.add_flixel_tweens_FlxTweenManager(flixel_tweens_FlxTween.globalManager = new flixel_tweens_FlxTweenManager());
};
$hxClasses["flixel.system.frontEnds.PluginFrontEnd"] = flixel_system_frontEnds_PluginFrontEnd;
flixel_system_frontEnds_PluginFrontEnd.__name__ = ["flixel","system","frontEnds","PluginFrontEnd"];
flixel_system_frontEnds_PluginFrontEnd.prototype = {
	add_flixel_input_mouse_FlxMouseEventManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Plugin,true) == flixel_util_FlxStringUtil.getClassName(plugin,true)) {
				return Plugin;
			}
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_tweens_FlxTweenManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Plugin,true) == flixel_util_FlxStringUtil.getClassName(plugin,true)) {
				return Plugin;
			}
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,add_flixel_util_FlxTimerManager: function(Plugin) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(flixel_util_FlxStringUtil.getClassName(Plugin,true) == flixel_util_FlxStringUtil.getClassName(plugin,true)) {
				return Plugin;
			}
		}
		this.list.push(Plugin);
		return Plugin;
	}
	,list: null
	,get: function(ClassType) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(plugin,ClassType)) {
				return plugin;
			}
		}
		return null;
	}
	,remove: function(Plugin) {
		var i = this.list.length - 1;
		while(i >= 0) {
			if(this.list[i] == Plugin) {
				this.list.splice(i,1);
				return Plugin;
			}
			--i;
		}
		return Plugin;
	}
	,removeType: function(ClassType) {
		var results = false;
		var i = this.list.length - 1;
		while(i >= 0) {
			if(js_Boot.__instanceof(this.list[i],ClassType)) {
				this.list.splice(i,1);
				results = true;
			}
			--i;
		}
		return results;
	}
	,update: function(elapsed) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.active) {
				plugin.update(elapsed);
			}
		}
	}
	,draw: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var plugin = _g1[_g];
			++_g;
			if(plugin.exists && plugin.visible) {
				plugin.draw();
			}
		}
	}
	,__class__: flixel_system_frontEnds_PluginFrontEnd
};
var flixel_system_frontEnds_SoundFrontEnd = function() {
	this.volume = 1;
	this.list = new flixel_group_FlxTypedGroup();
	this.defaultSoundGroup = new flixel_system_FlxSoundGroup();
	this.defaultMusicGroup = new flixel_system_FlxSoundGroup();
	this.soundTrayEnabled = true;
	this.muteKeys = [48,96];
	this.volumeDownKeys = [189,109];
	this.volumeUpKeys = [187,107];
	this.muted = false;
	this.loadSavedPrefs();
};
$hxClasses["flixel.system.frontEnds.SoundFrontEnd"] = flixel_system_frontEnds_SoundFrontEnd;
flixel_system_frontEnds_SoundFrontEnd.__name__ = ["flixel","system","frontEnds","SoundFrontEnd"];
flixel_system_frontEnds_SoundFrontEnd.prototype = {
	music: null
	,muted: null
	,volumeHandler: null
	,volumeUpKeys: null
	,volumeDownKeys: null
	,muteKeys: null
	,soundTrayEnabled: null
	,defaultMusicGroup: null
	,defaultSoundGroup: null
	,list: null
	,volume: null
	,playMusic: function(Music,Volume,Looped,Group) {
		if(Looped == null) {
			Looped = true;
		}
		if(Volume == null) {
			Volume = 1;
		}
		if(this.music == null) {
			this.music = new flixel_system_FlxSound();
		} else if(this.music.active) {
			var _this = this.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		this.music.loadEmbedded(Music,Looped);
		this.music.set_volume(Volume);
		this.music.persist = true;
		this.music.set_group(Group == null ? this.defaultMusicGroup : Group);
		this.music.play();
	}
	,load: function(EmbeddedSound,Volume,Looped,Group,AutoDestroy,AutoPlay,URL,OnComplete) {
		if(AutoPlay == null) {
			AutoPlay = false;
		}
		if(AutoDestroy == null) {
			AutoDestroy = false;
		}
		if(Looped == null) {
			Looped = false;
		}
		if(Volume == null) {
			Volume = 1;
		}
		if(EmbeddedSound == null && URL == null) {
			flixel_FlxG.log.advanced("FlxG.loadSound() requires either\nan embedded sound or a URL to work.",flixel_system_debug_log_LogStyle.WARNING,true);
			return null;
		}
		var sound = this.list.recycle(flixel_system_FlxSound);
		if(EmbeddedSound != null) {
			sound.loadEmbedded(EmbeddedSound,Looped,AutoDestroy,OnComplete);
		} else {
			sound.loadStream(URL,Looped,AutoDestroy,OnComplete);
		}
		sound.set_volume(Volume);
		if(AutoPlay) {
			sound.play();
		}
		sound.set_group(Group == null ? this.defaultSoundGroup : Group);
		return sound;
	}
	,cache: function(EmbeddedSound) {
		if(openfl_Assets.exists(EmbeddedSound,"SOUND") || openfl_Assets.exists(EmbeddedSound,"MUSIC")) {
			return openfl_Assets.getSound(EmbeddedSound,true);
		}
		flixel_FlxG.log.advanced("Could not find a Sound asset with an ID of '" + EmbeddedSound + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
		return null;
	}
	,cacheAll: function() {
		var _g = 0;
		var _g1 = openfl_Assets.list("SOUND");
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(openfl_Assets.exists(id,"SOUND") || openfl_Assets.exists(id,"MUSIC")) {
				openfl_Assets.getSound(id,true);
			} else {
				flixel_FlxG.log.advanced("Could not find a Sound asset with an ID of '" + id + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
			}
		}
	}
	,play: function(EmbeddedSound,Volume,Looped,Group,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) {
			AutoDestroy = true;
		}
		if(Looped == null) {
			Looped = false;
		}
		if(Volume == null) {
			Volume = 1;
		}
		if(typeof(EmbeddedSound) == "string") {
			if(openfl_Assets.exists(EmbeddedSound,"SOUND") || openfl_Assets.exists(EmbeddedSound,"MUSIC")) {
				EmbeddedSound = openfl_Assets.getSound(EmbeddedSound,true);
			} else {
				flixel_FlxG.log.advanced("Could not find a Sound asset with an ID of '" + EmbeddedSound + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
				EmbeddedSound = null;
			}
		}
		var sound = this.list.recycle(flixel_system_FlxSound).loadEmbedded(EmbeddedSound,Looped,AutoDestroy,OnComplete);
		sound.set_volume(Volume);
		sound.set_group(Group == null ? this.defaultSoundGroup : Group);
		return sound.play();
	}
	,stream: function(URL,Volume,Looped,Group,AutoDestroy,OnComplete) {
		if(AutoDestroy == null) {
			AutoDestroy = true;
		}
		if(Looped == null) {
			Looped = false;
		}
		if(Volume == null) {
			Volume = 1;
		}
		return this.load(null,Volume,Looped,null,AutoDestroy,true,URL,OnComplete);
	}
	,pause: function() {
		if(this.music != null && this.music.exists && this.music.active) {
			this.music.pause();
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists && sound.active) {
				sound.pause();
			}
		}
	}
	,resume: function() {
		if(this.music != null && this.music.exists) {
			this.music.resume();
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && sound.exists) {
				sound.resume();
			}
		}
	}
	,destroy: function(ForceDestroy) {
		if(ForceDestroy == null) {
			ForceDestroy = false;
		}
		if(this.music != null && (ForceDestroy || !this.music.persist)) {
			this.music.destroy();
			this.music = null;
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null && (ForceDestroy || !sound.persist)) {
				sound.destroy();
			}
		}
	}
	,toggleMuted: function() {
		this.muted = !this.muted;
		if(this.volumeHandler != null) {
			this.volumeHandler(this.muted ? 0 : this.volume);
		}
		this.showSoundTray();
	}
	,changeVolume: function(Amount) {
		this.muted = false;
		var _g = this;
		_g.set_volume(_g.volume + Amount);
		this.showSoundTray();
	}
	,showSoundTray: function() {
		if(flixel_FlxG.game.soundTray != null && this.soundTrayEnabled) {
			flixel_FlxG.game.soundTray.show();
		}
	}
	,update: function(elapsed) {
		if(this.music != null && this.music.active) {
			this.music.update(elapsed);
		}
		if(this.list != null && this.list.active) {
			this.list.update(elapsed);
		}
		if(flixel_FlxG.keys.checkKeyArrayState(this.muteKeys,-1)) {
			this.toggleMuted();
		} else if(flixel_FlxG.keys.checkKeyArrayState(this.volumeUpKeys,-1)) {
			this.changeVolume(0.1);
		} else if(flixel_FlxG.keys.checkKeyArrayState(this.volumeDownKeys,-1)) {
			this.changeVolume(-0.1);
		}
	}
	,onFocusLost: function() {
		if(this.music != null) {
			this.music.onFocusLost();
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) {
				sound.onFocusLost();
			}
		}
	}
	,onFocus: function() {
		if(this.music != null) {
			this.music.onFocus();
		}
		var _g = 0;
		var _g1 = this.list.members;
		while(_g < _g1.length) {
			var sound = _g1[_g];
			++_g;
			if(sound != null) {
				sound.onFocus();
			}
		}
	}
	,loadSavedPrefs: function() {
		if(flixel_FlxG.save.data.volume != null) {
			this.set_volume(flixel_FlxG.save.data.volume);
		}
		if(flixel_FlxG.save.data.mute != null) {
			this.muted = flixel_FlxG.save.data.mute;
		}
	}
	,set_volume: function(Volume) {
		var lowerBound = Volume < 0 ? 0 : Volume;
		if(lowerBound > 1) {
			Volume = 1;
		} else {
			Volume = lowerBound;
		}
		if(this.volumeHandler != null) {
			var param = this.muted ? 0 : Volume;
			this.volumeHandler(param);
		}
		return this.volume = Volume;
	}
	,__class__: flixel_system_frontEnds_SoundFrontEnd
	,__properties__: {set_volume:"set_volume"}
};
var flixel_system_frontEnds_VCRFrontEnd = function() {
	this.stepRequested = false;
	this.paused = false;
};
$hxClasses["flixel.system.frontEnds.VCRFrontEnd"] = flixel_system_frontEnds_VCRFrontEnd;
flixel_system_frontEnds_VCRFrontEnd.__name__ = ["flixel","system","frontEnds","VCRFrontEnd"];
flixel_system_frontEnds_VCRFrontEnd.prototype = {
	paused: null
	,stepRequested: null
	,pause: function() {
		if(!this.paused) {
			if(!flixel_FlxG.mouse.useSystemCursor) {
				openfl_ui_Mouse.show();
			}
			this.paused = true;
			var _this = flixel_FlxG.game["debugger"].vcr;
			_this.playbackToggleBtn.upHandler = ($_=flixel_FlxG.vcr,$bind($_,$_.resume));
			_this.playbackToggleBtn.changeIcon(new flixel_system_debug_GraphicArrowRight(0,0));
		}
	}
	,resume: function() {
		if(this.paused) {
			if(!flixel_FlxG.mouse.useSystemCursor) {
				openfl_ui_Mouse.hide();
			}
			this.paused = false;
			var _this = flixel_FlxG.game["debugger"].vcr;
			_this.playbackToggleBtn.upHandler = ($_=flixel_FlxG.vcr,$bind($_,$_.pause));
			_this.playbackToggleBtn.changeIcon(new flixel_system_debug__$VCR_GraphicPause(0,0));
		}
	}
	,__class__: flixel_system_frontEnds_VCRFrontEnd
};
var flixel_system_macros_FlxMacroUtil = function() { };
$hxClasses["flixel.system.macros.FlxMacroUtil"] = flixel_system_macros_FlxMacroUtil;
flixel_system_macros_FlxMacroUtil.__name__ = ["flixel","system","macros","FlxMacroUtil"];
var flixel_system_replay_CodeValuePair = function(code,value) {
	this.code = code;
	this.value = value;
};
$hxClasses["flixel.system.replay.CodeValuePair"] = flixel_system_replay_CodeValuePair;
flixel_system_replay_CodeValuePair.__name__ = ["flixel","system","replay","CodeValuePair"];
flixel_system_replay_CodeValuePair.prototype = {
	code: null
	,value: null
	,__class__: flixel_system_replay_CodeValuePair
};
var flixel_system_replay_MouseRecord = function(x,y,button,wheel) {
	this.x = x;
	this.y = y;
	this.button = button;
	this.wheel = wheel;
};
$hxClasses["flixel.system.replay.MouseRecord"] = flixel_system_replay_MouseRecord;
flixel_system_replay_MouseRecord.__name__ = ["flixel","system","replay","MouseRecord"];
flixel_system_replay_MouseRecord.prototype = {
	x: null
	,y: null
	,button: null
	,wheel: null
	,__class__: flixel_system_replay_MouseRecord
};
var flixel_system_scaleModes_PixelPerfectScaleMode = function() {
	flixel_system_scaleModes_BaseScaleMode.call(this);
};
$hxClasses["flixel.system.scaleModes.PixelPerfectScaleMode"] = flixel_system_scaleModes_PixelPerfectScaleMode;
flixel_system_scaleModes_PixelPerfectScaleMode.__name__ = ["flixel","system","scaleModes","PixelPerfectScaleMode"];
flixel_system_scaleModes_PixelPerfectScaleMode.__super__ = flixel_system_scaleModes_BaseScaleMode;
flixel_system_scaleModes_PixelPerfectScaleMode.prototype = $extend(flixel_system_scaleModes_BaseScaleMode.prototype,{
	updateGameSize: function(Width,Height) {
		var scaleFactorX = Width / flixel_FlxG.width;
		var scaleFactorY = Height / flixel_FlxG.height;
		var scaleFactor = Math.floor(Math.min(scaleFactorX,scaleFactorY));
		if(scaleFactor < 1) {
			scaleFactor = 1;
		}
		this.gameSize.set_x(flixel_FlxG.width * scaleFactor);
		this.gameSize.set_y(flixel_FlxG.height * scaleFactor);
	}
	,__class__: flixel_system_scaleModes_PixelPerfectScaleMode
});
var flixel_system_ui_FlxFocusLostScreen = function() {
	openfl_display_Sprite.call(this);
	this.draw();
	var logo = new openfl_display_Sprite();
	flixel_system_FlxAssets.drawLogo(logo.get_graphics());
	logo.set_scaleX(logo.set_scaleY(0.2));
	logo.set_x(logo.set_y(5));
	logo.set_alpha(0.35);
	this.addChild(logo);
	this.set_visible(false);
};
$hxClasses["flixel.system.ui.FlxFocusLostScreen"] = flixel_system_ui_FlxFocusLostScreen;
flixel_system_ui_FlxFocusLostScreen.__name__ = ["flixel","system","ui","FlxFocusLostScreen"];
flixel_system_ui_FlxFocusLostScreen.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxFocusLostScreen.prototype = $extend(openfl_display_Sprite.prototype,{
	draw: function() {
		var gfx = this.get_graphics();
		var screenWidth = openfl_Lib.current.stage.stageWidth | 0;
		var screenHeight = openfl_Lib.current.stage.stageHeight | 0;
		gfx.clear();
		gfx.moveTo(0,0);
		gfx.beginFill(0,0.5);
		gfx.drawRect(0,0,screenWidth,screenHeight);
		gfx.endFill();
		var halfWidth = screenWidth / 2 | 0;
		var halfHeight = screenHeight / 2 | 0;
		var helper = Math.min(halfWidth,halfHeight) / 3 | 0;
		gfx.moveTo(halfWidth - helper,halfHeight - helper);
		gfx.beginFill(16777215,0.65);
		gfx.lineTo(halfWidth + helper,halfHeight);
		gfx.lineTo(halfWidth - helper,halfHeight + helper);
		gfx.lineTo(halfWidth - helper,halfHeight - helper);
		gfx.endFill();
		this.set_x(-flixel_FlxG.scaleMode.offset.x);
		this.set_y(-flixel_FlxG.scaleMode.offset.y);
	}
	,__class__: flixel_system_ui_FlxFocusLostScreen
});
var flixel_system_ui_FlxSoundTray = function() {
	this._defaultScale = 2.0;
	this._width = 80;
	openfl_display_Sprite.call(this);
	this.set_visible(false);
	this.set_scaleX(this._defaultScale);
	this.set_scaleY(this._defaultScale);
	var tmp = new openfl_display_Bitmap(new openfl_display_BitmapData(this._width,30,true,2130706432));
	this.screenCenter();
	this.addChild(tmp);
	var text = new openfl_text_TextField();
	text.set_width(tmp.get_width());
	text.set_height(tmp.get_height());
	text.set_multiline(true);
	text.set_wordWrap(true);
	text.set_selectable(false);
	var dtf = new openfl_text_TextFormat(flixel_system_FlxAssets.FONT_DEFAULT,10,16777215);
	dtf.align = 0;
	text.set_defaultTextFormat(dtf);
	this.addChild(text);
	text.set_text("VOLUME");
	text.set_y(16);
	var bx = 10;
	var by = 14;
	this._bars = [];
	var _g = 0;
	while(_g < 10) {
		var i = _g++;
		tmp = new openfl_display_Bitmap(new openfl_display_BitmapData(4,i + 1,false,-1));
		tmp.set_x(bx);
		tmp.set_y(by);
		this.addChild(tmp);
		this._bars.push(tmp);
		bx += 6;
		--by;
	}
	this.set_y(-this.get_height());
	this.set_visible(false);
};
$hxClasses["flixel.system.ui.FlxSoundTray"] = flixel_system_ui_FlxSoundTray;
flixel_system_ui_FlxSoundTray.__name__ = ["flixel","system","ui","FlxSoundTray"];
flixel_system_ui_FlxSoundTray.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxSoundTray.prototype = $extend(openfl_display_Sprite.prototype,{
	active: null
	,_timer: null
	,_bars: null
	,_width: null
	,_defaultScale: null
	,update: function(MS) {
		if(this._timer > 0) {
			this._timer -= MS / 1000;
		} else if(this.get_y() > -this.get_height()) {
			var _g = this;
			_g.set_y(_g.get_y() - MS / 1000 * flixel_FlxG.height * 2);
			if(this.get_y() <= -this.get_height()) {
				this.set_visible(false);
				this.active = false;
				flixel_FlxG.save.data.mute = flixel_FlxG.sound.muted;
				flixel_FlxG.save.data.volume = flixel_FlxG.sound.volume;
				flixel_FlxG.save.flush();
			}
		}
	}
	,show: function(Silent) {
		if(Silent == null) {
			Silent = false;
		}
		if(!Silent) {
			var sound = openfl_Assets.getSound("flixel/sounds/beep" + ".ogg");
			if(sound != null) {
				flixel_FlxG.sound.load(sound).play();
			}
		}
		this._timer = 1;
		this.set_y(0);
		this.set_visible(true);
		this.active = true;
		var globalVolume = Math.round(flixel_FlxG.sound.volume * 10);
		if(flixel_FlxG.sound.muted) {
			globalVolume = 0;
		}
		var _g1 = 0;
		var _g = this._bars.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < globalVolume) {
				this._bars[i].set_alpha(1);
			} else {
				this._bars[i].set_alpha(0.5);
			}
		}
	}
	,screenCenter: function() {
		this.set_scaleX(this._defaultScale);
		this.set_scaleY(this._defaultScale);
		this.set_x(0.5 * (openfl_Lib.current.stage.stageWidth - this._width * this._defaultScale) - flixel_FlxG.game.get_x());
	}
	,__class__: flixel_system_ui_FlxSoundTray
});
var flixel_system_ui_FlxSystemButton = function(Icon,UpHandler,ToggleMode) {
	if(ToggleMode == null) {
		ToggleMode = false;
	}
	this._mouseDown = false;
	this.toggled = false;
	this.toggleMode = false;
	this.enabled = true;
	openfl_display_Sprite.call(this);
	if(Icon != null) {
		this.changeIcon(Icon);
	}
	this.upHandler = UpHandler;
	this.toggleMode = ToggleMode;
	this.addEventListener("mouseUp",$bind(this,this.onMouseUp));
	this.addEventListener("mouseDown",$bind(this,this.onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.onMouseOver));
};
$hxClasses["flixel.system.ui.FlxSystemButton"] = flixel_system_ui_FlxSystemButton;
flixel_system_ui_FlxSystemButton.__name__ = ["flixel","system","ui","FlxSystemButton"];
flixel_system_ui_FlxSystemButton.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_system_ui_FlxSystemButton.__super__ = openfl_display_Sprite;
flixel_system_ui_FlxSystemButton.prototype = $extend(openfl_display_Sprite.prototype,{
	upHandler: null
	,enabled: null
	,toggleMode: null
	,toggled: null
	,_icon: null
	,_mouseDown: null
	,changeIcon: function(Icon) {
		if(this._icon != null) {
			this.removeChild(this._icon);
		}
		flixel_system_debug_DebuggerUtil.fixSize(Icon);
		this._icon = new openfl_display_Bitmap(Icon);
		this.addChild(this._icon);
	}
	,destroy: function() {
		this.removeEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.removeEventListener("mouseDown",$bind(this,this.onMouseDown));
		this.removeEventListener("mouseOut",$bind(this,this.onMouseOut));
		this.removeEventListener("mouseOver",$bind(this,this.onMouseOver));
		this._icon = null;
		this.upHandler = null;
	}
	,onMouseUp: function(_) {
		if(this.enabled && this._mouseDown) {
			this.set_toggled(!this.toggled);
			this._mouseDown = false;
			if(this.upHandler != null) {
				this.upHandler();
			}
		}
	}
	,onMouseDown: function(_) {
		this._mouseDown = true;
	}
	,onMouseOver: function(_) {
		if(this.enabled) {
			var _g = this;
			_g.set_alpha(_g.get_alpha() - 0.2);
		}
	}
	,onMouseOut: function(_) {
		if(this.enabled) {
			var _g = this;
			_g.set_alpha(_g.get_alpha() + 0.2);
		}
	}
	,set_toggled: function(Value) {
		if(this.toggleMode) {
			this.set_alpha(Value ? 0.3 : 1);
		}
		return this.toggled = Value;
	}
	,__class__: flixel_system_ui_FlxSystemButton
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_toggled:"set_toggled"})
});
var flixel_text_FlxBitmapText = function(font) {
	this.pendingPixelsChange = true;
	this.pendingTextBitmapChange = true;
	this.pendingTextChange = true;
	this.numLines = 0;
	this.multiLine = true;
	this.backgroundColor = 0;
	this.background = false;
	this.borderQuality = 0;
	this.borderSize = 1;
	this.borderColor = -16777216;
	this.borderStyle = flixel_text_FlxTextBorderStyle.NONE;
	this.useTextColor = false;
	this.textColor = -1;
	this.numSpacesInTab = 4;
	this.padding = 0;
	this.autoSize = true;
	this.wrapByWord = true;
	this.wordWrap = true;
	this.autoUpperCase = false;
	this.letterSpacing = 0;
	this.lineSpacing = 0;
	this.alignment = "left";
	this._linesWidth = [];
	this._lines = [];
	this._colorParams = new openfl_geom_ColorTransform();
	this.text = "";
	flixel_FlxSprite.call(this);
	this.set_width(this.set_fieldWidth(2));
	this.set_alpha(1);
	this.set_font(font == null ? flixel_graphics_frames_FlxBitmapFont.getDefaultFont() : font);
	var point = flixel_math_FlxPoint._pool.get().set(1,1);
	point._inPool = false;
	this.shadowOffset = point;
	if(flixel_FlxG.renderBlit) {
		this.set_pixels(new openfl_display_BitmapData(1,1,true,0));
	} else {
		this.textData = [];
		this.textDrawData = [];
		this.borderDrawData = [];
	}
};
$hxClasses["flixel.text.FlxBitmapText"] = flixel_text_FlxBitmapText;
flixel_text_FlxBitmapText.__name__ = ["flixel","text","FlxBitmapText"];
flixel_text_FlxBitmapText.__super__ = flixel_FlxSprite;
flixel_text_FlxBitmapText.prototype = $extend(flixel_FlxSprite.prototype,{
	font: null
	,text: null
	,_colorParams: null
	,_lines: null
	,_linesWidth: null
	,alignment: null
	,lineSpacing: null
	,letterSpacing: null
	,autoUpperCase: null
	,wordWrap: null
	,wrapByWord: null
	,autoSize: null
	,padding: null
	,textWidth: null
	,textHeight: null
	,lineHeight: null
	,numSpacesInTab: null
	,textColor: null
	,useTextColor: null
	,borderStyle: null
	,borderColor: null
	,borderSize: null
	,borderQuality: null
	,shadowOffset: null
	,background: null
	,backgroundColor: null
	,multiLine: null
	,numLines: null
	,_fieldWidth: null
	,pendingTextChange: null
	,pendingTextBitmapChange: null
	,pendingPixelsChange: null
	,textData: null
	,textDrawData: null
	,borderDrawData: null
	,textBitmap: null
	,destroy: function() {
		this.set_font(null);
		this.set_text(null);
		this._lines = null;
		this._linesWidth = null;
		this.shadowOffset = flixel_util_FlxDestroyUtil.put(this.shadowOffset);
		this.textBitmap = flixel_util_FlxDestroyUtil.dispose(this.textBitmap);
		this._colorParams = null;
		if(flixel_FlxG.renderTile) {
			this.textData = null;
			this.textDrawData = null;
			this.borderDrawData = null;
		}
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,drawFrame: function(Force) {
		if(Force == null) {
			Force = false;
		}
		if(flixel_FlxG.renderTile) {
			Force = true;
		}
		this.pendingTextBitmapChange = this.pendingTextBitmapChange || Force;
		if(this.pendingTextChange) {
			this.updateText();
			this.pendingTextBitmapChange = true;
		}
		if(this.pendingTextBitmapChange) {
			this.updateTextBitmap(false);
			this.pendingPixelsChange = true;
		}
		if(this.pendingPixelsChange) {
			this.updatePixels(false);
		}
		if(flixel_FlxG.renderBlit) {
			flixel_FlxSprite.prototype.drawFrame.call(this,Force);
		}
	}
	,checkPendingChanges: function(useTiles) {
		if(useTiles == null) {
			useTiles = false;
		}
		if(flixel_FlxG.renderBlit) {
			useTiles = false;
		}
		if(this.pendingTextChange) {
			this.updateText();
			this.pendingTextBitmapChange = true;
		}
		if(this.pendingTextBitmapChange) {
			this.updateTextBitmap(useTiles);
			this.pendingPixelsChange = true;
		}
		if(this.pendingPixelsChange) {
			this.updatePixels(useTiles);
		}
	}
	,draw: function() {
		if(flixel_FlxG.renderBlit) {
			if(this.pendingTextChange) {
				this.updateText();
				this.pendingTextBitmapChange = true;
			}
			if(this.pendingTextBitmapChange) {
				this.updateTextBitmap(false);
				this.pendingPixelsChange = true;
			}
			if(this.pendingPixelsChange) {
				this.updatePixels(false);
			}
			flixel_FlxSprite.prototype.draw.call(this);
		} else {
			var useTiles = true;
			if(flixel_FlxG.renderBlit) {
				useTiles = false;
			}
			if(this.pendingTextChange) {
				this.updateText();
				this.pendingTextBitmapChange = true;
			}
			if(this.pendingTextBitmapChange) {
				this.updateTextBitmap(useTiles);
				this.pendingPixelsChange = true;
			}
			if(this.pendingPixelsChange) {
				this.updatePixels(useTiles);
			}
			var textLength = this.textDrawData.length / 3 | 0;
			var borderLength = this.borderDrawData.length / 3 | 0;
			var dataPos;
			var cr = (this.color >> 16 & 255) / 255;
			var cg = (this.color >> 8 & 255) / 255;
			var cb = (this.color & 255) / 255;
			var borderRed = (this.borderColor >> 16 & 255) / 255 * cr;
			var borderGreen = (this.borderColor >> 8 & 255) / 255 * cg;
			var borderBlue = (this.borderColor & 255) / 255 * cb;
			var bAlpha = (this.borderColor >> 24 & 255) / 255 * this.alpha;
			var textRed = cr;
			var textGreen = cg;
			var textBlue = cb;
			var tAlpha = this.alpha;
			if(this.useTextColor) {
				textRed = cr * ((this.textColor >> 16 & 255) / 255);
				textGreen = cg * ((this.textColor >> 8 & 255) / 255);
				textBlue = cb * ((this.textColor & 255) / 255);
				tAlpha *= this.textColor >> 24 & 255;
			}
			var bgRed = cr;
			var bgGreen = cg;
			var bgBlue = cb;
			var bgAlpha = this.alpha;
			if(this.background) {
				bgRed = cr * ((this.backgroundColor >> 16 & 255) / 255);
				bgGreen = cg * ((this.backgroundColor >> 8 & 255) / 255);
				bgBlue = cb * ((this.backgroundColor & 255) / 255);
				bgAlpha *= (this.backgroundColor >> 24 & 255) / 255;
			}
			var drawItem;
			var currFrame = null;
			var currTileX = 0;
			var currTileY = 0;
			var sx = this.scale.x * this._facingHorizontalMult;
			var sy = this.scale.y * this._facingVerticalMult;
			var ox = this.origin.x;
			var oy = this.origin.y;
			if(this._facingHorizontalMult != 1) {
				ox = this.frameWidth - ox;
			}
			if(this._facingVerticalMult != 1) {
				oy = this.frameHeight - oy;
			}
			var _g = 0;
			var _g1 = this.get_cameras();
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) {
					continue;
				}
				this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
				if(this.isPixelPerfectRender(camera)) {
					var _this = this._point;
					_this.set_x(Math.floor(_this.x));
					_this.set_y(Math.floor(_this.y));
				}
				if(this._angleChanged) {
					var radians = this.angle * (Math.PI / 180);
					this._sinAngle = Math.sin(radians);
					this._cosAngle = Math.cos(radians);
					this._angleChanged = false;
				}
				if(this.background) {
					currFrame = flixel_FlxG.bitmap.get_whitePixel();
					this._matrix.identity();
					this._matrix.scale(0.1 * this.frameWidth,0.1 * this.frameHeight);
					this._matrix.translate(-ox,-oy);
					this._matrix.scale(sx,sy);
					if(this.angle != 0) {
						var _this1 = this._matrix;
						var cos = this._cosAngle;
						var sin = this._sinAngle;
						var a1 = _this1.a * cos - _this1.b * sin;
						_this1.b = _this1.a * sin + _this1.b * cos;
						_this1.a = a1;
						var c1 = _this1.c * cos - _this1.d * sin;
						_this1.d = _this1.c * sin + _this1.d * cos;
						_this1.c = c1;
						var tx1 = _this1.tx * cos - _this1.ty * sin;
						_this1.ty = _this1.tx * sin + _this1.ty * cos;
						_this1.tx = tx1;
					}
					this._matrix.translate(this._point.x + ox,this._point.y + oy);
					flixel_util_FlxColorTransformUtil.setMultipliers(this._colorParams,bgRed,bgGreen,bgBlue,bgAlpha);
					camera.drawPixels(currFrame,null,this._matrix,this._colorParams,this.blend,this.antialiasing);
				}
				var hasColorOffsets = this.colorTransform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(this.colorTransform);
				drawItem = camera.startQuadBatch(this.font.parent,true,hasColorOffsets,this.blend,this.antialiasing,this.shader);
				var _g3 = 0;
				while(_g3 < borderLength) {
					var j = _g3++;
					dataPos = j * 3;
					currFrame = this.font.charMap.get(this.borderDrawData[dataPos] | 0);
					currTileX = this.borderDrawData[dataPos + 1];
					currTileY = this.borderDrawData[dataPos + 2];
					currFrame.prepareMatrix(this._matrix);
					this._matrix.translate(currTileX - ox,currTileY - oy);
					this._matrix.scale(sx,sy);
					if(this.angle != 0) {
						var _this2 = this._matrix;
						var cos1 = this._cosAngle;
						var sin1 = this._sinAngle;
						var a11 = _this2.a * cos1 - _this2.b * sin1;
						_this2.b = _this2.a * sin1 + _this2.b * cos1;
						_this2.a = a11;
						var c11 = _this2.c * cos1 - _this2.d * sin1;
						_this2.d = _this2.c * sin1 + _this2.d * cos1;
						_this2.c = c11;
						var tx11 = _this2.tx * cos1 - _this2.ty * sin1;
						_this2.ty = _this2.tx * sin1 + _this2.ty * cos1;
						_this2.tx = tx11;
					}
					this._matrix.translate(this._point.x + ox,this._point.y + oy);
					flixel_util_FlxColorTransformUtil.setMultipliers(this._colorParams,borderRed,borderGreen,borderBlue,bAlpha);
					drawItem.addQuad(currFrame,this._matrix,this._colorParams);
				}
				var _g31 = 0;
				while(_g31 < textLength) {
					var j1 = _g31++;
					dataPos = j1 * 3;
					currFrame = this.font.charMap.get(this.textDrawData[dataPos] | 0);
					currTileX = this.textDrawData[dataPos + 1];
					currTileY = this.textDrawData[dataPos + 2];
					currFrame.prepareMatrix(this._matrix);
					this._matrix.translate(currTileX - ox,currTileY - oy);
					this._matrix.scale(sx,sy);
					if(this.angle != 0) {
						var _this3 = this._matrix;
						var cos2 = this._cosAngle;
						var sin2 = this._sinAngle;
						var a12 = _this3.a * cos2 - _this3.b * sin2;
						_this3.b = _this3.a * sin2 + _this3.b * cos2;
						_this3.a = a12;
						var c12 = _this3.c * cos2 - _this3.d * sin2;
						_this3.d = _this3.c * sin2 + _this3.d * cos2;
						_this3.c = c12;
						var tx12 = _this3.tx * cos2 - _this3.ty * sin2;
						_this3.ty = _this3.tx * sin2 + _this3.ty * cos2;
						_this3.tx = tx12;
					}
					this._matrix.translate(this._point.x + ox,this._point.y + oy);
					flixel_util_FlxColorTransformUtil.setMultipliers(this._colorParams,textRed,textGreen,textBlue,tAlpha);
					drawItem.addQuad(currFrame,this._matrix,this._colorParams);
				}
				flixel_FlxBasic.visibleCount++;
			}
			if(flixel_FlxG["debugger"].drawDebug) {
				this.drawDebug();
			}
		}
	}
	,set_color: function(Color) {
		flixel_FlxSprite.prototype.set_color.call(this,Color);
		if(flixel_FlxG.renderBlit) {
			this.pendingTextBitmapChange = true;
		}
		return this.color;
	}
	,set_alpha: function(value) {
		flixel_FlxSprite.prototype.set_alpha.call(this,value);
		if(flixel_FlxG.renderBlit) {
			this.pendingTextBitmapChange = true;
		}
		return value;
	}
	,set_textColor: function(value) {
		if(this.textColor != value) {
			this.textColor = value;
			if(flixel_FlxG.renderBlit) {
				this.pendingPixelsChange = true;
			}
		}
		return value;
	}
	,set_useTextColor: function(value) {
		if(this.useTextColor != value) {
			this.useTextColor = value;
			if(flixel_FlxG.renderBlit) {
				this.pendingPixelsChange = true;
			}
		}
		return value;
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		if(flixel_FlxG.renderTile) {
			this.drawFrame(RunOnCpp);
		} else {
			flixel_FlxSprite.prototype.calcFrame.call(this,RunOnCpp);
		}
	}
	,set_text: function(value) {
		if(value != this.text) {
			this.text = value;
			this.pendingTextChange = true;
		}
		return value;
	}
	,updateText: function() {
		var tmp = this.autoUpperCase ? this.text.toUpperCase() : this.text;
		this._lines = tmp.split("\n");
		if(!this.autoSize) {
			if(this.wordWrap) {
				this.wrap();
			} else {
				this.cutLines();
			}
		}
		if(!this.multiLine) {
			this._lines = [this._lines[0]];
		}
		var numLines = this._lines.length;
		var _g1 = 0;
		while(_g1 < numLines) {
			var i = _g1++;
			this._lines[i] = StringTools.rtrim(this._lines[i]);
		}
		this.pendingTextChange = false;
		this.pendingTextBitmapChange = true;
	}
	,computeTextSize: function() {
		var txtWidth = this.get_textWidth();
		var txtHeight = this.get_textHeight() + 2 * this.padding;
		if(this.autoSize) {
			txtWidth += 2 * this.padding;
		} else {
			txtWidth = this.get_fieldWidth();
		}
		this.frameWidth = txtWidth == 0 ? 1 : txtWidth;
		this.frameHeight = txtHeight == 0 ? 1 : txtHeight;
	}
	,getLineWidth: function(lineIndex) {
		if(lineIndex < 0 || lineIndex >= this._lines.length) {
			return 0;
		}
		return this.getStringWidth(this._lines[lineIndex]);
	}
	,getStringWidth: function(str) {
		var spaceWidth = this.font.spaceWidth;
		var tabWidth = spaceWidth * this.numSpacesInTab;
		var lineLength = str.length;
		var lineWidth = this.font.minOffsetX;
		var charCode;
		var charWidth;
		var charFrame;
		var _g1 = 0;
		while(_g1 < lineLength) {
			var c = _g1++;
			charCode = HxOverrides.cca(str,c);
			charWidth = 0;
			if(charCode == 32) {
				charWidth = spaceWidth;
			} else if(charCode == 9) {
				charWidth = tabWidth;
			} else if(this.font.charMap.exists(charCode)) {
				var _this = this.font;
				if(_this.charAdvance.exists(charCode)) {
					charWidth = _this.charAdvance.get(charCode);
				} else {
					charWidth = 0;
				}
				if(c == lineLength - 1) {
					charFrame = this.font.charMap.get(charCode);
					charWidth = charFrame.sourceSize.x | 0;
				}
			}
			lineWidth += charWidth + this.letterSpacing;
		}
		if(lineLength > 0) {
			lineWidth -= this.letterSpacing;
		}
		return lineWidth | 0;
	}
	,cutLines: function() {
		var newLines = [];
		var lineLength;
		var c;
		var charCode;
		var charWidth;
		var subLine;
		var subLineWidth;
		var spaceWidth = this.font.spaceWidth;
		var tabWidth = spaceWidth * this.numSpacesInTab;
		var startX = this.font.minOffsetX;
		var _g = 0;
		var _g1 = this._lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			lineLength = line.length;
			subLine = new haxe_Utf8();
			subLineWidth = startX;
			c = 0;
			while(c < lineLength) {
				charCode = HxOverrides.cca(line,c);
				if(charCode == 32) {
					charWidth = spaceWidth;
				} else if(charCode == 9) {
					charWidth = tabWidth;
				} else {
					var _this = this.font;
					if(_this.charAdvance.exists(charCode)) {
						charWidth = _this.charAdvance.get(charCode);
					} else {
						charWidth = 0;
					}
				}
				charWidth += this.letterSpacing;
				if(subLineWidth + charWidth > this._fieldWidth - 2 * this.padding) {
					subLine.__b += String.fromCharCode(charCode);
					newLines.push(subLine.__b);
					subLine = new haxe_Utf8();
					subLineWidth = startX;
					c = lineLength;
				} else {
					subLine.__b += String.fromCharCode(charCode);
					subLineWidth += charWidth;
				}
				++c;
			}
		}
		this._lines = newLines;
	}
	,wrap: function() {
		var newLines = [];
		var words;
		var _g = 0;
		var _g1 = this._lines;
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			words = [];
			this.splitLineIntoWords(line,words);
			if(this.wrapByWord) {
				this.wrapLineByWord(words,newLines);
			} else {
				this.wrapLineByCharacter(words,newLines);
			}
		}
		this._lines = newLines;
	}
	,splitLineIntoWords: function(line,words) {
		var word = "";
		var wordUtf8 = new haxe_Utf8();
		var isSpaceWord = false;
		var lineLength = line.length;
		var hyphenCode = HxOverrides.cca("-",0);
		var c = 0;
		var charCode;
		var charUtf8;
		while(c < lineLength) {
			charCode = HxOverrides.cca(line,c);
			word = wordUtf8.__b;
			if(charCode == 32 || charCode == 9) {
				if(!isSpaceWord) {
					isSpaceWord = true;
					if(word != "") {
						words.push(word);
						wordUtf8 = new haxe_Utf8();
					}
				}
				wordUtf8.__b += String.fromCharCode(charCode);
			} else if(charCode == hyphenCode) {
				if(isSpaceWord && word != "") {
					isSpaceWord = false;
					words.push(word);
					words.push("-");
				} else if(!isSpaceWord) {
					charUtf8 = new haxe_Utf8();
					charUtf8.__b += String.fromCharCode(charCode);
					words.push(word + charUtf8.__b);
				}
				wordUtf8 = new haxe_Utf8();
			} else {
				if(isSpaceWord && word != "") {
					isSpaceWord = false;
					words.push(word);
					wordUtf8 = new haxe_Utf8();
				}
				wordUtf8.__b += String.fromCharCode(charCode);
			}
			++c;
		}
		word = wordUtf8.__b;
		if(word != "") {
			words.push(word);
		}
	}
	,wrapLineByWord: function(words,newLines) {
		var numWords = words.length;
		var w;
		var word;
		var wordWidth;
		var wordLength;
		var isSpaceWord = false;
		var charCode;
		var charWidth = 0;
		var subLines = [];
		var subLine;
		var subLineWidth;
		var spaceWidth = this.font.spaceWidth;
		var tabWidth = spaceWidth * this.numSpacesInTab;
		var startX = this.font.minOffsetX;
		if(numWords > 0) {
			w = 0;
			subLineWidth = startX;
			subLine = "";
			while(w < numWords) {
				wordWidth = 0;
				word = words[w];
				wordLength = word.length;
				charCode = HxOverrides.cca(word,0);
				if(charCode != 32) {
					isSpaceWord = charCode == 9;
				} else {
					isSpaceWord = true;
				}
				var _g1 = 0;
				while(_g1 < wordLength) {
					var c = _g1++;
					charCode = HxOverrides.cca(word,c);
					if(charCode == 32) {
						charWidth = spaceWidth;
					} else if(charCode == 9) {
						charWidth = tabWidth;
					} else {
						var _this = this.font;
						if(_this.charAdvance.exists(charCode)) {
							charWidth = _this.charAdvance.get(charCode);
						} else {
							charWidth = 0;
						}
					}
					wordWidth += charWidth;
				}
				wordWidth += (wordLength - 1) * this.letterSpacing;
				if(subLineWidth + wordWidth > this._fieldWidth - 2 * this.padding) {
					if(isSpaceWord) {
						subLines.push(subLine);
						subLine = "";
						subLineWidth = startX;
					} else if(subLine != "") {
						subLines.push(subLine);
						subLine = word;
						subLineWidth = startX + wordWidth + this.letterSpacing;
					} else {
						subLine = word;
						subLineWidth = startX + wordWidth + this.letterSpacing;
					}
				} else {
					subLine += word;
					subLineWidth += wordWidth + this.letterSpacing;
				}
				++w;
			}
			if(subLine != "") {
				subLines.push(subLine);
			}
		}
		var _g = 0;
		while(_g < subLines.length) {
			var subline = subLines[_g];
			++_g;
			newLines.push(subline);
		}
	}
	,wrapLineByCharacter: function(words,newLines) {
		var numWords = words.length;
		var w;
		var word;
		var wordLength;
		var isSpaceWord = false;
		var charCode;
		var c;
		var charWidth = 0;
		var subLines = [];
		var subLine;
		var subLineUtf8;
		var subLineWidth;
		var spaceWidth = this.font.spaceWidth;
		var tabWidth = spaceWidth * this.numSpacesInTab;
		var startX = this.font.minOffsetX;
		if(numWords > 0) {
			w = 0;
			subLineWidth = startX;
			subLineUtf8 = new haxe_Utf8();
			while(w < numWords) {
				word = words[w];
				wordLength = word.length;
				charCode = HxOverrides.cca(word,0);
				if(charCode != 32) {
					isSpaceWord = charCode == 9;
				} else {
					isSpaceWord = true;
				}
				c = 0;
				while(c < wordLength) {
					charCode = HxOverrides.cca(word,c);
					if(charCode == 32) {
						charWidth = spaceWidth;
					} else if(charCode == 9) {
						charWidth = tabWidth;
					} else {
						var _this = this.font;
						if(_this.charAdvance.exists(charCode)) {
							charWidth = _this.charAdvance.get(charCode);
						} else {
							charWidth = 0;
						}
					}
					if(subLineWidth + charWidth > this._fieldWidth - 2 * this.padding) {
						subLine = subLineUtf8.__b;
						if(isSpaceWord) {
							subLines.push(subLine);
							c = wordLength;
							subLineUtf8 = new haxe_Utf8();
							subLineWidth = startX;
						} else if(subLine != "") {
							subLines.push(subLine);
							subLineUtf8 = new haxe_Utf8();
							subLineUtf8.__b += String.fromCharCode(charCode);
							subLineWidth = startX + charWidth + this.letterSpacing;
						} else {
							subLineUtf8 = new haxe_Utf8();
							subLineUtf8.__b += String.fromCharCode(charCode);
							subLineWidth = startX + charWidth + this.letterSpacing;
						}
					} else {
						subLineUtf8.__b += String.fromCharCode(charCode);
						subLineWidth += charWidth + this.letterSpacing;
					}
					++c;
				}
				++w;
			}
			subLine = subLineUtf8.__b;
			if(subLine != "") {
				subLines.push(subLine);
			}
		}
		var _g = 0;
		while(_g < subLines.length) {
			var subline = subLines[_g];
			++_g;
			newLines.push(subline);
		}
	}
	,updateTextBitmap: function(useTiles) {
		if(useTiles == null) {
			useTiles = false;
		}
		this.computeTextSize();
		if(flixel_FlxG.renderBlit) {
			useTiles = false;
		}
		if(!useTiles) {
			this.textBitmap = flixel_util_FlxDestroyUtil.disposeIfNotEqual(this.textBitmap,this.frameWidth,this.frameHeight);
			if(this.textBitmap == null) {
				this.textBitmap = new openfl_display_BitmapData(this.frameWidth,this.frameHeight,true,0);
			} else {
				this.textBitmap.fillRect(this.textBitmap.rect,0);
			}
		} else if(flixel_FlxG.renderTile) {
			this.textData.splice(0,this.textData.length);
		}
		this._fieldWidth = this.frameWidth;
		var numLines = this._lines.length;
		var lineWidth;
		var ox;
		var oy;
		var _g1 = 0;
		while(_g1 < numLines) {
			var i = _g1++;
			lineWidth = this._linesWidth[i];
			ox = this.font.minOffsetX;
			oy = i * (this.font.lineHeight + this.lineSpacing) + this.padding;
			if(this.alignment == "center") {
				ox += (this.frameWidth - lineWidth) / 2 | 0;
			} else if(this.alignment == "right") {
				ox += this.frameWidth - lineWidth - this.padding;
			} else {
				ox += this.padding;
			}
			this.drawLine(i,ox,oy,useTiles);
		}
		this.pendingTextBitmapChange = false;
	}
	,drawLine: function(lineIndex,posX,posY,useTiles) {
		if(useTiles == null) {
			useTiles = false;
		}
		if(flixel_FlxG.renderBlit) {
			useTiles = false;
		}
		if(useTiles) {
			this.tileLine(lineIndex,posX,posY);
		} else {
			this.blitLine(lineIndex,posX,posY);
		}
	}
	,blitLine: function(lineIndex,startX,startY) {
		var charFrame;
		var charCode;
		var curX = startX;
		var line = this._lines[lineIndex];
		var spaceWidth = this.font.spaceWidth;
		var lineLength = line.length;
		var textWidth = this.get_textWidth();
		if(this.alignment == "justify") {
			var numSpaces = 0;
			var _g1 = 0;
			while(_g1 < lineLength) {
				var i = _g1++;
				charCode = HxOverrides.cca(line,i);
				if(charCode == 32) {
					++numSpaces;
				} else if(charCode == 9) {
					numSpaces += this.numSpacesInTab;
				}
			}
			var lineWidth = this.getStringWidth(line);
			var totalSpacesWidth = numSpaces * this.font.spaceWidth;
			spaceWidth = (textWidth - lineWidth + totalSpacesWidth) / numSpaces | 0;
		}
		var tabWidth = spaceWidth * this.numSpacesInTab;
		var _g11 = 0;
		while(_g11 < lineLength) {
			var i1 = _g11++;
			charCode = HxOverrides.cca(line,i1);
			if(charCode == 32) {
				curX += spaceWidth;
			} else if(charCode == 9) {
				curX += tabWidth;
			} else {
				charFrame = this.font.charMap.get(charCode);
				if(charFrame != null) {
					this._flashPoint.setTo(curX,startY);
					charFrame.paint(this.textBitmap,this._flashPoint,true);
					var charUt8 = new haxe_Utf8();
					charUt8.__b += String.fromCharCode(charCode);
					var _this = this.font;
					curX += _this.charAdvance.exists(charCode) ? _this.charAdvance.get(charCode) : 0;
				}
			}
			curX += this.letterSpacing;
		}
	}
	,tileLine: function(lineIndex,startX,startY) {
		if(!flixel_FlxG.renderTile) {
			return;
		}
		var charFrame;
		var pos = this.textData.length;
		var charCode;
		var curX = startX;
		var line = this._lines[lineIndex];
		var spaceWidth = this.font.spaceWidth;
		var lineLength = line.length;
		var textWidth = this.get_textWidth();
		if(this.alignment == "justify") {
			var numSpaces = 0;
			var _g1 = 0;
			while(_g1 < lineLength) {
				var i = _g1++;
				charCode = HxOverrides.cca(line,i);
				if(charCode == 32) {
					++numSpaces;
				} else if(charCode == 9) {
					numSpaces += this.numSpacesInTab;
				}
			}
			var lineWidth = this.getStringWidth(line);
			var totalSpacesWidth = numSpaces * this.font.spaceWidth;
			spaceWidth = (textWidth - lineWidth + totalSpacesWidth) / numSpaces | 0;
		}
		var tabWidth = spaceWidth * this.numSpacesInTab;
		var _g11 = 0;
		while(_g11 < lineLength) {
			var i1 = _g11++;
			charCode = HxOverrides.cca(line,i1);
			if(charCode == 32) {
				curX += spaceWidth;
			} else if(charCode == 9) {
				curX += tabWidth;
			} else {
				charFrame = this.font.charMap.get(charCode);
				if(charFrame != null) {
					this.textData[pos++] = charCode;
					this.textData[pos++] = curX;
					this.textData[pos++] = startY;
					var _this = this.font;
					curX += _this.charAdvance.exists(charCode) ? _this.charAdvance.get(charCode) : 0;
				}
			}
			curX += this.letterSpacing;
		}
	}
	,updatePixels: function(useTiles) {
		if(useTiles == null) {
			useTiles = false;
		}
		var colorForFill = this.background ? this.backgroundColor : 0;
		var bitmap = null;
		if(flixel_FlxG.renderBlit) {
			if(this.get_pixels() == null || (this.frameWidth != this.get_pixels().width || this.frameHeight != this.get_pixels().height)) {
				this.set_pixels(new openfl_display_BitmapData(this.frameWidth,this.frameHeight,true,colorForFill));
			} else {
				this.get_pixels().fillRect(this.graphic.bitmap.rect,colorForFill);
			}
			bitmap = this.get_pixels();
		} else {
			if(!useTiles) {
				if(this.framePixels == null || (this.frameWidth != this.framePixels.width || this.frameHeight != this.framePixels.height)) {
					this.framePixels = flixel_util_FlxDestroyUtil.dispose(this.framePixels);
					this.framePixels = new openfl_display_BitmapData(this.frameWidth,this.frameHeight,true,colorForFill);
				} else {
					this.framePixels.fillRect(this.framePixels.rect,colorForFill);
				}
				bitmap = this.framePixels;
			} else {
				this.textDrawData.splice(0,this.textDrawData.length);
				this.borderDrawData.splice(0,this.borderDrawData.length);
			}
			this.set_width(this.frameWidth);
			this.set_height(this.frameHeight);
			this.origin.set_x(this.frameWidth * 0.5);
			this.origin.set_y(this.frameHeight * 0.5);
		}
		var iterations = this.borderSize * this.borderQuality | 0;
		if(iterations <= 0) {
			iterations = 1;
		} else {
			iterations = iterations;
		}
		var delta = this.borderSize / iterations | 0;
		var iterationsX = 1;
		var iterationsY = 1;
		var deltaX = 1;
		var deltaY = 1;
		if(this.borderStyle == flixel_text_FlxTextBorderStyle.SHADOW) {
			iterationsX = Math.round(Math.abs(this.shadowOffset.x) * this.borderQuality);
			if(iterationsX <= 0) {
				iterationsX = 1;
			} else {
				iterationsX = iterationsX;
			}
			iterationsY = Math.round(Math.abs(this.shadowOffset.y) * this.borderQuality);
			if(iterationsY <= 0) {
				iterationsY = 1;
			} else {
				iterationsY = iterationsY;
			}
			deltaX = Math.round(this.shadowOffset.x / iterationsX);
			deltaY = Math.round(this.shadowOffset.y / iterationsY);
		}
		var _g = this.borderStyle;
		switch(_g[1]) {
		case 0:
			break;
		case 1:
			var _g1 = 0;
			var _g2 = iterationsY;
			while(_g1 < _g2) {
				var iterY = _g1++;
				var _g3 = 0;
				var _g21 = iterationsX;
				while(_g3 < _g21) {
					var iterX = _g3++;
					this.drawText(deltaX * (iterX + 1),deltaY * (iterY + 1),false,bitmap,useTiles);
				}
			}
			break;
		case 2:
			var itd = 0;
			var _g11 = 0;
			var _g4 = iterations;
			while(_g11 < _g4) {
				var iter = _g11++;
				itd = delta * (iter + 1);
				this.drawText(-itd,-itd,false,bitmap,useTiles);
				this.drawText(0,-itd,false,bitmap,useTiles);
				this.drawText(itd,-itd,false,bitmap,useTiles);
				this.drawText(-itd,0,false,bitmap,useTiles);
				this.drawText(itd,0,false,bitmap,useTiles);
				this.drawText(-itd,itd,false,bitmap,useTiles);
				this.drawText(0,itd,false,bitmap,useTiles);
				this.drawText(itd,itd,false,bitmap,useTiles);
			}
			break;
		case 3:
			var itd1 = 0;
			var _g12 = 0;
			var _g5 = iterations;
			while(_g12 < _g5) {
				var iter1 = _g12++;
				itd1 = delta * (iter1 + 1);
				this.drawText(-itd1,-itd1,false,bitmap,useTiles);
				this.drawText(itd1,-itd1,false,bitmap,useTiles);
				this.drawText(-itd1,itd1,false,bitmap,useTiles);
				this.drawText(itd1,itd1,false,bitmap,useTiles);
			}
			break;
		}
		this.drawText(0,0,true,bitmap,useTiles);
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
		}
		this.pendingPixelsChange = false;
	}
	,drawText: function(posX,posY,isFront,bitmap,useTiles) {
		if(useTiles == null) {
			useTiles = false;
		}
		if(isFront == null) {
			isFront = true;
		}
		if(flixel_FlxG.renderBlit) {
			useTiles = false;
		}
		if(useTiles) {
			this.tileText(posX,posY,isFront);
		} else {
			this.blitText(posX,posY,isFront,bitmap);
		}
	}
	,blitText: function(posX,posY,isFront,bitmap) {
		if(isFront == null) {
			isFront = true;
		}
		this._matrix.identity();
		this._matrix.translate(posX,posY);
		var colorToApply = -1;
		if(isFront && this.useTextColor) {
			colorToApply = this.textColor;
		} else if(!isFront) {
			colorToApply = this.borderColor;
		}
		flixel_util_FlxColorTransformUtil.setMultipliers(this._colorParams,(colorToApply >> 16 & 255) / 255,(colorToApply >> 8 & 255) / 255,(colorToApply & 255) / 255,(colorToApply >> 24 & 255) / 255);
		if(isFront && !this.useTextColor) {
			this._flashRect.setTo(0,0,this.textBitmap.width,this.textBitmap.height);
			bitmap.copyPixels(this.textBitmap,this._flashRect,this._flashPointZero,null,null,true);
		} else {
			bitmap.draw(this.textBitmap,this._matrix,this._colorParams);
		}
	}
	,tileText: function(posX,posY,isFront) {
		if(isFront == null) {
			isFront = true;
		}
		if(!flixel_FlxG.renderTile) {
			return;
		}
		var data = isFront ? this.textDrawData : this.borderDrawData;
		var pos = data.length;
		var textPos;
		var textLen = this.textData.length / 3 | 0;
		var _g1 = 0;
		while(_g1 < textLen) {
			var i = _g1++;
			textPos = 3 * i;
			data[pos++] = this.textData[textPos];
			data[pos++] = this.textData[textPos + 1] + posX;
			data[pos++] = this.textData[textPos + 2] + posY;
		}
	}
	,setBorderStyle: function(Style,Color,Size,Quality) {
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		this.set_borderStyle(Style);
		this.set_borderColor(Color);
		this.set_borderSize(Size);
		this.set_borderQuality(Quality);
		if(this.borderStyle == flixel_text_FlxTextBorderStyle.SHADOW) {
			this.shadowOffset.set(this.borderSize,this.borderSize);
		}
		this.pendingTextBitmapChange = true;
	}
	,get_fieldWidth: function() {
		if(this.autoSize) {
			return this.get_textWidth();
		} else {
			return this._fieldWidth;
		}
	}
	,set_fieldWidth: function(value) {
		if(value > 1) {
			value = value;
		} else {
			value = 1;
		}
		if(value != this._fieldWidth) {
			if(value <= 0) {
				this.set_autoSize(true);
				this.set_wordWrap(false);
			}
			this.pendingTextChange = true;
		}
		return this._fieldWidth = value;
	}
	,set_alignment: function(value) {
		if(this.alignment != value && this.alignment != "justify") {
			this.alignment = value;
			this.pendingTextBitmapChange = true;
		}
		return value;
	}
	,set_multiLine: function(value) {
		if(this.multiLine != value) {
			this.multiLine = value;
			this.pendingTextChange = true;
		}
		return value;
	}
	,set_font: function(value) {
		if(this.font != value) {
			this.font = value;
			this.pendingTextChange = true;
		}
		return value;
	}
	,set_lineSpacing: function(value) {
		if(this.lineSpacing != value) {
			this.lineSpacing = value;
			this.pendingTextBitmapChange = true;
		}
		return this.lineSpacing;
	}
	,set_letterSpacing: function(value) {
		if(value != this.letterSpacing) {
			this.letterSpacing = value;
			this.pendingTextChange = true;
		}
		return this.letterSpacing;
	}
	,set_autoUpperCase: function(value) {
		if(this.autoUpperCase != value) {
			this.autoUpperCase = value;
			this.pendingTextChange = true;
		}
		return this.autoUpperCase;
	}
	,set_wordWrap: function(value) {
		if(this.wordWrap != value) {
			this.wordWrap = value;
			this.pendingTextChange = true;
		}
		return this.wordWrap;
	}
	,set_wrapByWord: function(value) {
		if(this.wrapByWord != value) {
			this.wrapByWord = value;
			this.pendingTextChange = true;
		}
		return value;
	}
	,set_autoSize: function(value) {
		if(this.autoSize != value) {
			this.autoSize = value;
			this.pendingTextChange = true;
		}
		return this.autoSize;
	}
	,set_padding: function(value) {
		if(value != this.padding) {
			this.padding = value;
			this.pendingTextChange = true;
		}
		return value;
	}
	,set_numSpacesInTab: function(value) {
		if(this.numSpacesInTab != value && value > 0) {
			this.numSpacesInTab = value;
			this.pendingTextChange = true;
		}
		return value;
	}
	,set_background: function(value) {
		if(this.background != value) {
			this.background = value;
			if(flixel_FlxG.renderBlit) {
				this.pendingPixelsChange = true;
			}
		}
		return value;
	}
	,set_backgroundColor: function(value) {
		if(this.backgroundColor != value) {
			this.backgroundColor = value;
			if(flixel_FlxG.renderBlit) {
				this.pendingPixelsChange = true;
			}
		}
		return value;
	}
	,set_borderStyle: function(style) {
		if(style != this.borderStyle) {
			this.borderStyle = style;
			this.pendingTextBitmapChange = true;
		}
		return this.borderStyle;
	}
	,set_borderColor: function(value) {
		if(this.borderColor != value) {
			this.borderColor = value;
			if(flixel_FlxG.renderBlit) {
				this.pendingPixelsChange = true;
			}
		}
		return value;
	}
	,set_borderSize: function(value) {
		if(value != this.borderSize) {
			this.borderSize = value;
			if(this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
				this.pendingTextBitmapChange = true;
			}
		}
		return value;
	}
	,set_borderQuality: function(value) {
		value = Math.min(1,Math.max(0,value));
		if(value != this.borderQuality) {
			this.borderQuality = value;
			if(this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
				this.pendingTextBitmapChange = true;
			}
		}
		return value;
	}
	,get_numLines: function() {
		return this._lines.length;
	}
	,get_textWidth: function() {
		var max = 0;
		var numLines = this._lines.length;
		var lineWidth;
		this._linesWidth = [];
		var _g1 = 0;
		while(_g1 < numLines) {
			var i = _g1++;
			lineWidth = this.getLineWidth(i);
			this._linesWidth[i] = lineWidth;
			if(max > lineWidth) {
				max = max;
			} else {
				max = lineWidth;
			}
		}
		return max;
	}
	,get_textHeight: function() {
		return (this.get_lineHeight() + this.lineSpacing) * this._lines.length - this.lineSpacing;
	}
	,get_lineHeight: function() {
		return this.font.lineHeight;
	}
	,get_width: function() {
		var useTiles = true;
		if(flixel_FlxG.renderBlit) {
			useTiles = false;
		}
		if(this.pendingTextChange) {
			this.updateText();
			this.pendingTextBitmapChange = true;
		}
		if(this.pendingTextBitmapChange) {
			this.updateTextBitmap(useTiles);
			this.pendingPixelsChange = true;
		}
		if(this.pendingPixelsChange) {
			this.updatePixels(useTiles);
		}
		return flixel_FlxSprite.prototype.get_width.call(this);
	}
	,get_height: function() {
		var useTiles = true;
		if(flixel_FlxG.renderBlit) {
			useTiles = false;
		}
		if(this.pendingTextChange) {
			this.updateText();
			this.pendingTextBitmapChange = true;
		}
		if(this.pendingTextBitmapChange) {
			this.updateTextBitmap(useTiles);
			this.pendingPixelsChange = true;
		}
		if(this.pendingPixelsChange) {
			this.updatePixels(useTiles);
		}
		return flixel_FlxSprite.prototype.get_height.call(this);
	}
	,__class__: flixel_text_FlxBitmapText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_fieldWidth:"set_fieldWidth",get_fieldWidth:"get_fieldWidth",get_numLines:"get_numLines",set_multiLine:"set_multiLine",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_borderQuality:"set_borderQuality",set_borderSize:"set_borderSize",set_borderColor:"set_borderColor",set_borderStyle:"set_borderStyle",set_useTextColor:"set_useTextColor",set_textColor:"set_textColor",set_numSpacesInTab:"set_numSpacesInTab",get_lineHeight:"get_lineHeight",get_textHeight:"get_textHeight",get_textWidth:"get_textWidth",set_padding:"set_padding",set_autoSize:"set_autoSize",set_wrapByWord:"set_wrapByWord",set_wordWrap:"set_wordWrap",set_autoUpperCase:"set_autoUpperCase",set_letterSpacing:"set_letterSpacing",set_lineSpacing:"set_lineSpacing",set_alignment:"set_alignment",set_text:"set_text",set_font:"set_font"})
});
var flixel_text_FlxText = function(X,Y,FieldWidth,Text,Size,EmbeddedFont) {
	if(EmbeddedFont == null) {
		EmbeddedFont = true;
	}
	if(Size == null) {
		Size = 8;
	}
	if(FieldWidth == null) {
		FieldWidth = 0;
	}
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this._hasBorderAlpha = false;
	this._regen = true;
	this._formatRanges = [];
	this.borderQuality = 1;
	this.borderSize = 1;
	this.borderColor = 0;
	this.borderStyle = flixel_text_FlxTextBorderStyle.NONE;
	this.text = "";
	flixel_FlxSprite.call(this,X,Y);
	if(Text == null || Text == "") {
		this.set_text("");
		Text = " ";
	} else {
		this.set_text(Text);
	}
	this.textField = new openfl_text_TextField();
	this.textField.set_selectable(false);
	this.textField.set_multiline(true);
	this.textField.set_wordWrap(true);
	this._defaultFormat = new openfl_text_TextFormat(null,Size,16777215);
	this.set_font(flixel_system_FlxAssets.FONT_DEFAULT);
	this._formatAdjusted = new openfl_text_TextFormat();
	this.textField.set_defaultTextFormat(this._defaultFormat);
	this.textField.set_text(Text);
	this.set_fieldWidth(FieldWidth);
	this.textField.set_embedFonts(EmbeddedFont);
	this.textField.set_height(Text.length <= 0 ? 1 : 10);
	this.set_allowCollisions(0);
	this.set_moves(false);
	this.drawFrame();
	var point = flixel_math_FlxPoint._pool.get().set(1,1);
	point._inPool = false;
	this.shadowOffset = point;
};
$hxClasses["flixel.text.FlxText"] = flixel_text_FlxText;
flixel_text_FlxText.__name__ = ["flixel","text","FlxText"];
flixel_text_FlxText.__super__ = flixel_FlxSprite;
flixel_text_FlxText.prototype = $extend(flixel_FlxSprite.prototype,{
	text: null
	,borderStyle: null
	,borderColor: null
	,borderSize: null
	,borderQuality: null
	,textField: null
	,shadowOffset: null
	,_defaultFormat: null
	,_formatAdjusted: null
	,_formatRanges: null
	,_font: null
	,_regen: null
	,_borderPixels: null
	,_borderColorTransform: null
	,_hasBorderAlpha: null
	,destroy: function() {
		this.textField = null;
		this._font = null;
		this._defaultFormat = null;
		this._formatAdjusted = null;
		this.shadowOffset = flixel_util_FlxDestroyUtil.put(this.shadowOffset);
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,drawFrame: function(Force) {
		if(Force == null) {
			Force = false;
		}
		this._regen = this._regen || Force;
		flixel_FlxSprite.prototype.drawFrame.call(this,this._regen);
	}
	,stampOnAtlas: function(atlas) {
		this.regenGraphic();
		var node = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = node != null;
		if(node != null) {
			this.set_frames(node.getImageFrame());
		}
		return result;
	}
	,applyMarkup: function(input,rules) {
		if(rules == null || rules.length == 0) {
			return this;
		}
		this.clearFormats();
		var rangeStarts = [];
		var rangeEnds = [];
		var rulesToApply = [];
		var _g = 0;
		while(_g < rules.length) {
			var rule = rules[_g];
			++_g;
			if(rule.marker == null || rule.format == null) {
				continue;
			}
			var start = false;
			var markerLength = rule.marker.length;
			if(input.indexOf(rule.marker) == -1) {
				continue;
			}
			var _g2 = 0;
			var _g1 = input.length;
			while(_g2 < _g1) {
				var charIndex = _g2++;
				if(haxe_Utf8.compare(HxOverrides.substr(input,charIndex,markerLength),rule.marker) != 0) {
					continue;
				}
				if(start) {
					start = false;
					rangeEnds.push(charIndex);
				} else {
					start = true;
					rangeStarts.push(charIndex);
					rulesToApply.push(rule);
				}
			}
			if(start) {
				rangeEnds.push(-1);
			}
		}
		var _g3 = 0;
		while(_g3 < rules.length) {
			var rule1 = rules[_g3];
			++_g3;
			input = StringTools.replace(input,rule1.marker,"");
		}
		var _g11 = 0;
		var _g4 = rangeStarts.length;
		while(_g11 < _g4) {
			var i = _g11++;
			var delIndex = rangeStarts[i];
			var markerLength1 = rulesToApply[i].marker.length;
			var _g31 = 0;
			var _g21 = rangeStarts.length;
			while(_g31 < _g21) {
				var j = _g31++;
				if(rangeStarts[j] > delIndex) {
					rangeStarts[j] -= markerLength1;
				}
				if(rangeEnds[j] > delIndex) {
					rangeEnds[j] -= markerLength1;
				}
			}
			delIndex = rangeEnds[i];
			var _g32 = 0;
			var _g22 = rangeStarts.length;
			while(_g32 < _g22) {
				var j1 = _g32++;
				if(rangeStarts[j1] > delIndex) {
					rangeStarts[j1] -= markerLength1;
				}
				if(rangeEnds[j1] > delIndex) {
					rangeEnds[j1] -= markerLength1;
				}
			}
		}
		this.set_text(input);
		var _g12 = 0;
		var _g5 = rangeStarts.length;
		while(_g12 < _g5) {
			var i1 = _g12++;
			this.addFormat(rulesToApply[i1].format,rangeStarts[i1],rangeEnds[i1]);
		}
		return this;
	}
	,addFormat: function(Format,Start,End) {
		if(End == null) {
			End = -1;
		}
		if(Start == null) {
			Start = -1;
		}
		this._formatRanges.push(new flixel_text__$FlxText_FlxTextFormatRange(Format,Start,End));
		this._formatRanges.sort(function(left,right) {
			if(left.range.start < right.range.start) {
				return -1;
			} else {
				return 1;
			}
		});
		this._regen = true;
		return this;
	}
	,removeFormat: function(Format,Start,End) {
		var _g = 0;
		var _g1 = this._formatRanges;
		while(_g < _g1.length) {
			var formatRange = _g1[_g];
			++_g;
			if(formatRange.format != Format) {
				continue;
			}
			if(Start != null && End != null && (Start > formatRange.range.end || End < formatRange.range.start)) {
				continue;
			}
			HxOverrides.remove(this._formatRanges,formatRange);
		}
		this._regen = true;
		return this;
	}
	,clearFormats: function() {
		this._formatRanges = [];
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this;
	}
	,setFormat: function(Font,Size,Color,Alignment,BorderStyle,BorderColor,Embedded) {
		if(Embedded == null) {
			Embedded = true;
		}
		if(BorderColor == null) {
			BorderColor = 0;
		}
		if(Color == null) {
			Color = -1;
		}
		if(Size == null) {
			Size = 8;
		}
		if(BorderStyle == null) {
			BorderStyle = flixel_text_FlxTextBorderStyle.NONE;
		} else {
			BorderStyle = BorderStyle;
		}
		if(Embedded) {
			this.set_font(Font);
		} else if(Font != null) {
			this.set_systemFont(Font);
		}
		this.set_size(Size);
		this.set_color(Color);
		if(Alignment != null) {
			this.set_alignment(Alignment);
		}
		this.set_borderStyle(BorderStyle);
		this.set_borderColor(BorderColor);
		this.set_borderSize(1);
		this.set_borderQuality(1);
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this;
	}
	,setBorderStyle: function(Style,Color,Size,Quality) {
		if(Quality == null) {
			Quality = 1;
		}
		if(Size == null) {
			Size = 1;
		}
		if(Color == null) {
			Color = 0;
		}
		this.set_borderStyle(Style);
		this.set_borderColor(Color);
		this.set_borderSize(Size);
		this.set_borderQuality(Quality);
		return this;
	}
	,set_fieldWidth: function(value) {
		if(this.textField == null) {
			return value;
		}
		if(value <= 0) {
			this.set_wordWrap(false);
			this.set_autoSize(true);
		} else {
			this.set_autoSize(false);
			this.set_wordWrap(true);
			this.textField.set_width(value);
		}
		this._regen = true;
		return value;
	}
	,get_fieldWidth: function() {
		if(this.textField != null) {
			return this.textField.get_width();
		} else {
			return 0;
		}
	}
	,set_autoSize: function(value) {
		if(this.textField != null) {
			this.textField.set_autoSize(value ? 1 : 2);
			this._regen = true;
		}
		return value;
	}
	,get_autoSize: function() {
		if(this.textField != null) {
			return this.textField.get_autoSize() != 2;
		} else {
			return false;
		}
	}
	,set_text: function(Text) {
		this.text = Text;
		if(this.textField != null) {
			var ot = this.textField.get_text();
			this.textField.set_text(Text);
			this._regen = this.textField.get_text() != ot || this._regen;
		}
		return Text;
	}
	,get_size: function() {
		return this._defaultFormat.size | 0;
	}
	,set_size: function(Size) {
		this._defaultFormat.size = Size;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Size;
	}
	,set_color: function(Color) {
		if(this._defaultFormat.color == (Color & 16777215)) {
			return Color;
		}
		this._defaultFormat.color = Color & 16777215;
		this.color = Color;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Color;
	}
	,get_font: function() {
		return this._font;
	}
	,set_font: function(Font) {
		this.textField.set_embedFonts(true);
		if(Font != null) {
			var newFontName = Font;
			if(openfl_Assets.exists(Font,"FONT")) {
				newFontName = openfl_Assets.getFont(Font).name;
			}
			this._defaultFormat.font = newFontName;
		} else {
			this._defaultFormat.font = flixel_system_FlxAssets.FONT_DEFAULT;
		}
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return this._font = this._defaultFormat.font;
	}
	,get_embedded: function() {
		return this.textField.set_embedFonts(true);
	}
	,get_systemFont: function() {
		return this._defaultFormat.font;
	}
	,set_systemFont: function(Font) {
		this.textField.set_embedFonts(false);
		this._defaultFormat.font = Font;
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Font;
	}
	,get_bold: function() {
		return this._defaultFormat.bold;
	}
	,set_bold: function(value) {
		if(this._defaultFormat.bold != value) {
			this._defaultFormat.bold = value;
			this.textField.set_defaultTextFormat(this._defaultFormat);
			this.textField.setTextFormat(this._defaultFormat);
			this._regen = true;
		}
		return value;
	}
	,get_italic: function() {
		return this._defaultFormat.italic;
	}
	,set_italic: function(value) {
		if(this._defaultFormat.italic != value) {
			this._defaultFormat.italic = value;
			this.textField.set_defaultTextFormat(this._defaultFormat);
			this.textField.setTextFormat(this._defaultFormat);
			this._regen = true;
		}
		return value;
	}
	,get_wordWrap: function() {
		return this.textField.get_wordWrap();
	}
	,set_wordWrap: function(value) {
		if(this.textField.get_wordWrap() != value) {
			this.textField.set_wordWrap(value);
			this._regen = true;
		}
		return value;
	}
	,get_alignment: function() {
		return flixel_text__$FlxText_FlxTextAlign_$Impl_$.fromOpenFL(this._defaultFormat.align);
	}
	,set_alignment: function(Alignment) {
		this._defaultFormat.align = flixel_text__$FlxText_FlxTextAlign_$Impl_$.toOpenFL(Alignment);
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
		return Alignment;
	}
	,set_borderStyle: function(style) {
		if(style != this.borderStyle) {
			this._regen = true;
		}
		return this.borderStyle = style;
	}
	,set_borderColor: function(Color) {
		if(this.borderColor != Color && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		this._hasBorderAlpha = (Color >> 24 & 255) / 255 < 1;
		return this.borderColor = Color;
	}
	,set_borderSize: function(Value) {
		if(Value != this.borderSize && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		return this.borderSize = Value;
	}
	,set_borderQuality: function(Value) {
		var lowerBound = Value < 0 ? 0 : Value;
		if(lowerBound > 1) {
			Value = 1;
		} else {
			Value = lowerBound;
		}
		if(Value != this.borderQuality && this.borderStyle != flixel_text_FlxTextBorderStyle.NONE) {
			this._regen = true;
		}
		return this.borderQuality = Value;
	}
	,set_graphic: function(Value) {
		var oldGraphic = this.graphic;
		var graph = flixel_FlxSprite.prototype.set_graphic.call(this,Value);
		flixel_FlxG.bitmap.removeIfNoUse(oldGraphic);
		return graph;
	}
	,get_width: function() {
		this.regenGraphic();
		return flixel_FlxSprite.prototype.get_width.call(this);
	}
	,get_height: function() {
		this.regenGraphic();
		return flixel_FlxSprite.prototype.get_height.call(this);
	}
	,updateColorTransform: function() {
		if(this.colorTransform == null) {
			this.colorTransform = new openfl_geom_ColorTransform();
		}
		if(this.alpha != 1) {
			this.colorTransform.alphaMultiplier = this.alpha;
			this.useColorTransform = true;
		} else {
			this.colorTransform.alphaMultiplier = 1;
			this.useColorTransform = false;
		}
		this.dirty = true;
	}
	,regenGraphic: function() {
		if(this.textField == null || !this._regen) {
			return;
		}
		var oldWidth = 0;
		var oldHeight = 4;
		if(this.graphic != null) {
			oldWidth = this.graphic.width;
			oldHeight = this.graphic.height;
		}
		var newWidth = this.textField.get_width();
		var newHeight = this.textField.get_textHeight() + 4;
		if(this.textField.get_textHeight() == 0) {
			newHeight = oldHeight;
		}
		if(oldWidth != newWidth || oldHeight != newHeight) {
			this.set_height(newHeight);
			var key = flixel_FlxG.bitmap.getUniqueKey("text");
			this.makeGraphic(newWidth | 0,newHeight | 0,0,false,key);
			if(this._hasBorderAlpha) {
				this._borderPixels = this.graphic.bitmap.clone();
			}
			this.frameHeight = this.get_height() | 0;
			this.textField.set_height(this.get_height() * 1.2);
			this._flashRect.x = 0;
			this._flashRect.y = 0;
			this._flashRect.width = newWidth;
			this._flashRect.height = newHeight;
		} else {
			this.graphic.bitmap.fillRect(this._flashRect,0);
			if(this._hasBorderAlpha) {
				if(this._borderPixels == null) {
					this._borderPixels = new openfl_display_BitmapData(this.frameWidth,this.frameHeight,true);
				} else {
					this._borderPixels.fillRect(this._flashRect,0);
				}
			}
		}
		if(this.textField != null && this.textField.get_text() != null && this.textField.get_text().length > 0) {
			this.copyTextFormat(this._defaultFormat,this._formatAdjusted);
			this._matrix.identity();
			this.applyBorderStyle();
			if(!(!this._hasBorderAlpha)) {
				if(this._borderColorTransform == null) {
					this._borderColorTransform = new openfl_geom_ColorTransform();
				}
				this._borderColorTransform.alphaMultiplier = (this.borderColor >> 24 & 255) / 255;
				this._borderPixels.colorTransform(this._borderPixels.rect,this._borderColorTransform);
				this.graphic.bitmap.draw(this._borderPixels);
			}
			this.applyFormats(this._formatAdjusted,false);
			this.drawTextFieldTo(this.graphic.bitmap);
		}
		this._regen = false;
		this.set_frame(this.frame);
	}
	,drawTextFieldTo: function(graphic) {
		graphic.draw(this.textField,this._matrix);
	}
	,draw: function() {
		this.regenGraphic();
		flixel_FlxSprite.prototype.draw.call(this);
	}
	,calcFrame: function(RunOnCpp) {
		if(RunOnCpp == null) {
			RunOnCpp = false;
		}
		if(this.textField == null) {
			return;
		}
		if(flixel_FlxG.renderTile && !RunOnCpp) {
			return;
		}
		this.regenGraphic();
		flixel_FlxSprite.prototype.calcFrame.call(this,RunOnCpp);
	}
	,applyBorderStyle: function() {
		var iterations = this.borderSize * this.borderQuality | 0;
		if(iterations <= 0) {
			iterations = 1;
		}
		var delta = this.borderSize / iterations;
		var _g = this.borderStyle;
		switch(_g[1]) {
		case 0:
			break;
		case 1:
			this.applyFormats(this._formatAdjusted,true);
			var _g1 = 0;
			var _g2 = iterations;
			while(_g1 < _g2) {
				++_g1;
				var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(delta,delta);
				this.drawTextFieldTo(graphic);
			}
			this._matrix.translate(-this.shadowOffset.x * this.borderSize,-this.shadowOffset.y * this.borderSize);
			break;
		case 2:
			this.applyFormats(this._formatAdjusted,true);
			var curDelta = delta;
			var _g11 = 0;
			var _g3 = iterations;
			while(_g11 < _g3) {
				++_g11;
				var graphic1 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,-curDelta);
				this.drawTextFieldTo(graphic1);
				var graphic2 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta,0);
				this.drawTextFieldTo(graphic2);
				var graphic3 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta,0);
				this.drawTextFieldTo(graphic3);
				var graphic4 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta);
				this.drawTextFieldTo(graphic4);
				var graphic5 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta);
				this.drawTextFieldTo(graphic5);
				var graphic6 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,0);
				this.drawTextFieldTo(graphic6);
				var graphic7 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta,0);
				this.drawTextFieldTo(graphic7);
				var graphic8 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,-curDelta);
				this.drawTextFieldTo(graphic8);
				this._matrix.translate(curDelta,0);
				curDelta += delta;
			}
			break;
		case 3:
			this.applyFormats(this._formatAdjusted,true);
			var curDelta1 = delta;
			var _g12 = 0;
			var _g4 = iterations;
			while(_g12 < _g4) {
				++_g12;
				var graphic9 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta1,-curDelta1);
				this.drawTextFieldTo(graphic9);
				var graphic10 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(curDelta1 * 2,0);
				this.drawTextFieldTo(graphic10);
				var graphic11 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(0,curDelta1 * 2);
				this.drawTextFieldTo(graphic11);
				var graphic12 = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
				this._matrix.translate(-curDelta1 * 2,0);
				this.drawTextFieldTo(graphic12);
				this._matrix.translate(curDelta1,-curDelta1);
				curDelta1 += delta;
			}
			break;
		}
	}
	,applyBorderTransparency: function() {
		if(!this._hasBorderAlpha) {
			return;
		}
		if(this._borderColorTransform == null) {
			this._borderColorTransform = new openfl_geom_ColorTransform();
		}
		this._borderColorTransform.alphaMultiplier = (this.borderColor >> 24 & 255) / 255;
		this._borderPixels.colorTransform(this._borderPixels.rect,this._borderColorTransform);
		this.graphic.bitmap.draw(this._borderPixels);
	}
	,copyTextWithOffset: function(x,y) {
		var graphic = this._hasBorderAlpha ? this._borderPixels : this.graphic.bitmap;
		this._matrix.translate(x,y);
		this.drawTextFieldTo(graphic);
	}
	,applyFormats: function(FormatAdjusted,UseBorderColor) {
		if(UseBorderColor == null) {
			UseBorderColor = false;
		}
		this.copyTextFormat(this._defaultFormat,FormatAdjusted,false);
		FormatAdjusted.color = UseBorderColor ? this.borderColor & 16777215 : this._defaultFormat.color;
		this.textField.setTextFormat(FormatAdjusted);
		var _g = 0;
		var _g1 = this._formatRanges;
		while(_g < _g1.length) {
			var formatRange = _g1[_g];
			++_g;
			if(this.textField.get_text().length - 1 < formatRange.range.start) {
				break;
			} else {
				var textFormat = formatRange.format.format;
				this.copyTextFormat(textFormat,FormatAdjusted,false);
				FormatAdjusted.color = UseBorderColor ? formatRange.format.borderColor & 16777215 : textFormat.color;
			}
			this.textField.setTextFormat(FormatAdjusted,formatRange.range.start,Math.min(formatRange.range.end,this.textField.get_text().length) | 0);
		}
	}
	,copyTextFormat: function(from,to,withAlign) {
		if(withAlign == null) {
			withAlign = true;
		}
		to.font = from.font;
		to.bold = from.bold;
		to.italic = from.italic;
		to.size = from.size;
		to.color = from.color;
		if(withAlign) {
			to.align = from.align;
		}
	}
	,dtfCopy: function() {
		var dtf = this.textField.get_defaultTextFormat();
		return new openfl_text_TextFormat(dtf.font,dtf.size,dtf.color,dtf.bold,dtf.italic,dtf.underline,dtf.url,dtf.target,dtf.align);
	}
	,updateDefaultFormat: function() {
		this.textField.set_defaultTextFormat(this._defaultFormat);
		this.textField.setTextFormat(this._defaultFormat);
		this._regen = true;
	}
	,set_frames: function(Frames) {
		flixel_FlxSprite.prototype.set_frames.call(this,Frames);
		this._regen = false;
		return Frames;
	}
	,__class__: flixel_text_FlxText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_fieldWidth:"set_fieldWidth",get_fieldWidth:"get_fieldWidth",set_borderQuality:"set_borderQuality",set_borderSize:"set_borderSize",set_borderColor:"set_borderColor",set_borderStyle:"set_borderStyle",set_alignment:"set_alignment",get_alignment:"get_alignment",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_italic:"set_italic",get_italic:"get_italic",set_bold:"set_bold",get_bold:"get_bold",set_systemFont:"set_systemFont",get_systemFont:"get_systemFont",get_embedded:"get_embedded",set_font:"set_font",get_font:"get_font",set_size:"set_size",get_size:"get_size",set_text:"set_text"})
});
var flixel_text_FlxTextFormat = function(FontColor,Bold,Italic,BorderColor) {
	this.format = new openfl_text_TextFormat(null,null,FontColor,Bold,Italic);
	this.borderColor = BorderColor == null ? 0 : BorderColor;
};
$hxClasses["flixel.text.FlxTextFormat"] = flixel_text_FlxTextFormat;
flixel_text_FlxTextFormat.__name__ = ["flixel","text","FlxTextFormat"];
flixel_text_FlxTextFormat.prototype = {
	borderColor: null
	,format: null
	,__class__: flixel_text_FlxTextFormat
};
var flixel_text__$FlxText_FlxTextFormatRange = function(format,start,end) {
	this.range = new flixel_util_helpers_FlxRange(start,end);
	this.format = format;
};
$hxClasses["flixel.text._FlxText.FlxTextFormatRange"] = flixel_text__$FlxText_FlxTextFormatRange;
flixel_text__$FlxText_FlxTextFormatRange.__name__ = ["flixel","text","_FlxText","FlxTextFormatRange"];
flixel_text__$FlxText_FlxTextFormatRange.prototype = {
	range: null
	,format: null
	,__class__: flixel_text__$FlxText_FlxTextFormatRange
};
var flixel_text_FlxTextFormatMarkerPair = function(format,marker) {
	this.format = format;
	this.marker = marker;
};
$hxClasses["flixel.text.FlxTextFormatMarkerPair"] = flixel_text_FlxTextFormatMarkerPair;
flixel_text_FlxTextFormatMarkerPair.__name__ = ["flixel","text","FlxTextFormatMarkerPair"];
flixel_text_FlxTextFormatMarkerPair.prototype = {
	format: null
	,marker: null
	,__class__: flixel_text_FlxTextFormatMarkerPair
};
var flixel_text_FlxTextBorderStyle = $hxClasses["flixel.text.FlxTextBorderStyle"] = { __ename__ : ["flixel","text","FlxTextBorderStyle"], __constructs__ : ["NONE","SHADOW","OUTLINE","OUTLINE_FAST"] };
flixel_text_FlxTextBorderStyle.NONE = ["NONE",0];
flixel_text_FlxTextBorderStyle.NONE.toString = $estr;
flixel_text_FlxTextBorderStyle.NONE.__enum__ = flixel_text_FlxTextBorderStyle;
flixel_text_FlxTextBorderStyle.SHADOW = ["SHADOW",1];
flixel_text_FlxTextBorderStyle.SHADOW.toString = $estr;
flixel_text_FlxTextBorderStyle.SHADOW.__enum__ = flixel_text_FlxTextBorderStyle;
flixel_text_FlxTextBorderStyle.OUTLINE = ["OUTLINE",2];
flixel_text_FlxTextBorderStyle.OUTLINE.toString = $estr;
flixel_text_FlxTextBorderStyle.OUTLINE.__enum__ = flixel_text_FlxTextBorderStyle;
flixel_text_FlxTextBorderStyle.OUTLINE_FAST = ["OUTLINE_FAST",3];
flixel_text_FlxTextBorderStyle.OUTLINE_FAST.toString = $estr;
flixel_text_FlxTextBorderStyle.OUTLINE_FAST.__enum__ = flixel_text_FlxTextBorderStyle;
flixel_text_FlxTextBorderStyle.__empty_constructs__ = [flixel_text_FlxTextBorderStyle.NONE,flixel_text_FlxTextBorderStyle.SHADOW,flixel_text_FlxTextBorderStyle.OUTLINE,flixel_text_FlxTextBorderStyle.OUTLINE_FAST];
var flixel_text__$FlxText_FlxTextAlign_$Impl_$ = {};
$hxClasses["flixel.text._FlxText.FlxTextAlign_Impl_"] = flixel_text__$FlxText_FlxTextAlign_$Impl_$;
flixel_text__$FlxText_FlxTextAlign_$Impl_$.__name__ = ["flixel","text","_FlxText","FlxTextAlign_Impl_"];
flixel_text__$FlxText_FlxTextAlign_$Impl_$.fromOpenFL = function(align) {
	switch(align) {
	case 0:
		return "center";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	default:
		return "left";
	}
};
flixel_text__$FlxText_FlxTextAlign_$Impl_$.toOpenFL = function(align) {
	switch(align) {
	case "center":
		return 0;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	default:
		return 3;
	}
};
var flixel_tile_FlxBaseTilemap = function() {
	this._collideIndex = 0;
	this._drawIndex = 0;
	this._startingIndex = 0;
	this._tileObjects = [];
	this.totalTiles = 0;
	this.heightInTiles = 0;
	this.widthInTiles = 0;
	this.auto = flixel_tile_FlxTilemapAutoTiling.OFF;
	flixel_FlxObject.call(this);
	this.flixelType = 3;
	this.set_immovable(true);
	this.set_moves(false);
};
$hxClasses["flixel.tile.FlxBaseTilemap"] = flixel_tile_FlxBaseTilemap;
flixel_tile_FlxBaseTilemap.__name__ = ["flixel","tile","FlxBaseTilemap"];
flixel_tile_FlxBaseTilemap.__super__ = flixel_FlxObject;
flixel_tile_FlxBaseTilemap.prototype = $extend(flixel_FlxObject.prototype,{
	auto: null
	,widthInTiles: null
	,heightInTiles: null
	,totalTiles: null
	,customTileRemap: null
	,_randomIndices: null
	,_randomChoices: null
	,_randomLambda: null
	,_tileObjects: null
	,_startingIndex: null
	,_data: null
	,_drawIndex: null
	,_collideIndex: null
	,updateTile: function(Index) {
		throw new js__$Boot_HaxeError("updateTile must be implemented");
	}
	,cacheGraphics: function(TileWidth,TileHeight,TileGraphic) {
		throw new js__$Boot_HaxeError("cacheGraphics must be implemented");
	}
	,initTileObjects: function() {
		throw new js__$Boot_HaxeError("initTileObjects must be implemented");
	}
	,updateMap: function() {
		throw new js__$Boot_HaxeError("updateMap must be implemented");
	}
	,computeDimensions: function() {
		throw new js__$Boot_HaxeError("computeDimensions must be implemented");
	}
	,getTileIndexByCoords: function(Coord) {
		throw new js__$Boot_HaxeError("getTileIndexByCoords must be implemented");
	}
	,getTileCoordsByIndex: function(Index,Midpoint) {
		if(Midpoint == null) {
			Midpoint = true;
		}
		throw new js__$Boot_HaxeError("getTileCoordsByIndex must be implemented");
	}
	,ray: function(Start,End,Result,Resolution) {
		if(Resolution == null) {
			Resolution = 1;
		}
		throw new js__$Boot_HaxeError("ray must be implemented");
	}
	,overlapsWithCallback: function(Object,Callback,FlipCallbackParams,Position) {
		if(FlipCallbackParams == null) {
			FlipCallbackParams = false;
		}
		throw new js__$Boot_HaxeError("overlapsWithCallback must be implemented");
	}
	,setDirty: function(Dirty) {
		if(Dirty == null) {
			Dirty = true;
		}
		throw new js__$Boot_HaxeError("setDirty must be implemented");
	}
	,destroy: function() {
		this._data = null;
		flixel_FlxObject.prototype.destroy.call(this);
	}
	,loadMapFromCSV: function(MapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		if(openfl_Assets.exists(MapData)) {
			MapData = openfl_Assets.getText(MapData);
		}
		this._data = [];
		var columns;
		var regex = new EReg("[ \t]*((\r\n)|\r|\n)[ \t]*","g");
		var lines = regex.split(MapData);
		var rows = lines.filter(function(line) {
			return line != "";
		});
		this.heightInTiles = rows.length;
		this.widthInTiles = 0;
		var row = 0;
		while(row < this.heightInTiles) {
			var rowString = rows[row];
			if(StringTools.endsWith(rowString,",")) {
				rowString = HxOverrides.substr(rowString,0,rowString.length - 1);
			}
			columns = rowString.split(",");
			if(columns.length == 0) {
				this.heightInTiles--;
				continue;
			}
			if(this.widthInTiles == 0) {
				this.widthInTiles = columns.length;
			}
			var column = 0;
			while(column < this.widthInTiles) {
				var columnString = columns[column];
				var curTile = Std.parseInt(columnString);
				if(curTile == null) {
					throw new js__$Boot_HaxeError("String in row " + row + ", column " + column + " is not a valid integer: \"" + columnString + "\"");
				}
				if(curTile < 0) {
					curTile = 0;
				}
				this._data.push(curTile);
				++column;
			}
			++row;
		}
		this.loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
		return this;
	}
	,loadMapFromArray: function(MapData,WidthInTiles,HeightInTiles,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		this.widthInTiles = WidthInTiles;
		this.heightInTiles = HeightInTiles;
		this._data = MapData.slice();
		this.loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
		return this;
	}
	,loadMapFrom2DArray: function(MapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		this.widthInTiles = MapData[0].length;
		this.heightInTiles = MapData.length;
		this._data = flixel_util_FlxArrayUtil.flatten2DArray_Int(MapData);
		this.loadMapHelper(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
		return this;
	}
	,loadMapFromGraphic: function(MapGraphic,Invert,Scale,ColorMap,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		if(Scale == null) {
			Scale = 1;
		}
		if(Invert == null) {
			Invert = false;
		}
		var mapBitmap = flixel_system_FlxAssets.resolveBitmapData(MapGraphic);
		var mapData = flixel_util_FlxStringUtil.bitmapToCSV(mapBitmap,Invert,Scale,ColorMap);
		return this.loadMapFromCSV(mapData,TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex);
	}
	,loadMapHelper: function(TileGraphic,TileWidth,TileHeight,AutoTile,StartingIndex,DrawIndex,CollideIndex) {
		if(CollideIndex == null) {
			CollideIndex = 1;
		}
		if(DrawIndex == null) {
			DrawIndex = 1;
		}
		if(StartingIndex == null) {
			StartingIndex = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		this.totalTiles = this._data.length;
		this.auto = AutoTile == null ? flixel_tile_FlxTilemapAutoTiling.OFF : AutoTile;
		this._startingIndex = StartingIndex <= 0 ? 0 : StartingIndex;
		if(this.auto != flixel_tile_FlxTilemapAutoTiling.OFF) {
			this._startingIndex = 1;
			DrawIndex = 1;
			CollideIndex = 1;
		}
		this._drawIndex = DrawIndex;
		this._collideIndex = CollideIndex;
		this.applyAutoTile();
		this.applyCustomRemap();
		this.randomizeIndices();
		this.cacheGraphics(TileWidth,TileHeight,TileGraphic);
		this.postGraphicLoad();
	}
	,postGraphicLoad: function() {
		this.initTileObjects();
		this.computeDimensions();
		this.updateMap();
	}
	,applyAutoTile: function() {
		if(this.auto != flixel_tile_FlxTilemapAutoTiling.OFF) {
			var i = 0;
			while(i < this.totalTiles) this.autoTile(i++);
		}
	}
	,applyCustomRemap: function() {
		var i = 0;
		if(this.customTileRemap != null) {
			while(i < this.totalTiles) {
				var oldIndex = this._data[i];
				var newIndex = oldIndex;
				if(oldIndex < this.customTileRemap.length) {
					newIndex = this.customTileRemap[oldIndex];
				}
				this._data[i] = newIndex;
				++i;
			}
		}
	}
	,randomizeIndices: function() {
		var i = 0;
		if(this._randomIndices != null) {
			var randLambda = this._randomLambda != null ? this._randomLambda : function() {
				return flixel_FlxG.random["float"]();
			};
			while(i < this.totalTiles) {
				var oldIndex = this._data[i];
				var j = 0;
				var newIndex = oldIndex;
				var _g = 0;
				var _g1 = this._randomIndices;
				while(_g < _g1.length) {
					var rand = _g1[_g];
					++_g;
					if(oldIndex == rand) {
						var k = randLambda() * this._randomChoices[j].length | 0;
						newIndex = this._randomChoices[j][k];
					}
					++j;
				}
				this._data[i] = newIndex;
				++i;
			}
		}
	}
	,autoTile: function(Index) {
		if(this._data[Index] == 0) {
			return;
		}
		this._data[Index] = 0;
		if(Index - this.widthInTiles < 0 || this._data[Index - this.widthInTiles] > 0) {
			this._data[Index] += 1;
		}
		if(Index % this.widthInTiles >= this.widthInTiles - 1 || this._data[Index + 1] > 0) {
			this._data[Index] += 2;
		}
		if((Index + this.widthInTiles | 0) >= this.totalTiles || this._data[Index + this.widthInTiles] > 0) {
			this._data[Index] += 4;
		}
		if(Index % this.widthInTiles <= 0 || this._data[Index - 1] > 0) {
			this._data[Index] += 8;
		}
		if(this.auto == flixel_tile_FlxTilemapAutoTiling.ALT && this._data[Index] == 15) {
			if(Index % this.widthInTiles > 0 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles - 1] <= 0) {
				this._data[Index] = 1;
			}
			if(Index % this.widthInTiles > 0 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles - 1] <= 0) {
				this._data[Index] = 2;
			}
			if(Index % this.widthInTiles < this.widthInTiles - 1 && Index - this.widthInTiles >= 0 && this._data[Index - this.widthInTiles + 1] <= 0) {
				this._data[Index] = 4;
			}
			if(Index % this.widthInTiles < this.widthInTiles - 1 && (Index + this.widthInTiles | 0) < this.totalTiles && this._data[Index + this.widthInTiles + 1] <= 0) {
				this._data[Index] = 8;
			}
		}
		this._data[Index] += 1;
	}
	,setCustomTileMappings: function(mappings,randomIndices,randomChoices,randomLambda) {
		this.customTileRemap = mappings;
		this._randomIndices = randomIndices;
		this._randomChoices = randomChoices;
		this._randomLambda = randomLambda;
		if(this._randomIndices != null && (this._randomChoices == null || this._randomChoices.length == 0)) {
			throw new js__$Boot_HaxeError("You must provide valid 'randomChoices' if you wish to randomize tilemap indicies, please read documentation of 'setCustomTileMappings' function.");
		}
	}
	,getTile: function(X,Y) {
		return this._data[Y * this.widthInTiles + X];
	}
	,getTileByIndex: function(Index) {
		return this._data[Index];
	}
	,getTileCollisions: function(Index) {
		return this._tileObjects[Index].allowCollisions;
	}
	,getTileInstances: function(Index) {
		var array = null;
		var i = 0;
		var l = this.widthInTiles * this.heightInTiles;
		while(i < l) {
			if(this._data[i] == Index) {
				if(array == null) {
					array = [];
				}
				array.push(i);
			}
			++i;
		}
		return array;
	}
	,setTile: function(X,Y,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) {
			UpdateGraphics = true;
		}
		if(X >= this.widthInTiles || Y >= this.heightInTiles) {
			return false;
		}
		return this.setTileByIndex(Y * this.widthInTiles + X,Tile,UpdateGraphics);
	}
	,setTileByIndex: function(Index,Tile,UpdateGraphics) {
		if(UpdateGraphics == null) {
			UpdateGraphics = true;
		}
		if(Index >= this._data.length) {
			return false;
		}
		this._data[Index] = Tile;
		if(!UpdateGraphics) {
			return true;
		}
		this.setDirty();
		if(this.auto == flixel_tile_FlxTilemapAutoTiling.OFF) {
			this.updateTile(this._data[Index]);
			return true;
		}
		var i;
		var row = (Index / this.widthInTiles | 0) - 1;
		var rowLength = row + 3;
		var column = Index % this.widthInTiles - 1;
		var columnHeight = column + 3;
		while(row < rowLength) {
			column = columnHeight - 3;
			while(column < columnHeight) {
				if(row >= 0 && row < this.heightInTiles && column >= 0 && column < this.widthInTiles) {
					i = row * this.widthInTiles + column;
					this.autoTile(i);
					this.updateTile(this._data[i]);
				}
				++column;
			}
			++row;
		}
		return true;
	}
	,setTileProperties: function(Tile,AllowCollisions,Callback,CallbackFilter,Range) {
		if(Range == null) {
			Range = 1;
		}
		if(AllowCollisions == null) {
			AllowCollisions = 4369;
		}
		if(Range <= 0) {
			Range = 1;
		}
		var tile;
		var i = Tile;
		var l = Tile + Range;
		var maxIndex = this._tileObjects.length;
		if(l > maxIndex) {
			throw new js__$Boot_HaxeError("Index " + l + " exceeds the maximum tile index of " + maxIndex + ". Please verfiy the Tile (" + Tile + ") and Range (" + Range + ") parameters.");
		}
		while(i < l) {
			tile = this._tileObjects[i++];
			tile.set_allowCollisions(AllowCollisions);
			tile.callbackFunction = Callback;
			tile.filter = CallbackFilter;
		}
	}
	,getData: function(Simple) {
		if(Simple == null) {
			Simple = false;
		}
		if(!Simple) {
			return this._data;
		}
		var i = 0;
		var l = this._data.length;
		var data = [];
		flixel_util_FlxArrayUtil.setLength_Int(data,l);
		while(i < l) {
			data[i] = this._tileObjects[this._data[i]].allowCollisions > 0 ? 1 : 0;
			++i;
		}
		return data;
	}
	,findPath: function(Start,End,Simplify,RaySimplify,DiagonalPolicy) {
		if(DiagonalPolicy == null) {
			DiagonalPolicy = 2;
		}
		if(RaySimplify == null) {
			RaySimplify = false;
		}
		if(Simplify == null) {
			Simplify = true;
		}
		var startIndex = this.getTileIndexByCoords(Start);
		var endIndex = this.getTileIndexByCoords(End);
		if(this._tileObjects[this._data[startIndex]].allowCollisions > 0 || this._tileObjects[this._data[endIndex]].allowCollisions > 0) {
			return null;
		}
		var distances = this.computePathDistance(startIndex,endIndex,DiagonalPolicy);
		if(distances == null) {
			return null;
		}
		var points = [];
		this.walkPath(distances,endIndex,points);
		var node = points[points.length - 1];
		node.set_x(Start.x);
		node.set_y(Start.y);
		if(Start._weak) {
			Start.put();
		}
		node = points[0];
		node.set_x(End.x);
		node.set_y(End.y);
		if(End._weak) {
			End.put();
		}
		if(Simplify) {
			this.simplifyPath(points);
		}
		if(RaySimplify) {
			this.raySimplifyPath(points);
		}
		var path = [];
		var i = points.length - 1;
		while(i >= 0) {
			node = points[i--];
			if(node != null) {
				path.push(node);
			}
		}
		return path;
	}
	,computePathDistance: function(StartIndex,EndIndex,DiagonalPolicy,StopOnEnd) {
		if(StopOnEnd == null) {
			StopOnEnd = true;
		}
		var mapSize = this.widthInTiles * this.heightInTiles;
		var distances = [];
		flixel_util_FlxArrayUtil.setLength_Int(distances,mapSize);
		var i = 0;
		while(i < mapSize) {
			if(this._tileObjects[this._data[i]].allowCollisions != 0) {
				distances[i] = -2;
			} else {
				distances[i] = -1;
			}
			++i;
		}
		distances[StartIndex] = 0;
		var distance = 1;
		var neighbors = [StartIndex];
		var current;
		var currentIndex;
		var left;
		var right;
		var up;
		var down;
		var currentLength;
		var foundEnd = false;
		while(neighbors.length > 0) {
			current = neighbors;
			neighbors = [];
			i = 0;
			currentLength = current.length;
			while(i < currentLength) {
				currentIndex = current[i++];
				if(currentIndex == (EndIndex | 0)) {
					foundEnd = true;
					if(StopOnEnd) {
						neighbors = [];
						break;
					}
				}
				left = currentIndex % this.widthInTiles > 0;
				right = currentIndex % this.widthInTiles < this.widthInTiles - 1;
				up = currentIndex / this.widthInTiles > 0;
				down = currentIndex / this.widthInTiles < this.heightInTiles - 1;
				var index;
				if(up) {
					index = currentIndex - this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(right) {
					index = currentIndex + 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(down) {
					index = currentIndex + this.widthInTiles;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(left) {
					index = currentIndex - 1;
					if(distances[index] == -1) {
						distances[index] = distance;
						neighbors.push(index);
					}
				}
				if(DiagonalPolicy != 0) {
					var wideDiagonal = DiagonalPolicy == 2;
					if(up && right) {
						index = currentIndex - this.widthInTiles + 1;
						if(wideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
							distances[index] = distance;
							neighbors.push(index);
						} else if(!wideDiagonal && distances[index] == -1) {
							distances[index] = distance;
							neighbors.push(index);
						}
					}
					if(right && down) {
						index = currentIndex + this.widthInTiles + 1;
						if(wideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex + 1] >= -1) {
							distances[index] = distance;
							neighbors.push(index);
						} else if(!wideDiagonal && distances[index] == -1) {
							distances[index] = distance;
							neighbors.push(index);
						}
					}
					if(left && down) {
						index = currentIndex + this.widthInTiles - 1;
						if(wideDiagonal && distances[index] == -1 && distances[currentIndex + this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
							distances[index] = distance;
							neighbors.push(index);
						} else if(!wideDiagonal && distances[index] == -1) {
							distances[index] = distance;
							neighbors.push(index);
						}
					}
					if(up && left) {
						index = currentIndex - this.widthInTiles - 1;
						if(wideDiagonal && distances[index] == -1 && distances[currentIndex - this.widthInTiles] >= -1 && distances[currentIndex - 1] >= -1) {
							distances[index] = distance;
							neighbors.push(index);
						} else if(!wideDiagonal && distances[index] == -1) {
							distances[index] = distance;
							neighbors.push(index);
						}
					}
				}
			}
			++distance;
		}
		if(!foundEnd) {
			distances = null;
		}
		return distances;
	}
	,walkPath: function(Data,Start,Points) {
		Points.push(this.getTileCoordsByIndex(Start));
		if(Data[Start] == 0) {
			return;
		}
		var left = Start % this.widthInTiles > 0;
		var right = Start % this.widthInTiles < this.widthInTiles - 1;
		var up = Start / this.widthInTiles > 0;
		var down = Start / this.widthInTiles < this.heightInTiles - 1;
		var current = Data[Start];
		var i;
		if(up) {
			i = Start - this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(right) {
			i = Start + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(down) {
			i = Start + this.widthInTiles;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(left) {
			i = Start - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(up && right) {
			i = Start - this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(right && down) {
			i = Start + this.widthInTiles + 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(left && down) {
			i = Start + this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		if(up && left) {
			i = Start - this.widthInTiles - 1;
			if(i >= 0 && Data[i] >= 0 && Data[i] < current) {
				this.walkPath(Data,i,Points);
				return;
			}
		}
		return;
	}
	,simplifyPath: function(Points) {
		var deltaPrevious;
		var deltaNext;
		var last = Points[0];
		var node;
		var i = 1;
		var l = Points.length - 1;
		while(i < l) {
			node = Points[i];
			deltaPrevious = (node.x - last.x) / (node.y - last.y);
			deltaNext = (node.x - Points[i + 1].x) / (node.y - Points[i + 1].y);
			if(last.x == Points[i + 1].x || last.y == Points[i + 1].y || deltaPrevious == deltaNext) {
				Points[i] = null;
			} else {
				last = node;
			}
			++i;
		}
	}
	,raySimplifyPath: function(Points) {
		var source = Points[0];
		var lastIndex = -1;
		var node;
		var i = 1;
		var l = Points.length;
		while(i < l) {
			node = Points[i++];
			if(node == null) {
				continue;
			}
			if(this.ray(source,node,this._point)) {
				if(lastIndex >= 0) {
					Points[lastIndex] = null;
				}
			} else {
				source = Points[lastIndex];
			}
			lastIndex = i - 1;
		}
	}
	,overlaps: function(ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.tilemapOverlapsCallback),group,0,0,InScreenSpace,Camera);
		} else if(ObjectOrGroup.flixelType == 1 || ObjectOrGroup.flixelType == 3 ? this.overlapsWithCallback(ObjectOrGroup) : this.overlaps(ObjectOrGroup,false,null)) {
			return true;
		}
		return false;
	}
	,tilemapOverlapsCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		if(Y == null) {
			Y = 0;
		}
		if(X == null) {
			X = 0;
		}
		if(ObjectOrGroup.flixelType == 1 || ObjectOrGroup.flixelType == 3) {
			return this.overlapsWithCallback(ObjectOrGroup);
		} else {
			return this.overlaps(ObjectOrGroup,InScreenSpace,Camera);
		}
	}
	,overlapsAt: function(X,Y,ObjectOrGroup,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		var group = flixel_group_FlxTypedGroup.resolveGroup(ObjectOrGroup);
		if(group != null) {
			return flixel_group_FlxTypedGroup.overlaps($bind(this,this.tilemapOverlapsAtCallback),group,X,Y,InScreenSpace,Camera);
		} else if(ObjectOrGroup.flixelType == 1 || ObjectOrGroup.flixelType == 3 ? this.overlapsWithCallback(ObjectOrGroup,null,false,this._point.set(X,Y)) : this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera)) {
			return true;
		}
		return false;
	}
	,tilemapOverlapsAtCallback: function(ObjectOrGroup,X,Y,InScreenSpace,Camera) {
		if(ObjectOrGroup.flixelType == 1 || ObjectOrGroup.flixelType == 3) {
			return this.overlapsWithCallback(ObjectOrGroup,null,false,this._point.set(X,Y));
		} else {
			return this.overlapsAt(X,Y,ObjectOrGroup,InScreenSpace,Camera);
		}
	}
	,overlapsPoint: function(WorldPoint,InScreenSpace,Camera) {
		if(InScreenSpace == null) {
			InScreenSpace = false;
		}
		if(!InScreenSpace) {
			return this.tileAtPointAllowsCollisions(WorldPoint);
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		WorldPoint.subtractPoint(Camera.scroll);
		if(WorldPoint._weak) {
			WorldPoint.put();
		}
		return this.tileAtPointAllowsCollisions(WorldPoint);
	}
	,tileAtPointAllowsCollisions: function(point) {
		var tileIndex = this.getTileIndexByCoords(point);
		if(tileIndex < 0 || tileIndex >= this._data.length) {
			return false;
		}
		return this._tileObjects[this._data[tileIndex]].allowCollisions > 0;
	}
	,getBounds: function(Bounds) {
		if(Bounds == null) {
			var _this = flixel_math_FlxRect._pool.get();
			_this.x = 0;
			_this.y = 0;
			_this.width = 0;
			_this.height = 0;
			_this._inPool = false;
			Bounds = _this;
		}
		var X = this.x;
		var Y = this.y;
		var Width = this.get_width();
		var Height = this.get_height();
		Bounds.x = X;
		Bounds.y = Y;
		Bounds.width = Width;
		Bounds.height = Height;
		return Bounds;
	}
	,__class__: flixel_tile_FlxBaseTilemap
});
var flixel_tile_FlxTilemapAutoTiling = $hxClasses["flixel.tile.FlxTilemapAutoTiling"] = { __ename__ : ["flixel","tile","FlxTilemapAutoTiling"], __constructs__ : ["OFF","AUTO","ALT"] };
flixel_tile_FlxTilemapAutoTiling.OFF = ["OFF",0];
flixel_tile_FlxTilemapAutoTiling.OFF.toString = $estr;
flixel_tile_FlxTilemapAutoTiling.OFF.__enum__ = flixel_tile_FlxTilemapAutoTiling;
flixel_tile_FlxTilemapAutoTiling.AUTO = ["AUTO",1];
flixel_tile_FlxTilemapAutoTiling.AUTO.toString = $estr;
flixel_tile_FlxTilemapAutoTiling.AUTO.__enum__ = flixel_tile_FlxTilemapAutoTiling;
flixel_tile_FlxTilemapAutoTiling.ALT = ["ALT",2];
flixel_tile_FlxTilemapAutoTiling.ALT.toString = $estr;
flixel_tile_FlxTilemapAutoTiling.ALT.__enum__ = flixel_tile_FlxTilemapAutoTiling;
flixel_tile_FlxTilemapAutoTiling.__empty_constructs__ = [flixel_tile_FlxTilemapAutoTiling.OFF,flixel_tile_FlxTilemapAutoTiling.AUTO,flixel_tile_FlxTilemapAutoTiling.ALT];
var flixel_tile_FlxTile = function(Tilemap,Index,Width,Height,Visible,AllowCollisions) {
	this.mapIndex = 0;
	this.callbackFunction = null;
	flixel_FlxObject.call(this,0,0,Width,Height);
	this.set_immovable(true);
	this.set_moves(false);
	this.tilemap = Tilemap;
	this.index = Index;
	this.set_visible(Visible);
	this.set_allowCollisions(AllowCollisions);
};
$hxClasses["flixel.tile.FlxTile"] = flixel_tile_FlxTile;
flixel_tile_FlxTile.__name__ = ["flixel","tile","FlxTile"];
flixel_tile_FlxTile.__super__ = flixel_FlxObject;
flixel_tile_FlxTile.prototype = $extend(flixel_FlxObject.prototype,{
	callbackFunction: null
	,filter: null
	,tilemap: null
	,index: null
	,mapIndex: null
	,frame: null
	,destroy: function() {
		this.callbackFunction = null;
		this.tilemap = null;
		this.frame = null;
		flixel_FlxObject.prototype.destroy.call(this);
	}
	,__class__: flixel_tile_FlxTile
});
var flixel_tile_FlxTileblock = function(X,Y,Width,Height) {
	flixel_FlxSprite.call(this,X,Y);
	this.makeGraphic(Width,Height,0,true);
	this.set_active(false);
	this.set_immovable(true);
	this.set_moves(false);
};
$hxClasses["flixel.tile.FlxTileblock"] = flixel_tile_FlxTileblock;
flixel_tile_FlxTileblock.__name__ = ["flixel","tile","FlxTileblock"];
flixel_tile_FlxTileblock.__super__ = flixel_FlxSprite;
flixel_tile_FlxTileblock.prototype = $extend(flixel_FlxSprite.prototype,{
	tileSprite: null
	,destroy: function() {
		this.tileSprite = flixel_util_FlxDestroyUtil.destroy(this.tileSprite);
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,loadFrames: function(tileFrames,empties) {
		if(empties == null) {
			empties = 0;
		}
		if(tileFrames == null) {
			return this;
		}
		this.tileSprite = this.tileSprite == null ? new flixel_FlxSprite() : this.tileSprite;
		this.tileSprite.set_frames(tileFrames);
		var spriteWidth = this.tileSprite.get_width() | 0;
		var spriteHeight = this.tileSprite.get_height() | 0;
		var total = this.tileSprite.numFrames + empties;
		var regen = false;
		if(this.get_width() % this.tileSprite.get_width() != 0) {
			this.set_width((this.get_width() / spriteWidth + 1 | 0) * spriteWidth);
			regen = true;
		}
		if(this.get_height() % this.tileSprite.get_height() != 0) {
			this.set_height((this.get_height() / spriteHeight + 1 | 0) * spriteHeight);
			regen = true;
		}
		if(regen) {
			this.makeGraphic(this.get_width() | 0,this.get_height() | 0,0,true);
		} else {
			flixel_util_FlxSpriteUtil.fill(this,0);
		}
		var row = 0;
		var column;
		var destinationX;
		var destinationY = 0;
		var widthInTiles = this.get_width() / spriteWidth | 0;
		var heightInTiles = this.get_height() / spriteHeight | 0;
		while(row < heightInTiles) {
			destinationX = 0;
			column = 0;
			while(column < widthInTiles) {
				if(flixel_FlxG.random["float"]() * total > empties) {
					this.tileSprite.animation.randomFrame();
					this.tileSprite.drawFrame();
					this.stamp(this.tileSprite,destinationX,destinationY);
				}
				destinationX += spriteWidth;
				++column;
			}
			destinationY += spriteHeight;
			++row;
		}
		this.dirty = true;
		return this;
	}
	,loadTiles: function(TileGraphic,TileWidth,TileHeight,Empties) {
		if(Empties == null) {
			Empties = 0;
		}
		if(TileHeight == null) {
			TileHeight = 0;
		}
		if(TileWidth == null) {
			TileWidth = 0;
		}
		if(TileGraphic == null) {
			return this;
		}
		var graph = flixel_FlxG.bitmap.add(TileGraphic);
		if(graph == null) {
			return this;
		}
		if(TileWidth == 0) {
			TileWidth = graph.height;
			if(TileWidth > graph.width) {
				TileWidth = graph.width;
			} else {
				TileWidth = TileWidth;
			}
		}
		if(TileHeight == 0) {
			TileHeight = TileWidth;
			if(TileHeight > graph.height) {
				TileHeight = graph.height;
			} else {
				TileHeight = TileHeight;
			}
		}
		var point = flixel_math_FlxPoint._pool.get().set(TileWidth,TileHeight);
		point._inPool = false;
		var tileFrames = flixel_graphics_frames_FlxTileFrames.fromGraphic(graph,point);
		return this.loadFrames(tileFrames,Empties);
	}
	,setTile: function(x,y,index) {
		this.tileSprite.animation.set_frameIndex(index);
		this.stamp(this.tileSprite,x * (this.tileSprite.get_width() | 0),y * (this.tileSprite.get_height() | 0));
		this.dirty = true;
	}
	,__class__: flixel_tile_FlxTileblock
});
var flixel_tile_GraphicAuto = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_tile_GraphicAuto.preload != null) {
		this.__fromImage(flixel_tile_GraphicAuto.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_tile_GraphicAuto.preload == null) {
				flixel_tile_GraphicAuto.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_tile_GraphicAuto.resourceName),flixel_tile_GraphicAuto.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.tile.GraphicAuto"] = flixel_tile_GraphicAuto;
flixel_tile_GraphicAuto.__name__ = ["flixel","tile","GraphicAuto"];
flixel_tile_GraphicAuto.preload = null;
flixel_tile_GraphicAuto.__super__ = openfl_display_BitmapData;
flixel_tile_GraphicAuto.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_tile_GraphicAuto
});
var flixel_tile_GraphicAutoAlt = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(flixel_tile_GraphicAutoAlt.preload != null) {
		this.__fromImage(flixel_tile_GraphicAutoAlt.preload);
	} else {
		var onload1 = function(b) {
			if(flixel_tile_GraphicAutoAlt.preload == null) {
				flixel_tile_GraphicAutoAlt.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(haxe_Resource.getString(flixel_tile_GraphicAutoAlt.resourceName),flixel_tile_GraphicAutoAlt.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["flixel.tile.GraphicAutoAlt"] = flixel_tile_GraphicAutoAlt;
flixel_tile_GraphicAutoAlt.__name__ = ["flixel","tile","GraphicAutoAlt"];
flixel_tile_GraphicAutoAlt.preload = null;
flixel_tile_GraphicAutoAlt.__super__ = openfl_display_BitmapData;
flixel_tile_GraphicAutoAlt.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: flixel_tile_GraphicAutoAlt
});
var flixel_tile_FlxTilemapBuffer = function(TileWidth,TileHeight,WidthInTiles,HeightInTiles,Camera,ScaleX,ScaleY) {
	if(ScaleY == null) {
		ScaleY = 1.0;
	}
	if(ScaleX == null) {
		ScaleX = 1.0;
	}
	this.antialiasing = false;
	this.columns = 0;
	this.rows = 0;
	this.dirty = false;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.updateColumns(TileWidth,WidthInTiles,ScaleX,Camera);
	this.updateRows(TileHeight,HeightInTiles,ScaleY,Camera);
	if(flixel_FlxG.renderBlit) {
		this.pixels = new openfl_display_BitmapData(this.columns * TileWidth | 0,this.rows * TileHeight | 0,true,0);
		this._flashRect = new openfl_geom_Rectangle(0,0,this.pixels.width,this.pixels.height);
		this._matrix = new openfl_geom_Matrix();
	}
	this.dirty = true;
};
$hxClasses["flixel.tile.FlxTilemapBuffer"] = flixel_tile_FlxTilemapBuffer;
flixel_tile_FlxTilemapBuffer.__name__ = ["flixel","tile","FlxTilemapBuffer"];
flixel_tile_FlxTilemapBuffer.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_tile_FlxTilemapBuffer.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,dirty: null
	,rows: null
	,columns: null
	,pixelPerfectRender: null
	,pixels: null
	,blend: null
	,antialiasing: null
	,_flashRect: null
	,_matrix: null
	,destroy: function() {
		if(flixel_FlxG.renderBlit) {
			this.pixels = null;
			this.blend = null;
			this._matrix = null;
		}
	}
	,fill: function(Color) {
		if(Color == null) {
			Color = 0;
		}
		if(flixel_FlxG.renderBlit) {
			this.pixels.fillRect(this._flashRect,Color);
		}
	}
	,draw: function(Camera,FlashPoint,ScaleX,ScaleY) {
		if(ScaleY == null) {
			ScaleY = 1.0;
		}
		if(ScaleX == null) {
			ScaleX = 1.0;
		}
		if(this.isPixelPerfectRender(Camera)) {
			FlashPoint.x = Math.floor(FlashPoint.x);
			FlashPoint.y = Math.floor(FlashPoint.y);
		}
		if(this.isPixelPerfectRender(Camera) && (ScaleX == 1.0 && ScaleY == 1.0) && this.blend == null) {
			Camera.buffer.copyPixels(this.pixels,this._flashRect,FlashPoint,null,null,true);
		} else {
			this._matrix.identity();
			this._matrix.scale(ScaleX,ScaleY);
			this._matrix.translate(FlashPoint.x,FlashPoint.y);
			Camera.buffer.draw(this.pixels,this._matrix,null,this.blend,null,this.antialiasing);
		}
	}
	,colorTransform: function(Transform) {
		this.pixels.colorTransform(this._flashRect,Transform);
	}
	,updateColumns: function(TileWidth,WidthInTiles,ScaleX,Camera) {
		if(ScaleX == null) {
			ScaleX = 1.0;
		}
		if(WidthInTiles < 0) {
			WidthInTiles = 0;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.columns = Math.ceil(Camera.width / (TileWidth * ScaleX)) + 1;
		if(this.columns > WidthInTiles) {
			this.columns = WidthInTiles;
		}
		this.width = this.columns * TileWidth * ScaleX | 0;
		this.dirty = true;
	}
	,updateRows: function(TileHeight,HeightInTiles,ScaleY,Camera) {
		if(ScaleY == null) {
			ScaleY = 1.0;
		}
		if(HeightInTiles < 0) {
			HeightInTiles = 0;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		this.rows = Math.ceil(Camera.height / (TileHeight * ScaleY)) + 1;
		if(this.rows > HeightInTiles) {
			this.rows = HeightInTiles;
		}
		this.height = this.rows * TileHeight * ScaleY | 0;
		this.dirty = true;
	}
	,isPixelPerfectRender: function(Camera) {
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		if(this.pixelPerfectRender == null) {
			return Camera.pixelPerfectRender;
		} else {
			return this.pixelPerfectRender;
		}
	}
	,__class__: flixel_tile_FlxTilemapBuffer
};
var flixel_tile_FlxTilemap = function() {
	this._checkBufferChanges = false;
	this._scaledTileHeight = 0;
	this._scaledTileWidth = 0;
	this._tileHeight = 0;
	this._tileWidth = 0;
	this._buffers = [];
	this._flashRect = new openfl_geom_Rectangle();
	this._flashPoint = new openfl_geom_Point();
	this.blend = null;
	this.colorTransform = new openfl_geom_ColorTransform();
	this.alpha = 1.0;
	this.color = 16777215;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	this.offset = point;
	this.antialiasing = false;
	this.useScaleHack = true;
	flixel_tile_FlxBaseTilemap.call(this);
	if(flixel_FlxG.renderTile) {
		this._helperPoint = new openfl_geom_Point();
		this._matrix = new flixel_math_FlxMatrix();
	}
	this.scale = new flixel_math_FlxCallbackPoint($bind(this,this.setScaleXCallback),$bind(this,this.setScaleYCallback),$bind(this,this.setScaleXYCallback));
	this.scale.set(1,1);
	flixel_FlxG.signals.gameResized.add($bind(this,this.onGameResized));
	flixel_FlxG.cameras.cameraAdded.add($bind(this,this.onCameraChanged));
	flixel_FlxG.cameras.cameraRemoved.add($bind(this,this.onCameraChanged));
	flixel_FlxG.cameras.cameraResized.add($bind(this,this.onCameraChanged));
	this.set_debugBoundingBoxColorSolid(-16744448);
	this.set_debugBoundingBoxColorPartial(-16181);
	this.set_debugBoundingBoxColorNotSolid(0);
	if(flixel_FlxG.renderBlit) {
		flixel_FlxG["debugger"].drawDebugChanged.add($bind(this,this.onDrawDebugChanged));
	}
};
$hxClasses["flixel.tile.FlxTilemap"] = flixel_tile_FlxTilemap;
flixel_tile_FlxTilemap.__name__ = ["flixel","tile","FlxTilemap"];
flixel_tile_FlxTilemap.__super__ = flixel_tile_FlxBaseTilemap;
flixel_tile_FlxTilemap.prototype = $extend(flixel_tile_FlxBaseTilemap.prototype,{
	useScaleHack: null
	,scale: null
	,antialiasing: null
	,offset: null
	,frames: null
	,graphic: null
	,color: null
	,alpha: null
	,colorTransform: null
	,blend: null
	,shader: null
	,_flashPoint: null
	,_flashRect: null
	,_buffers: null
	,_tileWidth: null
	,_tileHeight: null
	,_scaledTileWidth: null
	,_scaledTileHeight: null
	,_debugTileNotSolid: null
	,_debugTilePartial: null
	,_debugTileSolid: null
	,_debugRect: null
	,_helperPoint: null
	,_matrix: null
	,_checkBufferChanges: null
	,destroy: function() {
		this._flashPoint = null;
		this._flashRect = null;
		this._tileObjects = flixel_util_FlxDestroyUtil.destroyArray(this._tileObjects);
		this._buffers = flixel_util_FlxDestroyUtil.destroyArray(this._buffers);
		if(flixel_FlxG.renderBlit) {
			this._debugRect = null;
			this._debugTileNotSolid = flixel_util_FlxDestroyUtil.dispose(this._debugTileNotSolid);
			this._debugTilePartial = flixel_util_FlxDestroyUtil.dispose(this._debugTilePartial);
			this._debugTileSolid = flixel_util_FlxDestroyUtil.dispose(this._debugTileSolid);
		} else {
			this._helperPoint = null;
			this._matrix = null;
		}
		this.set_frames(null);
		this.set_graphic(null);
		this.scale = flixel_util_FlxDestroyUtil.destroy(this.scale);
		this.offset = flixel_util_FlxDestroyUtil.put(this.offset);
		this.colorTransform = null;
		flixel_FlxG.signals.gameResized.remove($bind(this,this.onGameResized));
		flixel_FlxG.cameras.cameraAdded.remove($bind(this,this.onCameraChanged));
		flixel_FlxG.cameras.cameraRemoved.remove($bind(this,this.onCameraChanged));
		flixel_FlxG.cameras.cameraResized.remove($bind(this,this.onCameraChanged));
		if(flixel_FlxG.renderBlit) {
			flixel_FlxG["debugger"].drawDebugChanged.remove($bind(this,this.onDrawDebugChanged));
		}
		this.shader = null;
		flixel_tile_FlxBaseTilemap.prototype.destroy.call(this);
	}
	,set_frames: function(value) {
		this.frames = value;
		if(value != null) {
			this._tileWidth = value.frames[0].sourceSize.x | 0;
			this._tileHeight = value.frames[0].sourceSize.y | 0;
			this._flashRect.setTo(0,0,this._tileWidth,this._tileHeight);
			this.set_graphic(value.parent);
			this.postGraphicLoad();
		}
		return value;
	}
	,onGameResized: function(_,_1) {
		this._checkBufferChanges = true;
	}
	,onCameraChanged: function(_) {
		this._checkBufferChanges = true;
	}
	,cacheGraphics: function(TileWidth,TileHeight,TileGraphic) {
		if(js_Boot.__instanceof(TileGraphic,flixel_graphics_frames_FlxFramesCollection)) {
			this.set_frames(TileGraphic);
			return;
		}
		var graph = flixel_FlxG.bitmap.add(TileGraphic);
		if(graph == null) {
			return;
		}
		this._tileWidth = TileWidth;
		if(this._tileWidth <= 0) {
			this._tileWidth = graph.height;
		}
		this._tileHeight = TileHeight;
		if(this._tileHeight <= 0) {
			this._tileHeight = this._tileWidth;
		}
		var X = this._tileWidth;
		var Y = this._tileHeight;
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		this.set_frames(flixel_graphics_frames_FlxTileFrames.fromGraphic(graph,point));
	}
	,initTileObjects: function() {
		if(this.frames == null) {
			return;
		}
		this._tileObjects = flixel_util_FlxDestroyUtil.destroyArray(this._tileObjects);
		this._tileObjects = [];
		var length = this.frames.frames.length;
		length += this._startingIndex;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			this._tileObjects[i] = new flixel_tile_FlxTile(this,i,this._tileWidth,this._tileHeight,i >= this._drawIndex,i >= this._collideIndex ? this.allowCollisions : 0);
		}
		this.updateDebugTileBoundingBoxSolid();
		this.updateDebugTileBoundingBoxNotSolid();
		this.updateDebugTileBoundingBoxPartial();
	}
	,updateDebugTileBoundingBoxSolid: function() {
		this._debugTileSolid = this.updateDebugTile(this._debugTileSolid,this.debugBoundingBoxColorSolid);
	}
	,updateDebugTileBoundingBoxNotSolid: function() {
		this._debugTileNotSolid = this.updateDebugTile(this._debugTileNotSolid,this.debugBoundingBoxColorNotSolid);
	}
	,updateDebugTileBoundingBoxPartial: function() {
		this._debugTilePartial = this.updateDebugTile(this._debugTilePartial,this.debugBoundingBoxColorPartial);
	}
	,updateDebugTile: function(tileBitmap,color) {
		if(flixel_FlxG.renderTile) {
			return null;
		}
		if(this._tileWidth <= 0 || this._tileHeight <= 0) {
			return tileBitmap;
		}
		if(tileBitmap != null && (tileBitmap.width != this._tileWidth || tileBitmap.height != this._tileHeight)) {
			tileBitmap = flixel_util_FlxDestroyUtil.dispose(tileBitmap);
		}
		if(tileBitmap == null) {
			tileBitmap = this.makeDebugTile(color);
		} else {
			tileBitmap.fillRect(tileBitmap.rect,0);
			this.drawDebugTile(tileBitmap,color);
		}
		this.setDirty();
		return tileBitmap;
	}
	,computeDimensions: function() {
		this._scaledTileWidth = this._tileWidth * this.scale.x;
		this._scaledTileHeight = this._tileHeight * this.scale.y;
		this.set_width(this.widthInTiles * this._scaledTileWidth);
		this.set_height(this.heightInTiles * this._scaledTileHeight);
	}
	,updateMap: function() {
		if(flixel_FlxG.renderBlit) {
			this._debugRect = new openfl_geom_Rectangle(0,0,this._tileWidth,this._tileHeight);
		}
		var numTiles = this._tileObjects.length;
		var _g1 = 0;
		while(_g1 < numTiles) {
			var i = _g1++;
			this.updateTile(i);
		}
	}
	,drawDebugOnCamera: function(Camera) {
		if(!flixel_FlxG.renderTile) {
			return;
		}
		var buffer = null;
		var l = flixel_FlxG.cameras.list.length;
		var _g1 = 0;
		while(_g1 < l) {
			var i = _g1++;
			if(flixel_FlxG.cameras.list[i] == Camera) {
				buffer = this._buffers[i];
				break;
			}
		}
		if(buffer == null) {
			return;
		}
		this._helperPoint.x = this.x - Camera.scroll.x * this.scrollFactor.x;
		this._helperPoint.y = this.y - Camera.scroll.y * this.scrollFactor.y;
		var rectWidth = this._scaledTileWidth;
		var rectHeight = this._scaledTileHeight;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = rectWidth;
		_this.height = rectHeight;
		_this._inPool = false;
		this._point.set_x(Camera.scroll.x * this.scrollFactor.x - this.x);
		this._point.set_y(Camera.scroll.y * this.scrollFactor.y - this.y);
		var screenXInTiles = Math.floor(this._point.x / this._scaledTileWidth);
		var screenYInTiles = Math.floor(this._point.y / this._scaledTileHeight);
		var screenRows = buffer.rows;
		var screenColumns = buffer.columns;
		var Max = this.widthInTiles - screenColumns;
		var lowerBound = screenXInTiles < 0 ? 0 : screenXInTiles;
		screenXInTiles = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
		var Max1 = this.heightInTiles - screenRows;
		var lowerBound1 = screenYInTiles < 0 ? 0 : screenYInTiles;
		screenYInTiles = (Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1) | 0;
		var rowIndex = screenYInTiles * this.widthInTiles + screenXInTiles;
		var columnIndex;
		var tile;
		var _g11 = 0;
		while(_g11 < screenRows) {
			++_g11;
			columnIndex = rowIndex;
			var _g3 = 0;
			while(_g3 < screenColumns) {
				++_g3;
				tile = this._tileObjects[this._data[columnIndex]];
				if(tile != null && tile.visible) {
					_this.x = this._helperPoint.x + columnIndex % this.widthInTiles * rectWidth;
					_this.y = this._helperPoint.y + Math.floor(columnIndex / this.widthInTiles) * rectHeight;
					this.drawDebugBoundingBox(Camera.debugLayer.get_graphics(),_this,tile.allowCollisions,tile.allowCollisions != 4369);
				}
				++columnIndex;
			}
			rowIndex += this.widthInTiles;
		}
		if(!_this._inPool) {
			_this._inPool = true;
			_this._weak = false;
			flixel_math_FlxRect._pool.putUnsafe(_this);
		}
	}
	,draw: function() {
		if(this.graphic == null) {
			return;
		}
		if(this._checkBufferChanges) {
			this.refreshBuffers();
			this._checkBufferChanges = false;
		}
		var camera;
		var buffer;
		var l = this.get_cameras().length;
		var _g1 = 0;
		while(_g1 < l) {
			var i = _g1++;
			camera = this.get_cameras()[i];
			if(!camera.visible || !camera.exists) {
				continue;
			}
			if(this._buffers[i] == null) {
				var tmp = this._buffers;
				var buffer1 = new flixel_tile_FlxTilemapBuffer(this._tileWidth,this._tileHeight,this.widthInTiles,this.heightInTiles,camera,this.scale.x,this.scale.y);
				buffer1.pixelPerfectRender = this.pixelPerfectRender;
				buffer1.antialiasing = this.antialiasing;
				tmp[i] = buffer1;
			}
			buffer = this._buffers[i];
			if(flixel_FlxG.renderBlit) {
				var _this = this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
				var Y = buffer.y;
				_this.set_x(_this.x + buffer.x);
				_this.set_y(_this.y + Y);
				buffer.dirty = buffer.dirty || this._point.x > 0 || this._point.y > 0 || this._point.x + buffer.width < camera.width || this._point.y + buffer.height < camera.height;
				if(buffer.dirty) {
					this.drawTilemap(buffer,camera);
				}
				var _this1 = this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
				var Y1 = buffer.y;
				_this1.set_x(_this1.x + buffer.x);
				_this1.set_y(_this1.y + Y1);
				var FlashPoint = this._flashPoint;
				if(FlashPoint == null) {
					FlashPoint = new openfl_geom_Point();
				}
				FlashPoint.x = _this1.x;
				FlashPoint.y = _this1.y;
				buffer.draw(camera,this._flashPoint,this.scale.x,this.scale.y);
			} else {
				this.drawTilemap(buffer,camera);
			}
			flixel_FlxBasic.visibleCount++;
		}
		if(flixel_FlxG["debugger"].drawDebug) {
			this.drawDebug();
		}
	}
	,refreshBuffers: function() {
		var _g1 = 0;
		var _g = this.get_cameras().length;
		while(_g1 < _g) {
			var i = _g1++;
			var camera = this.get_cameras()[i];
			var buffer = this._buffers[i];
			flixel_tile_FlxTilemap._helperBuffer.updateColumns(this._tileWidth,this.widthInTiles,this.scale.x,camera);
			flixel_tile_FlxTilemap._helperBuffer.updateRows(this._tileHeight,this.heightInTiles,this.scale.y,camera);
			if(buffer == null || flixel_tile_FlxTilemap._helperBuffer.columns != buffer.columns || flixel_tile_FlxTilemap._helperBuffer.rows != buffer.rows) {
				if(buffer != null) {
					buffer.destroy();
				}
				var tmp = this._buffers;
				var buffer1 = new flixel_tile_FlxTilemapBuffer(this._tileWidth,this._tileHeight,this.widthInTiles,this.heightInTiles,camera,this.scale.x,this.scale.y);
				buffer1.pixelPerfectRender = this.pixelPerfectRender;
				buffer1.antialiasing = this.antialiasing;
				tmp[i] = buffer1;
			}
		}
	}
	,setDirty: function(Dirty) {
		if(Dirty == null) {
			Dirty = true;
		}
		if(flixel_FlxG.renderTile) {
			return;
		}
		var _g = 0;
		var _g1 = this._buffers;
		while(_g < _g1.length) {
			var buffer = _g1[_g];
			++_g;
			if(buffer != null) {
				buffer.dirty = Dirty;
			}
		}
	}
	,overlapsWithCallback: function(Object,Callback,FlipCallbackParams,Position) {
		if(FlipCallbackParams == null) {
			FlipCallbackParams = false;
		}
		var results = false;
		var xPos = this.x;
		var yPos = this.y;
		if(Position != null) {
			xPos = Position.x;
			yPos = Position.y;
		}
		var selectionX = Math.floor((Object.x - xPos) / this._scaledTileWidth);
		var selectionY = Math.floor((Object.y - yPos) / this._scaledTileHeight);
		var selectionWidth = selectionX + Math.ceil(Object.get_width() / this._scaledTileWidth) + 1;
		var selectionHeight = selectionY + Math.ceil(Object.get_height() / this._scaledTileHeight) + 1;
		var Max = this.widthInTiles;
		var lowerBound = selectionX < 0 ? 0 : selectionX;
		selectionX = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
		var Max1 = this.heightInTiles;
		var lowerBound1 = selectionY < 0 ? 0 : selectionY;
		selectionY = (Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1) | 0;
		var Max2 = this.widthInTiles;
		var lowerBound2 = selectionWidth < 0 ? 0 : selectionWidth;
		selectionWidth = (Max2 != null && lowerBound2 > Max2 ? Max2 : lowerBound2) | 0;
		var Max3 = this.heightInTiles;
		var lowerBound3 = selectionHeight < 0 ? 0 : selectionHeight;
		selectionHeight = (Max3 != null && lowerBound3 > Max3 ? Max3 : lowerBound3) | 0;
		var rowStart = selectionY * this.widthInTiles;
		var column;
		var tile;
		var overlapFound;
		var deltaX = xPos - this.last.x;
		var deltaY = yPos - this.last.y;
		var _g1 = selectionY;
		var _g = selectionHeight;
		while(_g1 < _g) {
			var row = _g1++;
			column = selectionX;
			while(column < selectionWidth) {
				var index = rowStart + column;
				if(index < 0 || index > this._data.length - 1) {
					++column;
					continue;
				}
				var dataIndex = this._data[index];
				if(dataIndex < 0) {
					++column;
					continue;
				}
				tile = this._tileObjects[dataIndex];
				tile.set_width(this._scaledTileWidth);
				tile.set_height(this._scaledTileHeight);
				tile.set_x(xPos + column * tile.get_width());
				tile.set_y(yPos + row * tile.get_height());
				tile.last.set_x(tile.x - deltaX);
				tile.last.set_y(tile.y - deltaY);
				if(Object.x + Object.get_width() > tile.x && Object.x < tile.x + tile.get_width() && Object.y + Object.get_height() > tile.y) {
					overlapFound = Object.y < tile.y + tile.get_height();
				} else {
					overlapFound = false;
				}
				if(tile.allowCollisions != 0) {
					if(Callback != null) {
						if(FlipCallbackParams) {
							overlapFound = Callback(Object,tile);
						} else {
							overlapFound = Callback(tile,Object);
						}
					}
				}
				if(overlapFound) {
					if(tile.callbackFunction != null && (tile.filter == null || js_Boot.__instanceof(Object,tile.filter))) {
						tile.mapIndex = rowStart + column;
						tile.callbackFunction(tile,Object);
					}
					if(tile.allowCollisions != 0) {
						results = true;
					}
				}
				++column;
			}
			rowStart += this.widthInTiles;
		}
		return results;
	}
	,getTileIndexByCoords: function(Coord) {
		var result = ((Coord.y - this.y) / this._scaledTileHeight | 0) * this.widthInTiles + ((Coord.x - this.x) / this._scaledTileWidth | 0);
		if(Coord._weak) {
			Coord.put();
		}
		return result;
	}
	,getTileCoordsByIndex: function(Index,Midpoint) {
		if(Midpoint == null) {
			Midpoint = true;
		}
		var X = this.x + Index % this.widthInTiles * this._scaledTileWidth;
		var Y = this.y + (Index / this.widthInTiles | 0) * this._scaledTileHeight;
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		if(Midpoint) {
			point.set_x(point.x + this._scaledTileWidth * 0.5);
			point.set_y(point.y + this._scaledTileHeight * 0.5);
		}
		return point;
	}
	,getTileCoords: function(Index,Midpoint) {
		if(Midpoint == null) {
			Midpoint = true;
		}
		var array = null;
		var l = this.widthInTiles * this.heightInTiles;
		var _g1 = 0;
		while(_g1 < l) {
			var i = _g1++;
			if(this._data[i] == Index) {
				var X = this.x + i % this.widthInTiles * this._scaledTileWidth;
				var Y = this.y + (i / this.widthInTiles | 0) * this._scaledTileHeight;
				var point = flixel_math_FlxPoint._pool.get().set(X,Y);
				point._inPool = false;
				if(Midpoint) {
					point.set_x(point.x + this._scaledTileWidth * 0.5);
					point.set_y(point.y + this._scaledTileHeight * 0.5);
				}
				if(array == null) {
					array = [];
				}
				array.push(point);
			}
		}
		return array;
	}
	,follow: function(Camera,Border,UpdateWorld) {
		if(UpdateWorld == null) {
			UpdateWorld = true;
		}
		if(Border == null) {
			Border = 0;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		Camera.setScrollBoundsRect(this.x + Border * this._scaledTileWidth,this.y + Border * this._scaledTileHeight,this.get_width() - Border * this._scaledTileWidth * 2,this.get_height() - Border * this._scaledTileHeight * 2,UpdateWorld);
	}
	,ray: function(Start,End,Result,Resolution) {
		if(Resolution == null) {
			Resolution = 1;
		}
		var step = this._scaledTileWidth;
		if(this._scaledTileHeight < this._scaledTileWidth) {
			step = this._scaledTileHeight;
		}
		step /= Resolution;
		var deltaX = End.x - Start.x;
		var deltaY = End.y - Start.y;
		var distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
		var steps = Math.ceil(distance / step);
		var stepX = deltaX / steps;
		var stepY = deltaY / steps;
		var curX = Start.x - stepX - this.x;
		var curY = Start.y - stepY - this.y;
		var tileX;
		var tileY;
		var i = 0;
		if(Start._weak) {
			Start.put();
		}
		if(End._weak) {
			End.put();
		}
		while(i < steps) {
			curX += stepX;
			curY += stepY;
			if(curX < 0 || curX > this.get_width() || curY < 0 || curY > this.get_height()) {
				++i;
				continue;
			}
			tileX = Math.floor(curX / this._scaledTileWidth);
			tileY = Math.floor(curY / this._scaledTileHeight);
			if(this._tileObjects[this._data[tileY * this.widthInTiles + tileX]].allowCollisions != 0) {
				tileX *= this._scaledTileWidth | 0;
				tileY *= this._scaledTileHeight | 0;
				var rx = 0;
				var ry = 0;
				var q;
				var lx = curX - stepX;
				var ly = curY - stepY;
				q = tileX;
				if(deltaX < 0) {
					q += this._scaledTileWidth;
				}
				rx = q;
				ry = ly + stepY * ((q - lx) / stepX);
				if(ry >= tileY && ry <= tileY + this._scaledTileHeight) {
					if(Result == null) {
						var point = flixel_math_FlxPoint._pool.get().set(0,0);
						point._inPool = false;
						Result = point;
					}
					Result.set(rx,ry);
					return false;
				}
				q = tileY;
				if(deltaY < 0) {
					q += this._scaledTileHeight;
				}
				rx = lx + stepX * ((q - ly) / stepY);
				ry = q;
				if(rx >= tileX && rx <= tileX + this._scaledTileWidth) {
					if(Result == null) {
						var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
						point1._inPool = false;
						Result = point1;
					}
					Result.set(rx,ry);
					return false;
				}
				return true;
			}
			++i;
		}
		return true;
	}
	,tileToSprite: function(X,Y,NewTile,SpriteFactory) {
		if(NewTile == null) {
			NewTile = 0;
		}
		if(SpriteFactory == null) {
			SpriteFactory = $bind(this,this.defaultTileToSprite);
		}
		var rowIndex = X + Y * this.widthInTiles;
		var tile = this._tileObjects[this._data[rowIndex]];
		var image = null;
		if(tile != null && tile.visible) {
			image = flixel_graphics_frames_FlxImageFrame.fromFrame(tile.frame);
		} else {
			var image1 = this.graphic;
			var Width = this._tileWidth;
			var Height = this._tileHeight;
			var _this = flixel_math_FlxRect._pool.get();
			_this.x = 0;
			_this.y = 0;
			_this.width = Width;
			_this.height = Height;
			_this._inPool = false;
			image = flixel_graphics_frames_FlxImageFrame.fromEmptyFrame(image1,_this);
		}
		var tileX = X * this._tileWidth * this.scale.x + this.x;
		var tileY = Y * this._tileHeight * this.scale.y + this.y;
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var point1 = this.scale;
		point.set_x(point1.x);
		point.set_y(point1.y);
		if(point1._weak) {
			point1.put();
		}
		var tileSprite = SpriteFactory({ graphic : image, x : tileX, y : tileY, scale : point, alpha : this.alpha, blend : this.blend});
		if(NewTile >= 0) {
			this.setTile(X,Y,NewTile);
		}
		return tileSprite;
	}
	,updateBuffers: function() {
		flixel_util_FlxDestroyUtil.destroyArray(this._buffers);
		this._buffers = [];
	}
	,drawTilemap: function(Buffer,Camera) {
		var isColored = this.alpha != 1 || this.color != 16777215;
		var drawX = 0;
		var drawY = 0;
		var scaledWidth = 0;
		var scaledHeight = 0;
		var drawItem = null;
		if(flixel_FlxG.renderBlit) {
			Buffer.fill();
		} else {
			var _this = this.getScreenPosition(this._point,Camera).subtractPoint(this.offset);
			var FlashPoint = this._helperPoint;
			if(FlashPoint == null) {
				FlashPoint = new openfl_geom_Point();
			}
			FlashPoint.x = _this.x;
			FlashPoint.y = _this.y;
			this._helperPoint.x = this.isPixelPerfectRender(Camera) ? Math.floor(this._helperPoint.x) : this._helperPoint.x;
			this._helperPoint.y = this.isPixelPerfectRender(Camera) ? Math.floor(this._helperPoint.y) : this._helperPoint.y;
			scaledWidth = this._scaledTileWidth;
			scaledHeight = this._scaledTileHeight;
			var hasColorOffsets = this.colorTransform != null && flixel_util_FlxColorTransformUtil.hasRGBAOffsets(this.colorTransform);
			drawItem = Camera.startQuadBatch(this.graphic,isColored,hasColorOffsets,this.blend,this.antialiasing,this.shader);
		}
		this._point.set_x(Camera.scroll.x * this.scrollFactor.x - this.x - this.offset.x);
		this._point.set_y(Camera.scroll.y * this.scrollFactor.y - this.y - this.offset.y);
		var screenXInTiles = Math.floor(this._point.x / this._scaledTileWidth);
		var screenYInTiles = Math.floor(this._point.y / this._scaledTileHeight);
		var screenRows = Buffer.rows;
		var screenColumns = Buffer.columns;
		var Max = this.widthInTiles - screenColumns;
		var lowerBound = screenXInTiles < 0 ? 0 : screenXInTiles;
		screenXInTiles = (Max != null && lowerBound > Max ? Max : lowerBound) | 0;
		var Max1 = this.heightInTiles - screenRows;
		var lowerBound1 = screenYInTiles < 0 ? 0 : screenYInTiles;
		screenYInTiles = (Max1 != null && lowerBound1 > Max1 ? Max1 : lowerBound1) | 0;
		var rowIndex = screenYInTiles * this.widthInTiles + screenXInTiles;
		this._flashPoint.y = 0;
		var columnIndex;
		var tile;
		var frame;
		var debugTile;
		var _g1 = 0;
		while(_g1 < screenRows) {
			++_g1;
			columnIndex = rowIndex;
			this._flashPoint.x = 0;
			var _g3 = 0;
			while(_g3 < screenColumns) {
				++_g3;
				tile = this._tileObjects[this._data[columnIndex]];
				if(tile != null && tile.visible && tile.frame.type != 2) {
					frame = tile.frame;
					if(flixel_FlxG.renderBlit) {
						frame.paint(Buffer.pixels,this._flashPoint,true);
						if(flixel_FlxG["debugger"].drawDebug && !this.ignoreDrawDebug) {
							if(tile.allowCollisions <= 0) {
								debugTile = this._debugTileNotSolid;
							} else if(tile.allowCollisions != 4369) {
								debugTile = this._debugTilePartial;
							} else {
								debugTile = this._debugTileSolid;
							}
							var _this1 = this.offset;
							var FlashPoint1 = this._flashPoint;
							FlashPoint1.x += _this1.x;
							FlashPoint1.y += _this1.y;
							Buffer.pixels.copyPixels(debugTile,this._debugRect,this._flashPoint,null,null,true);
							var _this2 = this.offset;
							var FlashPoint2 = this._flashPoint;
							FlashPoint2.x -= _this2.x;
							FlashPoint2.y -= _this2.y;
						}
					} else {
						drawX = this._helperPoint.x + columnIndex % this.widthInTiles * scaledWidth;
						drawY = this._helperPoint.y + Math.floor(columnIndex / this.widthInTiles) * scaledHeight;
						this._matrix.identity();
						if(frame.angle != 0) {
							frame.prepareMatrix(this._matrix);
						}
						var scaleX = this.scale.x;
						var scaleY = this.scale.y;
						if(this.useScaleHack) {
							scaleX += 1 / (frame.sourceSize.x * Camera.totalScaleX);
							scaleY += 1 / (frame.sourceSize.y * Camera.totalScaleY);
						}
						this._matrix.scale(scaleX,scaleY);
						this._matrix.translate(drawX,drawY);
						drawItem.addQuad(frame,this._matrix,this.colorTransform);
					}
				}
				if(flixel_FlxG.renderBlit) {
					this._flashPoint.x += this._tileWidth;
				}
				++columnIndex;
			}
			if(flixel_FlxG.renderBlit) {
				this._flashPoint.y += this._tileHeight;
			}
			rowIndex += this.widthInTiles;
		}
		Buffer.x = screenXInTiles * this._scaledTileWidth;
		Buffer.y = screenYInTiles * this._scaledTileHeight;
		if(flixel_FlxG.renderBlit) {
			if(isColored) {
				Buffer.colorTransform(this.colorTransform);
			}
			Buffer.blend = this.blend;
		}
		Buffer.dirty = false;
	}
	,makeDebugTile: function(color) {
		if(flixel_FlxG.renderTile) {
			return null;
		}
		var debugTile = new openfl_display_BitmapData(this._tileWidth,this._tileHeight,true,0);
		this.drawDebugTile(debugTile,color);
		return debugTile;
	}
	,drawDebugTile: function(debugTile,color) {
		if(color != 0) {
			var gfx = flixel_util_FlxSpriteUtil.flashGfx;
			gfx.clear();
			gfx.moveTo(0,0);
			gfx.lineStyle(1,color,0.5);
			gfx.lineTo(this._tileWidth - 1,0);
			gfx.lineTo(this._tileWidth - 1,this._tileHeight - 1);
			gfx.lineTo(0,this._tileHeight - 1);
			gfx.lineTo(0,0);
			debugTile.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
		}
	}
	,onDrawDebugChanged: function() {
		this.setDirty();
	}
	,updateTile: function(Index) {
		var tile = this._tileObjects[Index];
		if(tile == null || !tile.visible) {
			return;
		}
		tile.frame = this.frames.frames[Index - this._startingIndex];
	}
	,createBuffer: function(camera) {
		var buffer = new flixel_tile_FlxTilemapBuffer(this._tileWidth,this._tileHeight,this.widthInTiles,this.heightInTiles,camera,this.scale.x,this.scale.y);
		buffer.pixelPerfectRender = this.pixelPerfectRender;
		buffer.antialiasing = this.antialiasing;
		return buffer;
	}
	,set_antialiasing: function(value) {
		var _g = 0;
		var _g1 = this._buffers;
		while(_g < _g1.length) {
			var buffer = _g1[_g];
			++_g;
			buffer.antialiasing = value;
		}
		return this.antialiasing = value;
	}
	,set_graphic: function(Value) {
		if(this.graphic != Value) {
			if(Value != null) {
				var _g1 = Value.get_useCount();
				Value.set_useCount(_g1 + 1);
			}
			if(this.graphic != null) {
				var _g = this.graphic;
				var _g11 = _g.get_useCount();
				_g.set_useCount(_g11 - 1);
			}
		}
		return this.graphic = Value;
	}
	,set_pixelPerfectRender: function(Value) {
		if(this._buffers != null) {
			var _g = 0;
			var _g1 = this._buffers;
			while(_g < _g1.length) {
				var buffer = _g1[_g];
				++_g;
				buffer.pixelPerfectRender = Value;
			}
		}
		return this.pixelPerfectRender = Value;
	}
	,set_alpha: function(Alpha) {
		var lowerBound = Alpha < 0 ? 0 : Alpha;
		this.alpha = lowerBound > 1 ? 1 : lowerBound;
		this.updateColorTransform();
		return this.alpha;
	}
	,set_color: function(Color) {
		if(this.color == Color) {
			return Color;
		}
		this.color = Color;
		this.updateColorTransform();
		return this.color;
	}
	,updateColorTransform: function() {
		if(this.colorTransform == null) {
			this.colorTransform = new openfl_geom_ColorTransform();
		}
		if(this.alpha != 1 || this.color != 16777215) {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,(this.color >> 16 & 255) / 255,(this.color >> 8 & 255) / 255,(this.color & 255) / 255,this.alpha);
		} else {
			flixel_util_FlxColorTransformUtil.setMultipliers(this.colorTransform,1,1,1,1);
		}
		this.setDirty();
	}
	,set_blend: function(Value) {
		this.setDirty();
		return this.blend = Value;
	}
	,setScaleXYCallback: function(Scale) {
		this.setScaleXCallback(Scale);
		this.setScaleYCallback(Scale);
	}
	,setScaleXCallback: function(Scale) {
		this._scaledTileWidth = this._tileWidth * this.scale.x;
		this.set_width(this.widthInTiles * this._scaledTileWidth);
		if(this.get_cameras() == null) {
			return;
		}
		var _g1 = 0;
		var _g = this.get_cameras().length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._buffers[i] != null) {
				this._buffers[i].updateColumns(this._tileWidth,this.widthInTiles,this.scale.x,this.get_cameras()[i]);
			}
		}
	}
	,setScaleYCallback: function(Scale) {
		this._scaledTileHeight = this._tileHeight * this.scale.y;
		this.set_height(this.heightInTiles * this._scaledTileHeight);
		if(this.get_cameras() == null) {
			return;
		}
		var _g1 = 0;
		var _g = this.get_cameras().length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this._buffers[i] != null) {
				this._buffers[i].updateRows(this._tileHeight,this.heightInTiles,this.scale.y,this.get_cameras()[i]);
			}
		}
	}
	,defaultTileToSprite: function(TileProperties) {
		var tileSprite = new flixel_FlxSprite(TileProperties.x,TileProperties.y);
		tileSprite.set_frames(TileProperties.graphic);
		var _this = tileSprite.scale;
		var point = TileProperties.scale;
		_this.set_x(point.x);
		_this.set_y(point.y);
		if(point._weak) {
			point.put();
		}
		TileProperties.scale = flixel_util_FlxDestroyUtil.put(TileProperties.scale);
		tileSprite.set_alpha(TileProperties.alpha);
		tileSprite.set_blend(TileProperties.blend);
		return tileSprite;
	}
	,set_allowCollisions: function(Value) {
		var _g = 0;
		var _g1 = this._tileObjects;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			if(tile.index >= this._collideIndex) {
				tile.set_allowCollisions(Value);
			}
		}
		return flixel_tile_FlxBaseTilemap.prototype.set_allowCollisions.call(this,Value);
	}
	,set_debugBoundingBoxColorSolid: function(color) {
		flixel_tile_FlxBaseTilemap.prototype.set_debugBoundingBoxColorSolid.call(this,color);
		this.updateDebugTileBoundingBoxSolid();
		return color;
	}
	,set_debugBoundingBoxColorNotSolid: function(color) {
		flixel_tile_FlxBaseTilemap.prototype.set_debugBoundingBoxColorNotSolid.call(this,color);
		this.updateDebugTileBoundingBoxNotSolid();
		return color;
	}
	,set_debugBoundingBoxColorPartial: function(color) {
		flixel_tile_FlxBaseTilemap.prototype.set_debugBoundingBoxColorPartial.call(this,color);
		this.updateDebugTileBoundingBoxPartial();
		return color;
	}
	,__class__: flixel_tile_FlxTilemap
	,__properties__: $extend(flixel_tile_FlxBaseTilemap.prototype.__properties__,{set_blend:"set_blend",set_alpha:"set_alpha",set_color:"set_color",set_graphic:"set_graphic",set_frames:"set_frames",set_antialiasing:"set_antialiasing"})
});
var flixel_tweens_FlxEase = function() { };
$hxClasses["flixel.tweens.FlxEase"] = flixel_tweens_FlxEase;
flixel_tweens_FlxEase.__name__ = ["flixel","tweens","FlxEase"];
flixel_tweens_FlxEase.quadIn = function(t) {
	return t * t;
};
flixel_tweens_FlxEase.quadOut = function(t) {
	return -t * (t - 2);
};
flixel_tweens_FlxEase.quadInOut = function(t) {
	if(t <= .5) {
		return t * t * 2;
	} else {
		return 1 - --t * t * 2;
	}
};
flixel_tweens_FlxEase.cubeIn = function(t) {
	return t * t * t;
};
flixel_tweens_FlxEase.cubeOut = function(t) {
	return 1 + --t * t * t;
};
flixel_tweens_FlxEase.cubeInOut = function(t) {
	if(t <= .5) {
		return t * t * t * 4;
	} else {
		return 1 + --t * t * t * 4;
	}
};
flixel_tweens_FlxEase.quartIn = function(t) {
	return t * t * t * t;
};
flixel_tweens_FlxEase.quartOut = function(t) {
	return 1 - --t * t * t * t;
};
flixel_tweens_FlxEase.quartInOut = function(t) {
	if(t <= .5) {
		return t * t * t * t * 8;
	} else {
		t = t * 2 - 2;
		return (1 - t * t * t * t) / 2 + .5;
	}
};
flixel_tweens_FlxEase.quintIn = function(t) {
	return t * t * t * t * t;
};
flixel_tweens_FlxEase.quintOut = function(t) {
	return --t * t * t * t * t + 1;
};
flixel_tweens_FlxEase.quintInOut = function(t) {
	if((t *= 2) < 1) {
		return t * t * t * t * t / 2;
	} else {
		return ((t -= 2) * t * t * t * t + 2) / 2;
	}
};
flixel_tweens_FlxEase.sineIn = function(t) {
	return -Math.cos(flixel_tweens_FlxEase.PI2 * t) + 1;
};
flixel_tweens_FlxEase.sineOut = function(t) {
	return Math.sin(flixel_tweens_FlxEase.PI2 * t);
};
flixel_tweens_FlxEase.sineInOut = function(t) {
	return -Math.cos(Math.PI * t) / 2 + .5;
};
flixel_tweens_FlxEase.bounceIn = function(t) {
	t = 1 - t;
	if(t < flixel_tweens_FlxEase.B1) {
		return 1 - 7.5625 * t * t;
	}
	if(t < flixel_tweens_FlxEase.B2) {
		return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75);
	}
	if(t < flixel_tweens_FlxEase.B4) {
		return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375);
	}
	return 1 - (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375);
};
flixel_tweens_FlxEase.bounceOut = function(t) {
	if(t < flixel_tweens_FlxEase.B1) {
		return 7.5625 * t * t;
	}
	if(t < flixel_tweens_FlxEase.B2) {
		return 7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75;
	}
	if(t < flixel_tweens_FlxEase.B4) {
		return 7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375;
	}
	return 7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375;
};
flixel_tweens_FlxEase.bounceInOut = function(t) {
	if(t < .5) {
		t = 1 - t * 2;
		if(t < flixel_tweens_FlxEase.B1) {
			return (1 - 7.5625 * t * t) / 2;
		}
		if(t < flixel_tweens_FlxEase.B2) {
			return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75)) / 2;
		}
		if(t < flixel_tweens_FlxEase.B4) {
			return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375)) / 2;
		}
		return (1 - (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375)) / 2;
	}
	t = t * 2 - 1;
	if(t < flixel_tweens_FlxEase.B1) {
		return 7.5625 * t * t / 2 + .5;
	}
	if(t < flixel_tweens_FlxEase.B2) {
		return (7.5625 * (t - flixel_tweens_FlxEase.B3) * (t - flixel_tweens_FlxEase.B3) + .75) / 2 + .5;
	}
	if(t < flixel_tweens_FlxEase.B4) {
		return (7.5625 * (t - flixel_tweens_FlxEase.B5) * (t - flixel_tweens_FlxEase.B5) + .9375) / 2 + .5;
	}
	return (7.5625 * (t - flixel_tweens_FlxEase.B6) * (t - flixel_tweens_FlxEase.B6) + .984375) / 2 + .5;
};
flixel_tweens_FlxEase.circIn = function(t) {
	return -(Math.sqrt(1 - t * t) - 1);
};
flixel_tweens_FlxEase.circOut = function(t) {
	return Math.sqrt(1 - (t - 1) * (t - 1));
};
flixel_tweens_FlxEase.circInOut = function(t) {
	if(t <= .5) {
		return (Math.sqrt(1 - t * t * 4) - 1) / -2;
	} else {
		return (Math.sqrt(1 - (t * 2 - 2) * (t * 2 - 2)) + 1) / 2;
	}
};
flixel_tweens_FlxEase.expoIn = function(t) {
	return Math.pow(2,10 * (t - 1));
};
flixel_tweens_FlxEase.expoOut = function(t) {
	return -Math.pow(2,-10 * t) + 1;
};
flixel_tweens_FlxEase.expoInOut = function(t) {
	if(t < .5) {
		return Math.pow(2,10 * (t * 2 - 1)) / 2;
	} else {
		return (-Math.pow(2,-10 * (t * 2 - 1)) + 2) / 2;
	}
};
flixel_tweens_FlxEase.backIn = function(t) {
	return t * t * (2.70158 * t - 1.70158);
};
flixel_tweens_FlxEase.backOut = function(t) {
	return 1 - --t * t * (-2.70158 * t - 1.70158);
};
flixel_tweens_FlxEase.backInOut = function(t) {
	t *= 2;
	if(t < 1) {
		return t * t * (2.70158 * t - 1.70158) / 2;
	}
	--t;
	return (1 - --t * t * (-2.70158 * t - 1.70158)) / 2 + .5;
};
flixel_tweens_FlxEase.elasticIn = function(t) {
	return -(flixel_tweens_FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,10 * --t) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel_tweens_FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD));
};
flixel_tweens_FlxEase.elasticOut = function(t) {
	return flixel_tweens_FlxEase.ELASTIC_AMPLITUDE * Math.pow(2,-10 * t) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / (2 * Math.PI) * Math.asin(1 / flixel_tweens_FlxEase.ELASTIC_AMPLITUDE)) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD) + 1;
};
flixel_tweens_FlxEase.elasticInOut = function(t) {
	if(t < 0.5) {
		return -0.5 * (Math.pow(2,10 * (t -= 0.5)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD));
	}
	return Math.pow(2,-10 * (t -= 0.5)) * Math.sin((t - flixel_tweens_FlxEase.ELASTIC_PERIOD / 4) * (2 * Math.PI) / flixel_tweens_FlxEase.ELASTIC_PERIOD) * 0.5 + 1;
};
var flixel_tweens_FlxTween = function(Options,manager) {
	this._waitingForRestart = false;
	this._running = false;
	this._delayToUse = 0;
	this._secondsSinceStart = 0;
	this.loopDelay = 0;
	this.startDelay = 0;
	this.executions = 0;
	this.scale = 0;
	this.duration = 0;
	this.active = false;
	Options = this.resolveTweenOptions(Options);
	this.set_type(Options.type);
	this.onStart = Options.onStart;
	this.onUpdate = Options.onUpdate;
	this.onComplete = Options.onComplete;
	this.ease = Options.ease;
	this.setDelays(Options.startDelay,Options.loopDelay);
	this.manager = manager != null ? manager : flixel_tweens_FlxTween.globalManager;
};
$hxClasses["flixel.tweens.FlxTween"] = flixel_tweens_FlxTween;
flixel_tweens_FlxTween.__name__ = ["flixel","tweens","FlxTween"];
flixel_tweens_FlxTween.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_tweens_FlxTween.globalManager = null;
flixel_tweens_FlxTween.tween = function(Object,Values,Duration,Options) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.tween(Object,Values,Duration,Options);
};
flixel_tweens_FlxTween.num = function(FromValue,ToValue,Duration,Options,TweenFunction) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.num(FromValue,ToValue,Duration,Options,TweenFunction);
};
flixel_tweens_FlxTween.angle = function(Sprite,FromAngle,ToAngle,Duration,Options) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.angle(Sprite,FromAngle,ToAngle,Duration,Options);
};
flixel_tweens_FlxTween.color = function(Sprite,Duration,FromColor,ToColor,Options) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.color(Sprite,Duration,FromColor,ToColor,Options);
};
flixel_tweens_FlxTween.linearMotion = function(Object,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.linearMotion(Object,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.quadMotion = function(Object,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.quadMotion(Object,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.cubicMotion = function(Object,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options) {
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_tweens_FlxTween.globalManager.cubicMotion(Object,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options);
};
flixel_tweens_FlxTween.circularMotion = function(Object,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.circularMotion(Object,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.linearPath = function(Object,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.linearPath(Object,Points,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.quadPath = function(Object,Points,DurationOrSpeed,UseDuration,Options) {
	if(UseDuration == null) {
		UseDuration = true;
	}
	if(DurationOrSpeed == null) {
		DurationOrSpeed = 1;
	}
	return flixel_tweens_FlxTween.globalManager.quadPath(Object,Points,DurationOrSpeed,UseDuration,Options);
};
flixel_tweens_FlxTween.prototype = {
	manager: null
	,active: null
	,duration: null
	,ease: null
	,onStart: null
	,onUpdate: null
	,onComplete: null
	,type: null
	,finished: null
	,scale: null
	,backward: null
	,executions: null
	,startDelay: null
	,loopDelay: null
	,_secondsSinceStart: null
	,_delayToUse: null
	,_running: null
	,_waitingForRestart: null
	,_chainedTweens: null
	,_nextTweenInChain: null
	,resolveTweenOptions: function(Options) {
		if(Options == null) {
			Options = { type : 8};
		}
		if(Options.type == null) {
			Options.type = 8;
		}
		return Options;
	}
	,destroy: function() {
		this.onStart = null;
		this.onUpdate = null;
		this.onComplete = null;
		this.ease = null;
		this.manager = null;
		this._chainedTweens = null;
		this._nextTweenInChain = null;
	}
	,then: function(tween) {
		return this.addChainedTween(tween);
	}
	,wait: function(delay) {
		return this.addChainedTween(flixel_tweens_FlxTween.num(0,0,delay));
	}
	,addChainedTween: function(tween) {
		tween.setVarsOnEnd();
		tween.manager.remove(tween,false);
		if(this._chainedTweens == null) {
			this._chainedTweens = [];
		}
		this._chainedTweens.push(tween);
		return this;
	}
	,update: function(elapsed) {
		this._secondsSinceStart += elapsed;
		var delay = this.executions > 0 ? this.loopDelay : this.startDelay;
		if(this._secondsSinceStart < delay) {
			return;
		}
		this.scale = Math.max(this._secondsSinceStart - delay,0) / this.duration;
		if(this.ease != null) {
			this.scale = this.ease(this.scale);
		}
		if(this.backward) {
			this.scale = 1 - this.scale;
		}
		if(this._secondsSinceStart > delay && !this._running) {
			this._running = true;
			if(this.onStart != null) {
				this.onStart(this);
			}
		}
		if(this._secondsSinceStart >= this.duration + delay) {
			this.scale = this.backward ? 0 : 1;
			this.finished = true;
		} else if(this.onUpdate != null) {
			this.onUpdate(this);
		}
	}
	,start: function() {
		this._waitingForRestart = false;
		this._secondsSinceStart = 0;
		this._delayToUse = this.executions > 0 ? this.loopDelay : this.startDelay;
		if(this.duration == 0) {
			this.set_active(false);
			return this;
		}
		this.set_active(true);
		this._running = false;
		this.finished = false;
		return this;
	}
	,cancel: function() {
		this.onEnd();
		if(this.manager != null) {
			this.manager.remove(this);
		}
	}
	,cancelChain: function() {
		if(this._nextTweenInChain != null) {
			this._nextTweenInChain.cancelChain();
		}
		if(this._chainedTweens != null) {
			this._chainedTweens = null;
		}
		this.cancel();
	}
	,finish: function() {
		this.executions++;
		if(this.onComplete != null) {
			this.onComplete(this);
		}
		var type = this.type & -17;
		if(type == 1 || type == 8) {
			this.onEnd();
			this._secondsSinceStart = this.duration + this.startDelay;
			if(type == 8 && this.manager != null) {
				this.manager.remove(this);
			}
		}
		if(type == 2 || type == 4) {
			this._secondsSinceStart = (this._secondsSinceStart - this._delayToUse) % this.duration + this._delayToUse;
			this.scale = Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
			if(this.ease != null && this.scale > 0 && this.scale < 1) {
				this.scale = this.ease(this.scale);
			}
			if(type == 4) {
				this.backward = !this.backward;
				if(this.backward) {
					this.scale = 1 - this.scale;
				}
			}
			this.restart();
		}
	}
	,onEnd: function() {
		this.setVarsOnEnd();
		this.processTweenChain();
	}
	,setVarsOnEnd: function() {
		this.set_active(false);
		this._running = false;
		this.finished = true;
	}
	,processTweenChain: function() {
		if(this._chainedTweens == null || this._chainedTweens.length <= 0) {
			return;
		}
		this._nextTweenInChain = this._chainedTweens.shift();
		this.doNextTween(this._nextTweenInChain);
		this._chainedTweens = null;
	}
	,doNextTween: function(tween) {
		if(!tween.active) {
			tween.start();
			this.manager.add_flixel_tweens_FlxTween(tween);
		}
		tween.setChain(this._chainedTweens);
	}
	,setChain: function(previousChain) {
		if(previousChain == null) {
			return;
		}
		if(this._chainedTweens == null) {
			this._chainedTweens = previousChain;
		} else {
			this._chainedTweens = this._chainedTweens.concat(previousChain);
		}
	}
	,restart: function() {
		if(this.active) {
			this.start();
		} else {
			this._waitingForRestart = true;
		}
	}
	,setDelays: function(StartDelay,LoopDelay) {
		this.set_startDelay(StartDelay != null ? StartDelay : 0);
		this.set_loopDelay(LoopDelay != null ? LoopDelay : 0);
		return this;
	}
	,set_startDelay: function(value) {
		var dly = Math.abs(value);
		if(this.executions == 0) {
			this._secondsSinceStart = this.duration * (Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration) + Math.max(dly - this.startDelay,0);
			this._delayToUse = dly;
		}
		return this.startDelay = dly;
	}
	,set_loopDelay: function(value) {
		var dly = Math.abs(value);
		if(this.executions > 0) {
			this._secondsSinceStart = this.duration * (Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration) + Math.max(dly - this.loopDelay,0);
			this._delayToUse = dly;
		}
		return this.loopDelay = dly;
	}
	,get_percent: function() {
		return Math.max(this._secondsSinceStart - this._delayToUse,0) / this.duration;
	}
	,set_percent: function(value) {
		return this._secondsSinceStart = this.duration * value + this._delayToUse;
	}
	,set_type: function(value) {
		if(value == 0) {
			value = 8;
		} else if(value == 16) {
			value = 17;
		}
		this.backward = (value & 16) > 0;
		return this.type = value;
	}
	,set_active: function(active) {
		this.active = active;
		if(this._waitingForRestart) {
			this.restart();
		}
		return active;
	}
	,__class__: flixel_tweens_FlxTween
	,__properties__: {set_loopDelay:"set_loopDelay",set_startDelay:"set_startDelay",set_percent:"set_percent",get_percent:"get_percent",set_type:"set_type",set_active:"set_active"}
};
var flixel_tweens_FlxTweenManager = function() {
	this._tweens = [];
	flixel_FlxBasic.call(this);
	this.set_visible(false);
	flixel_FlxG.signals.stateSwitched.add($bind(this,this.clear));
};
$hxClasses["flixel.tweens.FlxTweenManager"] = flixel_tweens_FlxTweenManager;
flixel_tweens_FlxTweenManager.__name__ = ["flixel","tweens","FlxTweenManager"];
flixel_tweens_FlxTweenManager.__super__ = flixel_FlxBasic;
flixel_tweens_FlxTweenManager.prototype = $extend(flixel_FlxBasic.prototype,{
	add_flixel_tweens_motion_QuadPath: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_LinearPath: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_CircularMotion: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_CubicMotion: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_QuadMotion: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_motion_LinearMotion: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_misc_ColorTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_misc_AngleTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_misc_NumTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_misc_VarTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,add_flixel_tweens_FlxTween: function(Tween,Start) {
		if(Start == null) {
			Start = false;
		}
		if(Tween == null) {
			return null;
		}
		this._tweens.push(Tween);
		if(Start) {
			Tween.start();
		}
		return Tween;
	}
	,_tweens: null
	,tween: function(Object,Values,Duration,Options) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_misc_VarTween(Options,this);
		tween.tween(Object,Values,Duration);
		return this.add_flixel_tweens_misc_VarTween(tween);
	}
	,num: function(FromValue,ToValue,Duration,Options,TweenFunction) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_misc_NumTween(Options,this);
		tween.tween(FromValue,ToValue,Duration,TweenFunction);
		return this.add_flixel_tweens_misc_NumTween(tween);
	}
	,angle: function(Sprite,FromAngle,ToAngle,Duration,Options) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_misc_AngleTween(Options,this);
		tween.tween(FromAngle,ToAngle,Duration,Sprite);
		return this.add_flixel_tweens_misc_AngleTween(tween);
	}
	,color: function(Sprite,Duration,FromColor,ToColor,Options) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_misc_ColorTween(Options,this);
		tween.tween(Duration,FromColor,ToColor,Sprite);
		return this.add_flixel_tweens_misc_ColorTween(tween);
	}
	,linearMotion: function(Object,FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_LinearMotion(Options,this);
		tween.setObject(Object);
		tween.setMotion(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_LinearMotion(tween);
	}
	,quadMotion: function(Object,FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_QuadMotion(Options,this);
		tween.setObject(Object);
		tween.setMotion(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_QuadMotion(tween);
	}
	,cubicMotion: function(Object,FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration,Options) {
		if(Duration == null) {
			Duration = 1;
		}
		var tween = new flixel_tweens_motion_CubicMotion(Options,this);
		tween.setObject(Object);
		tween.setMotion(FromX,FromY,aX,aY,bX,bY,ToX,ToY,Duration);
		return this.add_flixel_tweens_motion_CubicMotion(tween);
	}
	,circularMotion: function(Object,CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_CircularMotion(Options,this);
		tween.setObject(Object);
		tween.setMotion(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_CircularMotion(tween);
	}
	,linearPath: function(Object,Points,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_LinearPath(Options,this);
		if(Points != null) {
			var _g = 0;
			while(_g < Points.length) {
				var point = Points[_g];
				++_g;
				tween.addPoint(point.x,point.y);
			}
		}
		tween.setObject(Object);
		tween.setMotion(DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_LinearPath(tween);
	}
	,quadPath: function(Object,Points,DurationOrSpeed,UseDuration,Options) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		if(DurationOrSpeed == null) {
			DurationOrSpeed = 1;
		}
		var tween = new flixel_tweens_motion_QuadPath(Options,this);
		if(Points != null) {
			var _g = 0;
			while(_g < Points.length) {
				var point = Points[_g];
				++_g;
				tween.addPoint(point.x,point.y);
			}
		}
		tween.setObject(Object);
		tween.setMotion(DurationOrSpeed,UseDuration);
		return this.add_flixel_tweens_motion_QuadPath(tween);
	}
	,destroy: function() {
		flixel_FlxBasic.prototype.destroy.call(this);
		flixel_FlxG.signals.stateSwitched.remove($bind(this,this.clear));
	}
	,update: function(elapsed) {
		var finishedTweens = null;
		var _g = 0;
		var _g1 = this._tweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			if(!tween.active) {
				continue;
			}
			tween.update(elapsed);
			if(tween.finished) {
				if(finishedTweens == null) {
					finishedTweens = [];
				}
				finishedTweens.push(tween);
			}
		}
		if(finishedTweens != null) {
			while(finishedTweens.length > 0) finishedTweens.shift().finish();
		}
	}
	,remove: function(Tween,Destroy) {
		if(Destroy == null) {
			Destroy = true;
		}
		if(Tween == null) {
			return null;
		}
		Tween.set_active(false);
		if(Destroy) {
			Tween.destroy();
		}
		var array = this._tweens;
		var index = array.indexOf(Tween);
		if(index != -1) {
			array[index] = array[array.length - 1];
			array.pop();
		}
		return Tween;
	}
	,clear: function() {
		while(this._tweens.length > 0) this.remove(this._tweens[0]);
	}
	,completeAll: function() {
		var _g = 0;
		var _g1 = this._tweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			if((tween.type & 2) == 0 && (tween.type & 4) == 0 && tween.active) {
				tween.update(1.79e+308);
			}
		}
	}
	,forEach: function(Function) {
		var _g = 0;
		var _g1 = this._tweens;
		while(_g < _g1.length) {
			var tween = _g1[_g];
			++_g;
			Function(tween);
		}
	}
	,__class__: flixel_tweens_FlxTweenManager
});
var flixel_tweens_misc_AngleTween = function(Options,manager) {
	flixel_tweens_FlxTween.call(this,Options,manager);
};
$hxClasses["flixel.tweens.misc.AngleTween"] = flixel_tweens_misc_AngleTween;
flixel_tweens_misc_AngleTween.__name__ = ["flixel","tweens","misc","AngleTween"];
flixel_tweens_misc_AngleTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_AngleTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	angle: null
	,sprite: null
	,_start: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this.sprite = null;
	}
	,tween: function(FromAngle,ToAngle,Duration,Sprite) {
		this._start = this.angle = FromAngle;
		this._range = ToAngle - this.angle;
		this.duration = Duration;
		this.sprite = Sprite;
		if(this.sprite != null) {
			this.sprite.set_angle(this.angle % 360);
		}
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		this.angle = this._start + this._range * this.scale;
		if(this.sprite != null) {
			var spriteAngle = this.angle % 360;
			this.sprite.set_angle(spriteAngle);
		}
	}
	,__class__: flixel_tweens_misc_AngleTween
});
var flixel_tweens_misc_ColorTween = function(Options,manager) {
	flixel_tweens_FlxTween.call(this,Options,manager);
};
$hxClasses["flixel.tweens.misc.ColorTween"] = flixel_tweens_misc_ColorTween;
flixel_tweens_misc_ColorTween.__name__ = ["flixel","tweens","misc","ColorTween"];
flixel_tweens_misc_ColorTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_ColorTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	color: null
	,startColor: null
	,endColor: null
	,sprite: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this.sprite = null;
	}
	,tween: function(Duration,FromColor,ToColor,Sprite) {
		this.color = this.startColor = FromColor;
		this.endColor = ToColor;
		this.duration = Duration;
		this.sprite = Sprite;
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		var Color1 = this.startColor;
		var Color2 = this.endColor;
		var Factor = this.scale;
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (a > 255 ? 255 : a < 0 ? 0 : a) << 24;
		this.color = color;
		if(this.sprite != null) {
			this.sprite.set_color(this.color);
			this.sprite.set_alpha((this.color >> 24 & 255) / 255);
		}
	}
	,__class__: flixel_tweens_misc_ColorTween
});
var flixel_tweens_misc_NumTween = function(Options,manager) {
	flixel_tweens_FlxTween.call(this,Options,manager);
};
$hxClasses["flixel.tweens.misc.NumTween"] = flixel_tweens_misc_NumTween;
flixel_tweens_misc_NumTween.__name__ = ["flixel","tweens","misc","NumTween"];
flixel_tweens_misc_NumTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_NumTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	value: null
	,_tweenFunction: null
	,_start: null
	,_range: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._tweenFunction = null;
	}
	,tween: function(fromValue,toValue,duration,tweenFunction) {
		this._tweenFunction = tweenFunction;
		this._start = this.value = fromValue;
		this._range = toValue - this.value;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		this.value = this._start + this._range * this.scale;
		if(this._tweenFunction != null) {
			this._tweenFunction(this.value);
		}
	}
	,__class__: flixel_tweens_misc_NumTween
});
var flixel_tweens_misc_VarTween = function(Options,manager) {
	this._propertyInfos = [];
	flixel_tweens_FlxTween.call(this,Options,manager);
};
$hxClasses["flixel.tweens.misc.VarTween"] = flixel_tweens_misc_VarTween;
flixel_tweens_misc_VarTween.__name__ = ["flixel","tweens","misc","VarTween"];
flixel_tweens_misc_VarTween.__super__ = flixel_tweens_FlxTween;
flixel_tweens_misc_VarTween.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	_object: null
	,_properties: null
	,_propertyInfos: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._object = null;
		this._properties = null;
	}
	,tween: function(object,properties,duration) {
		if(object == null) {
			throw new js__$Boot_HaxeError("Cannot tween variables of an object that is null.");
		} else if(properties == null) {
			throw new js__$Boot_HaxeError("Cannot tween null properties.");
		}
		this._object = object;
		this._properties = properties;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function(elapsed) {
		var delay = this.executions > 0 ? this.loopDelay : this.startDelay;
		if(this._secondsSinceStart < delay) {
			flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		} else {
			if(this._propertyInfos.length == 0) {
				this.initializeVars();
			}
			flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
			var _g = 0;
			var _g1 = this._propertyInfos;
			while(_g < _g1.length) {
				var info = _g1[_g];
				++_g;
				var o = this._object;
				var field = info.name;
				var value = info.startValue + info.range * this.scale;
				var tmp;
				var tmp1;
				if(o.__properties__) {
					tmp = o.__properties__["set_" + field];
					tmp1 = tmp;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					o[tmp](value);
				} else {
					o[field] = value;
				}
			}
		}
	}
	,initializeVars: function() {
		var fields;
		if(Reflect.isObject(this._properties)) {
			fields = Reflect.fields(this._properties);
		} else {
			throw new js__$Boot_HaxeError("Unsupported properties container - use an object containing key/value pairs.");
		}
		var _g = 0;
		while(_g < fields.length) {
			var p = fields[_g];
			++_g;
			var o = this._object;
			var tmp;
			var tmp1;
			if(o == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(o.__properties__) {
					tmp = o.__properties__["get_" + p];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = o[tmp]();
				} else {
					tmp1 = o[p];
				}
			}
			if(tmp1 == null) {
				throw new js__$Boot_HaxeError("The Object does not have the property \"" + p + "\"");
			}
			var o1 = this._object;
			var tmp3;
			var a;
			if(o1 == null) {
				a = null;
			} else {
				var a1;
				if(o1.__properties__) {
					tmp3 = o1.__properties__["get_" + p];
					a1 = tmp3;
				} else {
					a1 = false;
				}
				if(a1) {
					a = o1[tmp3]();
				} else {
					a = o1[p];
				}
			}
			if(isNaN(a)) {
				throw new js__$Boot_HaxeError("The property \"" + p + "\" is not numeric.");
			}
			var tmp4 = this._propertyInfos;
			var o2 = this._properties;
			var tmp5;
			var tmp6;
			if(o2 == null) {
				tmp6 = null;
			} else {
				var tmp7;
				if(o2.__properties__) {
					tmp5 = o2.__properties__["get_" + p];
					tmp7 = tmp5;
				} else {
					tmp7 = false;
				}
				if(tmp7) {
					tmp6 = o2[tmp5]();
				} else {
					tmp6 = o2[p];
				}
			}
			tmp4.push({ name : p, startValue : a, range : tmp6 - a});
		}
	}
	,__class__: flixel_tweens_misc_VarTween
});
var flixel_tweens_motion_Motion = function(Options,manager) {
	this.y = 0;
	this.x = 0;
	flixel_tweens_FlxTween.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.Motion"] = flixel_tweens_motion_Motion;
flixel_tweens_motion_Motion.__name__ = ["flixel","tweens","motion","Motion"];
flixel_tweens_motion_Motion.__super__ = flixel_tweens_FlxTween;
flixel_tweens_motion_Motion.prototype = $extend(flixel_tweens_FlxTween.prototype,{
	x: null
	,y: null
	,_object: null
	,_wasObjectImmovable: null
	,destroy: function() {
		flixel_tweens_FlxTween.prototype.destroy.call(this);
		this._object = null;
	}
	,setObject: function(object) {
		this._object = object;
		this._wasObjectImmovable = this._object.immovable;
		this._object.set_immovable(true);
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_FlxTween.prototype.update.call(this,elapsed);
		this.postUpdate();
	}
	,onEnd: function() {
		this._object.set_immovable(this._wasObjectImmovable);
		flixel_tweens_FlxTween.prototype.onEnd.call(this);
	}
	,postUpdate: function() {
		if(this._object != null) {
			this._object.setPosition(this.x,this.y);
		}
	}
	,__class__: flixel_tweens_motion_Motion
});
var flixel_tweens_motion_CircularMotion = function(Options,manager) {
	this._angleFinish = 0;
	this._angleStart = 0;
	this._radius = 0;
	this._centerY = 0;
	this._centerX = 0;
	this.angle = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.CircularMotion"] = flixel_tweens_motion_CircularMotion;
flixel_tweens_motion_CircularMotion.__name__ = ["flixel","tweens","motion","CircularMotion"];
flixel_tweens_motion_CircularMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_CircularMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	angle: null
	,_centerX: null
	,_centerY: null
	,_radius: null
	,_angleStart: null
	,_angleFinish: null
	,setMotion: function(CenterX,CenterY,Radius,Angle,Clockwise,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this._centerX = CenterX;
		this._centerY = CenterY;
		this._radius = Radius;
		this.angle = this._angleStart = Angle * Math.PI / -180;
		this._angleFinish = Math.PI * 2 * (Clockwise ? 1 : -1);
		if(UseDuration) {
			this.duration = DurationOrSpeed;
		} else {
			this.duration = this._radius * (Math.PI * 2) / DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		this.angle = this._angleStart + this._angleFinish * this.scale;
		this.x = this._centerX + Math.cos(this.angle) * this._radius;
		this.y = this._centerY + Math.sin(this.angle) * this._radius;
		if(this.finished) {
			this.postUpdate();
		}
	}
	,get_circumference: function() {
		return this._radius * (Math.PI * 2);
	}
	,__class__: flixel_tweens_motion_CircularMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_circumference:"get_circumference"})
});
var flixel_tweens_motion_CubicMotion = function(Options,manager) {
	this._tt = 0;
	this._ttt = 0;
	this._bY = 0;
	this._bX = 0;
	this._aY = 0;
	this._aX = 0;
	this._toY = 0;
	this._toX = 0;
	this._fromY = 0;
	this._fromX = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.CubicMotion"] = flixel_tweens_motion_CubicMotion;
flixel_tweens_motion_CubicMotion.__name__ = ["flixel","tweens","motion","CubicMotion"];
flixel_tweens_motion_CubicMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_CubicMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_fromX: null
	,_fromY: null
	,_toX: null
	,_toY: null
	,_aX: null
	,_aY: null
	,_bX: null
	,_bY: null
	,_ttt: null
	,_tt: null
	,setMotion: function(fromX,fromY,aX,aY,bX,bY,toX,toY,duration) {
		this.x = this._fromX = fromX;
		this.y = this._fromY = fromY;
		this._aX = aX;
		this._aY = aY;
		this._bX = bX;
		this._bY = bY;
		this._toX = toX;
		this._toY = toY;
		this.duration = duration;
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		this.x = this.scale * this.scale * this.scale * (this._toX + 3 * (this._aX - this._bX) - this._fromX) + 3 * this.scale * this.scale * (this._fromX - 2 * this._aX + this._bX) + 3 * this.scale * (this._aX - this._fromX) + this._fromX;
		this.y = this.scale * this.scale * this.scale * (this._toY + 3 * (this._aY - this._bY) - this._fromY) + 3 * this.scale * this.scale * (this._fromY - 2 * this._aY + this._bY) + 3 * this.scale * (this._aY - this._fromY) + this._fromY;
		if(this.finished) {
			this.postUpdate();
		}
	}
	,__class__: flixel_tweens_motion_CubicMotion
});
var flixel_tweens_motion_LinearMotion = function(Options,manager) {
	this._distance = -1;
	this._moveY = 0;
	this._moveX = 0;
	this._fromY = 0;
	this._fromX = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.LinearMotion"] = flixel_tweens_motion_LinearMotion;
flixel_tweens_motion_LinearMotion.__name__ = ["flixel","tweens","motion","LinearMotion"];
flixel_tweens_motion_LinearMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_LinearMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_fromX: null
	,_fromY: null
	,_moveX: null
	,_moveY: null
	,_distance: null
	,setMotion: function(FromX,FromY,ToX,ToY,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._moveX = ToX - FromX;
		this._moveY = ToY - FromY;
		if(UseDuration) {
			this.duration = DurationOrSpeed;
		} else {
			this.duration = this.get_distance() / DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		this.x = this._fromX + this._moveX * this.scale;
		this.y = this._fromY + this._moveY * this.scale;
		if(this.x == this._fromX + this._moveX && this.y == this._fromY + this._moveY && this.active && this._secondsSinceStart >= this.duration) {
			this.finished = true;
		}
		if(this.finished) {
			this.postUpdate();
		}
	}
	,get_distance: function() {
		if(this._distance >= 0) {
			return this._distance;
		}
		return this._distance = Math.sqrt(this._moveX * this._moveX + this._moveY * this._moveY);
	}
	,__class__: flixel_tweens_motion_LinearMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_distance:"get_distance"})
});
var flixel_tweens_motion_LinearPath = function(Options,manager) {
	this._index = 0;
	this._speed = 0;
	this.distance = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
	this.points = [];
	this._pointD = [0];
	this._pointT = [0];
};
$hxClasses["flixel.tweens.motion.LinearPath"] = flixel_tweens_motion_LinearPath;
flixel_tweens_motion_LinearPath.__name__ = ["flixel","tweens","motion","LinearPath"];
flixel_tweens_motion_LinearPath.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_LinearPath.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	distance: null
	,points: null
	,_pointD: null
	,_pointT: null
	,_speed: null
	,_index: null
	,_last: null
	,_prevPoint: null
	,_nextPoint: null
	,destroy: function() {
		flixel_tweens_motion_Motion.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this.points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this._last = flixel_util_FlxDestroyUtil.put(this._last);
		this._prevPoint = flixel_util_FlxDestroyUtil.put(this._prevPoint);
		this._nextPoint = flixel_util_FlxDestroyUtil.put(this._nextPoint);
	}
	,setMotion: function(DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this.distance / DurationOrSpeed;
		} else {
			this.duration = this.distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,addPoint: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this._last != null) {
			this.distance += Math.sqrt((x - this._last.x) * (x - this._last.x) + (y - this._last.y) * (y - this._last.y));
			this._pointD[this.points.length] = this.distance;
		}
		var tmp = this.points;
		var tmp1 = this.points.length;
		var point = flixel_math_FlxPoint._pool.get().set(x,y);
		point._inPool = false;
		tmp[tmp1] = this._last = point;
		return this;
	}
	,getPoint: function(index) {
		if(index == null) {
			index = 0;
		}
		if(this.points.length == 0) {
			throw new js__$Boot_HaxeError("No points have been added to the path yet.");
		}
		return this.points[index % this.points.length];
	}
	,start: function() {
		this._index = this.backward ? this.points.length - 1 : 0;
		flixel_tweens_motion_Motion.prototype.start.call(this);
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		var td;
		var tt;
		if(this.points == null) {
			return;
		}
		if(!this.backward) {
			if(this._index < this.points.length - 1) {
				while(this.scale > this._pointT[this._index + 1]) {
					this._index++;
					if(this._index == this.points.length - 1) {
						this._index -= 1;
						break;
					}
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index + 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		} else {
			if(this._index > 0) {
				while(this.scale < this._pointT[this._index - 1]) {
					this._index -= 1;
					if(this._index == 0) {
						this._index += 1;
						break;
					}
				}
			}
			td = this._pointT[this._index];
			tt = this._pointT[this._index - 1] - td;
			td = (this.scale - td) / tt;
			this._prevPoint = this.points[this._index];
			this._nextPoint = this.points[this._index - 1];
			this.x = this._prevPoint.x + (this._nextPoint.x - this._prevPoint.x) * td;
			this.y = this._prevPoint.y + (this._nextPoint.y - this._prevPoint.y) * td;
		}
		flixel_tweens_motion_Motion.prototype.postUpdate.call(this);
	}
	,updatePath: function() {
		if(this.points.length < 2) {
			throw new js__$Boot_HaxeError("A LinearPath must have at least 2 points to operate.");
		}
		if(this._pointD.length == this._pointT.length) {
			return;
		}
		var i = 0;
		while(i < this.points.length) this._pointT[i] = this._pointD[i++] / this.distance;
	}
	,__class__: flixel_tweens_motion_LinearPath
});
var flixel_tweens_motion_QuadMotion = function(Options,manager) {
	this._controlY = 0;
	this._controlX = 0;
	this._toY = 0;
	this._toX = 0;
	this._fromY = 0;
	this._fromX = 0;
	this._distance = -1;
	flixel_tweens_motion_Motion.call(this,Options,manager);
};
$hxClasses["flixel.tweens.motion.QuadMotion"] = flixel_tweens_motion_QuadMotion;
flixel_tweens_motion_QuadMotion.__name__ = ["flixel","tweens","motion","QuadMotion"];
flixel_tweens_motion_QuadMotion.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_QuadMotion.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_distance: null
	,_fromX: null
	,_fromY: null
	,_toX: null
	,_toY: null
	,_controlX: null
	,_controlY: null
	,setMotion: function(FromX,FromY,ControlX,ControlY,ToX,ToY,DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this._distance = -1;
		this.x = this._fromX = FromX;
		this.y = this._fromY = FromY;
		this._controlX = ControlX;
		this._controlY = ControlY;
		this._toX = ToX;
		this._toY = ToY;
		if(UseDuration) {
			this.duration = DurationOrSpeed;
		} else {
			this.duration = this.get_distance() / DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		this.x = this._fromX * (1 - this.scale) * (1 - this.scale) + this._controlX * 2 * (1 - this.scale) * this.scale + this._toX * this.scale * this.scale;
		this.y = this._fromY * (1 - this.scale) * (1 - this.scale) + this._controlY * 2 * (1 - this.scale) * this.scale + this._toY * this.scale * this.scale;
		if(this.finished) {
			this.postUpdate();
		}
	}
	,get_distance: function() {
		if(this._distance >= 0) {
			return this._distance;
		}
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		point.set_x(this.x - 2 * this._controlX + this._toX);
		point.set_y(this.y - 2 * this._controlY + this._toY);
		point1.set_x(2 * this._controlX - 2 * this.x);
		point1.set_y(2 * this._controlY - 2 * this.y);
		var a = 4 * (point.x * point.x + point.y * point.y);
		var b = 4 * (point.x * point1.x + point.y * point1.y);
		var c = point1.x * point1.x + point1.y * point1.y;
		var abc = 2 * Math.sqrt(a + b + c);
		var a2 = Math.sqrt(a);
		var a32 = 2 * a * a2;
		var c2 = 2 * Math.sqrt(c);
		var ba = b / a2;
		point.put();
		point1.put();
		return (a32 * abc + a2 * b * (abc - c2) + (4 * c * a - b * b) * Math.log((2 * a2 + ba + abc) / (ba + c2))) / (4 * a32);
	}
	,__class__: flixel_tweens_motion_QuadMotion
	,__properties__: $extend(flixel_tweens_motion_Motion.prototype.__properties__,{get_distance:"get_distance"})
});
var flixel_tweens_motion_QuadPath = function(Options,manager) {
	this._updateCurve = true;
	this._numSegs = 0;
	this._index = 0;
	this._speed = 0;
	this._distance = 0;
	flixel_tweens_motion_Motion.call(this,Options,manager);
	this._points = [];
	this._curveT = [];
	this._curveD = [];
};
$hxClasses["flixel.tweens.motion.QuadPath"] = flixel_tweens_motion_QuadPath;
flixel_tweens_motion_QuadPath.__name__ = ["flixel","tweens","motion","QuadPath"];
flixel_tweens_motion_QuadPath.__super__ = flixel_tweens_motion_Motion;
flixel_tweens_motion_QuadPath.prototype = $extend(flixel_tweens_motion_Motion.prototype,{
	_points: null
	,_distance: null
	,_speed: null
	,_index: null
	,_numSegs: null
	,_updateCurve: null
	,_curveT: null
	,_curveD: null
	,_a: null
	,_b: null
	,_c: null
	,destroy: function() {
		flixel_tweens_motion_Motion.prototype.destroy.call(this);
		var _g = 0;
		var _g1 = this._points;
		while(_g < _g1.length) {
			var point = _g1[_g];
			++_g;
			point = flixel_util_FlxDestroyUtil.put(point);
		}
		this._a = flixel_util_FlxDestroyUtil.put(this._a);
		this._b = flixel_util_FlxDestroyUtil.put(this._b);
		this._c = flixel_util_FlxDestroyUtil.put(this._c);
	}
	,setMotion: function(DurationOrSpeed,UseDuration) {
		if(UseDuration == null) {
			UseDuration = true;
		}
		this.updatePath();
		if(UseDuration) {
			this.duration = DurationOrSpeed;
			this._speed = this._distance / DurationOrSpeed;
		} else {
			this.duration = this._distance / DurationOrSpeed;
			this._speed = DurationOrSpeed;
		}
		this.start();
		return this;
	}
	,addPoint: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this._updateCurve = true;
		var tmp = this._points;
		var point = flixel_math_FlxPoint._pool.get().set(x,y);
		point._inPool = false;
		tmp.push(point);
		return this;
	}
	,getPoint: function(index) {
		if(index == null) {
			index = 0;
		}
		if(this._points.length == 0) {
			throw new js__$Boot_HaxeError("No points have been added to the path yet.");
		}
		return this._points[index % this._points.length];
	}
	,start: function() {
		this._index = this.backward ? this._numSegs - 1 : 0;
		flixel_tweens_motion_Motion.prototype.start.call(this);
		return this;
	}
	,update: function(elapsed) {
		flixel_tweens_motion_Motion.prototype.update.call(this,elapsed);
		var td;
		var tt;
		if(!this.backward && this._points != null) {
			if(this._index < this._numSegs - 1) {
				while(this.scale > this._curveT[this._index + 1]) {
					this._index++;
					if(this._index == this._numSegs - 1) {
						break;
					}
				}
			}
			td = this._curveT[this._index];
			tt = this._curveT[this._index + 1] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2 + 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		} else if(this._points != null) {
			if(this._index > 0) {
				while(this.scale < this._curveT[this._index]) {
					this._index--;
					if(this._index == 0) {
						break;
					}
				}
			}
			td = this._curveT[this._index + 1];
			tt = this._curveT[this._index] - td;
			td = (this.scale - td) / tt;
			this._a = this._points[this._index * 2 + 2];
			this._b = this._points[this._index * 2 + 1];
			this._c = this._points[this._index * 2];
			this.x = this._a.x * (1 - td) * (1 - td) + this._b.x * 2 * (1 - td) * td + this._c.x * td * td;
			this.y = this._a.y * (1 - td) * (1 - td) + this._b.y * 2 * (1 - td) * td + this._c.y * td * td;
		}
		flixel_tweens_motion_Motion.prototype.postUpdate.call(this);
	}
	,updatePath: function() {
		if((this._points.length - 1) % 2 != 0 || this._points.length < 3) {
			throw new js__$Boot_HaxeError("A QuadPath must have at least 3 points to operate and number of points must be a odd.");
		}
		if(!this._updateCurve) {
			return;
		}
		this._updateCurve = false;
		var i = 0;
		var j = 0;
		this._distance = 0;
		this._numSegs = (this._points.length - 1) / 2 | 0;
		while(i < this._numSegs) {
			j = i * 2;
			this._curveD[i] = this.getCurveLength(this._points[j],this._points[j + 1],this._points[j + 2]);
			this._distance += this._curveD[i++];
		}
		i = 0;
		var d = 0;
		while(i < this._numSegs) {
			d += this._curveD[i];
			this._curveT[i++] = d / this._distance;
		}
		this._curveT[this._numSegs - 1] = 1;
		this._curveT.unshift(0);
	}
	,getCurveLength: function(start,control,finish) {
		var point = flixel_math_FlxPoint._pool.get().set(0,0);
		point._inPool = false;
		var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
		point1._inPool = false;
		point.set_x(start.x - 2 * control.x + finish.x);
		point.set_y(start.y - 2 * control.y + finish.y);
		point1.set_x(2 * control.x - 2 * start.x);
		point1.set_y(2 * control.y - 2 * start.y);
		var a = 4 * (point.x * point.x + point.y * point.y);
		var b = 4 * (point.x * point1.x + point.y * point1.y);
		var c = point1.x * point1.x + point1.y * point1.y;
		var abc = 2 * Math.sqrt(a + b + c);
		var a2 = Math.sqrt(a);
		var a32 = 2 * a * a2;
		var c2 = 2 * Math.sqrt(c);
		var ba = b / a2;
		point.put();
		point1.put();
		return (a32 * abc + a2 * b * (abc - c2) + (4 * c * a - b * b) * Math.log((2 * a2 + ba + abc) / (ba + c2))) / (4 * a32);
	}
	,__class__: flixel_tweens_motion_QuadPath
});
var flixel_ui_FlxBar = function(x,y,direction,width,height,parentRef,variable,min,max,showBorder) {
	if(showBorder == null) {
		showBorder = false;
	}
	if(max == null) {
		max = 100;
	}
	if(min == null) {
		min = 0;
	}
	if(variable == null) {
		variable = "";
	}
	if(height == null) {
		height = 10;
	}
	if(width == null) {
		width = 100;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this._maxPercent = 100;
	this.numDivisions = 100;
	this.killOnEmpty = false;
	this.fixedPosition = true;
	flixel_FlxSprite.call(this,x,y);
	if(direction == null) {
		direction = flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT;
	} else {
		direction = direction;
	}
	this.barWidth = width;
	this.barHeight = height;
	this._filledBarPoint = new openfl_geom_Point();
	this._filledBarRect = new openfl_geom_Rectangle();
	if(flixel_FlxG.renderBlit) {
		this._zeroOffset = new openfl_geom_Point();
		this._emptyBarRect = new openfl_geom_Rectangle();
		this.makeGraphic(width,height,0,true);
	} else {
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = 0;
		_this.height = 0;
		_this._inPool = false;
		this._filledFlxRect = _this;
	}
	if(parentRef != null) {
		this.parent = parentRef;
		this.parentVariable = variable;
	}
	this.set_fillDirection(direction);
	this.createFilledBar(-16756480,-16714752,showBorder);
	this.setRange(min,max);
};
$hxClasses["flixel.ui.FlxBar"] = flixel_ui_FlxBar;
flixel_ui_FlxBar.__name__ = ["flixel","ui","FlxBar"];
flixel_ui_FlxBar.__super__ = flixel_FlxSprite;
flixel_ui_FlxBar.prototype = $extend(flixel_FlxSprite.prototype,{
	fixedPosition: null
	,pxPerPercent: null
	,positionOffset: null
	,killOnEmpty: null
	,value: null
	,min: null
	,max: null
	,range: null
	,pct: null
	,numDivisions: null
	,emptyCallback: null
	,filledCallback: null
	,parent: null
	,parentVariable: null
	,barWidth: null
	,barHeight: null
	,frontFrames: null
	,fillDirection: null
	,_fillHorizontal: null
	,_frontFrame: null
	,_filledFlxRect: null
	,_emptyBar: null
	,_emptyBarRect: null
	,_filledBar: null
	,_zeroOffset: null
	,_filledBarRect: null
	,_filledBarPoint: null
	,_maxPercent: null
	,destroy: function() {
		this.positionOffset = flixel_util_FlxDestroyUtil.put(this.positionOffset);
		if(flixel_FlxG.renderBlit) {
			this._frontFrame = null;
			this._filledFlxRect = flixel_util_FlxDestroyUtil.put(this._filledFlxRect);
		} else {
			this._emptyBarRect = null;
			this._zeroOffset = null;
			this._emptyBar = flixel_util_FlxDestroyUtil.dispose(this._emptyBar);
			this._filledBar = flixel_util_FlxDestroyUtil.dispose(this._filledBar);
		}
		this._filledBarRect = null;
		this._filledBarPoint = null;
		this.parent = null;
		this.positionOffset = null;
		this.emptyCallback = null;
		this.filledCallback = null;
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,trackParent: function(offsetX,offsetY) {
		this.fixedPosition = false;
		var point = flixel_math_FlxPoint._pool.get().set(offsetX,offsetY);
		point._inPool = false;
		this.positionOffset = point;
		if(Object.prototype.hasOwnProperty.call(this.parent,"scrollFactor")) {
			this.scrollFactor.set_x(this.parent.scrollFactor.x);
			this.scrollFactor.set_y(this.parent.scrollFactor.y);
		}
	}
	,setParent: function(parentRef,variable,track,offsetX,offsetY) {
		if(offsetY == null) {
			offsetY = 0;
		}
		if(offsetX == null) {
			offsetX = 0;
		}
		if(track == null) {
			track = false;
		}
		this.parent = parentRef;
		this.parentVariable = variable;
		if(track) {
			this.trackParent(offsetX,offsetY);
		}
		this.updateValueFromParent();
	}
	,stopTrackingParent: function(posX,posY) {
		this.fixedPosition = true;
		this.set_x(posX);
		this.set_y(posY);
	}
	,setCallbacks: function(onEmpty,onFilled,killOnEmpty) {
		if(killOnEmpty == null) {
			killOnEmpty = false;
		}
		this.emptyCallback = onEmpty != null ? onEmpty : this.emptyCallback;
		this.filledCallback = onFilled != null ? onFilled : this.filledCallback;
		this.killOnEmpty = killOnEmpty;
	}
	,setRange: function(min,max) {
		if(max <= min) {
			throw new js__$Boot_HaxeError("FlxBar: max cannot be less than or equal to min");
		}
		this.min = min;
		this.max = max;
		this.range = max - min;
		this.pct = this.range / this._maxPercent;
		this.pxPerPercent = this._fillHorizontal ? this.barWidth / this._maxPercent : this.barHeight / this._maxPercent;
		if(!isNaN(this.get_value())) {
			this.set_value(Math.max(min,Math.min(this.get_value(),max)));
		} else {
			this.set_value(min);
		}
	}
	,createFilledBar: function(empty,fill,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		this.createColoredEmptyBar(empty,showBorder,border);
		this.createColoredFilledBar(fill,showBorder,border);
		return this;
	}
	,createColoredEmptyBar: function(empty,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(flixel_FlxG.renderTile) {
			var emptyKey = "empty: " + this.barWidth + "x" + this.barHeight + ":" + ("0x" + StringTools.hex(empty >> 24 & 255,2) + StringTools.hex(empty >> 16 & 255,2) + StringTools.hex(empty >> 8 & 255,2) + StringTools.hex(empty & 255,2));
			if(showBorder) {
				emptyKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.get(emptyKey) == null) {
				var emptyBar = null;
				if(showBorder) {
					emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					emptyBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),empty);
				} else {
					emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,empty);
				}
				flixel_FlxG.bitmap.add(emptyBar,false,emptyKey);
			}
			this.set_frames(flixel_FlxG.bitmap._cache.get(emptyKey).get_imageFrame());
		} else {
			if(showBorder) {
				this._emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				this._emptyBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),empty);
			} else {
				this._emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,empty);
			}
			this._emptyBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateEmptyBar();
		}
		return this;
	}
	,createColoredFilledBar: function(fill,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(flixel_FlxG.renderTile) {
			var filledKey = "filled: " + this.barWidth + "x" + this.barHeight + ":" + ("0x" + StringTools.hex(fill >> 24 & 255,2) + StringTools.hex(fill >> 16 & 255,2) + StringTools.hex(fill >> 8 & 255,2) + StringTools.hex(fill & 255,2));
			if(showBorder) {
				filledKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.get(filledKey) == null) {
				var filledBar = null;
				if(showBorder) {
					filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					filledBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),fill);
				} else {
					filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,fill);
				}
				flixel_FlxG.bitmap.add(filledBar,false,filledKey);
			}
			this.set_frontFrames(flixel_FlxG.bitmap._cache.get(filledKey).get_imageFrame());
		} else {
			if(showBorder) {
				this._filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				this._filledBar.fillRect(new openfl_geom_Rectangle(1,1,this.barWidth - 2,this.barHeight - 2),fill);
			} else {
				this._filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,fill);
			}
			this._filledBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateFilledBar();
		}
		return this;
	}
	,createGradientBar: function(empty,fill,chunkSize,rotation,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(rotation == null) {
			rotation = 180;
		}
		if(chunkSize == null) {
			chunkSize = 1;
		}
		this.createGradientEmptyBar(empty,chunkSize,rotation,showBorder,border);
		this.createGradientFilledBar(fill,chunkSize,rotation,showBorder,border);
		return this;
	}
	,createGradientEmptyBar: function(empty,chunkSize,rotation,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(rotation == null) {
			rotation = 180;
		}
		if(chunkSize == null) {
			chunkSize = 1;
		}
		if(flixel_FlxG.renderTile) {
			var emptyKey = "Gradient:" + this.barWidth + "x" + this.barHeight + ",colors:[";
			var _g = 0;
			while(_g < empty.length) {
				var col = empty[_g];
				++_g;
				emptyKey += "0x" + StringTools.hex(col >> 24 & 255,2) + StringTools.hex(col >> 16 & 255,2) + StringTools.hex(col >> 8 & 255,2) + StringTools.hex(col & 255,2) + ",";
			}
			emptyKey += "],chunkSize: " + chunkSize + ",rotation: " + rotation;
			if(showBorder) {
				emptyKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.get(emptyKey) == null) {
				var emptyBar = null;
				if(showBorder) {
					emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					flixel_util_FlxGradient.overlayGradientOnBitmapData(emptyBar,this.barWidth - 2,this.barHeight - 2,empty,1,1,chunkSize,rotation);
				} else {
					emptyBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,empty,chunkSize,rotation);
				}
				flixel_FlxG.bitmap.add(emptyBar,false,emptyKey);
			}
			this.set_frames(flixel_FlxG.bitmap._cache.get(emptyKey).get_imageFrame());
		} else {
			if(showBorder) {
				this._emptyBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				flixel_util_FlxGradient.overlayGradientOnBitmapData(this._emptyBar,this.barWidth - 2,this.barHeight - 2,empty,1,1,chunkSize,rotation);
			} else {
				this._emptyBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,empty,chunkSize,rotation);
			}
			this._emptyBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateEmptyBar();
		}
		return this;
	}
	,createGradientFilledBar: function(fill,chunkSize,rotation,showBorder,border) {
		if(border == null) {
			border = -1;
		}
		if(showBorder == null) {
			showBorder = false;
		}
		if(rotation == null) {
			rotation = 180;
		}
		if(chunkSize == null) {
			chunkSize = 1;
		}
		if(flixel_FlxG.renderTile) {
			var filledKey = "Gradient:" + this.barWidth + "x" + this.barHeight + ",colors:[";
			var _g = 0;
			while(_g < fill.length) {
				var col = fill[_g];
				++_g;
				filledKey += "0x" + StringTools.hex(col >> 24 & 255,2) + StringTools.hex(col >> 16 & 255,2) + StringTools.hex(col >> 8 & 255,2) + StringTools.hex(col & 255,2) + ",";
			}
			filledKey += "],chunkSize: " + chunkSize + ",rotation: " + rotation;
			if(showBorder) {
				filledKey += ",border: " + ("0x" + StringTools.hex(border >> 24 & 255,2) + StringTools.hex(border >> 16 & 255,2) + StringTools.hex(border >> 8 & 255,2) + StringTools.hex(border & 255,2));
			}
			if(flixel_FlxG.bitmap._cache.get(filledKey) == null) {
				var filledBar = null;
				if(showBorder) {
					filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
					flixel_util_FlxGradient.overlayGradientOnBitmapData(filledBar,this.barWidth - 2,this.barHeight - 2,fill,1,1,chunkSize,rotation);
				} else {
					filledBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,fill,chunkSize,rotation);
				}
				flixel_FlxG.bitmap.add(filledBar,false,filledKey);
			}
			this.set_frontFrames(flixel_FlxG.bitmap._cache.get(filledKey).get_imageFrame());
		} else {
			if(showBorder) {
				this._filledBar = new openfl_display_BitmapData(this.barWidth,this.barHeight,true,border);
				flixel_util_FlxGradient.overlayGradientOnBitmapData(this._filledBar,this.barWidth - 2,this.barHeight - 2,fill,1,1,chunkSize,rotation);
			} else {
				this._filledBar = flixel_util_FlxGradient.createGradientBitmapData(this.barWidth,this.barHeight,fill,chunkSize,rotation);
			}
			this._filledBarRect.setTo(0,0,this.barWidth,this.barHeight);
			this.updateFilledBar();
		}
		return this;
	}
	,createImageBar: function(empty,fill,emptyBackground,fillBackground) {
		if(fillBackground == null) {
			fillBackground = -16711936;
		}
		if(emptyBackground == null) {
			emptyBackground = -16777216;
		}
		this.createImageEmptyBar(empty,emptyBackground);
		this.createImageFilledBar(fill,fillBackground);
		return this;
	}
	,createImageEmptyBar: function(empty,emptyBackground) {
		if(emptyBackground == null) {
			emptyBackground = -16777216;
		}
		if(empty != null) {
			var emptyGraphic = flixel_FlxG.bitmap.add(empty);
			if(flixel_FlxG.renderTile) {
				this.set_frames(emptyGraphic.get_imageFrame());
			} else {
				this._emptyBar = emptyGraphic.bitmap.clone();
				this.barWidth = this._emptyBar.width;
				this.barHeight = this._emptyBar.height;
				this._emptyBarRect.setTo(0,0,this.barWidth,this.barHeight);
				if(this.graphic == null || (this.frame.sourceSize.x != this.barWidth || this.frame.sourceSize.y != this.barHeight)) {
					this.makeGraphic(this.barWidth,this.barHeight,0,true);
				}
				this.updateEmptyBar();
			}
		} else {
			this.createColoredEmptyBar(emptyBackground);
		}
		return this;
	}
	,createImageFilledBar: function(fill,fillBackground) {
		if(fillBackground == null) {
			fillBackground = -16711936;
		}
		if(fill != null) {
			var filledGraphic = flixel_FlxG.bitmap.add(fill);
			if(flixel_FlxG.renderTile) {
				this.set_frontFrames(filledGraphic.get_imageFrame());
			} else {
				this._filledBar = filledGraphic.bitmap.clone();
				this._filledBarRect.setTo(0,0,this.barWidth,this.barHeight);
				if(this.graphic == null || (this.frame.sourceSize.x != this.barWidth || this.frame.sourceSize.y != this.barHeight)) {
					this.makeGraphic(this.barWidth,this.barHeight,0,true);
				}
				this.pxPerPercent = this._fillHorizontal ? this.barWidth / this._maxPercent : this.barHeight / this._maxPercent;
				this.updateFilledBar();
			}
		} else {
			this.createColoredFilledBar(fillBackground);
		}
		return this;
	}
	,set_fillDirection: function(direction) {
		this.fillDirection = direction;
		switch(direction[1]) {
		case 0:case 1:case 4:case 5:
			this._fillHorizontal = true;
			break;
		case 2:case 3:case 6:case 7:
			this._fillHorizontal = false;
			break;
		}
		return this.fillDirection;
	}
	,updateValueFromParent: function() {
		var o = this.parent;
		var field = this.parentVariable;
		var tmp;
		var tmp1;
		if(o == null) {
			tmp1 = null;
		} else {
			var tmp2;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp2 = tmp;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = o[tmp]();
			} else {
				tmp1 = o[field];
			}
		}
		this.set_value(tmp1);
	}
	,updateBar: function() {
		this.updateEmptyBar();
		this.updateFilledBar();
	}
	,updateEmptyBar: function() {
		if(flixel_FlxG.renderBlit) {
			this.get_pixels().copyPixels(this._emptyBar,this._emptyBarRect,this._zeroOffset);
			this.dirty = true;
		}
	}
	,updateFilledBar: function() {
		this._filledBarRect.width = this.barWidth;
		this._filledBarRect.height = this.barHeight;
		var fraction = (this.get_value() - this.min) / this.range;
		var percent = fraction * this._maxPercent;
		var maxScale = this._fillHorizontal ? this.barWidth : this.barHeight;
		var scaleInterval = maxScale / this.numDivisions;
		var interval = (fraction * maxScale / scaleInterval | 0) * scaleInterval;
		if(this._fillHorizontal) {
			this._filledBarRect.width = interval | 0;
		} else {
			this._filledBarRect.height = interval | 0;
		}
		if(percent > 0) {
			var _g = this.fillDirection;
			switch(_g[1]) {
			case 0:case 2:
				break;
			case 1:
				this._filledBarRect.x = this.barWidth - this._filledBarRect.width;
				this._filledBarPoint.x = this.barWidth - this._filledBarRect.width;
				break;
			case 3:
				this._filledBarRect.y = this.barHeight - this._filledBarRect.height;
				this._filledBarPoint.y = this.barHeight - this._filledBarRect.height;
				break;
			case 4:
				this._filledBarRect.x = this.barWidth / 2 - this._filledBarRect.width / 2 | 0;
				this._filledBarPoint.x = this.barWidth / 2 - this._filledBarRect.width / 2 | 0;
				break;
			case 5:
				this._filledBarRect.width = maxScale - interval | 0;
				this._filledBarPoint.x = (this.barWidth - this._filledBarRect.width) / 2 | 0;
				break;
			case 6:
				this._filledBarRect.y = this.barHeight / 2 - this._filledBarRect.height / 2 | 0;
				this._filledBarPoint.y = this.barHeight / 2 - this._filledBarRect.height / 2 | 0;
				break;
			case 7:
				this._filledBarRect.height = maxScale - interval | 0;
				this._filledBarPoint.y = (this.barHeight - this._filledBarRect.height) / 2 | 0;
				break;
			}
			if(flixel_FlxG.renderBlit) {
				this.get_pixels().copyPixels(this._filledBar,this._filledBarRect,this._filledBarPoint,null,null,true);
			} else if(this.get_frontFrames() != null) {
				var prct = percent | 0;
				var _this = this._filledFlxRect;
				var FlashRect = this._filledBarRect;
				_this.x = FlashRect.x;
				_this.y = FlashRect.y;
				_this.width = FlashRect.width;
				_this.height = FlashRect.height;
				_this.x = Math.round(_this.x);
				_this.y = Math.round(_this.y);
				_this.width = Math.round(_this.width);
				_this.height = Math.round(_this.height);
				if(prct > 0) {
					this._frontFrame = this.get_frontFrames().get_frame().clipTo(this._filledFlxRect,this._frontFrame);
				}
			}
		}
		if(flixel_FlxG.renderBlit) {
			this.dirty = true;
		}
	}
	,update: function(elapsed) {
		if(this.parent != null) {
			var o = this.parent;
			var field = this.parentVariable;
			var tmp;
			var tmp1;
			if(o == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(o.__properties__) {
					tmp = o.__properties__["get_" + field];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = o[tmp]();
				} else {
					tmp1 = o[field];
				}
			}
			if(tmp1 != this.get_value()) {
				this.updateValueFromParent();
			}
			if(!this.fixedPosition) {
				this.set_x(this.parent.x + this.positionOffset.x);
				this.set_y(this.parent.y + this.positionOffset.y);
			}
		}
		flixel_FlxSprite.prototype.update.call(this,elapsed);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(!flixel_FlxG.renderTile) {
			return;
		}
		if(this.alpha == 0) {
			return;
		}
		if(this.get_percent() > 0 && this._frontFrame.type != 2) {
			var _g = 0;
			var _g1 = this.get_cameras();
			while(_g < _g1.length) {
				var camera = _g1[_g];
				++_g;
				if(!camera.visible || !camera.exists || !this.isOnScreen(camera)) {
					continue;
				}
				this.getScreenPosition(this._point,camera).subtractPoint(this.offset);
				this._frontFrame.prepareMatrix(this._matrix,0,this.flipX,this.flipY);
				this._matrix.translate(-this.origin.x,-this.origin.y);
				this._matrix.scale(this.scale.x,this.scale.y);
				if(this.angle != 0) {
					var _this = this._matrix;
					var cos = this._cosAngle;
					var sin = this._sinAngle;
					var a1 = _this.a * cos - _this.b * sin;
					_this.b = _this.a * sin + _this.b * cos;
					_this.a = a1;
					var c1 = _this.c * cos - _this.d * sin;
					_this.d = _this.c * sin + _this.d * cos;
					_this.c = c1;
					var tx1 = _this.tx * cos - _this.ty * sin;
					_this.ty = _this.tx * sin + _this.ty * cos;
					_this.tx = tx1;
				}
				var _this1 = this._point;
				var Y = this.origin.y;
				_this1.set_x(_this1.x + this.origin.x);
				_this1.set_y(_this1.y + Y);
				if(this.isPixelPerfectRender(camera)) {
					var _this2 = this._point;
					_this2.set_x(Math.floor(_this2.x));
					_this2.set_y(Math.floor(_this2.y));
				}
				this._matrix.translate(this._point.x,this._point.y);
				camera.drawPixels(this._frontFrame,null,this._matrix,this.colorTransform,this.blend,this.antialiasing,this.shader);
			}
		}
	}
	,set_pixels: function(Pixels) {
		if(flixel_FlxG.renderTile) {
			return Pixels;
		} else {
			return flixel_FlxSprite.prototype.set_pixels.call(this,Pixels);
		}
	}
	,toString: function() {
		var value = this.min;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "min";
		_this.value = value;
		var value1 = this.max;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "max";
		_this1.value = value1;
		var value2 = this.range;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "range";
		_this2.value = value2;
		var value3 = this.pct;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "%";
		_this3.value = value3;
		var value4 = this.pxPerPercent;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "px/%";
		_this4.value = value4;
		var value5 = this.get_value();
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "value";
		_this5.value = value5;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5]);
	}
	,get_percent: function() {
		if(this.get_value() > this.max) {
			return this._maxPercent;
		}
		return Math.floor((this.get_value() - this.min) / this.range * this._maxPercent);
	}
	,set_percent: function(newPct) {
		if(newPct >= 0 && newPct <= this._maxPercent) {
			this.set_value(this.pct * newPct);
		}
		return newPct;
	}
	,set_value: function(newValue) {
		this.value = Math.max(this.min,Math.min(newValue,this.max));
		if(this.get_value() == this.min && this.emptyCallback != null) {
			this.emptyCallback();
		}
		if(this.get_value() == this.max && this.filledCallback != null) {
			this.filledCallback();
		}
		if(this.get_value() == this.min && this.killOnEmpty) {
			this.kill();
		}
		this.updateBar();
		return newValue;
	}
	,get_value: function() {
		return this.value;
	}
	,set_numDivisions: function(newValue) {
		this.numDivisions = newValue > 0 ? newValue : 100;
		this.updateFilledBar();
		return newValue;
	}
	,get_frontFrames: function() {
		if(flixel_FlxG.renderTile) {
			return this.frontFrames;
		}
		return null;
	}
	,set_frontFrames: function(value) {
		if(flixel_FlxG.renderTile) {
			this.frontFrames = value;
			this._frontFrame = value != null ? value.get_frame().copyTo(this._frontFrame) : null;
		} else {
			this.createImageFilledBar(value.get_frame().paint());
		}
		return value;
	}
	,get_backFrames: function() {
		if(flixel_FlxG.renderTile) {
			return this.frames;
		}
		return null;
	}
	,set_backFrames: function(value) {
		if(flixel_FlxG.renderTile) {
			this.set_frames(value);
		} else {
			this.createImageEmptyBar(value.get_frame().paint());
		}
		return value;
	}
	,__class__: flixel_ui_FlxBar
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{set_fillDirection:"set_fillDirection",set_backFrames:"set_backFrames",get_backFrames:"get_backFrames",set_frontFrames:"set_frontFrames",get_frontFrames:"get_frontFrames",set_numDivisions:"set_numDivisions",set_value:"set_value",get_value:"get_value",set_percent:"set_percent",get_percent:"get_percent"})
});
var flixel_ui_FlxBarFillDirection = $hxClasses["flixel.ui.FlxBarFillDirection"] = { __ename__ : ["flixel","ui","FlxBarFillDirection"], __constructs__ : ["LEFT_TO_RIGHT","RIGHT_TO_LEFT","TOP_TO_BOTTOM","BOTTOM_TO_TOP","HORIZONTAL_INSIDE_OUT","HORIZONTAL_OUTSIDE_IN","VERTICAL_INSIDE_OUT","VERTICAL_OUTSIDE_IN"] };
flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT = ["LEFT_TO_RIGHT",0];
flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT.toString = $estr;
flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT.__enum__ = flixel_ui_FlxBarFillDirection;
flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT = ["RIGHT_TO_LEFT",1];
flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT.toString = $estr;
flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT.__enum__ = flixel_ui_FlxBarFillDirection;
flixel_ui_FlxBarFillDirection.TOP_TO_BOTTOM = ["TOP_TO_BOTTOM",2];
flixel_ui_FlxBarFillDirection.TOP_TO_BOTTOM.toString = $estr;
flixel_ui_FlxBarFillDirection.TOP_TO_BOTTOM.__enum__ = flixel_ui_FlxBarFillDirection;
flixel_ui_FlxBarFillDirection.BOTTOM_TO_TOP = ["BOTTOM_TO_TOP",3];
flixel_ui_FlxBarFillDirection.BOTTOM_TO_TOP.toString = $estr;
flixel_ui_FlxBarFillDirection.BOTTOM_TO_TOP.__enum__ = flixel_ui_FlxBarFillDirection;
flixel_ui_FlxBarFillDirection.HORIZONTAL_INSIDE_OUT = ["HORIZONTAL_INSIDE_OUT",4];
flixel_ui_FlxBarFillDirection.HORIZONTAL_INSIDE_OUT.toString = $estr;
flixel_ui_FlxBarFillDirection.HORIZONTAL_INSIDE_OUT.__enum__ = flixel_ui_FlxBarFillDirection;
flixel_ui_FlxBarFillDirection.HORIZONTAL_OUTSIDE_IN = ["HORIZONTAL_OUTSIDE_IN",5];
flixel_ui_FlxBarFillDirection.HORIZONTAL_OUTSIDE_IN.toString = $estr;
flixel_ui_FlxBarFillDirection.HORIZONTAL_OUTSIDE_IN.__enum__ = flixel_ui_FlxBarFillDirection;
flixel_ui_FlxBarFillDirection.VERTICAL_INSIDE_OUT = ["VERTICAL_INSIDE_OUT",6];
flixel_ui_FlxBarFillDirection.VERTICAL_INSIDE_OUT.toString = $estr;
flixel_ui_FlxBarFillDirection.VERTICAL_INSIDE_OUT.__enum__ = flixel_ui_FlxBarFillDirection;
flixel_ui_FlxBarFillDirection.VERTICAL_OUTSIDE_IN = ["VERTICAL_OUTSIDE_IN",7];
flixel_ui_FlxBarFillDirection.VERTICAL_OUTSIDE_IN.toString = $estr;
flixel_ui_FlxBarFillDirection.VERTICAL_OUTSIDE_IN.__enum__ = flixel_ui_FlxBarFillDirection;
flixel_ui_FlxBarFillDirection.__empty_constructs__ = [flixel_ui_FlxBarFillDirection.LEFT_TO_RIGHT,flixel_ui_FlxBarFillDirection.RIGHT_TO_LEFT,flixel_ui_FlxBarFillDirection.TOP_TO_BOTTOM,flixel_ui_FlxBarFillDirection.BOTTOM_TO_TOP,flixel_ui_FlxBarFillDirection.HORIZONTAL_INSIDE_OUT,flixel_ui_FlxBarFillDirection.HORIZONTAL_OUTSIDE_IN,flixel_ui_FlxBarFillDirection.VERTICAL_INSIDE_OUT,flixel_ui_FlxBarFillDirection.VERTICAL_OUTSIDE_IN];
var flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText = function(X,Y,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.lastStatus = -1;
	this.maxInputMovement = Infinity;
	this.mouseButtons = [-1];
	this.allowSwiping = true;
	this.statusAnimations = ["normal","highlight","pressed"];
	this.labelAlphas = [0.8,1.0,0.5];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,1);
	point2._inPool = false;
	this.labelOffsets = [point,point1,point2];
	flixel_FlxSprite.call(this,X,Y);
	this.loadDefaultGraphic();
	this.onUp = new flixel_ui__$FlxButton_FlxButtonEvent(OnClick);
	this.onDown = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOver = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOut = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.set_status(0);
	this.scrollFactor.set();
	openfl_Lib.current.stage.addEventListener("mouseUp",$bind(this,this.onUpEventListener));
	this.input = new flixel_input_FlxInput(0);
};
$hxClasses["flixel.ui.FlxTypedButton_flixel_text_FlxBitmapText"] = flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText;
flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText.__name__ = ["flixel","ui","FlxTypedButton_flixel_text_FlxBitmapText"];
flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText.__interfaces__ = [flixel_input_IFlxInput];
flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText.__super__ = flixel_FlxSprite;
flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText.prototype = $extend(flixel_FlxSprite.prototype,{
	label: null
	,labelOffsets: null
	,labelAlphas: null
	,statusAnimations: null
	,allowSwiping: null
	,mouseButtons: null
	,maxInputMovement: null
	,status: null
	,onUp: null
	,onDown: null
	,onOver: null
	,onOut: null
	,_spriteLabel: null
	,input: null
	,currentInput: null
	,lastStatus: null
	,graphicLoaded: function() {
		flixel_FlxSprite.prototype.graphicLoaded.call(this);
		this.setupAnimation("normal",0);
		this.setupAnimation("highlight",1);
		this.setupAnimation("pressed",2);
	}
	,loadDefaultGraphic: function() {
		this.loadGraphic("flixel/images/ui/button.png",true,80,20);
	}
	,setupAnimation: function(animationName,frameIndex) {
		frameIndex = Math.min(frameIndex,this.animation._sprite.numFrames - 1) | 0;
		this.animation.add(animationName,[frameIndex]);
	}
	,destroy: function() {
		this.set_label(flixel_util_FlxDestroyUtil.destroy(this.label));
		this._spriteLabel = null;
		this.onUp = flixel_util_FlxDestroyUtil.destroy(this.onUp);
		this.onDown = flixel_util_FlxDestroyUtil.destroy(this.onDown);
		this.onOver = flixel_util_FlxDestroyUtil.destroy(this.onOver);
		this.onOut = flixel_util_FlxDestroyUtil.destroy(this.onOut);
		this.labelOffsets = flixel_util_FlxDestroyUtil.putArray(this.labelOffsets);
		this.labelAlphas = null;
		this.currentInput = null;
		this.input = null;
		openfl_Lib.current.stage.removeEventListener("mouseUp",$bind(this,this.onUpEventListener));
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		this.input.update();
		if(this.visible) {
			this.updateButton();
			if(this.lastStatus != this.status) {
				this.updateStatusAnimation();
				this.lastStatus = this.status;
			}
		}
	}
	,updateStatusAnimation: function() {
		this.animation.play(this.statusAnimations[this.status]);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(this._spriteLabel != null && this._spriteLabel.visible) {
			this._spriteLabel.set_cameras(this.get_cameras());
			this._spriteLabel.draw();
		}
	}
	,drawDebug: function() {
		flixel_FlxSprite.prototype.drawDebug.call(this);
		if(this._spriteLabel != null) {
			this._spriteLabel.drawDebug();
		}
	}
	,stampOnAtlas: function(atlas) {
		var buttonNode = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = buttonNode != null;
		if(buttonNode != null) {
			var buttonFrames = this.frames;
			var X = buttonFrames.tileSize.x;
			var Y = buttonFrames.tileSize.y;
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var tileFrames = buttonNode.getTileFrames(point);
			this.set_frames(tileFrames);
		}
		if(result && this.label != null) {
			var labelNode = atlas.addNode(this.label.graphic.bitmap,this.label.graphic.key);
			if(result) {
				result = labelNode != null;
			} else {
				result = false;
			}
			if(labelNode != null) {
				this.label.set_frames(labelNode.getImageFrame());
			}
		}
		return result;
	}
	,updateButton: function() {
		var overlapFound = this.checkMouseOverlap();
		if(!overlapFound) {
			overlapFound = this.checkTouchOverlap();
		}
		if(this.currentInput != null && this.currentInput.get_justReleased() && js_Boot.__instanceof(this.currentInput,flixel_input_touch_FlxTouch) && overlapFound) {
			this.onUpHandler();
		}
		if(this.status != 0 && (!overlapFound || this.currentInput != null && this.currentInput.get_justReleased())) {
			this.onOutHandler();
		}
	}
	,checkMouseOverlap: function() {
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.mouseButtons;
			while(_g2 < _g3.length) {
				var buttonID = _g3[_g2];
				++_g2;
				var button = flixel_input_mouse_FlxMouseButton.getByID(buttonID);
				if(button != null && this.checkInput(flixel_FlxG.mouse,button,button.justPressedPosition,camera)) {
					return true;
				}
			}
		}
		return false;
	}
	,checkTouchOverlap: function() {
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				if(this.checkInput(touch,touch,touch.justPressedPosition,camera)) {
					return true;
				}
			}
		}
		return false;
	}
	,checkInput: function(pointer,input,justPressedPosition,camera) {
		var tmp;
		var tmp1;
		if(this.maxInputMovement != Infinity) {
			var point = flixel_math_FlxPoint._pool.get().set(0,0);
			point._inPool = false;
			point._weak = true;
			tmp1 = justPressedPosition.distanceTo(pointer.getScreenPosition(null,point)) > this.maxInputMovement;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = input == this.currentInput;
		} else {
			tmp = false;
		}
		if(!tmp) {
			if(this.overlapsPoint(pointer.getWorldPosition(camera,this._point),true,camera)) {
				this.updateStatus(input);
				return true;
			}
		}
		return false;
	}
	,updateStatus: function(input) {
		if(input.get_justPressed()) {
			this.currentInput = input;
			this.onDownHandler();
		} else if(this.status == 0) {
			if(this.allowSwiping && input.get_pressed()) {
				this.onDownHandler();
			} else {
				this.onOverHandler();
			}
		}
	}
	,updateLabelPosition: function() {
		if(this._spriteLabel != null) {
			this._spriteLabel.set_x((this.pixelPerfectPosition ? Math.floor(this.x) : this.x) + this.labelOffsets[this.status].x);
			this._spriteLabel.set_y((this.pixelPerfectPosition ? Math.floor(this.y) : this.y) + this.labelOffsets[this.status].y);
		}
	}
	,updateLabelAlpha: function() {
		if(this._spriteLabel != null && this.labelAlphas.length > this.status) {
			this._spriteLabel.set_alpha(this.alpha * this.labelAlphas[this.status]);
		}
	}
	,onUpEventListener: function(_) {
		if(this.visible && this.exists && this.active && this.status == 2) {
			this.onUpHandler();
		}
	}
	,onUpHandler: function() {
		this.set_status(0);
		this.input.release();
		this.currentInput = null;
		var _this = this.onUp;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onDownHandler: function() {
		this.set_status(2);
		this.input.press();
		var _this = this.onDown;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOverHandler: function() {
		this.set_status(1);
		var _this = this.onOver;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOutHandler: function() {
		this.set_status(0);
		this.input.release();
		var _this = this.onOut;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,set_label: function(Value) {
		if(Value != null) {
			Value.scrollFactor.put();
			Value.scrollFactor = this.scrollFactor;
		}
		this.label = Value;
		this._spriteLabel = this.label;
		this.updateLabelPosition();
		return Value;
	}
	,set_status: function(Value) {
		this.status = Value;
		this.updateLabelAlpha();
		return this.status;
	}
	,set_alpha: function(Value) {
		flixel_FlxSprite.prototype.set_alpha.call(this,Value);
		this.updateLabelAlpha();
		return this.alpha;
	}
	,set_x: function(Value) {
		flixel_FlxSprite.prototype.set_x.call(this,Value);
		this.updateLabelPosition();
		return this.x;
	}
	,set_y: function(Value) {
		flixel_FlxSprite.prototype.set_y.call(this,Value);
		this.updateLabelPosition();
		return this.y;
	}
	,get_justReleased: function() {
		return this.input.current == -1;
	}
	,get_released: function() {
		var _this = this.input;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this.input;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.input.current == 2;
	}
	,__class__: flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased",set_status:"set_status",set_label:"set_label"})
});
var flixel_ui_FlxBitmapTextButton = function(X,Y,Label,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText.call(this,X,Y,OnClick);
	if(Label != null) {
		this.set_label(new flixel_text_FlxBitmapText());
		this.label.set_width(80);
		this.label.set_text(Label);
		this.label.set_color(-13421773);
		this.label.set_useTextColor(true);
		this.label.set_alignment("center");
		var _g = 0;
		var _g1 = this.labelOffsets;
		while(_g < _g1.length) {
			var offset = _g1[_g];
			++_g;
			offset.set(0,5);
		}
		this.label.set_x(X + this.labelOffsets[this.status].x);
		this.label.set_y(Y + this.labelOffsets[this.status].y);
	}
};
$hxClasses["flixel.ui.FlxBitmapTextButton"] = flixel_ui_FlxBitmapTextButton;
flixel_ui_FlxBitmapTextButton.__name__ = ["flixel","ui","FlxBitmapTextButton"];
flixel_ui_FlxBitmapTextButton.__super__ = flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText;
flixel_ui_FlxBitmapTextButton.prototype = $extend(flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText.prototype,{
	resetHelpers: function() {
		flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText.prototype.resetHelpers.call(this);
		if(this.label != null) {
			this.label.set_width(this.get_width());
		}
	}
	,update: function(elapsed) {
		flixel_ui_FlxTypedButton_$flixel_$text_$FlxBitmapText.prototype.update.call(this,elapsed);
		if(this.label != null) {
			this.label.update(elapsed);
		}
	}
	,__class__: flixel_ui_FlxBitmapTextButton
});
var flixel_ui_FlxTypedButton_$flixel_$text_$FlxText = function(X,Y,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.lastStatus = -1;
	this.maxInputMovement = Infinity;
	this.mouseButtons = [-1];
	this.allowSwiping = true;
	this.statusAnimations = ["normal","highlight","pressed"];
	this.labelAlphas = [0.8,1.0,0.5];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,1);
	point2._inPool = false;
	this.labelOffsets = [point,point1,point2];
	flixel_FlxSprite.call(this,X,Y);
	this.loadDefaultGraphic();
	this.onUp = new flixel_ui__$FlxButton_FlxButtonEvent(OnClick);
	this.onDown = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOver = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOut = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.set_status(0);
	this.scrollFactor.set();
	openfl_Lib.current.stage.addEventListener("mouseUp",$bind(this,this.onUpEventListener));
	this.input = new flixel_input_FlxInput(0);
};
$hxClasses["flixel.ui.FlxTypedButton_flixel_text_FlxText"] = flixel_ui_FlxTypedButton_$flixel_$text_$FlxText;
flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.__name__ = ["flixel","ui","FlxTypedButton_flixel_text_FlxText"];
flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.__interfaces__ = [flixel_input_IFlxInput];
flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.__super__ = flixel_FlxSprite;
flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.prototype = $extend(flixel_FlxSprite.prototype,{
	label: null
	,labelOffsets: null
	,labelAlphas: null
	,statusAnimations: null
	,allowSwiping: null
	,mouseButtons: null
	,maxInputMovement: null
	,status: null
	,onUp: null
	,onDown: null
	,onOver: null
	,onOut: null
	,_spriteLabel: null
	,input: null
	,currentInput: null
	,lastStatus: null
	,graphicLoaded: function() {
		flixel_FlxSprite.prototype.graphicLoaded.call(this);
		this.setupAnimation("normal",0);
		this.setupAnimation("highlight",1);
		this.setupAnimation("pressed",2);
	}
	,loadDefaultGraphic: function() {
		this.loadGraphic("flixel/images/ui/button.png",true,80,20);
	}
	,setupAnimation: function(animationName,frameIndex) {
		frameIndex = Math.min(frameIndex,this.animation._sprite.numFrames - 1) | 0;
		this.animation.add(animationName,[frameIndex]);
	}
	,destroy: function() {
		this.set_label(flixel_util_FlxDestroyUtil.destroy(this.label));
		this._spriteLabel = null;
		this.onUp = flixel_util_FlxDestroyUtil.destroy(this.onUp);
		this.onDown = flixel_util_FlxDestroyUtil.destroy(this.onDown);
		this.onOver = flixel_util_FlxDestroyUtil.destroy(this.onOver);
		this.onOut = flixel_util_FlxDestroyUtil.destroy(this.onOut);
		this.labelOffsets = flixel_util_FlxDestroyUtil.putArray(this.labelOffsets);
		this.labelAlphas = null;
		this.currentInput = null;
		this.input = null;
		openfl_Lib.current.stage.removeEventListener("mouseUp",$bind(this,this.onUpEventListener));
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		this.input.update();
		if(this.visible) {
			this.updateButton();
			if(this.lastStatus != this.status) {
				this.updateStatusAnimation();
				this.lastStatus = this.status;
			}
		}
	}
	,updateStatusAnimation: function() {
		this.animation.play(this.statusAnimations[this.status]);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(this._spriteLabel != null && this._spriteLabel.visible) {
			this._spriteLabel.set_cameras(this.get_cameras());
			this._spriteLabel.draw();
		}
	}
	,drawDebug: function() {
		flixel_FlxSprite.prototype.drawDebug.call(this);
		if(this._spriteLabel != null) {
			this._spriteLabel.drawDebug();
		}
	}
	,stampOnAtlas: function(atlas) {
		var buttonNode = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = buttonNode != null;
		if(buttonNode != null) {
			var buttonFrames = this.frames;
			var X = buttonFrames.tileSize.x;
			var Y = buttonFrames.tileSize.y;
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var tileFrames = buttonNode.getTileFrames(point);
			this.set_frames(tileFrames);
		}
		if(result && this.label != null) {
			var labelNode = atlas.addNode(this.label.graphic.bitmap,this.label.graphic.key);
			if(result) {
				result = labelNode != null;
			} else {
				result = false;
			}
			if(labelNode != null) {
				this.label.set_frames(labelNode.getImageFrame());
			}
		}
		return result;
	}
	,updateButton: function() {
		var overlapFound = this.checkMouseOverlap();
		if(!overlapFound) {
			overlapFound = this.checkTouchOverlap();
		}
		if(this.currentInput != null && this.currentInput.get_justReleased() && js_Boot.__instanceof(this.currentInput,flixel_input_touch_FlxTouch) && overlapFound) {
			this.onUpHandler();
		}
		if(this.status != 0 && (!overlapFound || this.currentInput != null && this.currentInput.get_justReleased())) {
			this.onOutHandler();
		}
	}
	,checkMouseOverlap: function() {
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.mouseButtons;
			while(_g2 < _g3.length) {
				var buttonID = _g3[_g2];
				++_g2;
				var button = flixel_input_mouse_FlxMouseButton.getByID(buttonID);
				if(button != null && this.checkInput(flixel_FlxG.mouse,button,button.justPressedPosition,camera)) {
					return true;
				}
			}
		}
		return false;
	}
	,checkTouchOverlap: function() {
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				if(this.checkInput(touch,touch,touch.justPressedPosition,camera)) {
					return true;
				}
			}
		}
		return false;
	}
	,checkInput: function(pointer,input,justPressedPosition,camera) {
		var tmp;
		var tmp1;
		if(this.maxInputMovement != Infinity) {
			var point = flixel_math_FlxPoint._pool.get().set(0,0);
			point._inPool = false;
			point._weak = true;
			tmp1 = justPressedPosition.distanceTo(pointer.getScreenPosition(null,point)) > this.maxInputMovement;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = input == this.currentInput;
		} else {
			tmp = false;
		}
		if(!tmp) {
			if(this.overlapsPoint(pointer.getWorldPosition(camera,this._point),true,camera)) {
				this.updateStatus(input);
				return true;
			}
		}
		return false;
	}
	,updateStatus: function(input) {
		if(input.get_justPressed()) {
			this.currentInput = input;
			this.onDownHandler();
		} else if(this.status == 0) {
			if(this.allowSwiping && input.get_pressed()) {
				this.onDownHandler();
			} else {
				this.onOverHandler();
			}
		}
	}
	,updateLabelPosition: function() {
		if(this._spriteLabel != null) {
			this._spriteLabel.set_x((this.pixelPerfectPosition ? Math.floor(this.x) : this.x) + this.labelOffsets[this.status].x);
			this._spriteLabel.set_y((this.pixelPerfectPosition ? Math.floor(this.y) : this.y) + this.labelOffsets[this.status].y);
		}
	}
	,updateLabelAlpha: function() {
		if(this._spriteLabel != null && this.labelAlphas.length > this.status) {
			this._spriteLabel.set_alpha(this.alpha * this.labelAlphas[this.status]);
		}
	}
	,onUpEventListener: function(_) {
		if(this.visible && this.exists && this.active && this.status == 2) {
			this.onUpHandler();
		}
	}
	,onUpHandler: function() {
		this.set_status(0);
		this.input.release();
		this.currentInput = null;
		var _this = this.onUp;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onDownHandler: function() {
		this.set_status(2);
		this.input.press();
		var _this = this.onDown;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOverHandler: function() {
		this.set_status(1);
		var _this = this.onOver;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOutHandler: function() {
		this.set_status(0);
		this.input.release();
		var _this = this.onOut;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,set_label: function(Value) {
		if(Value != null) {
			Value.scrollFactor.put();
			Value.scrollFactor = this.scrollFactor;
		}
		this.label = Value;
		this._spriteLabel = this.label;
		this.updateLabelPosition();
		return Value;
	}
	,set_status: function(Value) {
		this.status = Value;
		this.updateLabelAlpha();
		return this.status;
	}
	,set_alpha: function(Value) {
		flixel_FlxSprite.prototype.set_alpha.call(this,Value);
		this.updateLabelAlpha();
		return this.alpha;
	}
	,set_x: function(Value) {
		flixel_FlxSprite.prototype.set_x.call(this,Value);
		this.updateLabelPosition();
		return this.x;
	}
	,set_y: function(Value) {
		flixel_FlxSprite.prototype.set_y.call(this,Value);
		this.updateLabelPosition();
		return this.y;
	}
	,get_justReleased: function() {
		return this.input.current == -1;
	}
	,get_released: function() {
		var _this = this.input;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this.input;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.input.current == 2;
	}
	,__class__: flixel_ui_FlxTypedButton_$flixel_$text_$FlxText
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased",set_status:"set_status",set_label:"set_label"})
});
var flixel_ui_FlxButton = function(X,Y,Text,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.call(this,X,Y,OnClick);
	var _g = 0;
	var _g1 = this.labelOffsets;
	while(_g < _g1.length) {
		var point = _g1[_g];
		++_g;
		point.set(point.x - 1,point.y + 3);
	}
	if(Text != null) {
		this.set_label(new flixel_text_FlxText(this.x + this.labelOffsets[0].x,this.y + this.labelOffsets[0].y,80,Text));
		this.label.setFormat(null,8,3355443,"center");
		this.label.set_alpha(this.labelAlphas[this.status]);
		this.label.drawFrame(true);
	}
};
$hxClasses["flixel.ui.FlxButton"] = flixel_ui_FlxButton;
flixel_ui_FlxButton.__name__ = ["flixel","ui","FlxButton"];
flixel_ui_FlxButton.__super__ = flixel_ui_FlxTypedButton_$flixel_$text_$FlxText;
flixel_ui_FlxButton.prototype = $extend(flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.prototype,{
	resetHelpers: function() {
		flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.prototype.resetHelpers.call(this);
		if(this.label != null) {
			var tmp = this.label;
			var tmp1 = this.get_width() | 0;
			tmp.set_fieldWidth(this.label.frameWidth = tmp1);
			this.label.set_size(this.label._defaultFormat.size | 0);
		}
	}
	,initLabel: function(Text) {
		if(Text != null) {
			this.set_label(new flixel_text_FlxText(this.x + this.labelOffsets[0].x,this.y + this.labelOffsets[0].y,80,Text));
			this.label.setFormat(null,8,3355443,"center");
			this.label.set_alpha(this.labelAlphas[this.status]);
			this.label.drawFrame(true);
		}
	}
	,get_text: function() {
		if(this.label != null) {
			return this.label.text;
		} else {
			return null;
		}
	}
	,set_text: function(Text) {
		if(this.label == null) {
			if(Text != null) {
				this.set_label(new flixel_text_FlxText(this.x + this.labelOffsets[0].x,this.y + this.labelOffsets[0].y,80,Text));
				this.label.setFormat(null,8,3355443,"center");
				this.label.set_alpha(this.labelAlphas[this.status]);
				this.label.drawFrame(true);
			}
		} else {
			this.label.set_text(Text);
		}
		return Text;
	}
	,__class__: flixel_ui_FlxButton
	,__properties__: $extend(flixel_ui_FlxTypedButton_$flixel_$text_$FlxText.prototype.__properties__,{set_text:"set_text",get_text:"get_text"})
});
var flixel_ui_FlxTypedButton = function(X,Y,OnClick) {
	if(Y == null) {
		Y = 0;
	}
	if(X == null) {
		X = 0;
	}
	this.lastStatus = -1;
	this.maxInputMovement = Infinity;
	this.mouseButtons = [-1];
	this.allowSwiping = true;
	this.statusAnimations = ["normal","highlight","pressed"];
	this.labelAlphas = [0.8,1.0,0.5];
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	var point2 = flixel_math_FlxPoint._pool.get().set(0,1);
	point2._inPool = false;
	this.labelOffsets = [point,point1,point2];
	flixel_FlxSprite.call(this,X,Y);
	this.loadDefaultGraphic();
	this.onUp = new flixel_ui__$FlxButton_FlxButtonEvent(OnClick);
	this.onDown = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOver = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.onOut = new flixel_ui__$FlxButton_FlxButtonEvent();
	this.set_status(0);
	this.scrollFactor.set();
	openfl_Lib.current.stage.addEventListener("mouseUp",$bind(this,this.onUpEventListener));
	this.input = new flixel_input_FlxInput(0);
};
$hxClasses["flixel.ui.FlxTypedButton"] = flixel_ui_FlxTypedButton;
flixel_ui_FlxTypedButton.__name__ = ["flixel","ui","FlxTypedButton"];
flixel_ui_FlxTypedButton.__interfaces__ = [flixel_input_IFlxInput];
flixel_ui_FlxTypedButton.__super__ = flixel_FlxSprite;
flixel_ui_FlxTypedButton.prototype = $extend(flixel_FlxSprite.prototype,{
	label: null
	,labelOffsets: null
	,labelAlphas: null
	,statusAnimations: null
	,allowSwiping: null
	,mouseButtons: null
	,maxInputMovement: null
	,status: null
	,onUp: null
	,onDown: null
	,onOver: null
	,onOut: null
	,_spriteLabel: null
	,input: null
	,currentInput: null
	,lastStatus: null
	,graphicLoaded: function() {
		flixel_FlxSprite.prototype.graphicLoaded.call(this);
		this.setupAnimation("normal",0);
		this.setupAnimation("highlight",1);
		this.setupAnimation("pressed",2);
	}
	,loadDefaultGraphic: function() {
		this.loadGraphic("flixel/images/ui/button.png",true,80,20);
	}
	,setupAnimation: function(animationName,frameIndex) {
		frameIndex = Math.min(frameIndex,this.animation._sprite.numFrames - 1) | 0;
		this.animation.add(animationName,[frameIndex]);
	}
	,destroy: function() {
		this.set_label(flixel_util_FlxDestroyUtil.destroy(this.label));
		this._spriteLabel = null;
		this.onUp = flixel_util_FlxDestroyUtil.destroy(this.onUp);
		this.onDown = flixel_util_FlxDestroyUtil.destroy(this.onDown);
		this.onOver = flixel_util_FlxDestroyUtil.destroy(this.onOver);
		this.onOut = flixel_util_FlxDestroyUtil.destroy(this.onOut);
		this.labelOffsets = flixel_util_FlxDestroyUtil.putArray(this.labelOffsets);
		this.labelAlphas = null;
		this.currentInput = null;
		this.input = null;
		openfl_Lib.current.stage.removeEventListener("mouseUp",$bind(this,this.onUpEventListener));
		flixel_FlxSprite.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		flixel_FlxSprite.prototype.update.call(this,elapsed);
		this.input.update();
		if(this.visible) {
			this.updateButton();
			if(this.lastStatus != this.status) {
				this.updateStatusAnimation();
				this.lastStatus = this.status;
			}
		}
	}
	,updateStatusAnimation: function() {
		this.animation.play(this.statusAnimations[this.status]);
	}
	,draw: function() {
		flixel_FlxSprite.prototype.draw.call(this);
		if(this._spriteLabel != null && this._spriteLabel.visible) {
			this._spriteLabel.set_cameras(this.get_cameras());
			this._spriteLabel.draw();
		}
	}
	,drawDebug: function() {
		flixel_FlxSprite.prototype.drawDebug.call(this);
		if(this._spriteLabel != null) {
			this._spriteLabel.drawDebug();
		}
	}
	,stampOnAtlas: function(atlas) {
		var buttonNode = atlas.addNode(this.graphic.bitmap,this.graphic.key);
		var result = buttonNode != null;
		if(buttonNode != null) {
			var buttonFrames = this.frames;
			var X = buttonFrames.tileSize.x;
			var Y = buttonFrames.tileSize.y;
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			var tileFrames = buttonNode.getTileFrames(point);
			this.set_frames(tileFrames);
		}
		if(result && this.label != null) {
			var labelNode = atlas.addNode(this.label.graphic.bitmap,this.label.graphic.key);
			if(result) {
				result = labelNode != null;
			} else {
				result = false;
			}
			if(labelNode != null) {
				this.label.set_frames(labelNode.getImageFrame());
			}
		}
		return result;
	}
	,updateButton: function() {
		var overlapFound = this.checkMouseOverlap();
		if(!overlapFound) {
			overlapFound = this.checkTouchOverlap();
		}
		if(this.currentInput != null && this.currentInput.get_justReleased() && js_Boot.__instanceof(this.currentInput,flixel_input_touch_FlxTouch) && overlapFound) {
			this.onUpHandler();
		}
		if(this.status != 0 && (!overlapFound || this.currentInput != null && this.currentInput.get_justReleased())) {
			this.onOutHandler();
		}
	}
	,checkMouseOverlap: function() {
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.mouseButtons;
			while(_g2 < _g3.length) {
				var buttonID = _g3[_g2];
				++_g2;
				var button = flixel_input_mouse_FlxMouseButton.getByID(buttonID);
				if(button != null && this.checkInput(flixel_FlxG.mouse,button,button.justPressedPosition,camera)) {
					return true;
				}
			}
		}
		return false;
	}
	,checkTouchOverlap: function() {
		var _g = 0;
		var _g1 = this.get_cameras();
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = flixel_FlxG.touches.list;
			while(_g2 < _g3.length) {
				var touch = _g3[_g2];
				++_g2;
				if(this.checkInput(touch,touch,touch.justPressedPosition,camera)) {
					return true;
				}
			}
		}
		return false;
	}
	,checkInput: function(pointer,input,justPressedPosition,camera) {
		var tmp;
		var tmp1;
		if(this.maxInputMovement != Infinity) {
			var point = flixel_math_FlxPoint._pool.get().set(0,0);
			point._inPool = false;
			point._weak = true;
			tmp1 = justPressedPosition.distanceTo(pointer.getScreenPosition(null,point)) > this.maxInputMovement;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = input == this.currentInput;
		} else {
			tmp = false;
		}
		if(!tmp) {
			if(this.overlapsPoint(pointer.getWorldPosition(camera,this._point),true,camera)) {
				this.updateStatus(input);
				return true;
			}
		}
		return false;
	}
	,updateStatus: function(input) {
		if(input.get_justPressed()) {
			this.currentInput = input;
			this.onDownHandler();
		} else if(this.status == 0) {
			if(this.allowSwiping && input.get_pressed()) {
				this.onDownHandler();
			} else {
				this.onOverHandler();
			}
		}
	}
	,updateLabelPosition: function() {
		if(this._spriteLabel != null) {
			this._spriteLabel.set_x((this.pixelPerfectPosition ? Math.floor(this.x) : this.x) + this.labelOffsets[this.status].x);
			this._spriteLabel.set_y((this.pixelPerfectPosition ? Math.floor(this.y) : this.y) + this.labelOffsets[this.status].y);
		}
	}
	,updateLabelAlpha: function() {
		if(this._spriteLabel != null && this.labelAlphas.length > this.status) {
			this._spriteLabel.set_alpha(this.alpha * this.labelAlphas[this.status]);
		}
	}
	,onUpEventListener: function(_) {
		if(this.visible && this.exists && this.active && this.status == 2) {
			this.onUpHandler();
		}
	}
	,onUpHandler: function() {
		this.set_status(0);
		this.input.release();
		this.currentInput = null;
		var _this = this.onUp;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onDownHandler: function() {
		this.set_status(2);
		this.input.press();
		var _this = this.onDown;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOverHandler: function() {
		this.set_status(1);
		var _this = this.onOver;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,onOutHandler: function() {
		this.set_status(0);
		this.input.release();
		var _this = this.onOut;
		if(_this.callback != null) {
			_this.callback();
		}
		if(_this.sound != null) {
			_this.sound.play(true);
		}
	}
	,set_label: function(Value) {
		if(Value != null) {
			Value.scrollFactor.put();
			Value.scrollFactor = this.scrollFactor;
		}
		this.label = Value;
		this._spriteLabel = this.label;
		this.updateLabelPosition();
		return Value;
	}
	,set_status: function(Value) {
		this.status = Value;
		this.updateLabelAlpha();
		return this.status;
	}
	,set_alpha: function(Value) {
		flixel_FlxSprite.prototype.set_alpha.call(this,Value);
		this.updateLabelAlpha();
		return this.alpha;
	}
	,set_x: function(Value) {
		flixel_FlxSprite.prototype.set_x.call(this,Value);
		this.updateLabelPosition();
		return this.x;
	}
	,set_y: function(Value) {
		flixel_FlxSprite.prototype.set_y.call(this,Value);
		this.updateLabelPosition();
		return this.y;
	}
	,get_justReleased: function() {
		return this.input.current == -1;
	}
	,get_released: function() {
		var _this = this.input;
		if(_this.current != 0) {
			return _this.current == -1;
		} else {
			return true;
		}
	}
	,get_pressed: function() {
		var _this = this.input;
		if(_this.current != 1) {
			return _this.current == 2;
		} else {
			return true;
		}
	}
	,get_justPressed: function() {
		return this.input.current == 2;
	}
	,__class__: flixel_ui_FlxTypedButton
	,__properties__: $extend(flixel_FlxSprite.prototype.__properties__,{get_justPressed:"get_justPressed",get_pressed:"get_pressed",get_released:"get_released",get_justReleased:"get_justReleased",set_status:"set_status",set_label:"set_label"})
});
var flixel_ui__$FlxButton_FlxButtonEvent = function(Callback,sound) {
	this.callback = Callback;
	this.sound = sound;
};
$hxClasses["flixel.ui._FlxButton.FlxButtonEvent"] = flixel_ui__$FlxButton_FlxButtonEvent;
flixel_ui__$FlxButton_FlxButtonEvent.__name__ = ["flixel","ui","_FlxButton","FlxButtonEvent"];
flixel_ui__$FlxButton_FlxButtonEvent.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_ui__$FlxButton_FlxButtonEvent.prototype = {
	callback: null
	,sound: null
	,destroy: function() {
		this.callback = null;
		this.sound = flixel_util_FlxDestroyUtil.destroy(this.sound);
	}
	,fire: function() {
		if(this.callback != null) {
			this.callback();
		}
		if(this.sound != null) {
			this.sound.play(true);
		}
	}
	,__class__: flixel_ui__$FlxButton_FlxButtonEvent
};
var flixel_util_FlxArrayUtil = function() { };
$hxClasses["flixel.util.FlxArrayUtil"] = flixel_util_FlxArrayUtil;
flixel_util_FlxArrayUtil.__name__ = ["flixel","util","FlxArrayUtil"];
flixel_util_FlxArrayUtil.setLength_Int = function(array,newLength) {
	if(newLength < 0) {
		return array;
	}
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff >= 0) {
		return array;
	}
	diff = -diff;
	var _g1 = 0;
	var _g = diff;
	while(_g1 < _g) {
		++_g1;
		array.pop();
	}
	return array;
};
flixel_util_FlxArrayUtil.flatten2DArray_Int = function(array) {
	var result = [];
	var _g = 0;
	while(_g < array.length) {
		var innerArray = array[_g];
		++_g;
		var _g1 = 0;
		while(_g1 < innerArray.length) {
			var element = innerArray[_g1];
			++_g1;
			result.push(element);
		}
	}
	return result;
};
flixel_util_FlxArrayUtil.setLength_flixel_group_FlxTypedGroup_T = function(array,newLength) {
	if(newLength < 0) {
		return array;
	}
	var oldLength = array.length;
	var diff = newLength - oldLength;
	if(diff >= 0) {
		return array;
	}
	diff = -diff;
	var _g1 = 0;
	var _g = diff;
	while(_g1 < _g) {
		++_g1;
		array.pop();
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_system_debug_Window = function(array,element) {
	var index = array.indexOf(element);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_system_debug_watch_WatchEntry = function(array,element) {
	var index = array.indexOf(element);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_tweens_FlxTween = function(array,element) {
	var index = array.indexOf(element);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.fastSplice_flixel_util_FlxTimer = function(array,element) {
	var index = array.indexOf(element);
	if(index != -1) {
		array[index] = array[array.length - 1];
		array.pop();
		return array;
	}
	return array;
};
flixel_util_FlxArrayUtil.swapAndPop_fastSplice_T = function(array,index) {
	array[index] = array[array.length - 1];
	array.pop();
	return array;
};
flixel_util_FlxArrayUtil.clearArray = function(array,recursive) {
	if(recursive == null) {
		recursive = false;
	}
	if(array == null) {
		return array;
	}
	if(recursive) {
		while(array.length > 0) {
			var thing = array.pop();
			if((thing instanceof Array) && thing.__enum__ == null) {
				flixel_util_FlxArrayUtil.clearArray(array,recursive);
			}
		}
	} else {
		while(array.length > 0) array.pop();
	}
	return array;
};
flixel_util_FlxArrayUtil.equals = function(array1,array2) {
	if(array1 == null && array2 == null) {
		return true;
	}
	if(array1 == null && array2 != null) {
		return false;
	}
	if(array1 != null && array2 == null) {
		return false;
	}
	if(array1.length != array2.length) {
		return false;
	}
	var _g1 = 0;
	var _g = array1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(array1[i] != array2[i]) {
			return false;
		}
	}
	return true;
};
flixel_util_FlxArrayUtil.last = function(array) {
	if(array == null || array.length == 0) {
		return null;
	}
	return array[array.length - 1];
};
flixel_util_FlxArrayUtil.contains = function(array,element) {
	return array.indexOf(element) != -1;
};
var flixel_util_FlxAxes = $hxClasses["flixel.util.FlxAxes"] = { __ename__ : ["flixel","util","FlxAxes"], __constructs__ : ["X","Y","XY"] };
flixel_util_FlxAxes.X = ["X",0];
flixel_util_FlxAxes.X.toString = $estr;
flixel_util_FlxAxes.X.__enum__ = flixel_util_FlxAxes;
flixel_util_FlxAxes.Y = ["Y",1];
flixel_util_FlxAxes.Y.toString = $estr;
flixel_util_FlxAxes.Y.__enum__ = flixel_util_FlxAxes;
flixel_util_FlxAxes.XY = ["XY",2];
flixel_util_FlxAxes.XY.toString = $estr;
flixel_util_FlxAxes.XY.__enum__ = flixel_util_FlxAxes;
flixel_util_FlxAxes.__empty_constructs__ = [flixel_util_FlxAxes.X,flixel_util_FlxAxes.Y,flixel_util_FlxAxes.XY];
var flixel_util_FlxBitmapDataPool = function() { };
$hxClasses["flixel.util.FlxBitmapDataPool"] = flixel_util_FlxBitmapDataPool;
flixel_util_FlxBitmapDataPool.__name__ = ["flixel","util","FlxBitmapDataPool"];
flixel_util_FlxBitmapDataPool.__properties__ = {set_maxLength:"set_maxLength"}
flixel_util_FlxBitmapDataPool.get = function(w,h,transparent,fillColor,exactSize) {
	if(exactSize == null) {
		exactSize = false;
	}
	if(transparent == null) {
		transparent = true;
	}
	var res = null;
	var node = flixel_util_FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		if(bmd.transparent == transparent && bmd.width >= w && bmd.height >= h && (!exactSize || exactSize && bmd.width == w && bmd.height == h)) {
			res = bmd;
			if(node.prev != null) {
				node.prev.next = node.next;
			}
			if(node.next != null) {
				node.next.prev = node.prev;
			}
			if(node == flixel_util_FlxBitmapDataPool._head) {
				flixel_util_FlxBitmapDataPool._head = node.next;
			}
			if(node == flixel_util_FlxBitmapDataPool._tail) {
				flixel_util_FlxBitmapDataPool._tail = node.prev;
			}
			node = null;
			flixel_util_FlxBitmapDataPool.$length--;
			break;
		}
		node = node.next;
	}
	if(res != null) {
		if(fillColor != null) {
			flixel_util_FlxBitmapDataPool._rect.x = 0;
			flixel_util_FlxBitmapDataPool._rect.y = 0;
			flixel_util_FlxBitmapDataPool._rect.width = w;
			flixel_util_FlxBitmapDataPool._rect.height = h;
			res.fillRect(flixel_util_FlxBitmapDataPool._rect,fillColor);
		}
	} else {
		res = new openfl_display_BitmapData(w,h,transparent,fillColor != null ? fillColor : -1);
	}
	return res;
};
flixel_util_FlxBitmapDataPool.put = function(bmd) {
	if(flixel_util_FlxBitmapDataPool.$length >= flixel_util_FlxBitmapDataPool.maxLength) {
		var last = flixel_util_FlxBitmapDataPool._tail;
		last.bmd.dispose();
		if(last.prev != null) {
			last.prev.next = null;
			flixel_util_FlxBitmapDataPool._tail = last.prev;
		}
		last = null;
		flixel_util_FlxBitmapDataPool.$length--;
	}
	var node = new flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode(bmd);
	node.next = flixel_util_FlxBitmapDataPool._head;
	if(flixel_util_FlxBitmapDataPool._head == null) {
		flixel_util_FlxBitmapDataPool._head = flixel_util_FlxBitmapDataPool._tail = node;
	} else {
		flixel_util_FlxBitmapDataPool._head = node;
		node.next.prev = node;
	}
	flixel_util_FlxBitmapDataPool.$length++;
};
flixel_util_FlxBitmapDataPool.clear = function() {
	var node = flixel_util_FlxBitmapDataPool._head;
	while(node != null) {
		var bmd = node.bmd;
		bmd.dispose();
		bmd = null;
		node = node.next;
	}
	flixel_util_FlxBitmapDataPool.$length = 0;
	flixel_util_FlxBitmapDataPool._head = flixel_util_FlxBitmapDataPool._tail = null;
};
flixel_util_FlxBitmapDataPool.set_maxLength = function(value) {
	if(flixel_util_FlxBitmapDataPool.maxLength != value) {
		var node = flixel_util_FlxBitmapDataPool._tail;
		while(node != null && flixel_util_FlxBitmapDataPool.$length > value) {
			var bmd = node.bmd;
			bmd.dispose();
			bmd = null;
			node = node.prev;
			flixel_util_FlxBitmapDataPool.$length--;
		}
	}
	return flixel_util_FlxBitmapDataPool.maxLength = value;
};
var flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode = function(bmd,prev,next) {
	this.bmd = bmd;
	this.prev = prev;
	this.next = next;
};
$hxClasses["flixel.util._FlxBitmapDataPool.FlxBitmapDataPoolNode"] = flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode;
flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode.__name__ = ["flixel","util","_FlxBitmapDataPool","FlxBitmapDataPoolNode"];
flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode.prototype = {
	bmd: null
	,prev: null
	,next: null
	,__class__: flixel_util__$FlxBitmapDataPool_FlxBitmapDataPoolNode
};
var flixel_util_FlxBitmapDataUtil = function() { };
$hxClasses["flixel.util.FlxBitmapDataUtil"] = flixel_util_FlxBitmapDataUtil;
flixel_util_FlxBitmapDataUtil.__name__ = ["flixel","util","FlxBitmapDataUtil"];
flixel_util_FlxBitmapDataUtil.merge = function(sourceBitmapData,sourceRect,destBitmapData,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(destPoint.x >= destBitmapData.width || destPoint.y >= destBitmapData.height || sourceRect.x >= sourceBitmapData.width || sourceRect.y >= sourceBitmapData.height || sourceRect.x + sourceRect.width <= 0 || sourceRect.y + sourceRect.height <= 0) {
		return;
	}
	while(sourceRect.x + sourceRect.width > sourceBitmapData.width || sourceRect.y + sourceRect.height > sourceBitmapData.height || sourceRect.x < 0 || sourceRect.y < 0 || destPoint.x < 0 || destPoint.y < 0) {
		if(sourceRect.x + sourceRect.width > sourceBitmapData.width) {
			sourceRect.width = sourceBitmapData.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceBitmapData.height) {
			sourceRect.height = sourceBitmapData.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			destPoint.x -= sourceRect.x;
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			destPoint.y -= sourceRect.y;
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x >= destBitmapData.width || destPoint.y >= destBitmapData.height) {
			return;
		}
		if(destPoint.x < 0) {
			sourceRect.x -= destPoint.x;
			sourceRect.width += destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.y -= destPoint.y;
			sourceRect.height += destPoint.y;
			destPoint.y = 0;
		}
	}
	if(sourceRect.width <= 0 || sourceRect.height <= 0) {
		return;
	}
	var startSourceX = Math.round(sourceRect.x);
	var startSourceY = Math.round(sourceRect.y);
	var width = Math.round(sourceRect.width);
	var height = Math.round(sourceRect.height);
	var sourceX = startSourceX;
	var sourceY = startSourceY;
	var destX = Math.round(destPoint.x);
	var destY = Math.round(destPoint.y);
	var currX = destX;
	var currY = destY;
	var sourceColor;
	var destColor;
	var resultRed;
	var resultGreen;
	var resultBlue;
	var resultAlpha;
	var resultColor = 0;
	var _g1 = 0;
	while(_g1 < width) {
		var i = _g1++;
		var _g3 = 0;
		while(_g3 < height) {
			var j = _g3++;
			sourceX = startSourceX + i;
			sourceY = startSourceY + j;
			currX = destX + i;
			currY = destY + j;
			sourceColor = sourceBitmapData.getPixel32(sourceX,sourceY);
			destColor = destBitmapData.getPixel32(currX,currY);
			resultRed = ((sourceColor >> 16 & 255) * redMultiplier + (destColor >> 16 & 255) * (256 - redMultiplier)) / 256 | 0;
			resultGreen = ((sourceColor >> 8 & 255) * greenMultiplier + (destColor >> 8 & 255) * (256 - greenMultiplier)) / 256 | 0;
			resultBlue = ((sourceColor & 255) * blueMultiplier + (destColor & 255) * (256 - blueMultiplier)) / 256 | 0;
			resultAlpha = ((sourceColor >> 24 & 255) * alphaMultiplier + (destColor >> 24 & 255) * (256 - alphaMultiplier)) / 256 | 0;
			var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
			color &= -16711681;
			color |= (resultRed > 255 ? 255 : resultRed < 0 ? 0 : resultRed) << 16;
			color &= -65281;
			color |= (resultGreen > 255 ? 255 : resultGreen < 0 ? 0 : resultGreen) << 8;
			color &= -256;
			color |= resultBlue > 255 ? 255 : resultBlue < 0 ? 0 : resultBlue;
			color &= 16777215;
			color |= (resultAlpha > 255 ? 255 : resultAlpha < 0 ? 0 : resultAlpha) << 24;
			resultColor = color;
			destBitmapData.setPixel32(currX,currY,resultColor);
		}
	}
};
flixel_util_FlxBitmapDataUtil.mergeColorComponent = function(source,dest,multiplier) {
	return (source * multiplier + dest * (256 - multiplier)) / 256 | 0;
};
flixel_util_FlxBitmapDataUtil.compare = function(Bitmap1,Bitmap2) {
	if(Bitmap1 == Bitmap2) {
		return 0;
	}
	if(Bitmap1.width != Bitmap2.width) {
		return -3;
	} else if(Bitmap1.height != Bitmap2.height) {
		return -4;
	} else {
		var width = Bitmap1.width;
		var height = Bitmap1.height;
		var result = new openfl_display_BitmapData(width,height,true,0);
		var identical = true;
		var _g1 = 0;
		while(_g1 < width) {
			var i = _g1++;
			var _g3 = 0;
			while(_g3 < height) {
				var j = _g3++;
				var pixel1 = Bitmap1.getPixel32(i,j);
				var pixel2 = Bitmap2.getPixel32(i,j);
				if(pixel1 != pixel2) {
					identical = false;
					if((pixel1 & 16777215) != (pixel2 & 16777215)) {
						var diff = (pixel1 >> 16 & 255) - (pixel2 >> 16 & 255);
						var Red = diff >= 0 ? diff : 256 + diff;
						var diff1 = (pixel1 >> 8 & 255) - (pixel2 >> 8 & 255);
						var Green = diff1 >= 0 ? diff1 : 256 + diff1;
						var diff2 = (pixel1 & 255) - (pixel2 & 255);
						var Blue = diff2 >= 0 ? diff2 : 256 + diff2;
						var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
						color &= -16711681;
						color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
						color &= -65281;
						color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
						color &= -256;
						color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
						color &= 16777215;
						color |= -16777216;
						result.setPixel32(i,j,color);
					} else {
						var alpha1 = pixel1 >> 24 & 255;
						var alpha2 = pixel2 >> 24 & 255;
						if(alpha1 != alpha2) {
							var diff3 = alpha1 - alpha2;
							var Alpha = diff3 >= 0 ? diff3 : 256 + diff3;
							var color1 = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
							color1 &= -16711681;
							color1 |= 16711680;
							color1 &= -65281;
							color1 |= 65280;
							color1 &= -256;
							color1 |= 255;
							color1 &= 16777215;
							color1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
							result.setPixel32(i,j,color1);
						}
					}
				}
			}
		}
		if(!identical) {
			return result;
		}
	}
	return 0;
};
flixel_util_FlxBitmapDataUtil.getDiff = function(value1,value2) {
	var diff = value1 - value2;
	if(diff >= 0) {
		return diff;
	} else {
		return 256 + diff;
	}
};
flixel_util_FlxBitmapDataUtil.getMemorySize = function(bitmapData) {
	return bitmapData.width * bitmapData.height * 4;
};
flixel_util_FlxBitmapDataUtil.replaceColor = function(bitmapData,color,newColor,fetchPositions,rect) {
	if(fetchPositions == null) {
		fetchPositions = false;
	}
	var positions = null;
	if(fetchPositions) {
		positions = [];
	}
	var startX = 0;
	var startY = 0;
	var columns = bitmapData.width;
	var rows = bitmapData.height;
	if(rect != null) {
		startX = rect.x | 0;
		startY = rect.y | 0;
		columns = rect.width | 0;
		rows = rect.height | 0;
	}
	columns = Math.max(columns,bitmapData.width) | 0;
	rows = Math.max(rows,bitmapData.height) | 0;
	var row = 0;
	var column = 0;
	var x;
	var y;
	var changed = false;
	while(row < rows) {
		column = 0;
		while(column < columns) {
			x = startX + column;
			y = startY + row;
			if(bitmapData.getPixel32(x,y) == color) {
				bitmapData.setPixel32(x,y,newColor);
				changed = true;
				if(fetchPositions) {
					var point = flixel_math_FlxPoint._pool.get().set(x,y);
					point._inPool = false;
					positions.push(point);
				}
			}
			++column;
		}
		++row;
	}
	if(changed && positions == null) {
		positions = [];
	}
	return positions;
};
flixel_util_FlxBitmapDataUtil.addSpacesAndBorders = function(bitmapData,frameSize,spacing,border,region) {
	if(region == null) {
		var Width = bitmapData.width;
		var Height = bitmapData.height;
		var _this = flixel_math_FlxRect._pool.get();
		_this.x = 0;
		_this.y = 0;
		_this.width = Width;
		_this.height = Height;
		_this._inPool = false;
		region = _this;
	}
	var frameWidth = region.width | 0;
	var frameHeight = region.height | 0;
	if(frameSize != null) {
		frameWidth = frameSize.x | 0;
		frameHeight = frameSize.y | 0;
	}
	var numHorizontalFrames = region.width / frameWidth | 0;
	var numVerticalFrames = region.height / frameHeight | 0;
	var spaceX = 0;
	var spaceY = 0;
	if(spacing != null) {
		spaceX = spacing.x | 0;
		spaceY = spacing.y | 0;
	}
	var borderX = 0;
	var borderY = 0;
	if(border != null) {
		borderX = border.x | 0;
		borderY = border.y | 0;
	}
	var result = new openfl_display_BitmapData(region.width + (numHorizontalFrames - 1) * spaceX + 2 * numHorizontalFrames * borderX | 0,region.height + (numVerticalFrames - 1) * spaceY + 2 * numVerticalFrames * borderY | 0,true,0);
	var tempRect = new openfl_geom_Rectangle(0,0,frameWidth,frameHeight);
	var tempPoint = new openfl_geom_Point();
	var _g1 = 0;
	while(_g1 < numHorizontalFrames) {
		var i = _g1++;
		tempPoint.x = i * (frameWidth + spaceX + 2 * borderX) + borderX;
		tempRect.x = i * frameWidth + region.x;
		var _g3 = 0;
		while(_g3 < numVerticalFrames) {
			var j = _g3++;
			tempPoint.y = j * (frameHeight + spaceY + 2 * borderY) + borderY;
			tempRect.y = j * frameHeight + region.y;
			result.copyPixels(bitmapData,tempRect,tempPoint);
		}
	}
	flixel_util_FlxBitmapDataUtil.copyBorderPixels(result,frameWidth,frameHeight,spaceX,spaceY,borderX,borderY,numHorizontalFrames,numVerticalFrames);
	return result;
};
flixel_util_FlxBitmapDataUtil.copyBorderPixels = function(bitmapData,frameWidth,frameHeight,spaceX,spaceY,borderX,borderY,horizontalFrames,verticalFrames) {
	var tempRect = new openfl_geom_Rectangle(0,0,1,bitmapData.height);
	var tempPoint = new openfl_geom_Point();
	var _g1 = 0;
	while(_g1 < horizontalFrames) {
		var i = _g1++;
		tempRect.x = i * (frameWidth + 2 * borderX + spaceX) + borderX;
		var _g3 = 0;
		while(_g3 < borderX) {
			var j = _g3++;
			tempPoint.x = tempRect.x - j - 1;
			bitmapData.copyPixels(bitmapData,tempRect,tempPoint);
		}
		tempRect.x += frameWidth - 1;
		var _g31 = 0;
		while(_g31 < borderX) {
			var j1 = _g31++;
			tempPoint.x = tempRect.x + j1 + 1;
			bitmapData.copyPixels(bitmapData,tempRect,tempPoint);
		}
	}
	tempPoint.setTo(0,0);
	tempRect.setTo(0,0,bitmapData.width,1);
	var _g11 = 0;
	while(_g11 < verticalFrames) {
		var i1 = _g11++;
		tempRect.y = i1 * (frameHeight + 2 * borderY + spaceY) + borderY;
		var _g32 = 0;
		while(_g32 < borderY) {
			var j2 = _g32++;
			tempPoint.y = tempRect.y - j2 - 1;
			bitmapData.copyPixels(bitmapData,tempRect,tempPoint);
		}
		tempRect.y += frameHeight - 1;
		var _g33 = 0;
		while(_g33 < borderY) {
			var j3 = _g33++;
			tempPoint.y = tempRect.y + j3 + 1;
			bitmapData.copyPixels(bitmapData,tempRect,tempPoint);
		}
	}
	return bitmapData;
};
flixel_util_FlxBitmapDataUtil.generateRotations = function(brush,rotations,antiAliasing,autoBuffer) {
	if(autoBuffer == null) {
		autoBuffer = false;
	}
	if(antiAliasing == null) {
		antiAliasing = false;
	}
	if(rotations == null) {
		rotations = 16;
	}
	var brushWidth = brush.width;
	var brushHeight = brush.height;
	var max = brushHeight > brushWidth ? brushHeight : brushWidth;
	if(autoBuffer) {
		max = max * 1.5 | 0;
	} else {
		max = max;
	}
	var rows = Math.sqrt(rotations) | 0;
	var columns = Math.ceil(rotations / rows);
	var bakedRotationAngle = 360 / rotations;
	var width = max * columns;
	var height = max * rows;
	var result = new openfl_display_BitmapData(width,height,true,0);
	var row = 0;
	var column = 0;
	var bakedAngle = 0;
	var halfBrushWidth = brushWidth * 0.5 | 0;
	var halfBrushHeight = brushHeight * 0.5 | 0;
	var midpointX = max * 0.5 | 0;
	var midpointY = max * 0.5 | 0;
	while(row < rows) {
		column = 0;
		while(column < columns) {
			flixel_util_FlxBitmapDataUtil.matrix.identity();
			flixel_util_FlxBitmapDataUtil.matrix.translate(-halfBrushWidth,-halfBrushHeight);
			flixel_util_FlxBitmapDataUtil.matrix.rotate(bakedAngle * (Math.PI / 180));
			flixel_util_FlxBitmapDataUtil.matrix.translate(max * column + midpointX,midpointY);
			bakedAngle += bakedRotationAngle;
			result.draw(brush,flixel_util_FlxBitmapDataUtil.matrix,null,null,null,antiAliasing);
			++column;
		}
		midpointY += max;
		++row;
	}
	return result;
};
var flixel_util_FlxCollision = function() { };
$hxClasses["flixel.util.FlxCollision"] = flixel_util_FlxCollision;
flixel_util_FlxCollision.__name__ = ["flixel","util","FlxCollision"];
flixel_util_FlxCollision.pixelPerfectCheck = function(Contact,Target,AlphaTolerance,Camera) {
	if(AlphaTolerance == null) {
		AlphaTolerance = 1;
	}
	var considerRotation = Contact.angle != 0 || Target.angle != 0;
	if(Camera != null) {
		Camera = Camera;
	} else {
		Camera = flixel_FlxG.camera;
	}
	flixel_util_FlxCollision.pointA.set_x(Contact.x - (Camera.scroll.x * Contact.scrollFactor.x | 0) - Contact.offset.x);
	flixel_util_FlxCollision.pointA.set_y(Contact.y - (Camera.scroll.y * Contact.scrollFactor.y | 0) - Contact.offset.y);
	flixel_util_FlxCollision.pointB.set_x(Target.x - (Camera.scroll.x * Target.scrollFactor.x | 0) - Target.offset.x);
	flixel_util_FlxCollision.pointB.set_y(Target.y - (Camera.scroll.y * Target.scrollFactor.y | 0) - Target.offset.y);
	if(considerRotation) {
		Contact.origin.copyTo(flixel_util_FlxCollision.centerA);
		Target.origin.copyTo(flixel_util_FlxCollision.centerB);
		var _this = flixel_util_FlxCollision.centerA;
		var lengthA = Math.sqrt(_this.x * _this.x + _this.y * _this.y);
		flixel_util_FlxCollision.boundsA.x = flixel_util_FlxCollision.pointA.x + flixel_util_FlxCollision.centerA.x - lengthA;
		flixel_util_FlxCollision.boundsA.y = flixel_util_FlxCollision.pointA.y + flixel_util_FlxCollision.centerA.y - lengthA;
		flixel_util_FlxCollision.boundsA.width = lengthA * 2;
		flixel_util_FlxCollision.boundsA.height = flixel_util_FlxCollision.boundsA.width;
		var _this1 = flixel_util_FlxCollision.centerB;
		var lengthB = Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y);
		flixel_util_FlxCollision.boundsB.x = flixel_util_FlxCollision.pointB.x + flixel_util_FlxCollision.centerB.x - lengthB;
		flixel_util_FlxCollision.boundsB.y = flixel_util_FlxCollision.pointB.y + flixel_util_FlxCollision.centerB.y - lengthB;
		flixel_util_FlxCollision.boundsB.width = lengthB * 2;
		flixel_util_FlxCollision.boundsB.height = flixel_util_FlxCollision.boundsB.width;
	} else {
		flixel_util_FlxCollision.boundsA.x = flixel_util_FlxCollision.pointA.x;
		flixel_util_FlxCollision.boundsA.y = flixel_util_FlxCollision.pointA.y;
		flixel_util_FlxCollision.boundsA.width = Contact.frameWidth;
		flixel_util_FlxCollision.boundsA.height = Contact.frameHeight;
		flixel_util_FlxCollision.boundsB.x = flixel_util_FlxCollision.pointB.x;
		flixel_util_FlxCollision.boundsB.y = flixel_util_FlxCollision.pointB.y;
		flixel_util_FlxCollision.boundsB.width = Target.frameWidth;
		flixel_util_FlxCollision.boundsB.height = Target.frameHeight;
	}
	var _this2 = flixel_util_FlxCollision.intersect;
	_this2.x = 0;
	_this2.y = 0;
	_this2.width = 0;
	_this2.height = 0;
	flixel_util_FlxCollision.boundsA.intersection(flixel_util_FlxCollision.boundsB,_this2);
	var tmp;
	var tmp1;
	var _this3 = flixel_util_FlxCollision.intersect;
	if(!(_this3.width == 0 || _this3.height == 0)) {
		tmp1 = flixel_util_FlxCollision.intersect.width < 1;
	} else {
		tmp1 = true;
	}
	if(!tmp1) {
		tmp = flixel_util_FlxCollision.intersect.height < 1;
	} else {
		tmp = true;
	}
	if(tmp) {
		return false;
	}
	flixel_util_FlxCollision.matrixA.identity();
	flixel_util_FlxCollision.matrixA.translate(-(flixel_util_FlxCollision.intersect.x - flixel_util_FlxCollision.boundsA.x),-(flixel_util_FlxCollision.intersect.y - flixel_util_FlxCollision.boundsA.y));
	flixel_util_FlxCollision.matrixB.identity();
	flixel_util_FlxCollision.matrixB.translate(-(flixel_util_FlxCollision.intersect.x - flixel_util_FlxCollision.boundsB.x),-(flixel_util_FlxCollision.intersect.y - flixel_util_FlxCollision.boundsB.y));
	Contact.drawFrame();
	Target.drawFrame();
	var testA = Contact.framePixels;
	var testB = Target.framePixels;
	var overlapWidth = flixel_util_FlxCollision.intersect.width | 0;
	var overlapHeight = flixel_util_FlxCollision.intersect.height | 0;
	if(considerRotation) {
		flixel_util_FlxCollision.testMatrix.identity();
		flixel_util_FlxCollision.testMatrix.translate(-Contact.origin.x,-Contact.origin.y);
		flixel_util_FlxCollision.testMatrix.rotate(Contact.angle * (Math.PI / 180));
		flixel_util_FlxCollision.testMatrix.translate(flixel_util_FlxCollision.boundsA.width / 2,flixel_util_FlxCollision.boundsA.height / 2);
		var testA2 = flixel_util_FlxBitmapDataPool.get(Math.floor(flixel_util_FlxCollision.boundsA.width),Math.floor(flixel_util_FlxCollision.boundsA.height),true,0,false);
		testA2.draw(testA,flixel_util_FlxCollision.testMatrix,null,null,null,false);
		testA = testA2;
		flixel_util_FlxCollision.testMatrix.identity();
		flixel_util_FlxCollision.testMatrix.translate(-Target.origin.x,-Target.origin.y);
		flixel_util_FlxCollision.testMatrix.rotate(Target.angle * (Math.PI / 180));
		flixel_util_FlxCollision.testMatrix.translate(flixel_util_FlxCollision.boundsB.width / 2,flixel_util_FlxCollision.boundsB.height / 2);
		var testB2 = flixel_util_FlxBitmapDataPool.get(Math.floor(flixel_util_FlxCollision.boundsB.width),Math.floor(flixel_util_FlxCollision.boundsB.height),true,0,false);
		testB2.draw(testB,flixel_util_FlxCollision.testMatrix,null,null,null,false);
		testB = testB2;
	}
	flixel_util_FlxCollision.boundsA.x = -flixel_util_FlxCollision.matrixA.tx | 0;
	flixel_util_FlxCollision.boundsA.y = -flixel_util_FlxCollision.matrixA.ty | 0;
	flixel_util_FlxCollision.boundsA.width = overlapWidth;
	flixel_util_FlxCollision.boundsA.height = overlapHeight;
	flixel_util_FlxCollision.boundsB.x = -flixel_util_FlxCollision.matrixB.tx | 0;
	flixel_util_FlxCollision.boundsB.y = -flixel_util_FlxCollision.matrixB.ty | 0;
	flixel_util_FlxCollision.boundsB.width = overlapWidth;
	flixel_util_FlxCollision.boundsB.height = overlapHeight;
	var _this4 = flixel_util_FlxCollision.boundsA;
	var FlashRect = flixel_util_FlxCollision.flashRect;
	if(FlashRect == null) {
		FlashRect = new openfl_geom_Rectangle();
	}
	FlashRect.x = _this4.x;
	FlashRect.y = _this4.y;
	FlashRect.width = _this4.width;
	FlashRect.height = _this4.height;
	var pixelsA = testA.getPixels(flixel_util_FlxCollision.flashRect);
	var _this5 = flixel_util_FlxCollision.boundsB;
	var FlashRect1 = flixel_util_FlxCollision.flashRect;
	if(FlashRect1 == null) {
		FlashRect1 = new openfl_geom_Rectangle();
	}
	FlashRect1.x = _this5.x;
	FlashRect1.y = _this5.y;
	FlashRect1.width = _this5.width;
	FlashRect1.height = _this5.height;
	var pixelsB = testB.getPixels(flixel_util_FlxCollision.flashRect);
	var hit = false;
	var alphaA = 0;
	var alphaB = 0;
	var overlapPixels = overlapWidth * overlapHeight;
	var alphaIdx = 0;
	var _g1 = 0;
	var _g = Math.ceil(overlapPixels / 2);
	while(_g1 < _g) {
		var i = _g1++;
		alphaIdx = i << 3;
		pixelsA.position = pixelsB.position = alphaIdx;
		alphaA = pixelsA.readUnsignedByte();
		alphaB = pixelsB.readUnsignedByte();
		if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
			hit = true;
			break;
		}
	}
	if(!hit) {
		var _g11 = 0;
		var _g2 = overlapPixels >> 1;
		while(_g11 < _g2) {
			var i1 = _g11++;
			alphaIdx = (i1 << 3) + 4;
			pixelsA.position = pixelsB.position = alphaIdx;
			alphaA = pixelsA.readUnsignedByte();
			alphaB = pixelsB.readUnsignedByte();
			if(alphaA >= AlphaTolerance && alphaB >= AlphaTolerance) {
				hit = true;
				break;
			}
		}
	}
	if(considerRotation) {
		flixel_util_FlxBitmapDataPool.put(testA);
		flixel_util_FlxBitmapDataPool.put(testB);
	}
	return hit;
};
flixel_util_FlxCollision.pixelPerfectPointCheck = function(PointX,PointY,Target,AlphaTolerance) {
	if(AlphaTolerance == null) {
		AlphaTolerance = 1;
	}
	if(!flixel_math_FlxMath.pointInCoordinates(PointX,PointY,Math.floor(Target.x),Math.floor(Target.y),Target.get_width() | 0,Target.get_height() | 0)) {
		return false;
	}
	if(flixel_FlxG.renderTile) {
		Target.drawFrame();
	}
	var test = Target.framePixels;
	var pixelAlpha = flixel_util__$FlxColor_FlxColor_$Impl_$._new(test.getPixel32(Math.floor(PointX - Target.x),Math.floor(PointY - Target.y))) >> 24 & 255;
	if(flixel_FlxG.renderTile) {
		pixelAlpha = pixelAlpha * Target.alpha | 0;
	}
	return pixelAlpha >= AlphaTolerance;
};
flixel_util_FlxCollision.createCameraWall = function(Camera,PlaceOutside,Thickness,AdjustWorldBounds) {
	if(AdjustWorldBounds == null) {
		AdjustWorldBounds = false;
	}
	if(PlaceOutside == null) {
		PlaceOutside = true;
	}
	var left = null;
	var right = null;
	var top = null;
	var bottom = null;
	if(PlaceOutside) {
		left = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel_tile_FlxTileblock(Math.floor(Camera.x + Camera.width),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Math.floor(Camera.y - Thickness),Camera.width + Thickness * 2,Thickness);
		bottom = new flixel_tile_FlxTileblock(Math.floor(Camera.x - Thickness),Camera.height,Camera.width + Thickness * 2,Thickness);
		if(AdjustWorldBounds) {
			var _this = flixel_FlxG.worldBounds;
			_this.x = Camera.x - Thickness;
			_this.y = Camera.y - Thickness;
			_this.width = Camera.width + Thickness * 2;
			_this.height = Camera.height + Thickness * 2;
		}
	} else {
		left = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		right = new flixel_tile_FlxTileblock(Math.floor(Camera.x + Camera.width - Thickness),Math.floor(Camera.y + Thickness),Thickness,Camera.height - Thickness * 2);
		top = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Math.floor(Camera.y),Camera.width,Thickness);
		bottom = new flixel_tile_FlxTileblock(Math.floor(Camera.x),Camera.height - Thickness,Camera.width,Thickness);
		if(AdjustWorldBounds) {
			var _this1 = flixel_FlxG.worldBounds;
			_this1.x = Camera.x;
			_this1.y = Camera.y;
			_this1.width = Camera.width;
			_this1.height = Camera.height;
		}
	}
	var result = new flixel_group_FlxTypedGroup();
	result.add(left);
	result.add(right);
	result.add(top);
	result.add(bottom);
	return result;
};
var flixel_util__$FlxColor_FlxColor_$Impl_$ = {};
$hxClasses["flixel.util._FlxColor.FlxColor_Impl_"] = flixel_util__$FlxColor_FlxColor_$Impl_$;
flixel_util__$FlxColor_FlxColor_$Impl_$.__name__ = ["flixel","util","_FlxColor","FlxColor_Impl_"];
flixel_util__$FlxColor_FlxColor_$Impl_$.__properties__ = {set_lightness:"set_lightness",get_lightness:"get_lightness",set_brightness:"set_brightness",get_brightness:"get_brightness",set_saturation:"set_saturation",get_saturation:"get_saturation",set_hue:"set_hue",get_hue:"get_hue",set_black:"set_black",get_black:"get_black",set_yellow:"set_yellow",get_yellow:"get_yellow",set_magenta:"set_magenta",get_magenta:"get_magenta",set_cyan:"set_cyan",get_cyan:"get_cyan",set_alphaFloat:"set_alphaFloat",get_alphaFloat:"get_alphaFloat",set_greenFloat:"set_greenFloat",get_greenFloat:"get_greenFloat",set_blueFloat:"set_blueFloat",get_blueFloat:"get_blueFloat",set_redFloat:"set_redFloat",get_redFloat:"get_redFloat",set_alpha:"set_alpha",get_alpha:"get_alpha",set_green:"set_green",get_green:"get_green",set_blue:"set_blue",get_blue:"get_blue",set_red:"set_red",get_red:"get_red"}
flixel_util__$FlxColor_FlxColor_$Impl_$.fromInt = function(Value) {
	return flixel_util__$FlxColor_FlxColor_$Impl_$._new(Value);
};
flixel_util__$FlxColor_FlxColor_$Impl_$.fromRGB = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return color;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.fromRGBFloat = function(Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	var Value = Math.round(Red * 255);
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value1 = Math.round(Green * 255);
	color &= -65281;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value2 = Math.round(Blue * 255);
	color &= -256;
	color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value3 = Math.round(Alpha * 255);
	color &= 16777215;
	color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
	return color;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.fromCMYK = function(Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	var Value = (1 - Cyan) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	color &= -16711681;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value2 = (1 - Magenta) * (1 - Black);
	var Value3 = Math.round(Value2 * 255);
	color &= -65281;
	color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 8;
	var Value4 = (1 - Yellow) * (1 - Black);
	var Value5 = Math.round(Value4 * 255);
	color &= -256;
	color |= Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5;
	var Value6 = Math.round(Alpha * 255);
	color &= 16777215;
	color |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 24;
	return color;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSB = function(Hue,Saturation,Brightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 = Hue % 360;
	var hueD = Hue1 / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		color &= -65281;
		color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(match * 255);
		color &= -256;
		color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(match * 255);
		color &= -256;
		color |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(match * 255);
		color &= -16711681;
		color |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		color &= -256;
		color |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(match * 255);
		color &= -16711681;
		color |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		color &= -65281;
		color |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		color &= -256;
		color |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(match * 255);
		color &= -65281;
		color |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		color &= -256;
		color |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(match * 255);
		color &= -65281;
		color |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		color &= -256;
		color |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return color;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSL = function(Hue,Saturation,Lightness,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 = Hue % 360;
	var hueD = Hue1 / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		color &= -65281;
		color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(match * 255);
		color &= -256;
		color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(match * 255);
		color &= -256;
		color |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(match * 255);
		color &= -16711681;
		color |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		color &= -65281;
		color |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		color &= -256;
		color |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(match * 255);
		color &= -16711681;
		color |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		color &= -65281;
		color |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		color &= -256;
		color |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		color &= -16711681;
		color |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(match * 255);
		color &= -65281;
		color |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		color &= -256;
		color |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		color &= -16711681;
		color |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(match * 255);
		color &= -65281;
		color |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		color &= -256;
		color |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		color &= 16777215;
		color |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return color;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.fromString = function(str) {
	var result = null;
	str = StringTools.trim(str);
	if(flixel_util__$FlxColor_FlxColor_$Impl_$.COLOR_REGEX.match(str)) {
		var hexColor = "0x" + flixel_util__$FlxColor_FlxColor_$Impl_$.COLOR_REGEX.matched(2);
		result = flixel_util__$FlxColor_FlxColor_$Impl_$._new(Std.parseInt(hexColor));
		if(hexColor.length == 8) {
			var Value = Math.round(255);
			result &= 16777215;
			result |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
		}
	} else {
		str = str.toUpperCase();
		var key = flixel_util__$FlxColor_FlxColor_$Impl_$.colorLookup.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(key1.toUpperCase() == str) {
				var _this = flixel_util__$FlxColor_FlxColor_$Impl_$.colorLookup;
				result = flixel_util__$FlxColor_FlxColor_$Impl_$._new(__map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1]);
				break;
			}
		}
	}
	return result;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getHSBColorWheel = function(Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	var _g = [];
	var _g1 = 0;
	while(_g1 < 360) {
		var c = _g1++;
		_g.push(flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSB(c,1.0,1.0,Alpha));
	}
	return _g;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.interpolate = function(Color1,Color2,Factor) {
	if(Factor == null) {
		Factor = 0.5;
	}
	var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
	var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
	var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
	var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	color &= -16711681;
	color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
	color &= -65281;
	color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
	color &= -256;
	color |= b > 255 ? 255 : b < 0 ? 0 : b;
	color &= 16777215;
	color |= (a > 255 ? 255 : a < 0 ? 0 : a) << 24;
	return color;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.gradient = function(Color1,Color2,Steps,Ease) {
	var output = [];
	if(Ease == null) {
		Ease = function(t) {
			return t;
		};
	}
	var _g1 = 0;
	while(_g1 < Steps) {
		var step = _g1++;
		var Factor = Ease(step / (Steps - 1));
		var r = ((Color2 >> 16 & 255) - (Color1 >> 16 & 255)) * Factor + (Color1 >> 16 & 255) | 0;
		var g = ((Color2 >> 8 & 255) - (Color1 >> 8 & 255)) * Factor + (Color1 >> 8 & 255) | 0;
		var b = ((Color2 & 255) - (Color1 & 255)) * Factor + (Color1 & 255) | 0;
		var a = ((Color2 >> 24 & 255) - (Color1 >> 24 & 255)) * Factor + (Color1 >> 24 & 255) | 0;
		var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
		color &= -16711681;
		color |= (r > 255 ? 255 : r < 0 ? 0 : r) << 16;
		color &= -65281;
		color |= (g > 255 ? 255 : g < 0 ? 0 : g) << 8;
		color &= -256;
		color |= b > 255 ? 255 : b < 0 ? 0 : b;
		color &= 16777215;
		color |= (a > 255 ? 255 : a < 0 ? 0 : a) << 24;
		output[step] = color;
	}
	return output;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.multiply = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) / 255 * ((rhs >> 16 & 255) / 255);
	var Green = (lhs >> 8 & 255) / 255 * ((rhs >> 8 & 255) / 255);
	var Blue = (lhs & 255) / 255 * ((rhs & 255) / 255);
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	var Value = Math.round(Red * 255);
	color &= -16711681;
	color |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value1 = Math.round(Green * 255);
	color &= -65281;
	color |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value2 = Math.round(Blue * 255);
	color &= -256;
	color |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value3 = Math.round(255);
	color &= 16777215;
	color |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
	return color;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.add = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) + (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) + (rhs >> 8 & 255);
	var Blue = (lhs & 255) + (rhs & 255);
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= -16777216;
	return color;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.subtract = function(lhs,rhs) {
	var Red = (lhs >> 16 & 255) - (rhs >> 16 & 255);
	var Green = (lhs >> 8 & 255) - (rhs >> 8 & 255);
	var Blue = (lhs & 255) - (rhs & 255);
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= -16777216;
	return color;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getComplementHarmony = function(this1) {
	return flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSB(flixel_math_FlxMath.wrap((flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(this1) | 0) + 180,0,350),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getAnalogousHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var warmer = flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSB(flixel_math_FlxMath.wrap((flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(this1) | 0) - Threshold,0,350),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var colder = flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSB(flixel_math_FlxMath.wrap((flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(this1) | 0) + Threshold,0,350),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getSplitComplementHarmony = function(this1,Threshold) {
	if(Threshold == null) {
		Threshold = 30;
	}
	var oppositeHue = flixel_math_FlxMath.wrap((flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(this1) | 0) + 180,0,350);
	var warmer = flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSB(flixel_math_FlxMath.wrap(oppositeHue - Threshold,0,350),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var colder = flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSB(flixel_math_FlxMath.wrap(oppositeHue + Threshold,0,350),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { original : this1, warmer : warmer, colder : colder};
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getTriadicHarmony = function(this1) {
	var triadic1 = flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSB(flixel_math_FlxMath.wrap((flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(this1) | 0) + 120,0,359),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	var triadic2 = flixel_util__$FlxColor_FlxColor_$Impl_$.fromHSB(flixel_math_FlxMath.wrap((flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(triadic1) | 0) + 120,0,359),(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),(this1 >> 24 & 255) / 255);
	return { color1 : this1, color2 : triadic1, color3 : triadic2};
};
flixel_util__$FlxColor_FlxColor_$Impl_$.to24Bit = function(this1) {
	return this1 & 16777215;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.toHexString = function(this1,Alpha,Prefix) {
	if(Prefix == null) {
		Prefix = true;
	}
	if(Alpha == null) {
		Alpha = true;
	}
	var tmp = Alpha ? StringTools.hex(this1 >> 24 & 255,2) : "";
	return (Prefix ? "0x" : "") + tmp + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2);
};
flixel_util__$FlxColor_FlxColor_$Impl_$.toWebString = function(this1) {
	return "#" + ("" + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2));
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getColorInfo = function(this1) {
	var result = "0x" + StringTools.hex(this1 >> 24 & 255,2) + StringTools.hex(this1 >> 16 & 255,2) + StringTools.hex(this1 >> 8 & 255,2) + StringTools.hex(this1 & 255,2) + "\n";
	result += "Alpha: " + (this1 >> 24 & 255) + " Red: " + (this1 >> 16 & 255) + " Green: " + (this1 >> 8 & 255) + " Blue: " + (this1 & 255) + "\n";
	result += "Hue: " + flixel_math_FlxMath.roundDecimal(flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(this1),2) + " Saturation: " + flixel_math_FlxMath.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " Brightness: " + flixel_math_FlxMath.roundDecimal(Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)),2) + " Lightness: " + flixel_math_FlxMath.roundDecimal((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2,2);
	return result;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getDarkened = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	var lowerBound = Factor < 0 ? 0 : Factor;
	if(lowerBound > 1) {
		Factor = 1;
	} else {
		Factor = lowerBound;
	}
	var output = this1;
	var Value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 * (1 - Factor);
	var Hue = flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * Value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = Value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 = Hue % 360;
	var hueD = Hue1 / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		output &= -65281;
		output |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		output &= -256;
		output |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		output &= -65281;
		output |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		output &= -256;
		output |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		output &= -16711681;
		output |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		output &= -65281;
		output |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		output &= -256;
		output |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		output &= -16711681;
		output |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		output &= -65281;
		output |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		output &= -256;
		output |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		output &= -65281;
		output |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		output &= -256;
		output |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		output &= -65281;
		output |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		output &= -256;
		output |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return output;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getLightened = function(this1,Factor) {
	if(Factor == null) {
		Factor = 0.2;
	}
	var lowerBound = Factor < 0 ? 0 : Factor;
	if(lowerBound > 1) {
		Factor = 1;
	} else {
		Factor = lowerBound;
	}
	var output = this1;
	var Value = (Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) + Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / 2 + (1 - (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2) * Factor;
	var Hue = flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(output);
	var Alpha = (output >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * Value - 1)) * ((Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)) - Math.min((output >> 16 & 255) / 255,Math.min((output >> 8 & 255) / 255,(output & 255) / 255))) / Math.max((output >> 16 & 255) / 255,Math.max((output >> 8 & 255) / 255,(output & 255) / 255)));
	var match = Value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 = Hue % 360;
	var hueD = Hue1 / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		output &= -65281;
		output |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		output &= -256;
		output |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		output &= -65281;
		output |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		output &= -256;
		output |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		output &= -16711681;
		output |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		output &= -65281;
		output |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		output &= -256;
		output |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		output &= -16711681;
		output |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		output &= -65281;
		output |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		output &= -256;
		output |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		output &= -16711681;
		output |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		output &= -65281;
		output |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		output &= -256;
		output |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		output &= -16711681;
		output |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		output &= -65281;
		output |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		output &= -256;
		output |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		output &= 16777215;
		output |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return output;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getInverted = function(this1) {
	var oldAlpha = this1 >> 24 & 255;
	var Red = 255 - (this1 >> 16 & 255);
	var Green = 255 - (this1 >> 8 & 255);
	var Blue = 255 - (this1 & 255);
	var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
	color &= -16711681;
	color |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	color &= -65281;
	color |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	color &= -256;
	color |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	color &= 16777215;
	color |= -16777216;
	var output = color;
	output &= 16777215;
	output |= (oldAlpha > 255 ? 255 : oldAlpha < 0 ? 0 : oldAlpha) << 24;
	return output;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.setRGB = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 255;
	}
	this1 &= -16711681;
	this1 |= (Red > 255 ? 255 : Red < 0 ? 0 : Red) << 16;
	this1 &= -65281;
	this1 |= (Green > 255 ? 255 : Green < 0 ? 0 : Green) << 8;
	this1 &= -256;
	this1 |= Blue > 255 ? 255 : Blue < 0 ? 0 : Blue;
	this1 &= 16777215;
	this1 |= (Alpha > 255 ? 255 : Alpha < 0 ? 0 : Alpha) << 24;
	return this1;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.setRGBFloat = function(this1,Red,Green,Blue,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value = Math.round(Red * 255);
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	var Value1 = Math.round(Green * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	var Value2 = Math.round(Blue * 255);
	this1 &= -256;
	this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
	var Value3 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
	return this1;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.setCMYK = function(this1,Cyan,Magenta,Yellow,Black,Alpha) {
	if(Alpha == null) {
		Alpha = 1;
	}
	var Value = (1 - Cyan) * (1 - Black);
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	var Value2 = (1 - Magenta) * (1 - Black);
	var Value3 = Math.round(Value2 * 255);
	this1 &= -65281;
	this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 8;
	var Value4 = (1 - Yellow) * (1 - Black);
	var Value5 = Math.round(Value4 * 255);
	this1 &= -256;
	this1 |= Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5;
	var Value6 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 24;
	return this1;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.setHSB = function(this1,Hue,Saturation,Brightness,Alpha) {
	var chroma = Brightness * Saturation;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 = Hue % 360;
	var hueD = Hue1 / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return this1;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.setHSL = function(this1,Hue,Saturation,Lightness,Alpha) {
	var chroma = (1 - Math.abs(2 * Lightness - 1)) * Saturation;
	var match = Lightness - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 = Hue % 360;
	var hueD = Hue1 / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return this1;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.setHSChromaMatch = function(this1,Hue,Saturation,Chroma,Match,Alpha) {
	Hue %= 360;
	var hueD = Hue / 60;
	var mid = Chroma * (1 - Math.abs(hueD % 2 - 1)) + Match;
	Chroma += Match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
		var Value1 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
		var Value2 = Math.round(Match * 255);
		this1 &= -256;
		this1 |= Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2;
		var Value3 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3) << 24;
		break;
	case 1:
		var Value4 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 16;
		var Value5 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 8;
		var Value6 = Math.round(Match * 255);
		this1 &= -256;
		this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
		var Value7 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
		break;
	case 2:
		var Value8 = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 16;
		var Value9 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 8;
		var Value10 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10;
		var Value11 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11) << 24;
		break;
	case 3:
		var Value12 = Math.round(Match * 255);
		this1 &= -16711681;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 16;
		var Value13 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 8;
		var Value14 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14;
		var Value15 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15) << 24;
		break;
	case 4:
		var Value16 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 16;
		var Value17 = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 8;
		var Value18 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18;
		var Value19 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19) << 24;
		break;
	case 5:
		var Value20 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 16;
		var Value21 = Math.round(Match * 255);
		this1 &= -65281;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 8;
		var Value22 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22;
		var Value23 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23) << 24;
		break;
	}
	return this1;
};
flixel_util__$FlxColor_FlxColor_$Impl_$._new = function(Value) {
	if(Value == null) {
		Value = 0;
	}
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.getThis = function(this1) {
	return this1;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.validate = function(this1) {
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_red = function(this1) {
	return this1 >> 16 & 255;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_green = function(this1) {
	return this1 >> 8 & 255;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_blue = function(this1) {
	return this1 & 255;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_alpha = function(this1) {
	return this1 >> 24 & 255;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_redFloat = function(this1) {
	return (this1 >> 16 & 255) / 255;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_greenFloat = function(this1) {
	return (this1 >> 8 & 255) / 255;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_blueFloat = function(this1) {
	return (this1 & 255) / 255;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_alphaFloat = function(this1) {
	return (this1 >> 24 & 255) / 255;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_red = function(this1,Value) {
	this1 &= -16711681;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 16;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_green = function(this1,Value) {
	this1 &= -65281;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 8;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_blue = function(this1,Value) {
	this1 &= -256;
	this1 |= Value > 255 ? 255 : Value < 0 ? 0 : Value;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_alpha = function(this1,Value) {
	this1 &= 16777215;
	this1 |= (Value > 255 ? 255 : Value < 0 ? 0 : Value) << 24;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_redFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -16711681;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_greenFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -65281;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 8;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_blueFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= -256;
	this1 |= Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_alphaFloat = function(this1,Value) {
	var Value1 = Math.round(Value * 255);
	this1 &= 16777215;
	this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 24;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_cyan = function(this1) {
	return (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_magenta = function(this1) {
	return (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_yellow = function(this1) {
	return (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_black = function(this1) {
	return 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_cyan = function(this1,Value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var Value1 = (1 - Value) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value3 = (1 - Magenta) * (1 - Black);
	var Value4 = Math.round(Value3 * 255);
	this1 &= -65281;
	this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 8;
	var Value5 = (1 - Yellow) * (1 - Black);
	var Value6 = Math.round(Value5 * 255);
	this1 &= -256;
	this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
	var Value7 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_magenta = function(this1,Value) {
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var Value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value3 = (1 - Value) * (1 - Black);
	var Value4 = Math.round(Value3 * 255);
	this1 &= -65281;
	this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 8;
	var Value5 = (1 - Yellow) * (1 - Black);
	var Value6 = Math.round(Value5 * 255);
	this1 &= -256;
	this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
	var Value7 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_yellow = function(this1,Value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Black = 1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var Value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Black);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value3 = (1 - Magenta) * (1 - Black);
	var Value4 = Math.round(Value3 * 255);
	this1 &= -65281;
	this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 8;
	var Value5 = (1 - Value) * (1 - Black);
	var Value6 = Math.round(Value5 * 255);
	this1 &= -256;
	this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
	var Value7 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_black = function(this1,Value) {
	var Magenta = (1 - (this1 >> 8 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Yellow = (1 - (this1 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var Value1 = (1 - (1 - (this1 >> 16 & 255) / 255 - (1 - Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) * (1 - Value);
	var Value2 = Math.round(Value1 * 255);
	this1 &= -16711681;
	this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 16;
	var Value3 = (1 - Magenta) * (1 - Value);
	var Value4 = Math.round(Value3 * 255);
	this1 &= -65281;
	this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 8;
	var Value5 = (1 - Yellow) * (1 - Value);
	var Value6 = Math.round(Value5 * 255);
	this1 &= -256;
	this1 |= Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6;
	var Value7 = Math.round(Alpha * 255);
	this1 &= 16777215;
	this1 |= (Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7) << 24;
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue = function(this1) {
	var hueRad = Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	var hue = 0;
	if(hueRad != 0) {
		hue = 180 / Math.PI * Math.atan2(Math.sqrt(3) * ((this1 >> 8 & 255) / 255 - (this1 & 255) / 255),2 * ((this1 >> 16 & 255) / 255) - (this1 >> 8 & 255) / 255 - (this1 & 255) / 255);
	}
	if(hue < 0) {
		return hue + 360;
	} else {
		return hue;
	}
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_brightness = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_saturation = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util__$FlxColor_FlxColor_$Impl_$.get_lightness = function(this1) {
	return (Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) + Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / 2;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_hue = function(this1,Value) {
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Brightness - chroma;
	var Hue = Value;
	var Chroma = chroma;
	Hue = Value % 360;
	var hueD = Hue / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_saturation = function(this1,Value) {
	var Hue = flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(this1);
	var Brightness = Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Brightness * Value;
	var match = Brightness - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 = Hue % 360;
	var hueD = Hue1 / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_brightness = function(this1,Value) {
	var Hue = flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = Value * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Value - chroma;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 = Hue % 360;
	var hueD = Hue1 / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.set_lightness = function(this1,Value) {
	var Hue = flixel_util__$FlxColor_FlxColor_$Impl_$.get_hue(this1);
	var Alpha = (this1 >> 24 & 255) / 255;
	var chroma = (1 - Math.abs(2 * Value - 1)) * ((Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)) - Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255))) / Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255)));
	var match = Value - chroma / 2;
	var Hue1 = Hue;
	var Chroma = chroma;
	Hue1 = Hue % 360;
	var hueD = Hue1 / 60;
	var mid = chroma * (1 - Math.abs(hueD % 2 - 1)) + match;
	Chroma = chroma + match;
	var _g = hueD | 0;
	switch(_g) {
	case 0:
		var Value1 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value1 > 255 ? 255 : Value1 < 0 ? 0 : Value1) << 16;
		var Value2 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value2 > 255 ? 255 : Value2 < 0 ? 0 : Value2) << 8;
		var Value3 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value3 > 255 ? 255 : Value3 < 0 ? 0 : Value3;
		var Value4 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value4 > 255 ? 255 : Value4 < 0 ? 0 : Value4) << 24;
		break;
	case 1:
		var Value5 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value5 > 255 ? 255 : Value5 < 0 ? 0 : Value5) << 16;
		var Value6 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value6 > 255 ? 255 : Value6 < 0 ? 0 : Value6) << 8;
		var Value7 = Math.round(match * 255);
		this1 &= -256;
		this1 |= Value7 > 255 ? 255 : Value7 < 0 ? 0 : Value7;
		var Value8 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value8 > 255 ? 255 : Value8 < 0 ? 0 : Value8) << 24;
		break;
	case 2:
		var Value9 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value9 > 255 ? 255 : Value9 < 0 ? 0 : Value9) << 16;
		var Value10 = Math.round(Chroma * 255);
		this1 &= -65281;
		this1 |= (Value10 > 255 ? 255 : Value10 < 0 ? 0 : Value10) << 8;
		var Value11 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value11 > 255 ? 255 : Value11 < 0 ? 0 : Value11;
		var Value12 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value12 > 255 ? 255 : Value12 < 0 ? 0 : Value12) << 24;
		break;
	case 3:
		var Value13 = Math.round(match * 255);
		this1 &= -16711681;
		this1 |= (Value13 > 255 ? 255 : Value13 < 0 ? 0 : Value13) << 16;
		var Value14 = Math.round(mid * 255);
		this1 &= -65281;
		this1 |= (Value14 > 255 ? 255 : Value14 < 0 ? 0 : Value14) << 8;
		var Value15 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value15 > 255 ? 255 : Value15 < 0 ? 0 : Value15;
		var Value16 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value16 > 255 ? 255 : Value16 < 0 ? 0 : Value16) << 24;
		break;
	case 4:
		var Value17 = Math.round(mid * 255);
		this1 &= -16711681;
		this1 |= (Value17 > 255 ? 255 : Value17 < 0 ? 0 : Value17) << 16;
		var Value18 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value18 > 255 ? 255 : Value18 < 0 ? 0 : Value18) << 8;
		var Value19 = Math.round(Chroma * 255);
		this1 &= -256;
		this1 |= Value19 > 255 ? 255 : Value19 < 0 ? 0 : Value19;
		var Value20 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value20 > 255 ? 255 : Value20 < 0 ? 0 : Value20) << 24;
		break;
	case 5:
		var Value21 = Math.round(Chroma * 255);
		this1 &= -16711681;
		this1 |= (Value21 > 255 ? 255 : Value21 < 0 ? 0 : Value21) << 16;
		var Value22 = Math.round(match * 255);
		this1 &= -65281;
		this1 |= (Value22 > 255 ? 255 : Value22 < 0 ? 0 : Value22) << 8;
		var Value23 = Math.round(mid * 255);
		this1 &= -256;
		this1 |= Value23 > 255 ? 255 : Value23 < 0 ? 0 : Value23;
		var Value24 = Math.round(Alpha * 255);
		this1 &= 16777215;
		this1 |= (Value24 > 255 ? 255 : Value24 < 0 ? 0 : Value24) << 24;
		break;
	}
	return Value;
};
flixel_util__$FlxColor_FlxColor_$Impl_$.maxColor = function(this1) {
	return Math.max((this1 >> 16 & 255) / 255,Math.max((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util__$FlxColor_FlxColor_$Impl_$.minColor = function(this1) {
	return Math.min((this1 >> 16 & 255) / 255,Math.min((this1 >> 8 & 255) / 255,(this1 & 255) / 255));
};
flixel_util__$FlxColor_FlxColor_$Impl_$.boundChannel = function(this1,Value) {
	if(Value > 255) {
		return 255;
	} else if(Value < 0) {
		return 0;
	} else {
		return Value;
	}
};
var flixel_util_FlxColorTransformUtil = function() { };
$hxClasses["flixel.util.FlxColorTransformUtil"] = flixel_util_FlxColorTransformUtil;
flixel_util_FlxColorTransformUtil.__name__ = ["flixel","util","FlxColorTransformUtil"];
flixel_util_FlxColorTransformUtil.setMultipliers = function(transform,red,green,blue,alpha) {
	transform.redMultiplier = red;
	transform.greenMultiplier = green;
	transform.blueMultiplier = blue;
	transform.alphaMultiplier = alpha;
	return transform;
};
flixel_util_FlxColorTransformUtil.setOffsets = function(transform,red,green,blue,alpha) {
	transform.redOffset = red;
	transform.greenOffset = green;
	transform.blueOffset = blue;
	transform.alphaOffset = alpha;
	return transform;
};
flixel_util_FlxColorTransformUtil.hasRGBMultipliers = function(transform) {
	if(!(transform.redMultiplier != 1 || transform.greenMultiplier != 1)) {
		return transform.blueMultiplier != 1;
	} else {
		return true;
	}
};
flixel_util_FlxColorTransformUtil.hasRGBAMultipliers = function(transform) {
	if(!flixel_util_FlxColorTransformUtil.hasRGBMultipliers(transform)) {
		return transform.alphaMultiplier != 1;
	} else {
		return true;
	}
};
flixel_util_FlxColorTransformUtil.hasRGBOffsets = function(transform) {
	if(!(transform.redOffset != 0 || transform.greenOffset != 0)) {
		return transform.blueOffset != 0;
	} else {
		return true;
	}
};
flixel_util_FlxColorTransformUtil.hasRGBAOffsets = function(transform) {
	if(!flixel_util_FlxColorTransformUtil.hasRGBOffsets(transform)) {
		return transform.alphaOffset != 0;
	} else {
		return true;
	}
};
var flixel_util_FlxDestroyUtil = function() { };
$hxClasses["flixel.util.FlxDestroyUtil"] = flixel_util_FlxDestroyUtil;
flixel_util_FlxDestroyUtil.__name__ = ["flixel","util","FlxDestroyUtil"];
flixel_util_FlxDestroyUtil.destroy = function(object) {
	if(object != null) {
		object.destroy();
	}
	return null;
};
flixel_util_FlxDestroyUtil.destroyArray = function(array) {
	if(array != null) {
		var _g = 0;
		while(_g < array.length) {
			var e = array[_g];
			++_g;
			flixel_util_FlxDestroyUtil.destroy(e);
		}
		array.splice(0,array.length);
	}
	return null;
};
flixel_util_FlxDestroyUtil.put = function(object) {
	if(object != null) {
		object.put();
	}
	return null;
};
flixel_util_FlxDestroyUtil.putArray = function(array) {
	if(array != null) {
		var _g = 0;
		while(_g < array.length) {
			var e = array[_g];
			++_g;
			flixel_util_FlxDestroyUtil.put(e);
		}
		array.splice(0,array.length);
	}
	return null;
};
flixel_util_FlxDestroyUtil.dispose = function(bitmapData) {
	if(bitmapData != null) {
		bitmapData.dispose();
	}
	return null;
};
flixel_util_FlxDestroyUtil.disposeIfNotEqual = function(bitmapData,width,height) {
	if(bitmapData != null && (bitmapData.width != width || bitmapData.height != height)) {
		bitmapData.dispose();
		return null;
	} else if(bitmapData != null) {
		return bitmapData;
	}
	return null;
};
flixel_util_FlxDestroyUtil.removeChild = function(parent,child) {
	if(parent != null && child != null && parent.contains(child)) {
		parent.removeChild(child);
	}
	return null;
};
var flixel_util_FlxGradient = function() { };
$hxClasses["flixel.util.FlxGradient"] = flixel_util_FlxGradient;
flixel_util_FlxGradient.__name__ = ["flixel","util","FlxGradient"];
flixel_util_FlxGradient.createGradientMatrix = function(width,height,colors,chunkSize,rotation) {
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	var gradientMatrix = new openfl_geom_Matrix();
	var rot = rotation * (Math.PI / 180);
	var $int = chunkSize;
	gradientMatrix.createGradientBox(width,(height < 0 ? 4294967296.0 + height : height + 0.0) / ($int < 0 ? 4294967296.0 + $int : $int + 0.0),rot,0,0);
	var alpha = [];
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var ai = _g1++;
		alpha.push((colors[ai] >> 24 & 255) / 255);
	}
	var ratio = [];
	if(colors.length == 2) {
		ratio[0] = 0;
		ratio[1] = 255;
	} else {
		var spread = 255 / (colors.length - 1) | 0;
		ratio.push(0);
		var _g11 = 1;
		var _g2 = colors.length - 1;
		while(_g11 < _g2) {
			var ri = _g11++;
			ratio.push(ri * spread);
		}
		ratio.push(255);
	}
	return { matrix : gradientMatrix, alpha : alpha, ratio : ratio};
};
flixel_util_FlxGradient.createGradientArray = function(width,height,colors,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	var data = flixel_util_FlxGradient.createGradientBitmapData(width,height,colors,chunkSize,rotation,interpolate);
	var result = [];
	var _g1 = 0;
	var _g = data.height;
	while(_g1 < _g) {
		var y = _g1++;
		result.push(data.getPixel32(0,y));
	}
	return result;
};
flixel_util_FlxGradient.createGradientFlxSprite = function(width,height,colors,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	var data = flixel_util_FlxGradient.createGradientBitmapData(width,height,colors,chunkSize,rotation,interpolate);
	var dest = new flixel_FlxSprite();
	dest.set_pixels(data);
	return dest;
};
flixel_util_FlxGradient.createGradientBitmapData = function(width,height,colors,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	if(_$UInt_UInt_$Impl_$.gt(1,width)) {
		width = 1;
	}
	if(_$UInt_UInt_$Impl_$.gt(1,height)) {
		height = 1;
	}
	var gradient = flixel_util_FlxGradient.createGradientMatrix(width,height,colors,chunkSize,rotation);
	var shape = new openfl_display_Shape();
	var interpolationMethod = interpolate ? 1 : 0;
	shape.get_graphics().beginGradientFill(0,colors,gradient.alpha,gradient.ratio,gradient.matrix,0,interpolationMethod,0);
	var $int = width;
	var int1 = height;
	var int2 = chunkSize;
	shape.get_graphics().drawRect(0,0,$int < 0 ? 4294967296.0 + $int : $int + 0.0,(int1 < 0 ? 4294967296.0 + int1 : int1 + 0.0) / (int2 < 0 ? 4294967296.0 + int2 : int2 + 0.0));
	var data = new openfl_display_BitmapData(width,height,true,0);
	if(chunkSize == 1) {
		data.draw(shape);
	} else {
		var int3 = height;
		var int4 = chunkSize;
		var tempBitmap = new openfl_display_Bitmap(new openfl_display_BitmapData(width,(int3 < 0 ? 4294967296.0 + int3 : int3 + 0.0) / (int4 < 0 ? 4294967296.0 + int4 : int4 + 0.0) | 0,true,0));
		tempBitmap.bitmapData.draw(shape);
		var int5 = chunkSize;
		tempBitmap.set_scaleY(int5 < 0 ? 4294967296.0 + int5 : int5 + 0.0);
		var sM = new openfl_geom_Matrix();
		sM.scale(tempBitmap.get_scaleX(),tempBitmap.get_scaleY());
		data.draw(tempBitmap,sM);
	}
	return data;
};
flixel_util_FlxGradient.overlayGradientOnFlxSprite = function(dest,width,height,colors,destX,destY,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	if(destY == null) {
		destY = 0;
	}
	if(destX == null) {
		destX = 0;
	}
	if(width > dest.get_width()) {
		width = dest.get_width() | 0;
	}
	if(height > dest.get_height()) {
		height = dest.get_height() | 0;
	}
	var source = flixel_util_FlxGradient.createGradientFlxSprite(width,height,colors,chunkSize,rotation,interpolate);
	dest.stamp(source,destX,destY);
	source.destroy();
	return dest;
};
flixel_util_FlxGradient.overlayGradientOnBitmapData = function(dest,width,height,colors,destX,destY,chunkSize,rotation,interpolate) {
	if(interpolate == null) {
		interpolate = true;
	}
	if(rotation == null) {
		rotation = 90;
	}
	if(chunkSize == null) {
		chunkSize = 1;
	}
	if(destY == null) {
		destY = 0;
	}
	if(destX == null) {
		destX = 0;
	}
	if(width > dest.width) {
		width = dest.width;
	}
	if(height > dest.height) {
		height = dest.height;
	}
	var source = flixel_util_FlxGradient.createGradientBitmapData(width,height,colors,chunkSize,rotation,interpolate);
	dest.copyPixels(source,new openfl_geom_Rectangle(0,0,source.width,source.height),new openfl_geom_Point(destX,destY),null,null,true);
	source.dispose();
	return dest;
};
var flixel_util_FlxHorizontalAlign = $hxClasses["flixel.util.FlxHorizontalAlign"] = { __ename__ : ["flixel","util","FlxHorizontalAlign"], __constructs__ : ["LEFT","CENTER","RIGHT"] };
flixel_util_FlxHorizontalAlign.LEFT = ["LEFT",0];
flixel_util_FlxHorizontalAlign.LEFT.toString = $estr;
flixel_util_FlxHorizontalAlign.LEFT.__enum__ = flixel_util_FlxHorizontalAlign;
flixel_util_FlxHorizontalAlign.CENTER = ["CENTER",1];
flixel_util_FlxHorizontalAlign.CENTER.toString = $estr;
flixel_util_FlxHorizontalAlign.CENTER.__enum__ = flixel_util_FlxHorizontalAlign;
flixel_util_FlxHorizontalAlign.RIGHT = ["RIGHT",2];
flixel_util_FlxHorizontalAlign.RIGHT.toString = $estr;
flixel_util_FlxHorizontalAlign.RIGHT.__enum__ = flixel_util_FlxHorizontalAlign;
flixel_util_FlxHorizontalAlign.__empty_constructs__ = [flixel_util_FlxHorizontalAlign.LEFT,flixel_util_FlxHorizontalAlign.CENTER,flixel_util_FlxHorizontalAlign.RIGHT];
var flixel_util_FlxPath = function(Nodes) {
	this._firstUpdate = false;
	this._wasObjectImmovable = null;
	this._autoRotate = false;
	this._inc = 1;
	this.finished = false;
	this.nodeIndex = 0;
	this.ignoreDrawDebug = false;
	this.debugColor = 16777215;
	this.active = false;
	this.autoCenter = true;
	this.angle = 0;
	this.speed = 0;
	if(Nodes != null) {
		this._nodes = Nodes.slice();
	} else {
		this._nodes = [];
	}
};
$hxClasses["flixel.util.FlxPath"] = flixel_util_FlxPath;
flixel_util_FlxPath.__name__ = ["flixel","util","FlxPath"];
flixel_util_FlxPath.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_FlxPath.prototype = {
	_nodes: null
	,speed: null
	,angle: null
	,autoCenter: null
	,active: null
	,onComplete: null
	,debugColor: null
	,ignoreDrawDebug: null
	,nodeIndex: null
	,finished: null
	,_mode: null
	,_inc: null
	,_autoRotate: null
	,_wasObjectImmovable: null
	,_firstUpdate: null
	,object: null
	,reset: function() {
		this.debugColor = 16777215;
		this.ignoreDrawDebug = false;
		this.autoCenter = true;
		return this;
	}
	,setProperties: function(Speed,Mode,AutoRotate) {
		if(AutoRotate == null) {
			AutoRotate = false;
		}
		if(Mode == null) {
			Mode = 0;
		}
		if(Speed == null) {
			Speed = 100;
		}
		this.speed = Math.abs(Speed);
		this._mode = Mode;
		this._autoRotate = AutoRotate;
		return this;
	}
	,start: function(Nodes,Speed,Mode,AutoRotate,NodesAsReference) {
		if(NodesAsReference == null) {
			NodesAsReference = false;
		}
		if(AutoRotate == null) {
			AutoRotate = false;
		}
		if(Mode == null) {
			Mode = 0;
		}
		if(Speed == null) {
			Speed = 100;
		}
		if(Nodes != null) {
			if(NodesAsReference) {
				this._nodes = Nodes;
			} else {
				this._nodes = Nodes.slice();
			}
		}
		this.setProperties(Speed,Mode,AutoRotate);
		if(this._nodes.length > 0) {
			this.restart();
		}
		return this;
	}
	,restart: function() {
		this.finished = false;
		this._firstUpdate = true;
		this.active = this._nodes.length > 0;
		if(!this.active) {
			return this;
		}
		if(this._mode == 1 || this._mode == 256) {
			this.nodeIndex = this._nodes.length - 1;
			this._inc = -1;
		} else {
			this.nodeIndex = 0;
			this._inc = 1;
		}
		return this;
	}
	,setNode: function(NodeIndex) {
		if(NodeIndex < 0) {
			NodeIndex = 0;
		} else if(NodeIndex > this._nodes.length - 1) {
			NodeIndex = this._nodes.length - 1;
		}
		this.nodeIndex = NodeIndex;
		this.advancePath();
		return this;
	}
	,update: function(elapsed) {
		if(this.object == null) {
			return;
		}
		if(this._firstUpdate) {
			this._wasObjectImmovable = this.object.immovable;
			this.object.set_immovable(true);
			this._firstUpdate = false;
		}
		flixel_util_FlxPath._point.set_x(this.object.x);
		flixel_util_FlxPath._point.set_y(this.object.y);
		if(this.autoCenter) {
			var _this = flixel_util_FlxPath._point;
			var X = this.object.get_width() * 0.5;
			var Y = this.object.get_height() * 0.5;
			_this.set_x(_this.x + X);
			_this.set_y(_this.y + Y);
		}
		var node = this._nodes[this.nodeIndex];
		var deltaX = node.x - flixel_util_FlxPath._point.x;
		var deltaY = node.y - flixel_util_FlxPath._point.y;
		var horizontalOnly = (this._mode & 65536) > 0;
		var verticalOnly = (this._mode & 1048576) > 0;
		if(horizontalOnly) {
			if((deltaX > 0 ? deltaX : -deltaX) < this.speed * elapsed) {
				node = this.advancePath();
			}
		} else if(verticalOnly) {
			if((deltaY > 0 ? deltaY : -deltaY) < this.speed * elapsed) {
				node = this.advancePath();
			}
		} else if(Math.sqrt(deltaX * deltaX + deltaY * deltaY) < this.speed * elapsed) {
			node = this.advancePath();
		}
		if(this.object != null && this.speed != 0) {
			flixel_util_FlxPath._point.set_x(this.object.x);
			flixel_util_FlxPath._point.set_y(this.object.y);
			if(this.autoCenter) {
				var _this1 = flixel_util_FlxPath._point;
				var X1 = this.object.get_width() * 0.5;
				var Y1 = this.object.get_height() * 0.5;
				_this1.set_x(_this1.x + X1);
				_this1.set_y(_this1.y + Y1);
			}
			var _this2 = flixel_util_FlxPath._point;
			var result = Math.abs(_this2.x - node.x) <= 0.0000001 && Math.abs(_this2.y - node.y) <= 0.0000001;
			if(node._weak) {
				node.put();
			}
			if(!result) {
				this.calculateVelocity(node,horizontalOnly,verticalOnly);
			} else {
				this.object.velocity.set();
			}
			if(this._autoRotate) {
				this.object.angularVelocity = 0;
				this.object.angularAcceleration = 0;
				this.object.set_angle(this.angle);
			}
			if(this.finished) {
				this.cancel();
			}
		}
	}
	,calculateVelocity: function(node,horizontalOnly,verticalOnly) {
		if(horizontalOnly || flixel_util_FlxPath._point.y == node.y) {
			this.object.velocity.set_x(flixel_util_FlxPath._point.x < node.x ? this.speed : -this.speed);
			this.angle = this.object.velocity.x < 0 ? -90 : 90;
			if(!horizontalOnly) {
				this.object.velocity.set_y(0);
			}
		} else if(verticalOnly || flixel_util_FlxPath._point.x == node.x) {
			this.object.velocity.set_y(flixel_util_FlxPath._point.y < node.y ? this.speed : -this.speed);
			this.angle = this.object.velocity.y < 0 ? 0 : 180;
			if(!verticalOnly) {
				this.object.velocity.set_x(0);
			}
		} else {
			this.object.velocity.set_x(flixel_util_FlxPath._point.x < node.x ? this.speed : -this.speed);
			this.object.velocity.set_y(flixel_util_FlxPath._point.y < node.y ? this.speed : -this.speed);
			this.angle = flixel_util_FlxPath._point.angleBetween(node);
			this.object.velocity.set(0,-this.speed);
			var tmp = this.object.velocity;
			var point = flixel_math_FlxPoint._pool.get().set(0,0);
			point._inPool = false;
			point._weak = true;
			tmp.rotate(point,this.angle);
		}
	}
	,advancePath: function(Snap) {
		if(Snap == null) {
			Snap = true;
		}
		if(Snap) {
			var oldNode = this._nodes[this.nodeIndex];
			if(oldNode != null) {
				if((this._mode & 1048576) == 0) {
					this.object.set_x(oldNode.x);
					if(this.autoCenter) {
						var _g = this.object;
						_g.set_x(_g.x - this.object.get_width() * 0.5);
					}
				}
				if((this._mode & 65536) == 0) {
					this.object.set_y(oldNode.y);
					if(this.autoCenter) {
						var _g1 = this.object;
						_g1.set_y(_g1.y - this.object.get_height() * 0.5);
					}
				}
			}
		}
		var callComplete = false;
		this.nodeIndex += this._inc;
		if((this._mode & 1) > 0) {
			if(this.nodeIndex < 0) {
				this.nodeIndex = 0;
				callComplete = true;
				this.onEnd();
			}
		} else if((this._mode & 16) > 0) {
			if(this.nodeIndex >= this._nodes.length) {
				callComplete = true;
				this.nodeIndex = 0;
			}
		} else if((this._mode & 256) > 0) {
			if(this.nodeIndex < 0) {
				this.nodeIndex = this._nodes.length - 1;
				callComplete = true;
				if(this.nodeIndex < 0) {
					this.nodeIndex = 0;
				}
			}
		} else if((this._mode & 4096) > 0) {
			if(this._inc > 0) {
				if(this.nodeIndex >= this._nodes.length) {
					this.nodeIndex = this._nodes.length - 2;
					callComplete = true;
					if(this.nodeIndex < 0) {
						this.nodeIndex = 0;
					}
					this._inc = -this._inc;
				}
			} else if(this.nodeIndex < 0) {
				this.nodeIndex = 1;
				callComplete = true;
				if(this.nodeIndex >= this._nodes.length) {
					this.nodeIndex = this._nodes.length - 1;
				}
				if(this.nodeIndex < 0) {
					this.nodeIndex = 0;
				}
				this._inc = -this._inc;
			}
		} else if(this.nodeIndex >= this._nodes.length) {
			this.nodeIndex = this._nodes.length - 1;
			callComplete = true;
			this.onEnd();
		}
		if(callComplete && this.onComplete != null) {
			this.onComplete(this);
		}
		return this._nodes[this.nodeIndex];
	}
	,cancel: function() {
		this.onEnd();
		if(this.object != null) {
			this.object.velocity.set(0,0);
		}
		return this;
	}
	,onEnd: function() {
		this.finished = true;
		this.active = false;
		if(this._wasObjectImmovable != null) {
			this.object.set_immovable(this._wasObjectImmovable);
		}
		this._wasObjectImmovable = null;
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.putArray(this._nodes);
		this._nodes = null;
		this.object = null;
		this.onComplete = null;
	}
	,add: function(X,Y) {
		var tmp = this._nodes;
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		tmp.push(point);
		return this;
	}
	,addAt: function(X,Y,Index) {
		if(Index < 0) {
			return this;
		}
		var _this = this._nodes;
		var point = flixel_math_FlxPoint._pool.get().set(X,Y);
		point._inPool = false;
		_this.splice(Index,0,point);
		return this;
	}
	,addPoint: function(Node,AsReference) {
		if(AsReference == null) {
			AsReference = false;
		}
		if(AsReference) {
			this._nodes.push(Node);
		} else {
			var tmp = this._nodes;
			var X = Node.x;
			var Y = Node.y;
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			tmp.push(point);
		}
		return this;
	}
	,addPointAt: function(Node,Index,AsReference) {
		if(AsReference == null) {
			AsReference = false;
		}
		if(Index < 0) {
			return this;
		}
		if(AsReference) {
			this._nodes.splice(Index,0,Node);
		} else {
			var _this = this._nodes;
			var X = Node.x;
			var Y = Node.y;
			var point = flixel_math_FlxPoint._pool.get().set(X,Y);
			point._inPool = false;
			_this.splice(Index,0,point);
		}
		return this;
	}
	,remove: function(Node) {
		var index = this._nodes.indexOf(Node);
		if(index >= 0) {
			return this._nodes.splice(index,1)[0];
		}
		return null;
	}
	,removeAt: function(Index) {
		if(this._nodes.length <= 0) {
			return null;
		}
		if(Index >= this._nodes.length - 1) {
			this._nodes.pop();
		}
		return this._nodes.splice(Index,1)[0];
	}
	,head: function() {
		if(this._nodes.length > 0) {
			return this._nodes[0];
		}
		return null;
	}
	,tail: function() {
		if(this._nodes.length > 0) {
			return this._nodes[this._nodes.length - 1];
		}
		return null;
	}
	,drawDebug: function(Camera) {
		if(this._nodes == null || this._nodes.length <= 0) {
			return;
		}
		if(Camera == null) {
			Camera = flixel_FlxG.camera;
		}
		var gfx = null;
		if(flixel_FlxG.renderBlit) {
			gfx = flixel_util_FlxSpriteUtil.flashGfx;
			gfx.clear();
		} else {
			gfx = Camera.debugLayer.get_graphics();
		}
		var node;
		var nextNode;
		var i = 0;
		var l = this._nodes.length;
		while(i < l) {
			node = this._nodes[i];
			flixel_util_FlxPath._point.set_x(node.x - Camera.scroll.x * this.object.scrollFactor.x);
			flixel_util_FlxPath._point.set_y(node.y - Camera.scroll.y * this.object.scrollFactor.y);
			var nodeSize = 2;
			if(i == 0 || i == l - 1) {
				nodeSize = 4;
			}
			var nodeColor = this.debugColor;
			if(l > 1) {
				if(i == 0) {
					nodeColor = -16744448;
				} else if(i == l - 1) {
					nodeColor = -65536;
				}
			}
			gfx.beginFill(nodeColor,0.5);
			gfx.lineStyle();
			gfx.drawRect(flixel_util_FlxPath._point.x - nodeSize * 0.5,flixel_util_FlxPath._point.y - nodeSize * 0.5,nodeSize,nodeSize);
			gfx.endFill();
			if(i < l - 1) {
				nextNode = this._nodes[i + 1];
			} else {
				nextNode = this._nodes[i];
			}
			gfx.moveTo(flixel_util_FlxPath._point.x,flixel_util_FlxPath._point.y);
			gfx.lineStyle(1,this.debugColor,0.3);
			flixel_util_FlxPath._point.set_x(nextNode.x - Camera.scroll.x * this.object.scrollFactor.x);
			flixel_util_FlxPath._point.set_y(nextNode.y - Camera.scroll.y * this.object.scrollFactor.y);
			gfx.lineTo(flixel_util_FlxPath._point.x,flixel_util_FlxPath._point.y);
			++i;
		}
		if(flixel_FlxG.renderBlit) {
			Camera.buffer.draw(flixel_util_FlxSpriteUtil.flashGfxSprite);
		}
	}
	,get_nodes: function() {
		return this._nodes;
	}
	,set_nodes: function(Nodes) {
		if(Nodes != null) {
			this._nodes = Nodes;
		}
		return this._nodes;
	}
	,__class__: flixel_util_FlxPath
	,__properties__: {set_nodes:"set_nodes",get_nodes:"get_nodes"}
};
var flixel_util_FlxPool = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool"] = flixel_util_FlxPool;
flixel_util_FlxPool.__name__ = ["flixel","util","FlxPool"];
flixel_util_FlxPool.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool
	,__properties__: {get_length:"get_length"}
};
var flixel_util_FlxPool_$flixel_$util_$LabelValuePair = function(classObj) {
	this._count = 0;
	this._pool = [];
	this._class = classObj;
};
$hxClasses["flixel.util.FlxPool_flixel_util_LabelValuePair"] = flixel_util_FlxPool_$flixel_$util_$LabelValuePair;
flixel_util_FlxPool_$flixel_$util_$LabelValuePair.__name__ = ["flixel","util","FlxPool_flixel_util_LabelValuePair"];
flixel_util_FlxPool_$flixel_$util_$LabelValuePair.__interfaces__ = [flixel_util_IFlxPool];
flixel_util_FlxPool_$flixel_$util_$LabelValuePair.prototype = {
	_pool: null
	,_class: null
	,_count: null
	,get: function() {
		if(this._count == 0) {
			return Type.createInstance(this._class,[]);
		}
		return this._pool[--this._count];
	}
	,put: function(obj) {
		if(obj != null) {
			var i = this._pool.indexOf(obj);
			if(i == -1 || i >= this._count) {
				obj.destroy();
				this._pool[this._count++] = obj;
			}
		}
	}
	,putUnsafe: function(obj) {
		if(obj != null) {
			obj.destroy();
			this._pool[this._count++] = obj;
		}
	}
	,preAllocate: function(numObjects) {
		while(numObjects-- > 0) this._pool[this._count++] = Type.createInstance(this._class,[]);
	}
	,clear: function() {
		this._count = 0;
		var oldPool = this._pool;
		this._pool = [];
		return oldPool;
	}
	,get_length: function() {
		return this._count;
	}
	,__class__: flixel_util_FlxPool_$flixel_$util_$LabelValuePair
	,__properties__: {get_length:"get_length"}
};
var flixel_util_FlxSaveStatus = $hxClasses["flixel.util.FlxSaveStatus"] = { __ename__ : ["flixel","util","FlxSaveStatus"], __constructs__ : ["SUCCESS","PENDING","ERROR"] };
flixel_util_FlxSaveStatus.SUCCESS = ["SUCCESS",0];
flixel_util_FlxSaveStatus.SUCCESS.toString = $estr;
flixel_util_FlxSaveStatus.SUCCESS.__enum__ = flixel_util_FlxSaveStatus;
flixel_util_FlxSaveStatus.PENDING = ["PENDING",1];
flixel_util_FlxSaveStatus.PENDING.toString = $estr;
flixel_util_FlxSaveStatus.PENDING.__enum__ = flixel_util_FlxSaveStatus;
flixel_util_FlxSaveStatus.ERROR = ["ERROR",2];
flixel_util_FlxSaveStatus.ERROR.toString = $estr;
flixel_util_FlxSaveStatus.ERROR.__enum__ = flixel_util_FlxSaveStatus;
flixel_util_FlxSaveStatus.__empty_constructs__ = [flixel_util_FlxSaveStatus.SUCCESS,flixel_util_FlxSaveStatus.PENDING,flixel_util_FlxSaveStatus.ERROR];
var flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$ = {};
$hxClasses["flixel.util._FlxSignal.FlxTypedSignal_Impl_"] = flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$;
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.__name__ = ["flixel","util","_FlxSignal","FlxTypedSignal_Impl_"];
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.__properties__ = {get_dispatch:"get_dispatch"}
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.add = function(this1,listener) {
	this1.add(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.addOnce = function(this1,listener) {
	this1.addOnce(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.remove = function(this1,listener) {
	this1.remove(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.has = function(this1,listener) {
	return this1.has(listener);
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.removeAll = function(this1) {
	this1.removeAll();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.get_dispatch = function(this1) {
	return this1.dispatch;
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal0 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal0();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal1 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal1();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal2 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal2();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal3 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal3();
};
flixel_util__$FlxSignal_FlxTypedSignal_$Impl_$.toSignal4 = function(signal) {
	return new flixel_util__$FlxSignal_FlxSignal4();
};
var flixel_util__$FlxSignal_FlxSignalHandler = function(listener,dispatchOnce) {
	this.dispatchOnce = false;
	this.listener = listener;
	this.dispatchOnce = dispatchOnce;
};
$hxClasses["flixel.util._FlxSignal.FlxSignalHandler"] = flixel_util__$FlxSignal_FlxSignalHandler;
flixel_util__$FlxSignal_FlxSignalHandler.__name__ = ["flixel","util","_FlxSignal","FlxSignalHandler"];
flixel_util__$FlxSignal_FlxSignalHandler.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util__$FlxSignal_FlxSignalHandler.prototype = {
	listener: null
	,dispatchOnce: null
	,destroy: function() {
		this.listener = null;
	}
	,__class__: flixel_util__$FlxSignal_FlxSignalHandler
};
var flixel_util_IFlxSignal = function() { };
$hxClasses["flixel.util.IFlxSignal"] = flixel_util_IFlxSignal;
flixel_util_IFlxSignal.__name__ = ["flixel","util","IFlxSignal"];
flixel_util_IFlxSignal.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_IFlxSignal.prototype = {
	dispatch: null
	,add: null
	,addOnce: null
	,remove: null
	,removeAll: null
	,has: null
	,__class__: flixel_util_IFlxSignal
};
var flixel_util__$FlxSignal_FlxBaseSignal = function() {
	this.processingListeners = false;
	this.handlers = [];
	this.pendingRemove = [];
};
$hxClasses["flixel.util._FlxSignal.FlxBaseSignal"] = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxBaseSignal.__name__ = ["flixel","util","_FlxSignal","FlxBaseSignal"];
flixel_util__$FlxSignal_FlxBaseSignal.__interfaces__ = [flixel_util_IFlxSignal];
flixel_util__$FlxSignal_FlxBaseSignal.prototype = {
	dispatch: null
	,handlers: null
	,pendingRemove: null
	,processingListeners: null
	,add: function(listener) {
		if(listener != null) {
			this.registerListener(listener,false);
		}
	}
	,addOnce: function(listener) {
		if(listener != null) {
			this.registerListener(listener,true);
		}
	}
	,remove: function(listener) {
		if(listener != null) {
			var handler = this.getHandler(listener);
			if(handler != null) {
				if(this.processingListeners) {
					this.pendingRemove.push(handler);
				} else {
					HxOverrides.remove(this.handlers,handler);
					handler.destroy();
				}
			}
		}
	}
	,has: function(listener) {
		if(listener == null) {
			return false;
		}
		return this.getHandler(listener) != null;
	}
	,removeAll: function() {
		flixel_util_FlxDestroyUtil.destroyArray(this.handlers);
	}
	,destroy: function() {
		flixel_util_FlxDestroyUtil.destroyArray(this.handlers);
		this.handlers = null;
		this.pendingRemove = null;
	}
	,registerListener: function(listener,dispatchOnce) {
		var handler = this.getHandler(listener);
		if(handler == null) {
			handler = new flixel_util__$FlxSignal_FlxSignalHandler(listener,dispatchOnce);
			this.handlers.push(handler);
			return handler;
		} else if(handler.dispatchOnce != dispatchOnce) {
			throw new js__$Boot_HaxeError("You cannot addOnce() then add() the same listener without removing the relationship first.");
		} else {
			return handler;
		}
	}
	,getHandler: function(listener) {
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			if(handler.listener == listener) {
				return handler;
			}
		}
		return null;
	}
	,__class__: flixel_util__$FlxSignal_FlxBaseSignal
};
var flixel_util__$FlxSignal_FlxSignal0 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch0);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal0"] = flixel_util__$FlxSignal_FlxSignal0;
flixel_util__$FlxSignal_FlxSignal0.__name__ = ["flixel","util","_FlxSignal","FlxSignal0"];
flixel_util__$FlxSignal_FlxSignal0.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal0.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch0: function() {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener();
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g2 = 0;
		var _g11 = this.pendingRemove;
		while(_g2 < _g11.length) {
			var handler1 = _g11[_g2];
			++_g2;
			this.remove(handler1.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal0
});
var flixel_util__$FlxSignal_FlxSignal1 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch1);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal1"] = flixel_util__$FlxSignal_FlxSignal1;
flixel_util__$FlxSignal_FlxSignal1.__name__ = ["flixel","util","_FlxSignal","FlxSignal1"];
flixel_util__$FlxSignal_FlxSignal1.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal1.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch1: function(value1) {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1);
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g2 = 0;
		var _g11 = this.pendingRemove;
		while(_g2 < _g11.length) {
			var handler1 = _g11[_g2];
			++_g2;
			this.remove(handler1.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal1
});
var flixel_util__$FlxSignal_FlxSignal2 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch2);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal2"] = flixel_util__$FlxSignal_FlxSignal2;
flixel_util__$FlxSignal_FlxSignal2.__name__ = ["flixel","util","_FlxSignal","FlxSignal2"];
flixel_util__$FlxSignal_FlxSignal2.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal2.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch2: function(value1,value2) {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2);
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g2 = 0;
		var _g11 = this.pendingRemove;
		while(_g2 < _g11.length) {
			var handler1 = _g11[_g2];
			++_g2;
			this.remove(handler1.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal2
});
var flixel_util__$FlxSignal_FlxSignal3 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch3);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal3"] = flixel_util__$FlxSignal_FlxSignal3;
flixel_util__$FlxSignal_FlxSignal3.__name__ = ["flixel","util","_FlxSignal","FlxSignal3"];
flixel_util__$FlxSignal_FlxSignal3.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal3.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch3: function(value1,value2,value3) {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2,value3);
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g2 = 0;
		var _g11 = this.pendingRemove;
		while(_g2 < _g11.length) {
			var handler1 = _g11[_g2];
			++_g2;
			this.remove(handler1.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal3
});
var flixel_util__$FlxSignal_FlxSignal4 = function() {
	flixel_util__$FlxSignal_FlxBaseSignal.call(this);
	this.dispatch = $bind(this,this.dispatch4);
};
$hxClasses["flixel.util._FlxSignal.FlxSignal4"] = flixel_util__$FlxSignal_FlxSignal4;
flixel_util__$FlxSignal_FlxSignal4.__name__ = ["flixel","util","_FlxSignal","FlxSignal4"];
flixel_util__$FlxSignal_FlxSignal4.__super__ = flixel_util__$FlxSignal_FlxBaseSignal;
flixel_util__$FlxSignal_FlxSignal4.prototype = $extend(flixel_util__$FlxSignal_FlxBaseSignal.prototype,{
	dispatch4: function(value1,value2,value3,value4) {
		this.processingListeners = true;
		var _g = 0;
		var _g1 = this.handlers;
		while(_g < _g1.length) {
			var handler = _g1[_g];
			++_g;
			handler.listener(value1,value2,value3,value4);
			if(handler.dispatchOnce) {
				this.remove(handler.listener);
			}
		}
		this.processingListeners = false;
		var _g2 = 0;
		var _g11 = this.pendingRemove;
		while(_g2 < _g11.length) {
			var handler1 = _g11[_g2];
			++_g2;
			this.remove(handler1.listener);
		}
		if(this.pendingRemove.length > 0) {
			this.pendingRemove = [];
		}
	}
	,__class__: flixel_util__$FlxSignal_FlxSignal4
});
var flixel_util__$FlxSignal_Macro = function() { };
$hxClasses["flixel.util._FlxSignal.Macro"] = flixel_util__$FlxSignal_Macro;
flixel_util__$FlxSignal_Macro.__name__ = ["flixel","util","_FlxSignal","Macro"];
var flixel_util_FlxSort = function() { };
$hxClasses["flixel.util.FlxSort"] = flixel_util_FlxSort;
flixel_util_FlxSort.__name__ = ["flixel","util","FlxSort"];
flixel_util_FlxSort.byY = function(Order,Obj1,Obj2) {
	var Value1 = Obj1.y;
	var Value2 = Obj2.y;
	var result = 0;
	if(Value1 < Value2) {
		result = Order;
	} else if(Value1 > Value2) {
		result = -Order;
	}
	return result;
};
flixel_util_FlxSort.byValues = function(Order,Value1,Value2) {
	var result = 0;
	if(Value1 < Value2) {
		result = Order;
	} else if(Value1 > Value2) {
		result = -Order;
	}
	return result;
};
var flixel_util_FlxSpriteUtil = function() { };
$hxClasses["flixel.util.FlxSpriteUtil"] = flixel_util_FlxSpriteUtil;
flixel_util_FlxSpriteUtil.__name__ = ["flixel","util","FlxSpriteUtil"];
flixel_util_FlxSpriteUtil.alphaMask = function(output,source,mask) {
	var data = flixel_system_FlxAssets.resolveBitmapData(source);
	var maskData = flixel_system_FlxAssets.resolveBitmapData(mask);
	if(data == null || maskData == null) {
		return null;
	}
	data = data.clone();
	data.copyChannel(maskData,new openfl_geom_Rectangle(0,0,data.width,data.height),new openfl_geom_Point(),8,8);
	output.set_pixels(data);
	return output;
};
flixel_util_FlxSpriteUtil.alphaMaskFlxSprite = function(sprite,mask,output) {
	sprite.drawFrame();
	var data = sprite.get_pixels().clone();
	data.copyChannel(mask.get_pixels(),new openfl_geom_Rectangle(0,0,sprite.get_width(),sprite.get_height()),new openfl_geom_Point(),8,8);
	output.set_pixels(data);
	return output;
};
flixel_util_FlxSpriteUtil.screenWrap = function(sprite,Left,Right,Top,Bottom) {
	if(Bottom == null) {
		Bottom = true;
	}
	if(Top == null) {
		Top = true;
	}
	if(Right == null) {
		Right = true;
	}
	if(Left == null) {
		Left = true;
	}
	if(Left && sprite.x + sprite.frameWidth / 2 <= 0) {
		sprite.set_x(flixel_FlxG.width);
	} else if(Right && sprite.x >= flixel_FlxG.width) {
		sprite.set_x(0);
	}
	if(Top && sprite.y + sprite.frameHeight / 2 <= 0) {
		sprite.set_y(flixel_FlxG.height);
	} else if(Bottom && sprite.y >= flixel_FlxG.height) {
		sprite.set_y(0);
	}
	return sprite;
};
flixel_util_FlxSpriteUtil.bound = function(sprite,MinX,MaxX,MinY,MaxY) {
	if(MaxY == null) {
		MaxY = 0;
	}
	if(MinY == null) {
		MinY = 0;
	}
	if(MaxX == null) {
		MaxX = 0;
	}
	if(MinX == null) {
		MinX = 0;
	}
	if(MaxX <= 0) {
		MaxX = flixel_FlxG.width;
	}
	if(MaxY <= 0) {
		MaxY = flixel_FlxG.height;
	}
	MaxX -= sprite.frameWidth;
	MaxY -= sprite.frameHeight;
	var Value = sprite.x;
	var lowerBound = MinX != null && Value < MinX ? MinX : Value;
	sprite.set_x(MaxX != null && lowerBound > MaxX ? MaxX : lowerBound);
	var Value1 = sprite.y;
	var lowerBound1 = MinY != null && Value1 < MinY ? MinY : Value1;
	sprite.set_y(MaxY != null && lowerBound1 > MaxY ? MaxY : lowerBound1);
	return sprite;
};
flixel_util_FlxSpriteUtil.space = function(objects,startX,startY,horizontalSpacing,verticalSpacing,spaceFromBounds) {
	if(spaceFromBounds == null) {
		spaceFromBounds = false;
	}
	if(verticalSpacing == null) {
		verticalSpacing = 0;
	}
	if(horizontalSpacing == null) {
		horizontalSpacing = 0;
	}
	var _g1 = 0;
	var _g = objects.length;
	while(_g1 < _g) {
		var i = _g1++;
		var object = objects[i];
		if(spaceFromBounds) {
			object.set_x(startX + i * horizontalSpacing);
			object.set_y(startY + i * verticalSpacing);
		} else {
			object.set_x(startX + i * horizontalSpacing);
			object.set_y(startY + i * verticalSpacing);
		}
	}
};
flixel_util_FlxSpriteUtil.drawLine = function(sprite,StartX,StartY,EndX,EndY,lineStyle,drawStyle) {
	var lineStyle1 = lineStyle;
	if(lineStyle1 == null) {
		lineStyle1 = { thickness : 1, color : -1};
	}
	if(lineStyle1.thickness == null) {
		lineStyle1.thickness = 1;
	}
	if(lineStyle1.color == null) {
		lineStyle1.color = -1;
	}
	lineStyle = lineStyle1;
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(StartX,StartY);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(EndX,EndY);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawCurve = function(sprite,StartX,StartY,EndX,EndY,ControlX,ControlY,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = 0;
	}
	var lineStyle1 = lineStyle;
	if(lineStyle1 == null) {
		lineStyle1 = { thickness : 1, color : -1};
	}
	if(lineStyle1.thickness == null) {
		lineStyle1.thickness = 1;
	}
	if(lineStyle1.color == null) {
		lineStyle1.color = -1;
	}
	lineStyle = lineStyle1;
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(StartX,StartY);
	flixel_util_FlxSpriteUtil.flashGfx.curveTo(EndX,EndY,ControlX,ControlY);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawRect = function(sprite,X,Y,Width,Height,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.drawRect(X,Y,Width,Height);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawRoundRect = function(sprite,X,Y,Width,Height,EllipseWidth,EllipseHeight,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.drawRoundRect(X,Y,Width,Height,EllipseWidth,EllipseHeight);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawCircle = function(sprite,X,Y,Radius,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	if(Radius == null) {
		Radius = -1;
	}
	if(Y == null) {
		Y = -1;
	}
	if(X == null) {
		X = -1;
	}
	if(X == -1 || Y == -1) {
		var midPoint = sprite.getGraphicMidpoint();
		if(X == -1) {
			X = midPoint.x - sprite.x;
		}
		if(Y == -1) {
			Y = midPoint.y - sprite.y;
		}
		midPoint.put();
	}
	if(Radius < 1) {
		var minVal = Math.min(sprite.frameWidth,sprite.frameHeight);
		Radius = minVal / 2;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.drawCircle(X,Y,Radius);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawEllipse = function(sprite,X,Y,Width,Height,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.drawEllipse(X,Y,Width,Height);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawTriangle = function(sprite,X,Y,Height,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(X + Height / 2,Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X + Height,Height + Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X,Height + Y);
	flixel_util_FlxSpriteUtil.flashGfx.lineTo(X + Height / 2,Y);
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.drawPolygon = function(sprite,Vertices,FillColor,lineStyle,drawStyle) {
	if(FillColor == null) {
		FillColor = -1;
	}
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
	var p = Vertices.shift();
	flixel_util_FlxSpriteUtil.flashGfx.moveTo(p.x,p.y);
	var _g = 0;
	while(_g < Vertices.length) {
		var p1 = Vertices[_g];
		++_g;
		flixel_util_FlxSpriteUtil.flashGfx.lineTo(p1.x,p1.y);
	}
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	Vertices.unshift(p);
	return sprite;
};
flixel_util_FlxSpriteUtil.beginDraw = function(FillColor,lineStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.clear();
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
	if(FillColor != 0) {
		flixel_util_FlxSpriteUtil.flashGfx.beginFill(FillColor & 16777215,(FillColor >> 24 & 255) / 255);
	}
};
flixel_util_FlxSpriteUtil.endDraw = function(sprite,drawStyle) {
	flixel_util_FlxSpriteUtil.flashGfx.endFill();
	flixel_util_FlxSpriteUtil.updateSpriteGraphic(sprite,drawStyle);
	return sprite;
};
flixel_util_FlxSpriteUtil.updateSpriteGraphic = function(sprite,drawStyle) {
	if(drawStyle == null) {
		drawStyle = { smoothing : false};
	} else if(drawStyle.smoothing == null) {
		drawStyle.smoothing = false;
	}
	sprite.get_pixels().draw(flixel_util_FlxSpriteUtil.flashGfxSprite,drawStyle.matrix,drawStyle.colorTransform,drawStyle.blendMode,drawStyle.clipRect,drawStyle.smoothing);
	sprite.dirty = true;
	return sprite;
};
flixel_util_FlxSpriteUtil.setLineStyle = function(lineStyle) {
	if(lineStyle != null) {
		var color = lineStyle.color == null ? -16777216 : lineStyle.color;
		if(lineStyle.thickness == null) {
			lineStyle.thickness = 1;
		}
		if(lineStyle.pixelHinting == null) {
			lineStyle.pixelHinting = false;
		}
		if(lineStyle.miterLimit == null) {
			lineStyle.miterLimit = 3;
		}
		flixel_util_FlxSpriteUtil.flashGfx.lineStyle(lineStyle.thickness,color & 16777215,(color >> 24 & 255) / 255,lineStyle.pixelHinting,lineStyle.scaleMode,lineStyle.capsStyle,lineStyle.jointStyle,lineStyle.miterLimit);
	}
};
flixel_util_FlxSpriteUtil.getDefaultLineStyle = function(lineStyle) {
	if(lineStyle == null) {
		lineStyle = { thickness : 1, color : -1};
	}
	if(lineStyle.thickness == null) {
		lineStyle.thickness = 1;
	}
	if(lineStyle.color == null) {
		lineStyle.color = -1;
	}
	return lineStyle;
};
flixel_util_FlxSpriteUtil.fill = function(sprite,FillColor) {
	sprite.get_pixels().fillRect(sprite.get_pixels().rect,FillColor);
	if(sprite.get_pixels() != sprite.framePixels) {
		sprite.dirty = true;
	}
	return sprite;
};
flixel_util_FlxSpriteUtil.flicker = function(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback) {
	if(ForceRestart == null) {
		ForceRestart = true;
	}
	if(EndVisibility == null) {
		EndVisibility = true;
	}
	if(Interval == null) {
		Interval = 0.04;
	}
	if(Duration == null) {
		Duration = 1;
	}
	return flixel_effects_FlxFlicker.flicker(Object,Duration,Interval,EndVisibility,ForceRestart,CompletionCallback,ProgressCallback);
};
flixel_util_FlxSpriteUtil.isFlickering = function(Object) {
	return flixel_effects_FlxFlicker.isFlickering(Object);
};
flixel_util_FlxSpriteUtil.stopFlickering = function(Object) {
	flixel_effects_FlxFlicker.stopFlickering(Object);
	return Object;
};
flixel_util_FlxSpriteUtil.fadeIn = function(sprite,Duration,ResetAlpha,OnComplete) {
	if(Duration == null) {
		Duration = 1;
	}
	if(ResetAlpha) {
		sprite.set_alpha(0);
	}
	var a1 = sprite;
	var tmp = function(f) {
		flixel_util_FlxSpriteUtil.alphaTween(a1,f);
	};
	flixel_tweens_FlxTween.num(sprite.alpha,1,Duration,{ onComplete : OnComplete},tmp);
	return sprite;
};
flixel_util_FlxSpriteUtil.fadeOut = function(sprite,Duration,OnComplete) {
	if(Duration == null) {
		Duration = 1;
	}
	var a1 = sprite;
	var tmp = function(f) {
		flixel_util_FlxSpriteUtil.alphaTween(a1,f);
	};
	flixel_tweens_FlxTween.num(sprite.alpha,0,Duration,{ onComplete : OnComplete},tmp);
	return sprite;
};
flixel_util_FlxSpriteUtil.alphaTween = function(sprite,f) {
	sprite.set_alpha(f);
};
var flixel_util_FlxStringUtil = function() { };
$hxClasses["flixel.util.FlxStringUtil"] = flixel_util_FlxStringUtil;
flixel_util_FlxStringUtil.__name__ = ["flixel","util","FlxStringUtil"];
flixel_util_FlxStringUtil.formatTicks = function(StartTicks,EndTicks) {
	return Math.abs(EndTicks - StartTicks) / 1000 + "s";
};
flixel_util_FlxStringUtil.formatTime = function(Seconds,ShowMS) {
	if(ShowMS == null) {
		ShowMS = false;
	}
	var timeString = (Seconds / 60 | 0) + ":";
	var timeStringHelper = (Seconds | 0) % 60;
	if(timeStringHelper < 10) {
		timeString += "0";
	}
	timeString += timeStringHelper;
	if(ShowMS) {
		timeString += ".";
		timeStringHelper = (Seconds - (Seconds | 0)) * 100 | 0;
		if(timeStringHelper < 10) {
			timeString += "0";
		}
		timeString += timeStringHelper;
	}
	return timeString;
};
flixel_util_FlxStringUtil.formatArray = function(AnyArray) {
	var string = "";
	if(AnyArray != null && AnyArray.length > 0) {
		string = Std.string(AnyArray[0]);
		var i = 1;
		var l = AnyArray.length;
		while(i < l) string += ", " + Std.string(AnyArray[i++]);
	}
	return string;
};
flixel_util_FlxStringUtil.formatStringMap = function(AnyMap) {
	var string = "";
	var key = AnyMap.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		string += key1 == null ? "null" : "" + key1;
		string += ", ";
	}
	return string.substring(0,string.length - 2);
};
flixel_util_FlxStringUtil.formatMoney = function(Amount,ShowDecimal,EnglishStyle) {
	if(EnglishStyle == null) {
		EnglishStyle = true;
	}
	if(ShowDecimal == null) {
		ShowDecimal = true;
	}
	var isNegative = Amount < 0;
	Amount = Math.abs(Amount);
	var string = "";
	var comma = "";
	var amount = Math.floor(Amount);
	while(amount > 0) {
		if(string.length > 0 && comma.length <= 0) {
			if(EnglishStyle) {
				comma = ",";
			} else {
				comma = ".";
			}
		}
		var zeroes = "";
		var helper = amount - Math.floor(amount / 1000) * 1000;
		amount = Math.floor(amount / 1000);
		if(amount > 0) {
			if(helper < 100) {
				zeroes = "0";
			}
			if(helper < 10) {
				zeroes += "0";
			}
		}
		string = zeroes + helper + comma + string;
	}
	if(string == "") {
		string = "0";
	}
	if(ShowDecimal) {
		amount = Math.floor(Amount * 100) - Math.floor(Amount) * 100;
		string += EnglishStyle ? "." : ",";
		if(amount < 10) {
			string += "0";
		}
		string += amount;
	}
	if(isNegative) {
		string = "-" + string;
	}
	return string;
};
flixel_util_FlxStringUtil.formatBytes = function(Bytes,Precision) {
	if(Precision == null) {
		Precision = 2;
	}
	var units = ["Bytes","kB","MB","GB","TB","PB"];
	var curUnit = 0;
	while(Bytes >= 1024 && curUnit < units.length - 1) {
		Bytes /= 1024;
		++curUnit;
	}
	return flixel_math_FlxMath.roundDecimal(Bytes,Precision) + units[curUnit];
};
flixel_util_FlxStringUtil.filterDigits = function(Input) {
	var output_b = "";
	var _g1 = 0;
	var _g = Input.length;
	while(_g1 < _g) {
		var i = _g1++;
		var c = HxOverrides.cca(Input,i);
		if(c >= 48 && c <= 57) {
			output_b += String.fromCharCode(c);
		}
	}
	return output_b;
};
flixel_util_FlxStringUtil.htmlFormat = function(Text,Size,Color,Bold,Italic,Underlined) {
	if(Underlined == null) {
		Underlined = false;
	}
	if(Italic == null) {
		Italic = false;
	}
	if(Bold == null) {
		Bold = false;
	}
	if(Color == null) {
		Color = "FFFFFF";
	}
	if(Size == null) {
		Size = 12;
	}
	var prefix = "<font size='" + Size + "' color='#" + Color + "'>";
	var suffix = "</font>";
	if(Bold) {
		prefix = "<b>" + prefix;
		suffix = "</font>" + "</b>";
	}
	if(Italic) {
		prefix = "<i>" + prefix;
		suffix += "</i>";
	}
	if(Underlined) {
		prefix = "<u>" + prefix;
		suffix += "</u>";
	}
	return prefix + Text + suffix;
};
flixel_util_FlxStringUtil.getClassName = function(Obj,Simple) {
	if(Simple == null) {
		Simple = false;
	}
	var cl;
	if(js_Boot.__instanceof(Obj,Class)) {
		cl = Obj;
	} else if(Obj == null) {
		cl = null;
	} else {
		cl = js_Boot.getClass(Obj);
	}
	var s = Type.getClassName(cl);
	if(s != null) {
		s = StringTools.replace(s,"::",".");
		if(Simple) {
			s = HxOverrides.substr(s,s.lastIndexOf(".") + 1,null);
		}
	}
	return s;
};
flixel_util_FlxStringUtil.getDomain = function(url) {
	var regex = new EReg("(?:[a-z0-9.+-]+://)(?:[a-z0-9-]+\\.)*([a-z0-9-]+\\.[a-z0-9-]+)","i");
	if(regex.match(url)) {
		return regex.matched(1).toLowerCase();
	} else {
		return "local";
	}
};
flixel_util_FlxStringUtil.sameClassName = function(Obj1,Obj2,Simple) {
	if(Simple == null) {
		Simple = true;
	}
	return flixel_util_FlxStringUtil.getClassName(Obj1,Simple) == flixel_util_FlxStringUtil.getClassName(Obj2,Simple);
};
flixel_util_FlxStringUtil.toIntArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var iArray = [];
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			iArray.push(Std.parseInt(str));
		}
		return iArray;
	}
	return null;
};
flixel_util_FlxStringUtil.toFloatArray = function(Data) {
	if(Data != null && Data != "") {
		var strArray = Data.split(",");
		var fArray = [];
		var _g = 0;
		while(_g < strArray.length) {
			var str = strArray[_g];
			++_g;
			fArray.push(parseFloat(str));
		}
		return fArray;
	}
	return null;
};
flixel_util_FlxStringUtil.arrayToCSV = function(Data,Width,Invert) {
	if(Invert == null) {
		Invert = false;
	}
	var row = 0;
	var column;
	var csv = "";
	var height = Data.length / Width | 0;
	var index;
	var offset = 0;
	while(row < height) {
		column = 0;
		while(column < Width) {
			index = Data[offset];
			if(Invert) {
				if(index == 0) {
					index = 1;
				} else if(index == 1) {
					index = 0;
				}
			}
			if(column == 0) {
				if(row == 0) {
					csv += index;
				} else {
					csv += "\n" + index;
				}
			} else {
				csv += ", " + index;
			}
			++column;
			++offset;
		}
		++row;
	}
	return csv;
};
flixel_util_FlxStringUtil.bitmapToCSV = function(Bitmap,Invert,Scale,ColorMap) {
	if(Scale == null) {
		Scale = 1;
	}
	if(Invert == null) {
		Invert = false;
	}
	if(Scale < 1) {
		Scale = 1;
	}
	if(Scale > 1) {
		var bd = Bitmap;
		Bitmap = new openfl_display_BitmapData(Bitmap.width * Scale,Bitmap.height * Scale);
		var bdW = bd.width;
		var bdH = bd.height;
		var pCol = 0;
		var _g1 = 0;
		while(_g1 < bdW) {
			var i = _g1++;
			var _g3 = 0;
			while(_g3 < bdH) {
				var j = _g3++;
				pCol = bd.getPixel(i,j);
				var _g5 = 0;
				var _g4 = Scale;
				while(_g5 < _g4) {
					var k = _g5++;
					var _g7 = 0;
					var _g6 = Scale;
					while(_g7 < _g6) {
						var m = _g7++;
						Bitmap.setPixel(i * Scale + k,j * Scale + m,pCol);
					}
				}
			}
		}
	}
	if(ColorMap != null) {
		var _g11 = 0;
		var _g = ColorMap.length;
		while(_g11 < _g) {
			var i1 = _g11++;
			ColorMap[i1] = ColorMap[i1] & 16777215;
		}
	}
	var row = 0;
	var column;
	var pixel;
	var csv = "";
	var bitmapWidth = Bitmap.width;
	var bitmapHeight = Bitmap.height;
	while(row < bitmapHeight) {
		column = 0;
		while(column < bitmapWidth) {
			pixel = Bitmap.getPixel(column,row);
			if(ColorMap != null) {
				pixel = ColorMap.indexOf(pixel);
			} else if(Invert && pixel > 0 || !Invert && pixel == 0) {
				pixel = 1;
			} else {
				pixel = 0;
			}
			if(column == 0) {
				if(row == 0) {
					csv += pixel;
				} else {
					csv += "\n" + pixel;
				}
			} else {
				csv += ", " + pixel;
			}
			++column;
		}
		++row;
	}
	return csv;
};
flixel_util_FlxStringUtil.imageToCSV = function(ImageFile,Invert,Scale,ColorMap) {
	if(Scale == null) {
		Scale = 1;
	}
	if(Invert == null) {
		Invert = false;
	}
	var tempBitmapData;
	if(typeof(ImageFile) == "string") {
		var id = ImageFile;
		if(openfl_Assets.exists(id)) {
			tempBitmapData = openfl_Assets.getBitmapData(id,false);
		} else {
			flixel_FlxG.log.advanced("Could not find a BitmapData asset with ID '" + id + "'.",flixel_system_debug_log_LogStyle.ERROR,true);
			tempBitmapData = null;
		}
	} else {
		tempBitmapData = Type.createInstance(ImageFile,[]).bitmapData;
	}
	return flixel_util_FlxStringUtil.bitmapToCSV(tempBitmapData,Invert,Scale,ColorMap);
};
flixel_util_FlxStringUtil.getDebugString = function(LabelValuePairs) {
	var output = "(";
	var _g = 0;
	while(_g < LabelValuePairs.length) {
		var pair = LabelValuePairs[_g];
		++_g;
		output += pair.label + ": ";
		var value = pair.value;
		if(typeof(value) == "number") {
			value = flixel_math_FlxMath.roundDecimal(value,flixel_FlxG["debugger"].precision);
		}
		output += Std.string(value) + " | ";
		flixel_util_LabelValuePair._pool.put(pair);
	}
	output = StringTools.trim(HxOverrides.substr(output,0,output.length - 2));
	return output + ")";
};
flixel_util_FlxStringUtil.contains = function(s,str) {
	return s.indexOf(str) != -1;
};
flixel_util_FlxStringUtil.remove = function(s,sub) {
	return StringTools.replace(s,sub,"");
};
flixel_util_FlxStringUtil.insert = function(s,pos,insertion) {
	return s.substring(0,pos) + insertion + HxOverrides.substr(s,pos,null);
};
flixel_util_FlxStringUtil.sortAlphabetically = function(list) {
	list.sort(function(a,b) {
		a = a.toLowerCase();
		b = b.toLowerCase();
		if(a < b) {
			return -1;
		}
		if(a > b) {
			return 1;
		}
		return 0;
	});
	return list;
};
flixel_util_FlxStringUtil.isNullOrEmpty = function(s) {
	if(s != null) {
		return s.length == 0;
	} else {
		return true;
	}
};
var flixel_util_LabelValuePair = function() {
};
$hxClasses["flixel.util.LabelValuePair"] = flixel_util_LabelValuePair;
flixel_util_LabelValuePair.__name__ = ["flixel","util","LabelValuePair"];
flixel_util_LabelValuePair.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_LabelValuePair.weak = function(label,value) {
	var _this = flixel_util_LabelValuePair._pool.get();
	_this.label = label;
	_this.value = value;
	return _this;
};
flixel_util_LabelValuePair.prototype = {
	label: null
	,value: null
	,create: function(label,value) {
		this.label = label;
		this.value = value;
		return this;
	}
	,put: function() {
		flixel_util_LabelValuePair._pool.put(this);
	}
	,destroy: function() {
		this.label = null;
		this.value = null;
	}
	,__class__: flixel_util_LabelValuePair
};
var flixel_util_FlxTimer = function(manager) {
	this._inManager = false;
	this._loopsCounter = 0;
	this._timeCounter = 0;
	this.finished = false;
	this.active = false;
	this.loops = 0;
	this.time = 0;
	this.manager = manager != null ? manager : flixel_util_FlxTimer.globalManager;
};
$hxClasses["flixel.util.FlxTimer"] = flixel_util_FlxTimer;
flixel_util_FlxTimer.__name__ = ["flixel","util","FlxTimer"];
flixel_util_FlxTimer.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_FlxTimer.globalManager = null;
flixel_util_FlxTimer.prototype = {
	manager: null
	,time: null
	,loops: null
	,active: null
	,finished: null
	,onComplete: null
	,_timeCounter: null
	,_loopsCounter: null
	,_inManager: null
	,destroy: function() {
		this.onComplete = null;
	}
	,start: function(Time,OnComplete,Loops) {
		if(Loops == null) {
			Loops = 1;
		}
		if(Time == null) {
			Time = 1;
		}
		if(this.manager != null && !this._inManager) {
			this.manager.add(this);
			this._inManager = true;
		}
		this.active = true;
		this.finished = false;
		this.time = Math.abs(Time);
		if(Loops < 0) {
			Loops *= -1;
		}
		this.loops = Loops;
		this.onComplete = OnComplete;
		this._timeCounter = 0;
		this._loopsCounter = 0;
		return this;
	}
	,reset: function(NewTime) {
		if(NewTime == null) {
			NewTime = -1;
		}
		if(NewTime < 0) {
			NewTime = this.time;
		}
		this.start(NewTime,this.onComplete,this.loops);
		return this;
	}
	,cancel: function() {
		this.finished = true;
		this.active = false;
		if(this.manager != null && this._inManager) {
			this.manager.remove(this);
			this._inManager = false;
		}
	}
	,update: function(elapsed) {
		this._timeCounter += elapsed;
		while(this._timeCounter >= this.time && this.active && !this.finished) {
			this._timeCounter -= this.time;
			this._loopsCounter++;
			if(this.loops > 0 && this._loopsCounter >= this.loops) {
				this.finished = true;
			}
		}
	}
	,onLoopFinished: function() {
		if(this.finished) {
			this.cancel();
		}
		if(this.onComplete != null) {
			this.onComplete(this);
		}
	}
	,get_timeLeft: function() {
		return this.time - this._timeCounter;
	}
	,get_elapsedTime: function() {
		return this._timeCounter;
	}
	,get_loopsLeft: function() {
		return this.loops - this._loopsCounter;
	}
	,get_elapsedLoops: function() {
		return this._loopsCounter;
	}
	,get_progress: function() {
		if(this.time > 0) {
			return this._timeCounter / this.time;
		} else {
			return 0;
		}
	}
	,__class__: flixel_util_FlxTimer
	,__properties__: {get_progress:"get_progress",get_elapsedLoops:"get_elapsedLoops",get_loopsLeft:"get_loopsLeft",get_elapsedTime:"get_elapsedTime",get_timeLeft:"get_timeLeft"}
};
var flixel_util_FlxTimerManager = function() {
	this._timers = [];
	flixel_FlxBasic.call(this);
	this.set_visible(false);
	flixel_FlxG.signals.stateSwitched.add($bind(this,this.clear));
};
$hxClasses["flixel.util.FlxTimerManager"] = flixel_util_FlxTimerManager;
flixel_util_FlxTimerManager.__name__ = ["flixel","util","FlxTimerManager"];
flixel_util_FlxTimerManager.__super__ = flixel_FlxBasic;
flixel_util_FlxTimerManager.prototype = $extend(flixel_FlxBasic.prototype,{
	_timers: null
	,destroy: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
		this._timers = null;
		flixel_FlxG.signals.stateSwitched.remove($bind(this,this.clear));
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,update: function(elapsed) {
		var loopedTimers = null;
		var _g = 0;
		var _g1 = this._timers;
		while(_g < _g1.length) {
			var timer = _g1[_g];
			++_g;
			if(timer.active && !timer.finished && timer.time >= 0) {
				var timerLoops = timer._loopsCounter;
				timer.update(elapsed);
				if(timerLoops != timer._loopsCounter) {
					if(loopedTimers == null) {
						loopedTimers = [];
					}
					loopedTimers.push(timer);
				}
			}
		}
		if(loopedTimers != null) {
			while(loopedTimers.length > 0) loopedTimers.shift().onLoopFinished();
		}
	}
	,add: function(Timer) {
		this._timers.push(Timer);
	}
	,remove: function(Timer) {
		var array = this._timers;
		var index = array.indexOf(Timer);
		if(index != -1) {
			array[index] = array[array.length - 1];
			array.pop();
		}
	}
	,completeAll: function() {
		var timersToFinish = [];
		var _g = 0;
		var _g1 = this._timers;
		while(_g < _g1.length) {
			var timer = _g1[_g];
			++_g;
			if(timer.loops > 0 && timer.active) {
				timersToFinish.push(timer);
			}
		}
		var _g2 = 0;
		while(_g2 < timersToFinish.length) {
			var timer1 = timersToFinish[_g2];
			++_g2;
			while(!timer1.finished) {
				timer1.update(timer1.time - timer1._timeCounter);
				timer1.onLoopFinished();
			}
		}
	}
	,clear: function() {
		flixel_util_FlxArrayUtil.clearArray(this._timers);
	}
	,forEach: function(Function) {
		var _g = 0;
		var _g1 = this._timers;
		while(_g < _g1.length) {
			var timer = _g1[_g];
			++_g;
			Function(timer);
		}
	}
	,__class__: flixel_util_FlxTimerManager
});
var flixel_util_FlxVerticalAlign = $hxClasses["flixel.util.FlxVerticalAlign"] = { __ename__ : ["flixel","util","FlxVerticalAlign"], __constructs__ : ["TOP","CENTER","BOTTOM"] };
flixel_util_FlxVerticalAlign.TOP = ["TOP",0];
flixel_util_FlxVerticalAlign.TOP.toString = $estr;
flixel_util_FlxVerticalAlign.TOP.__enum__ = flixel_util_FlxVerticalAlign;
flixel_util_FlxVerticalAlign.CENTER = ["CENTER",1];
flixel_util_FlxVerticalAlign.CENTER.toString = $estr;
flixel_util_FlxVerticalAlign.CENTER.__enum__ = flixel_util_FlxVerticalAlign;
flixel_util_FlxVerticalAlign.BOTTOM = ["BOTTOM",2];
flixel_util_FlxVerticalAlign.BOTTOM.toString = $estr;
flixel_util_FlxVerticalAlign.BOTTOM.__enum__ = flixel_util_FlxVerticalAlign;
flixel_util_FlxVerticalAlign.__empty_constructs__ = [flixel_util_FlxVerticalAlign.TOP,flixel_util_FlxVerticalAlign.CENTER,flixel_util_FlxVerticalAlign.BOTTOM];
var flixel_util_helpers_FlxBounds = function(min,max) {
	this.active = true;
	this.min = min;
	this.max = max == null ? min : max;
};
$hxClasses["flixel.util.helpers.FlxBounds"] = flixel_util_helpers_FlxBounds;
flixel_util_helpers_FlxBounds.__name__ = ["flixel","util","helpers","FlxBounds"];
flixel_util_helpers_FlxBounds.prototype = {
	min: null
	,max: null
	,active: null
	,set: function(min,max) {
		this.min = min;
		this.max = max == null ? min : max;
		return this;
	}
	,equals: function(otherBounds) {
		if(this.min == otherBounds.min) {
			return this.max == otherBounds.max;
		} else {
			return false;
		}
	}
	,toString: function() {
		var value = this.min;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "min";
		_this.value = value;
		var value1 = this.max;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "max";
		_this1.value = value1;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,__class__: flixel_util_helpers_FlxBounds
};
var flixel_util_helpers_FlxPointRangeBounds = function(startMinX,startMinY,startMaxX,startMaxY,endMinX,endMinY,endMaxX,endMaxY) {
	this.active = true;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	var point1 = flixel_math_FlxPoint._pool.get().set(0,0);
	point1._inPool = false;
	this.start = new flixel_util_helpers_FlxBounds(point,point1);
	var point2 = flixel_math_FlxPoint._pool.get().set(0,0);
	point2._inPool = false;
	var point3 = flixel_math_FlxPoint._pool.get().set(0,0);
	point3._inPool = false;
	this.end = new flixel_util_helpers_FlxBounds(point2,point3);
	this.set(startMinX,startMinY,startMaxX,startMaxY,endMinX,endMinY,endMaxX,endMaxY);
};
$hxClasses["flixel.util.helpers.FlxPointRangeBounds"] = flixel_util_helpers_FlxPointRangeBounds;
flixel_util_helpers_FlxPointRangeBounds.__name__ = ["flixel","util","helpers","FlxPointRangeBounds"];
flixel_util_helpers_FlxPointRangeBounds.__interfaces__ = [flixel_util_IFlxDestroyable];
flixel_util_helpers_FlxPointRangeBounds.prototype = {
	start: null
	,end: null
	,active: null
	,set: function(startMinX,startMinY,startMaxX,startMaxY,endMinX,endMinY,endMaxX,endMaxY) {
		this.start.min.set_x(startMinX);
		this.start.min.set_y(startMinY == null ? this.start.min.x : startMinY);
		this.start.max.set_x(startMaxX == null ? this.start.min.x : startMaxX);
		this.start.max.set_y(startMaxY == null ? this.start.min.y : startMaxY);
		this.end.min.set_x(endMinX == null ? this.start.min.x : endMinX);
		this.end.min.set_y(endMinY == null ? this.start.min.y : endMinY);
		this.end.max.set_x(endMaxX == null ? endMinX == null ? this.start.max.x : this.end.min.x : endMaxX);
		this.end.max.set_y(endMaxY == null ? endMinY == null ? this.start.max.y : this.end.min.y : endMaxY);
		return this;
	}
	,equals: function(OtherFlxPointRangeBounds) {
		var tmp;
		var tmp1;
		var _this = this.start.min;
		var point = OtherFlxPointRangeBounds.start.min;
		var result = Math.abs(_this.x - point.x) <= 0.0000001 && Math.abs(_this.y - point.y) <= 0.0000001;
		if(point._weak) {
			point.put();
		}
		if(result) {
			var _this1 = this.start.max;
			var point1 = OtherFlxPointRangeBounds.start.max;
			var result1 = Math.abs(_this1.x - point1.x) <= 0.0000001 && Math.abs(_this1.y - point1.y) <= 0.0000001;
			if(point1._weak) {
				point1.put();
			}
			tmp1 = result1;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this2 = this.end.min;
			var point2 = OtherFlxPointRangeBounds.end.min;
			var result2 = Math.abs(_this2.x - point2.x) <= 0.0000001 && Math.abs(_this2.y - point2.y) <= 0.0000001;
			if(point2._weak) {
				point2.put();
			}
			tmp = result2;
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this3 = this.end.max;
			var point3 = OtherFlxPointRangeBounds.end.max;
			var result3 = Math.abs(_this3.x - point3.x) <= 0.0000001 && Math.abs(_this3.y - point3.y) <= 0.0000001;
			if(point3._weak) {
				point3.put();
			}
			return result3;
		} else {
			return false;
		}
	}
	,toString: function() {
		var value = this.start.min.x;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "start.min.x";
		_this.value = value;
		var value1 = this.start.min.y;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "start.min.y";
		_this1.value = value1;
		var value2 = this.start.max.x;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "start.max.x";
		_this2.value = value2;
		var value3 = this.start.max.y;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "start.max.y";
		_this3.value = value3;
		var value4 = this.end.min.x;
		var _this4 = flixel_util_LabelValuePair._pool.get();
		_this4.label = "end.min.x";
		_this4.value = value4;
		var value5 = this.end.min.y;
		var _this5 = flixel_util_LabelValuePair._pool.get();
		_this5.label = "end.min.y";
		_this5.value = value5;
		var value6 = this.end.max.x;
		var _this6 = flixel_util_LabelValuePair._pool.get();
		_this6.label = "end.max.x";
		_this6.value = value6;
		var value7 = this.end.max.y;
		var _this7 = flixel_util_LabelValuePair._pool.get();
		_this7.label = "end.max.y";
		_this7.value = value7;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3,_this4,_this5,_this6,_this7]);
	}
	,destroy: function() {
		this.start.min = flixel_util_FlxDestroyUtil.put(this.start.min);
		this.start.max = flixel_util_FlxDestroyUtil.put(this.start.max);
		this.end.min = flixel_util_FlxDestroyUtil.put(this.end.min);
		this.end.max = flixel_util_FlxDestroyUtil.put(this.end.max);
	}
	,__class__: flixel_util_helpers_FlxPointRangeBounds
};
var flixel_util_helpers_FlxRange = function(start,end) {
	this.active = true;
	this.start = start;
	this.end = end == null ? start : end;
};
$hxClasses["flixel.util.helpers.FlxRange"] = flixel_util_helpers_FlxRange;
flixel_util_helpers_FlxRange.__name__ = ["flixel","util","helpers","FlxRange"];
flixel_util_helpers_FlxRange.prototype = {
	start: null
	,end: null
	,active: null
	,set: function(start,end) {
		this.start = start;
		this.end = end == null ? start : end;
		return this;
	}
	,equals: function(OtherFlxRange) {
		if(this.start == OtherFlxRange.start) {
			return this.end == OtherFlxRange.end;
		} else {
			return false;
		}
	}
	,toString: function() {
		var value = this.start;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "start";
		_this.value = value;
		var value1 = this.end;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "end";
		_this1.value = value1;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1]);
	}
	,__class__: flixel_util_helpers_FlxRange
};
var flixel_util_helpers_FlxRangeBounds = function(startMin,startMax,endMin,endMax) {
	this.active = true;
	this.start = new flixel_util_helpers_FlxBounds(startMin,startMax == null ? startMin : startMax);
	this.end = new flixel_util_helpers_FlxBounds(endMin == null ? startMin : endMin,endMax == null ? this.start.max : endMax);
};
$hxClasses["flixel.util.helpers.FlxRangeBounds"] = flixel_util_helpers_FlxRangeBounds;
flixel_util_helpers_FlxRangeBounds.__name__ = ["flixel","util","helpers","FlxRangeBounds"];
flixel_util_helpers_FlxRangeBounds.prototype = {
	start: null
	,end: null
	,active: null
	,set: function(startMin,startMax,endMin,endMax) {
		this.start.min = startMin;
		this.start.max = startMax == null ? this.start.min : startMax;
		this.end.min = endMin == null ? this.start.min : endMin;
		this.end.max = endMax == null ? endMin == null ? this.start.max : this.end.min : endMax;
		return this;
	}
	,equals: function(OtherRangeBounds) {
		var _this = this.start;
		var otherBounds = OtherRangeBounds.start;
		if(_this.min == otherBounds.min && _this.max == otherBounds.max) {
			var _this1 = this.end;
			var otherBounds1 = OtherRangeBounds.end;
			if(_this1.min == otherBounds1.min) {
				return _this1.max == otherBounds1.max;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,toString: function() {
		var value = this.start.min;
		var _this = flixel_util_LabelValuePair._pool.get();
		_this.label = "start.min";
		_this.value = value;
		var value1 = this.start.min;
		var _this1 = flixel_util_LabelValuePair._pool.get();
		_this1.label = "start.max";
		_this1.value = value1;
		var value2 = this.end.min;
		var _this2 = flixel_util_LabelValuePair._pool.get();
		_this2.label = "end.min";
		_this2.value = value2;
		var value3 = this.end.max;
		var _this3 = flixel_util_LabelValuePair._pool.get();
		_this3.label = "end.max";
		_this3.value = value3;
		return flixel_util_FlxStringUtil.getDebugString([_this,_this1,_this2,_this3]);
	}
	,__class__: flixel_util_helpers_FlxRangeBounds
};
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.wrapCallSite = null;
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b = (b.b += "module ") + (m == null ? "null" : "" + m);
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b = (b.b += file == null ? "null" : "" + file) + " line ";
		b.b += line == null ? "null" : "" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b = (b.b += cname == null ? "null" : "" + cname) + ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s[2];
		b.b = (b.b += "local function #") + (n == null ? "null" : "" + n);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,__class__: haxe_IMap
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.content = null;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			var b = haxe_crypto_Base64.decode(x.data);
			return b.toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null ? _this.getReserved(s) : _this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null ? "null" : "" + v2;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i1 = val;
					this.serialize(i1);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var k = v4.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v4.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var k2 = v5.keys();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var id = Reflect.field(k3,"__id__");
					Reflect.deleteField(k3,"__id__");
					this.serialize(k3);
					k3["__id__"] = id;
					this.serialize(v5.h[k3.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var k4 = v6.keys();
				while(k4.hasNext()) {
					var k5 = k4.next();
					this.serializeString(k5);
					this.serialize(__map_reserved[k5] != null ? v6.getReserved(k5) : v6.h[k5]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i2 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					var this1 = new Array(length);
					b64 = this1;
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i3 = _g11++;
						b64[i3] = HxOverrides.cca(haxe_Serializer.BASE64,i3);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i2 < max) {
					var b1 = v7.b[i2++];
					var b2 = v7.b[i2++];
					var b3 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i2 == max) {
					var b11 = v7.b[i2++];
					var b21 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i2 == max + 1) {
					var b12 = v7.b[i2++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g[2];
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(Type.getEnumName(e));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v["length"];
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) {
				var i4 = _g12++;
				this.serialize(v[i4]);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		var _g = this.buf.charCodeAt(this.pos++);
		switch(_g) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf.charCodeAt(i1++)];
				var c2 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf.charCodeAt(i1++)];
				var c21 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.instance = null;
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_Utf8 = function(size) {
	this.__b = "";
};
$hxClasses["haxe.Utf8"] = haxe_Utf8;
haxe_Utf8.__name__ = ["haxe","Utf8"];
haxe_Utf8.compare = function(a,b) {
	if(a > b) {
		return 1;
	} else if(a == b) {
		return 0;
	} else {
		return -1;
	}
};
haxe_Utf8.prototype = {
	__b: null
	,__class__: haxe_Utf8
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = ["haxe","ds","ArraySort"];
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		while(_g1 < to) {
			var i = _g1++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) {
		return;
	}
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = ["haxe","ds","BalancedTree"];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,String) ) {
				return false;
			} else throw(e);
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = ["haxe","ds","TreeNode"];
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = ["haxe","ds","EnumValueMap"];
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_GenericCell = function(elt,next) {
	this.elt = elt;
	this.next = next;
};
$hxClasses["haxe.ds.GenericCell"] = haxe_ds_GenericCell;
haxe_ds_GenericCell.__name__ = ["haxe","ds","GenericCell"];
haxe_ds_GenericCell.prototype = {
	elt: null
	,next: null
	,__class__: haxe_ds_GenericCell
};
var haxe_ds_GenericStack = function() {
};
$hxClasses["haxe.ds.GenericStack"] = haxe_ds_GenericStack;
haxe_ds_GenericStack.__name__ = ["haxe","ds","GenericStack"];
haxe_ds_GenericStack.prototype = {
	head: null
	,__class__: haxe_ds_GenericStack
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.assignId = function(obj) {
	return obj.__id__ = ++haxe_ds_ObjectMap.count;
};
haxe_ds_ObjectMap.getId = function(obj) {
	return obj.__id__;
};
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	if(src == dest) {
		if(srcPos < destPos) {
			var i = srcPos + len;
			var j = destPos + len;
			var _g1 = 0;
			while(_g1 < len) {
				++_g1;
				--i;
				--j;
				src[j] = src[i];
			}
		} else if(srcPos > destPos) {
			var i1 = srcPos;
			var j1 = destPos;
			var _g11 = 0;
			while(_g11 < len) {
				++_g11;
				src[j1] = src[i1];
				++i1;
				++j1;
			}
		}
	} else {
		var _g12 = 0;
		while(_g12 < len) {
			var i2 = _g12++;
			dest[destPos + i2] = src[srcPos + i2];
		}
	}
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	b: null
	,getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = ["haxe","io","Input"];
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			if (eof instanceof js__$Boot_HaxeError) eof = eof.val;
			if( js_Boot.__instanceof(eof,haxe_io_Eof) ) {
			} else throw(eof);
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,readString: function(len) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.toString();
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = ["haxe","io","BytesInput"];
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = ["haxe","io","Output"];
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = ["haxe","io","BytesOutput"];
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.b.push(c);
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else if(!isFinite(v)) {
		if(v > 0) {
			i64.low = 0;
			i64.high = 2146435072;
		} else {
			i64.low = 0;
			i64.high = -1048576;
		}
	} else {
		var av = v < 0 ? -v : v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		var sig_l = sig | 0;
		var sig_h = sig / 4294967296.0 | 0;
		i64.low = sig_l;
		i64.high = (v < 0 ? -2147483648 : 0) | exp + 1023 << 20 | sig_h;
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_io_StringInput = function(s) {
	haxe_io_BytesInput.call(this,haxe_io_Bytes.ofString(s));
};
$hxClasses["haxe.io.StringInput"] = haxe_io_StringInput;
haxe_io_StringInput.__name__ = ["haxe","io","StringInput"];
haxe_io_StringInput.__super__ = haxe_io_BytesInput;
haxe_io_StringInput.prototype = $extend(haxe_io_BytesInput.prototype,{
	__class__: haxe_io_StringInput
});
var haxe_xml__$Fast_NodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeAccess"] = haxe_xml__$Fast_NodeAccess;
haxe_xml__$Fast_NodeAccess.__name__ = ["haxe","xml","_Fast","NodeAccess"];
haxe_xml__$Fast_NodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var x = this.__x.elementsNamed(name).next();
		if(x == null) {
			var xname;
			if(this.__x.nodeType == Xml.Document) {
				xname = "Document";
			} else {
				var _this = this.__x;
				if(_this.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
				}
				xname = _this.nodeName;
			}
			throw new js__$Boot_HaxeError(xname + " is missing element " + name);
		}
		return new haxe_xml_Fast(x);
	}
	,__class__: haxe_xml__$Fast_NodeAccess
};
var haxe_xml__$Fast_AttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.AttribAccess"] = haxe_xml__$Fast_AttribAccess;
haxe_xml__$Fast_AttribAccess.__name__ = ["haxe","xml","_Fast","AttribAccess"];
haxe_xml__$Fast_AttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		var v = this.__x.get(name);
		if(v == null) {
			var _this = this.__x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			throw new js__$Boot_HaxeError(_this.nodeName + " is missing attribute " + name);
		}
		return v;
	}
	,__class__: haxe_xml__$Fast_AttribAccess
};
var haxe_xml__$Fast_HasAttribAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasAttribAccess"] = haxe_xml__$Fast_HasAttribAccess;
haxe_xml__$Fast_HasAttribAccess.__name__ = ["haxe","xml","_Fast","HasAttribAccess"];
haxe_xml__$Fast_HasAttribAccess.prototype = {
	__x: null
	,resolve: function(name) {
		if(this.__x.nodeType == Xml.Document) {
			throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
		}
		return this.__x.exists(name);
	}
	,__class__: haxe_xml__$Fast_HasAttribAccess
};
var haxe_xml__$Fast_HasNodeAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.HasNodeAccess"] = haxe_xml__$Fast_HasNodeAccess;
haxe_xml__$Fast_HasNodeAccess.__name__ = ["haxe","xml","_Fast","HasNodeAccess"];
haxe_xml__$Fast_HasNodeAccess.prototype = {
	__x: null
	,resolve: function(name) {
		return this.__x.elementsNamed(name).hasNext();
	}
	,__class__: haxe_xml__$Fast_HasNodeAccess
};
var haxe_xml__$Fast_NodeListAccess = function(x) {
	this.__x = x;
};
$hxClasses["haxe.xml._Fast.NodeListAccess"] = haxe_xml__$Fast_NodeListAccess;
haxe_xml__$Fast_NodeListAccess.__name__ = ["haxe","xml","_Fast","NodeListAccess"];
haxe_xml__$Fast_NodeListAccess.prototype = {
	__x: null
	,resolve: function(name) {
		var l = new List();
		var x = this.__x.elementsNamed(name);
		while(x.hasNext()) {
			var x1 = x.next();
			l.add(new haxe_xml_Fast(x1));
		}
		return l;
	}
	,__class__: haxe_xml__$Fast_NodeListAccess
};
var haxe_xml_Fast = function(x) {
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + x.nodeType);
	}
	this.x = x;
	this.node = new haxe_xml__$Fast_NodeAccess(x);
	this.nodes = new haxe_xml__$Fast_NodeListAccess(x);
	this.att = new haxe_xml__$Fast_AttribAccess(x);
	this.has = new haxe_xml__$Fast_HasAttribAccess(x);
	this.hasNode = new haxe_xml__$Fast_HasNodeAccess(x);
};
$hxClasses["haxe.xml.Fast"] = haxe_xml_Fast;
haxe_xml_Fast.__name__ = ["haxe","xml","Fast"];
haxe_xml_Fast.prototype = {
	x: null
	,node: null
	,nodes: null
	,att: null
	,has: null
	,hasNode: null
	,get_name: function() {
		if(this.x.nodeType == Xml.Document) {
			return "Document";
		} else {
			var _this = this.x;
			if(_this.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _this.nodeType);
			}
			return _this.nodeName;
		}
	}
	,get_innerData: function() {
		var _this = this.x;
		if(_this.nodeType != Xml.Document && _this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _this.nodeType);
		}
		var it = HxOverrides.iter(_this.children);
		if(!it.hasNext()) {
			throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		}
		var v = it.next();
		if(it.hasNext()) {
			var n = it.next();
			var tmp;
			if(v.nodeType == Xml.PCData && n.nodeType == Xml.CData) {
				if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
				}
				tmp = StringTools.trim(v.nodeValue) == "";
			} else {
				tmp = false;
			}
			if(tmp) {
				if(!it.hasNext()) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					}
					return n.nodeValue;
				}
				var n2 = it.next();
				var tmp1;
				var tmp2;
				if(n2.nodeType == Xml.PCData) {
					if(n2.nodeType == Xml.Document || n2.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n2.nodeType);
					}
					tmp2 = StringTools.trim(n2.nodeValue) == "";
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = !it.hasNext();
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					if(n.nodeType == Xml.Document || n.nodeType == Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, unexpected " + n.nodeType);
					}
					return n.nodeValue;
				}
			}
			throw new js__$Boot_HaxeError(this.get_name() + " does not only have data");
		}
		if(v.nodeType != Xml.PCData && v.nodeType != Xml.CData) {
			throw new js__$Boot_HaxeError(this.get_name() + " does not have data");
		}
		if(v.nodeType == Xml.Document || v.nodeType == Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, unexpected " + v.nodeType);
		}
		return v.nodeValue;
	}
	,get_elements: function() {
		var it = this.x.elements();
		return { hasNext : $bind(it,it.hasNext), next : function() {
			var x = it.next();
			if(x == null) {
				return null;
			}
			return new haxe_xml_Fast(x);
		}};
	}
	,__class__: haxe_xml_Fast
	,__properties__: {get_elements:"get_elements",get_innerData:"get_innerData",get_name:"get_name"}
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var i = _g1++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCharCode(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var hscript_Const = $hxClasses["hscript.Const"] = { __ename__ : ["hscript","Const"], __constructs__ : ["CInt","CFloat","CString"] };
hscript_Const.CInt = function(v) { var $x = ["CInt",0,v]; $x.__enum__ = hscript_Const; $x.toString = $estr; return $x; };
hscript_Const.CFloat = function(f) { var $x = ["CFloat",1,f]; $x.__enum__ = hscript_Const; $x.toString = $estr; return $x; };
hscript_Const.CString = function(s) { var $x = ["CString",2,s]; $x.__enum__ = hscript_Const; $x.toString = $estr; return $x; };
hscript_Const.__empty_constructs__ = [];
var hscript_Expr = $hxClasses["hscript.Expr"] = { __ename__ : ["hscript","Expr"], __constructs__ : ["EConst","EIdent","EVar","EParent","EBlock","EField","EBinop","EUnop","ECall","EIf","EWhile","EFor","EBreak","EContinue","EFunction","EReturn","EArray","EArrayDecl","ENew","EThrow","ETry","EObject","ETernary","ESwitch"] };
hscript_Expr.EConst = function(c) { var $x = ["EConst",0,c]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EIdent = function(v) { var $x = ["EIdent",1,v]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EVar = function(n,t,e) { var $x = ["EVar",2,n,t,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EParent = function(e) { var $x = ["EParent",3,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EBlock = function(e) { var $x = ["EBlock",4,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EField = function(e,f) { var $x = ["EField",5,e,f]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EBinop = function(op,e1,e2) { var $x = ["EBinop",6,op,e1,e2]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EUnop = function(op,prefix,e) { var $x = ["EUnop",7,op,prefix,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ECall = function(e,params) { var $x = ["ECall",8,e,params]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EIf = function(cond,e1,e2) { var $x = ["EIf",9,cond,e1,e2]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EWhile = function(cond,e) { var $x = ["EWhile",10,cond,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EFor = function(v,it,e) { var $x = ["EFor",11,v,it,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EBreak = ["EBreak",12];
hscript_Expr.EBreak.toString = $estr;
hscript_Expr.EBreak.__enum__ = hscript_Expr;
hscript_Expr.EContinue = ["EContinue",13];
hscript_Expr.EContinue.toString = $estr;
hscript_Expr.EContinue.__enum__ = hscript_Expr;
hscript_Expr.EFunction = function(args,e,name,ret) { var $x = ["EFunction",14,args,e,name,ret]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EReturn = function(e) { var $x = ["EReturn",15,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EArray = function(e,index) { var $x = ["EArray",16,e,index]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EArrayDecl = function(e) { var $x = ["EArrayDecl",17,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ENew = function(cl,params) { var $x = ["ENew",18,cl,params]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EThrow = function(e) { var $x = ["EThrow",19,e]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ETry = function(e,v,t,ecatch) { var $x = ["ETry",20,e,v,t,ecatch]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.EObject = function(fl) { var $x = ["EObject",21,fl]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ETernary = function(cond,e1,e2) { var $x = ["ETernary",22,cond,e1,e2]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.ESwitch = function(e,cases,defaultExpr) { var $x = ["ESwitch",23,e,cases,defaultExpr]; $x.__enum__ = hscript_Expr; $x.toString = $estr; return $x; };
hscript_Expr.__empty_constructs__ = [hscript_Expr.EBreak,hscript_Expr.EContinue];
var hscript_CType = $hxClasses["hscript.CType"] = { __ename__ : ["hscript","CType"], __constructs__ : ["CTPath","CTFun","CTAnon","CTParent"] };
hscript_CType.CTPath = function(path,params) { var $x = ["CTPath",0,path,params]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTFun = function(args,ret) { var $x = ["CTFun",1,args,ret]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTAnon = function(fields) { var $x = ["CTAnon",2,fields]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.CTParent = function(t) { var $x = ["CTParent",3,t]; $x.__enum__ = hscript_CType; $x.toString = $estr; return $x; };
hscript_CType.__empty_constructs__ = [];
var hscript_Error = $hxClasses["hscript.Error"] = { __ename__ : ["hscript","Error"], __constructs__ : ["EInvalidChar","EUnexpected","EUnterminatedString","EUnterminatedComment","EUnknownVariable","EInvalidIterator","EInvalidOp","EInvalidAccess"] };
hscript_Error.EInvalidChar = function(c) { var $x = ["EInvalidChar",0,c]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EUnexpected = function(s) { var $x = ["EUnexpected",1,s]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EUnterminatedString = ["EUnterminatedString",2];
hscript_Error.EUnterminatedString.toString = $estr;
hscript_Error.EUnterminatedString.__enum__ = hscript_Error;
hscript_Error.EUnterminatedComment = ["EUnterminatedComment",3];
hscript_Error.EUnterminatedComment.toString = $estr;
hscript_Error.EUnterminatedComment.__enum__ = hscript_Error;
hscript_Error.EUnknownVariable = function(v) { var $x = ["EUnknownVariable",4,v]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EInvalidIterator = function(v) { var $x = ["EInvalidIterator",5,v]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EInvalidOp = function(op) { var $x = ["EInvalidOp",6,op]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.EInvalidAccess = function(f) { var $x = ["EInvalidAccess",7,f]; $x.__enum__ = hscript_Error; $x.toString = $estr; return $x; };
hscript_Error.__empty_constructs__ = [hscript_Error.EUnterminatedString,hscript_Error.EUnterminatedComment];
var hscript__$Interp_Stop = $hxClasses["hscript._Interp.Stop"] = { __ename__ : ["hscript","_Interp","Stop"], __constructs__ : ["SBreak","SContinue","SReturn"] };
hscript__$Interp_Stop.SBreak = ["SBreak",0];
hscript__$Interp_Stop.SBreak.toString = $estr;
hscript__$Interp_Stop.SBreak.__enum__ = hscript__$Interp_Stop;
hscript__$Interp_Stop.SContinue = ["SContinue",1];
hscript__$Interp_Stop.SContinue.toString = $estr;
hscript__$Interp_Stop.SContinue.__enum__ = hscript__$Interp_Stop;
hscript__$Interp_Stop.SReturn = function(v) { var $x = ["SReturn",2,v]; $x.__enum__ = hscript__$Interp_Stop; $x.toString = $estr; return $x; };
hscript__$Interp_Stop.__empty_constructs__ = [hscript__$Interp_Stop.SBreak,hscript__$Interp_Stop.SContinue];
var hscript_Token = $hxClasses["hscript.Token"] = { __ename__ : ["hscript","Token"], __constructs__ : ["TEof","TConst","TId","TOp","TPOpen","TPClose","TBrOpen","TBrClose","TDot","TComma","TSemicolon","TBkOpen","TBkClose","TQuestion","TDoubleDot"] };
hscript_Token.TEof = ["TEof",0];
hscript_Token.TEof.toString = $estr;
hscript_Token.TEof.__enum__ = hscript_Token;
hscript_Token.TConst = function(c) { var $x = ["TConst",1,c]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TId = function(s) { var $x = ["TId",2,s]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TOp = function(s) { var $x = ["TOp",3,s]; $x.__enum__ = hscript_Token; $x.toString = $estr; return $x; };
hscript_Token.TPOpen = ["TPOpen",4];
hscript_Token.TPOpen.toString = $estr;
hscript_Token.TPOpen.__enum__ = hscript_Token;
hscript_Token.TPClose = ["TPClose",5];
hscript_Token.TPClose.toString = $estr;
hscript_Token.TPClose.__enum__ = hscript_Token;
hscript_Token.TBrOpen = ["TBrOpen",6];
hscript_Token.TBrOpen.toString = $estr;
hscript_Token.TBrOpen.__enum__ = hscript_Token;
hscript_Token.TBrClose = ["TBrClose",7];
hscript_Token.TBrClose.toString = $estr;
hscript_Token.TBrClose.__enum__ = hscript_Token;
hscript_Token.TDot = ["TDot",8];
hscript_Token.TDot.toString = $estr;
hscript_Token.TDot.__enum__ = hscript_Token;
hscript_Token.TComma = ["TComma",9];
hscript_Token.TComma.toString = $estr;
hscript_Token.TComma.__enum__ = hscript_Token;
hscript_Token.TSemicolon = ["TSemicolon",10];
hscript_Token.TSemicolon.toString = $estr;
hscript_Token.TSemicolon.__enum__ = hscript_Token;
hscript_Token.TBkOpen = ["TBkOpen",11];
hscript_Token.TBkOpen.toString = $estr;
hscript_Token.TBkOpen.__enum__ = hscript_Token;
hscript_Token.TBkClose = ["TBkClose",12];
hscript_Token.TBkClose.toString = $estr;
hscript_Token.TBkClose.__enum__ = hscript_Token;
hscript_Token.TQuestion = ["TQuestion",13];
hscript_Token.TQuestion.toString = $estr;
hscript_Token.TQuestion.__enum__ = hscript_Token;
hscript_Token.TDoubleDot = ["TDoubleDot",14];
hscript_Token.TDoubleDot.toString = $estr;
hscript_Token.TDoubleDot.__enum__ = hscript_Token;
hscript_Token.__empty_constructs__ = [hscript_Token.TEof,hscript_Token.TPOpen,hscript_Token.TPClose,hscript_Token.TBrOpen,hscript_Token.TBrClose,hscript_Token.TDot,hscript_Token.TComma,hscript_Token.TSemicolon,hscript_Token.TBkOpen,hscript_Token.TBkClose,hscript_Token.TQuestion,hscript_Token.TDoubleDot];
var hscript_Parser = function() {
	this.uid = 0;
	this.line = 1;
	this.opChars = "+*/-=!><&|^%~";
	this.identChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_";
	var priorities = [["%"],["*","/"],["+","-"],["<<",">>",">>>"],["|","&","^"],["==","!=",">","<",">=","<="],["..."],["&&"],["||"],["=","+=","-=","*=","/=","%=","<<=",">>=",">>>=","|=","&=","^="]];
	this.opPriority = new haxe_ds_StringMap();
	this.opRightAssoc = new haxe_ds_StringMap();
	this.unops = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = priorities.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = 0;
		var _g3 = priorities[i];
		while(_g2 < _g3.length) {
			var x = _g3[_g2];
			++_g2;
			var _this = this.opPriority;
			if(__map_reserved[x] != null) {
				_this.setReserved(x,i);
			} else {
				_this.h[x] = i;
			}
			if(i == 9) {
				var _this1 = this.opRightAssoc;
				if(__map_reserved[x] != null) {
					_this1.setReserved(x,true);
				} else {
					_this1.h[x] = true;
				}
			}
		}
	}
	var _g4 = 0;
	var _g11 = ["!","++","--","-","~"];
	while(_g4 < _g11.length) {
		var x1 = _g11[_g4];
		++_g4;
		var _this2 = this.unops;
		var value = x1 == "++" || x1 == "--";
		if(__map_reserved[x1] != null) {
			_this2.setReserved(x1,value);
		} else {
			_this2.h[x1] = value;
		}
	}
};
$hxClasses["hscript.Parser"] = hscript_Parser;
hscript_Parser.__name__ = ["hscript","Parser"];
hscript_Parser.prototype = {
	line: null
	,opChars: null
	,identChars: null
	,opPriority: null
	,opRightAssoc: null
	,unops: null
	,allowJSON: null
	,allowTypes: null
	,input: null
	,'char': null
	,ops: null
	,idents: null
	,uid: null
	,tokens: null
	,invalidChar: function(c) {
		throw new js__$Boot_HaxeError(hscript_Error.EInvalidChar(c));
	}
	,parseString: function(s) {
		this.line = 1;
		this.uid = 0;
		return this.parse(new haxe_io_StringInput(s));
	}
	,parse: function(s) {
		this.tokens = new haxe_ds_GenericStack();
		this["char"] = -1;
		this.input = s;
		this.ops = [];
		this.idents = [];
		var _g1 = 0;
		var _g = this.opChars.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.ops[HxOverrides.cca(this.opChars,i)] = true;
		}
		var _g11 = 0;
		var _g2 = this.identChars.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this.idents[HxOverrides.cca(this.identChars,i1)] = true;
		}
		var a = [];
		while(true) {
			var tk = this.token();
			if(tk == hscript_Token.TEof) {
				break;
			}
			var _this = this.tokens;
			_this.head = new haxe_ds_GenericCell(tk,_this.head);
			a.push(this.parseFullExpr());
		}
		if(a.length == 1) {
			return a[0];
		} else {
			return hscript_Expr.EBlock(a);
		}
	}
	,unexpected: function(tk) {
		throw new js__$Boot_HaxeError(hscript_Error.EUnexpected(this.tokenString(tk)));
	}
	,isBlock: function(e) {
		switch(e[1]) {
		case 2:
			var e1 = e[4];
			if(e1 != null) {
				return this.isBlock(e1);
			} else {
				return false;
			}
			break;
		case 6:
			var e2 = e[4];
			return this.isBlock(e2);
		case 7:
			var e3 = e[4];
			var prefix = e[3];
			if(!prefix) {
				return this.isBlock(e3);
			} else {
				return false;
			}
			break;
		case 9:
			var e21 = e[4];
			var e11 = e[3];
			if(e21 != null) {
				return this.isBlock(e21);
			} else {
				return this.isBlock(e11);
			}
			break;
		case 10:
			var e4 = e[3];
			return this.isBlock(e4);
		case 11:
			var e5 = e[4];
			return this.isBlock(e5);
		case 14:
			var e6 = e[3];
			return this.isBlock(e6);
		case 15:
			var e7 = e[2];
			if(e7 != null) {
				return this.isBlock(e7);
			} else {
				return false;
			}
			break;
		case 20:
			var e8 = e[5];
			return this.isBlock(e8);
		case 4:case 21:case 23:
			return true;
		default:
			return false;
		}
	}
	,parseFullExpr: function() {
		var e = this.parseExpr();
		var tk = this.token();
		if(tk != hscript_Token.TSemicolon && tk != hscript_Token.TEof) {
			if(this.isBlock(e)) {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
			} else {
				this.unexpected(tk);
			}
		}
		return e;
	}
	,parseObject: function(p1) {
		var fl = [];
		try {
			while(true) {
				var tk = this.token();
				var id = null;
				switch(tk[1]) {
				case 1:
					var c = tk[2];
					if(!this.allowJSON) {
						this.unexpected(tk);
					}
					if(c[1] == 2) {
						var s = c[2];
						id = s;
					} else {
						this.unexpected(tk);
					}
					break;
				case 2:
					var i = tk[2];
					id = i;
					break;
				case 7:
					throw "__break__";
					break;
				default:
					this.unexpected(tk);
				}
				var t = this.token();
				if(t != hscript_Token.TDoubleDot) {
					this.unexpected(t);
				}
				fl.push({ name : id, e : this.parseExpr()});
				tk = this.token();
				switch(tk[1]) {
				case 7:
					throw "__break__";
					break;
				case 9:
					break;
				default:
					this.unexpected(tk);
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
		return this.parseExprNext(hscript_Expr.EObject(fl));
	}
	,parseExpr: function() {
		var tk = this.token();
		switch(tk[1]) {
		case 1:
			var c = tk[2];
			return this.parseExprNext(hscript_Expr.EConst(c));
		case 2:
			var id = tk[2];
			var e = this.parseStructure(id);
			if(e == null) {
				e = hscript_Expr.EIdent(id);
			}
			return this.parseExprNext(e);
		case 3:
			var op = tk[2];
			if(this.unops.exists(op)) {
				return this.makeUnop(op,this.parseExpr());
			}
			return this.unexpected(tk);
		case 4:
			var e1 = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TPClose) {
				this.unexpected(t);
			}
			return this.parseExprNext(hscript_Expr.EParent(e1));
		case 6:
			tk = this.token();
			switch(tk[1]) {
			case 1:
				var c1 = tk[2];
				if(this.allowJSON) {
					if(c1[1] == 2) {
						var tk2 = this.token();
						var _this = this.tokens;
						_this.head = new haxe_ds_GenericCell(tk2,_this.head);
						var _this1 = this.tokens;
						_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
						if(tk2[1] == 14) {
							return this.parseExprNext(this.parseObject(0));
						}
					} else {
						var _this2 = this.tokens;
						_this2.head = new haxe_ds_GenericCell(tk,_this2.head);
					}
				} else {
					var _this3 = this.tokens;
					_this3.head = new haxe_ds_GenericCell(tk,_this3.head);
				}
				break;
			case 2:
				var tk21 = this.token();
				var _this4 = this.tokens;
				_this4.head = new haxe_ds_GenericCell(tk21,_this4.head);
				var _this5 = this.tokens;
				_this5.head = new haxe_ds_GenericCell(tk,_this5.head);
				if(tk21[1] == 14) {
					return this.parseExprNext(this.parseObject(0));
				}
				break;
			case 7:
				return this.parseExprNext(hscript_Expr.EObject([]));
			default:
				var _this6 = this.tokens;
				_this6.head = new haxe_ds_GenericCell(tk,_this6.head);
			}
			var a = [];
			while(true) {
				a.push(this.parseFullExpr());
				tk = this.token();
				if(tk == hscript_Token.TBrClose) {
					break;
				}
				var _this7 = this.tokens;
				_this7.head = new haxe_ds_GenericCell(tk,_this7.head);
			}
			return hscript_Expr.EBlock(a);
		case 11:
			var a1 = [];
			tk = this.token();
			while(tk != hscript_Token.TBkClose) {
				var _this8 = this.tokens;
				_this8.head = new haxe_ds_GenericCell(tk,_this8.head);
				a1.push(this.parseExpr());
				tk = this.token();
				if(tk == hscript_Token.TComma) {
					tk = this.token();
				}
			}
			if(a1.length == 1) {
				var _g = a1[0];
				switch(_g[1]) {
				case 10:case 11:
					var tmp = "__a_" + this.uid++;
					return this.parseExprNext(hscript_Expr.EBlock([hscript_Expr.EVar(tmp,null,hscript_Expr.EArrayDecl([])),this.mapCompr(tmp,a1[0]),hscript_Expr.EIdent(tmp)]));
				default:
				}
			}
			return this.parseExprNext(hscript_Expr.EArrayDecl(a1));
		default:
			return this.unexpected(tk);
		}
	}
	,mapCompr: function(tmp,e) {
		var edef;
		switch(e[1]) {
		case 3:
			var e2 = e[2];
			edef = hscript_Expr.EParent(this.mapCompr(tmp,e2));
			break;
		case 4:
			if(e[2].length == 1) {
				var e1 = e[2][0];
				edef = hscript_Expr.EBlock([this.mapCompr(tmp,e1)]);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 9:
			var e21 = e[4];
			var e11 = e[3];
			var cond = e[2];
			if(e21 == null) {
				edef = hscript_Expr.EIf(cond,this.mapCompr(tmp,e11),null);
			} else {
				edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
			}
			break;
		case 10:
			var e22 = e[3];
			var cond1 = e[2];
			edef = hscript_Expr.EWhile(cond1,this.mapCompr(tmp,e22));
			break;
		case 11:
			var e23 = e[4];
			var it = e[3];
			var v = e[2];
			edef = hscript_Expr.EFor(v,it,this.mapCompr(tmp,e23));
			break;
		default:
			edef = hscript_Expr.ECall(hscript_Expr.EField(hscript_Expr.EIdent(tmp),"push"),[e]);
		}
		return edef;
	}
	,makeUnop: function(op,e) {
		switch(e[1]) {
		case 6:
			var e2 = e[4];
			var e1 = e[3];
			var bop = e[2];
			return hscript_Expr.EBinop(bop,this.makeUnop(op,e1),e2);
		case 22:
			var e3 = e[4];
			var e21 = e[3];
			var e11 = e[2];
			return hscript_Expr.ETernary(this.makeUnop(op,e11),e21,e3);
		default:
			return hscript_Expr.EUnop(op,true,e);
		}
	}
	,makeBinop: function(op,e1,e) {
		switch(e[1]) {
		case 6:
			var e3 = e[4];
			var e2 = e[3];
			var op2 = e[2];
			if(this.opPriority.get(op) <= this.opPriority.get(op2) && !this.opRightAssoc.exists(op)) {
				return hscript_Expr.EBinop(op2,this.makeBinop(op,e1,e2),e3);
			} else {
				return hscript_Expr.EBinop(op,e1,e);
			}
			break;
		case 22:
			var e4 = e[4];
			var e31 = e[3];
			var e21 = e[2];
			if(this.opRightAssoc.exists(op)) {
				return hscript_Expr.EBinop(op,e1,e);
			} else {
				return hscript_Expr.ETernary(this.makeBinop(op,e1,e21),e31,e4);
			}
			break;
		default:
			return hscript_Expr.EBinop(op,e1,e);
		}
	}
	,parseStructure: function(id) {
		switch(id) {
		case "break":
			return hscript_Expr.EBreak;
		case "continue":
			return hscript_Expr.EContinue;
		case "else":
			return this.unexpected(hscript_Token.TId(id));
		case "for":
			var t = this.token();
			if(t != hscript_Token.TPOpen) {
				this.unexpected(t);
			}
			var tk = this.token();
			var vname = null;
			if(tk[1] == 2) {
				var id1 = tk[2];
				vname = id1;
			} else {
				this.unexpected(tk);
			}
			tk = this.token();
			if(!Type.enumEq(tk,hscript_Token.TId("in"))) {
				this.unexpected(tk);
			}
			var eiter = this.parseExpr();
			var t1 = this.token();
			if(t1 != hscript_Token.TPClose) {
				this.unexpected(t1);
			}
			var e = this.parseExpr();
			return hscript_Expr.EFor(vname,eiter,e);
		case "function":
			var tk1 = this.token();
			var name = null;
			if(tk1[1] == 2) {
				var id2 = tk1[2];
				name = id2;
			} else {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk1,_this.head);
			}
			var t2 = this.token();
			if(t2 != hscript_Token.TPOpen) {
				this.unexpected(t2);
			}
			var args = [];
			tk1 = this.token();
			if(tk1 != hscript_Token.TPClose) {
				var done = false;
				while(!done) {
					var name1 = null;
					var opt = false;
					if(tk1[1] == 13) {
						opt = true;
						tk1 = this.token();
					}
					if(tk1[1] == 2) {
						var id3 = tk1[2];
						name1 = id3;
					} else {
						this.unexpected(tk1);
					}
					tk1 = this.token();
					var arg = { name : name1};
					args.push(arg);
					if(opt) {
						arg.opt = true;
					}
					if(tk1 == hscript_Token.TDoubleDot && this.allowTypes) {
						arg.t = this.parseType();
						tk1 = this.token();
					}
					switch(tk1[1]) {
					case 5:
						done = true;
						break;
					case 9:
						tk1 = this.token();
						break;
					default:
						this.unexpected(tk1);
					}
				}
			}
			var ret = null;
			if(this.allowTypes) {
				tk1 = this.token();
				if(tk1 != hscript_Token.TDoubleDot) {
					var _this1 = this.tokens;
					_this1.head = new haxe_ds_GenericCell(tk1,_this1.head);
				} else {
					ret = this.parseType();
				}
			}
			var body = this.parseExpr();
			return hscript_Expr.EFunction(args,body,name,ret);
		case "if":
			var t3 = this.token();
			if(t3 != hscript_Token.TPOpen) {
				this.unexpected(t3);
			}
			var cond = this.parseExpr();
			var t4 = this.token();
			if(t4 != hscript_Token.TPClose) {
				this.unexpected(t4);
			}
			var e1 = this.parseExpr();
			var e2 = null;
			var semic = false;
			var tk2 = this.token();
			if(tk2 == hscript_Token.TSemicolon) {
				semic = true;
				tk2 = this.token();
			}
			if(Type.enumEq(tk2,hscript_Token.TId("else"))) {
				e2 = this.parseExpr();
			} else {
				var _this2 = this.tokens;
				_this2.head = new haxe_ds_GenericCell(tk2,_this2.head);
				if(semic) {
					var _this3 = this.tokens;
					_this3.head = new haxe_ds_GenericCell(hscript_Token.TSemicolon,_this3.head);
				}
			}
			return hscript_Expr.EIf(cond,e1,e2);
		case "new":
			var a = [];
			var tk3 = this.token();
			if(tk3[1] == 2) {
				var id4 = tk3[2];
				a.push(id4);
			} else {
				this.unexpected(tk3);
			}
			var next = true;
			while(next) {
				tk3 = this.token();
				switch(tk3[1]) {
				case 4:
					next = false;
					break;
				case 8:
					tk3 = this.token();
					if(tk3[1] == 2) {
						var id5 = tk3[2];
						a.push(id5);
					} else {
						this.unexpected(tk3);
					}
					break;
				default:
					this.unexpected(tk3);
				}
			}
			var args1 = this.parseExprList(hscript_Token.TPClose);
			return hscript_Expr.ENew(a.join("."),args1);
		case "return":
			var tk4 = this.token();
			var _this4 = this.tokens;
			_this4.head = new haxe_ds_GenericCell(tk4,_this4.head);
			var e3 = tk4 == hscript_Token.TSemicolon ? null : this.parseExpr();
			return hscript_Expr.EReturn(e3);
		case "switch":
			var e4 = this.parseExpr();
			var def = null;
			var cases = [];
			var t5 = this.token();
			if(t5 != hscript_Token.TBrOpen) {
				this.unexpected(t5);
			}
			try {
				while(true) {
					var tk5 = this.token();
					switch(tk5[1]) {
					case 2:
						switch(tk5[2]) {
						case "case":
							var c = { values : [], expr : null};
							cases.push(c);
							try {
								while(true) {
									var e5 = this.parseExpr();
									c.values.push(e5);
									tk5 = this.token();
									switch(tk5[1]) {
									case 9:
										break;
									case 14:
										throw "__break__";
										break;
									default:
										this.unexpected(tk5);
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							var exprs = [];
							try {
								while(true) {
									tk5 = this.token();
									var _this5 = this.tokens;
									_this5.head = new haxe_ds_GenericCell(tk5,_this5.head);
									switch(tk5[1]) {
									case 2:
										switch(tk5[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											exprs.push(this.parseFullExpr());
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										exprs.push(this.parseFullExpr());
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							c.expr = exprs.length == 1 ? exprs[0] : exprs.length == 0 ? hscript_Expr.EBlock([]) : hscript_Expr.EBlock(exprs);
							break;
						case "default":
							if(def != null) {
								this.unexpected(tk5);
							}
							var t6 = this.token();
							if(t6 != hscript_Token.TDoubleDot) {
								this.unexpected(t6);
							}
							var exprs1 = [];
							try {
								while(true) {
									tk5 = this.token();
									var _this6 = this.tokens;
									_this6.head = new haxe_ds_GenericCell(tk5,_this6.head);
									switch(tk5[1]) {
									case 2:
										switch(tk5[2]) {
										case "case":case "default":
											throw "__break__";
											break;
										default:
											exprs1.push(this.parseFullExpr());
										}
										break;
									case 7:
										throw "__break__";
										break;
									default:
										exprs1.push(this.parseFullExpr());
									}
								}
							} catch( e ) { if( e != "__break__" ) throw e; }
							if(exprs1.length == 1) {
								def = exprs1[0];
							} else if(exprs1.length == 0) {
								def = hscript_Expr.EBlock([]);
							} else {
								def = hscript_Expr.EBlock(exprs1);
							}
							break;
						default:
							this.unexpected(tk5);
						}
						break;
					case 7:
						throw "__break__";
						break;
					default:
						this.unexpected(tk5);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return hscript_Expr.ESwitch(e4,cases,def);
		case "throw":
			var e6 = this.parseExpr();
			return hscript_Expr.EThrow(e6);
		case "try":
			var e7 = this.parseExpr();
			var tk6 = this.token();
			if(!Type.enumEq(tk6,hscript_Token.TId("catch"))) {
				this.unexpected(tk6);
			}
			var t7 = this.token();
			if(t7 != hscript_Token.TPOpen) {
				this.unexpected(t7);
			}
			tk6 = this.token();
			var vname1;
			if(tk6[1] == 2) {
				var id6 = tk6[2];
				vname1 = id6;
			} else {
				vname1 = this.unexpected(tk6);
			}
			var t8 = this.token();
			if(t8 != hscript_Token.TDoubleDot) {
				this.unexpected(t8);
			}
			var t9 = null;
			if(this.allowTypes) {
				t9 = this.parseType();
			} else {
				tk6 = this.token();
				if(!Type.enumEq(tk6,hscript_Token.TId("Dynamic"))) {
					this.unexpected(tk6);
				}
			}
			var t10 = this.token();
			if(t10 != hscript_Token.TPClose) {
				this.unexpected(t10);
			}
			var ec = this.parseExpr();
			return hscript_Expr.ETry(e7,vname1,t9,ec);
		case "var":
			var tk7 = this.token();
			var ident = null;
			if(tk7[1] == 2) {
				var id7 = tk7[2];
				ident = id7;
			} else {
				this.unexpected(tk7);
			}
			tk7 = this.token();
			var t11 = null;
			if(tk7 == hscript_Token.TDoubleDot && this.allowTypes) {
				t11 = this.parseType();
				tk7 = this.token();
			}
			var e8 = null;
			if(Type.enumEq(tk7,hscript_Token.TOp("="))) {
				e8 = this.parseExpr();
			} else {
				var _this7 = this.tokens;
				_this7.head = new haxe_ds_GenericCell(tk7,_this7.head);
			}
			return hscript_Expr.EVar(ident,t11,e8);
		case "while":
			var econd = this.parseExpr();
			var e9 = this.parseExpr();
			return hscript_Expr.EWhile(econd,e9);
		default:
			return null;
		}
	}
	,parseExprNext: function(e1) {
		var tk = this.token();
		switch(tk[1]) {
		case 3:
			var op = tk[2];
			if(this.unops.get(op)) {
				if(this.isBlock(e1) || e1[1] == 3) {
					var _this = this.tokens;
					_this.head = new haxe_ds_GenericCell(tk,_this.head);
					return e1;
				}
				return this.parseExprNext(hscript_Expr.EUnop(op,false,e1));
			}
			return this.makeBinop(op,e1,this.parseExpr());
		case 4:
			return this.parseExprNext(hscript_Expr.ECall(e1,this.parseExprList(hscript_Token.TPClose)));
		case 8:
			tk = this.token();
			var field = null;
			if(tk[1] == 2) {
				var id = tk[2];
				field = id;
			} else {
				this.unexpected(tk);
			}
			return this.parseExprNext(hscript_Expr.EField(e1,field));
		case 11:
			var e2 = this.parseExpr();
			var t = this.token();
			if(t != hscript_Token.TBkClose) {
				this.unexpected(t);
			}
			return this.parseExprNext(hscript_Expr.EArray(e1,e2));
		case 13:
			var e21 = this.parseExpr();
			var t1 = this.token();
			if(t1 != hscript_Token.TDoubleDot) {
				this.unexpected(t1);
			}
			var e3 = this.parseExpr();
			return hscript_Expr.ETernary(e1,e21,e3);
		default:
			var _this1 = this.tokens;
			_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
			return e1;
		}
	}
	,parseType: function() {
		var t = this.token();
		switch(t[1]) {
		case 2:
			var v = t[2];
			var path = [v];
			while(true) {
				t = this.token();
				if(t != hscript_Token.TDot) {
					break;
				}
				t = this.token();
				if(t[1] == 2) {
					var v1 = t[2];
					path.push(v1);
				} else {
					this.unexpected(t);
				}
			}
			var params = null;
			if(t[1] == 3) {
				var op = t[2];
				if(op == "<") {
					params = [];
					try {
						while(true) {
							params.push(this.parseType());
							t = this.token();
							switch(t[1]) {
							case 3:
								var op1 = t[2];
								if(op1 == ">") {
									throw "__break__";
								}
								if(HxOverrides.cca(op1,0) == 62) {
									var _this = this.tokens;
									_this.head = new haxe_ds_GenericCell(hscript_Token.TOp(HxOverrides.substr(op1,1,null)),_this.head);
									throw "__break__";
								}
								break;
							case 9:
								continue;
								break;
							default:
							}
							this.unexpected(t);
						}
					} catch( e ) { if( e != "__break__" ) throw e; }
				} else {
					var _this1 = this.tokens;
					_this1.head = new haxe_ds_GenericCell(t,_this1.head);
				}
			} else {
				var _this2 = this.tokens;
				_this2.head = new haxe_ds_GenericCell(t,_this2.head);
			}
			return this.parseTypeNext(hscript_CType.CTPath(path,params));
		case 4:
			var t1 = this.parseType();
			var t2 = this.token();
			if(t2 != hscript_Token.TPClose) {
				this.unexpected(t2);
			}
			return this.parseTypeNext(hscript_CType.CTParent(t1));
		case 6:
			var fields = [];
			try {
				while(true) {
					t = this.token();
					switch(t[1]) {
					case 2:
						var name = t[2];
						var t3 = this.token();
						if(t3 != hscript_Token.TDoubleDot) {
							this.unexpected(t3);
						}
						fields.push({ name : name, t : this.parseType()});
						t = this.token();
						switch(t[1]) {
						case 7:
							throw "__break__";
							break;
						case 9:
							break;
						default:
							this.unexpected(t);
						}
						break;
					case 7:
						throw "__break__";
						break;
					default:
						this.unexpected(t);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			return this.parseTypeNext(hscript_CType.CTAnon(fields));
		default:
			return this.unexpected(t);
		}
	}
	,parseTypeNext: function(t) {
		var tk = this.token();
		if(tk[1] == 3) {
			var op = tk[2];
			if(op != "->") {
				var _this = this.tokens;
				_this.head = new haxe_ds_GenericCell(tk,_this.head);
				return t;
			}
		} else {
			var _this1 = this.tokens;
			_this1.head = new haxe_ds_GenericCell(tk,_this1.head);
			return t;
		}
		var t2 = this.parseType();
		if(t2[1] == 1) {
			var args = t2[2];
			args.unshift(t);
			return t2;
		} else {
			return hscript_CType.CTFun([t],t2);
		}
	}
	,parseExprList: function(etk) {
		var args = [];
		var tk = this.token();
		if(tk == etk) {
			return args;
		}
		var _this = this.tokens;
		_this.head = new haxe_ds_GenericCell(tk,_this.head);
		while(true) {
			args.push(this.parseExpr());
			tk = this.token();
			if(tk[1] != 9) {
				if(tk == etk) {
					break;
				}
				this.unexpected(tk);
			}
		}
		return args;
	}
	,readChar: function() {
		try {
			return this.input.readByte();
		} catch( e ) {
			return 0;
		}
	}
	,readString: function(until) {
		var c = 0;
		var b = new haxe_io_BytesOutput();
		var esc = false;
		var old = this.line;
		var s = this.input;
		while(true) {
			try {
				c = s.readByte();
			} catch( e ) {
				this.line = old;
				throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
			}
			if(esc) {
				esc = false;
				switch(c) {
				case 34:case 39:case 92:
					b.writeByte(c);
					break;
				case 47:
					if(this.allowJSON) {
						b.writeByte(c);
					} else {
						this.invalidChar(c);
					}
					break;
				case 110:
					b.writeByte(10);
					break;
				case 114:
					b.writeByte(13);
					break;
				case 116:
					b.writeByte(9);
					break;
				case 117:
					if(!this.allowJSON) {
						this.invalidChar(c);
					}
					var code = null;
					try {
						code = s.readString(4);
					} catch( e1 ) {
						this.line = old;
						throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedString);
					}
					var k = 0;
					var _g = 0;
					while(_g < 4) {
						var i = _g++;
						k <<= 4;
						var $char = HxOverrides.cca(code,i);
						if($char == null) {
							this.invalidChar($char);
						} else {
							switch($char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								k += $char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								k += $char - 55;
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								k += $char - 87;
								break;
							default:
								this.invalidChar($char);
							}
						}
					}
					if(k <= 127) {
						b.writeByte(k);
					} else if(k <= 2047) {
						b.writeByte(192 | k >> 6);
						b.writeByte(128 | k & 63);
					} else {
						b.writeByte(224 | k >> 12);
						b.writeByte(128 | k >> 6 & 63);
						b.writeByte(128 | k & 63);
					}
					break;
				default:
					this.invalidChar(c);
				}
			} else if(c == 92) {
				esc = true;
			} else if(c == until) {
				break;
			} else {
				if(c == 10) {
					this.line++;
				}
				b.writeByte(c);
			}
		}
		return b.getBytes().toString();
	}
	,token: function() {
		if(this.tokens.head != null) {
			var _this = this.tokens;
			var k = _this.head;
			if(k == null) {
				return null;
			} else {
				_this.head = k.next;
				return k.elt;
			}
		}
		var $char;
		if(this["char"] < 0) {
			$char = this.readChar();
		} else {
			$char = this["char"];
			this["char"] = -1;
		}
		while(true) {
			switch($char) {
			case 0:
				return hscript_Token.TEof;
			case 10:
				this.line++;
				break;
			case 9:case 13:case 32:
				break;
			case 34:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(34)));
			case 39:
				return hscript_Token.TConst(hscript_Const.CString(this.readString(39)));
			case 40:
				return hscript_Token.TPOpen;
			case 41:
				return hscript_Token.TPClose;
			case 44:
				return hscript_Token.TComma;
			case 46:
				$char = this.readChar();
				switch($char) {
				case 46:
					$char = this.readChar();
					if($char != 46) {
						this.invalidChar($char);
					}
					return hscript_Token.TOp("...");
				case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
					var n = $char - 48;
					var exp = 1;
					while(true) {
						$char = this.readChar();
						exp *= 10;
						switch($char) {
						case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
							n = n * 10 + ($char - 48);
							break;
						default:
							this["char"] = $char;
							return hscript_Token.TConst(hscript_Const.CFloat(n / exp));
						}
					}
					break;
				default:
					this["char"] = $char;
					return hscript_Token.TDot;
				}
				break;
			case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
				var n1 = ($char - 48) * 1.0;
				var exp1 = 0.;
				while(true) {
					$char = this.readChar();
					exp1 *= 10;
					switch($char) {
					case 46:
						if(exp1 > 0) {
							if(exp1 == 10 && this.readChar() == 46) {
								var _this1 = this.tokens;
								_this1.head = new haxe_ds_GenericCell(hscript_Token.TOp("..."),_this1.head);
								var i = n1 | 0;
								return hscript_Token.TConst(i == n1 ? hscript_Const.CInt(i) : hscript_Const.CFloat(n1));
							}
							this.invalidChar($char);
						}
						exp1 = 1.;
						break;
					case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						n1 = n1 * 10 + ($char - 48);
						break;
					case 120:
						if(n1 > 0 || exp1 > 0) {
							this.invalidChar($char);
						}
						var n2 = 0;
						while(true) {
							$char = this.readChar();
							switch($char) {
							case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
								n2 = (n2 << 4) + $char - 48;
								break;
							case 65:case 66:case 67:case 68:case 69:case 70:
								n2 = (n2 << 4) + ($char - 55);
								break;
							case 97:case 98:case 99:case 100:case 101:case 102:
								n2 = (n2 << 4) + ($char - 87);
								break;
							default:
								this["char"] = $char;
								return hscript_Token.TConst(hscript_Const.CInt(n2));
							}
						}
						break;
					default:
						this["char"] = $char;
						var i1 = n1 | 0;
						return hscript_Token.TConst(exp1 > 0 ? hscript_Const.CFloat(n1 * 10 / exp1) : i1 == n1 ? hscript_Const.CInt(i1) : hscript_Const.CFloat(n1));
					}
				}
				break;
			case 58:
				return hscript_Token.TDoubleDot;
			case 59:
				return hscript_Token.TSemicolon;
			case 61:
				$char = this.readChar();
				if($char == 61) {
					return hscript_Token.TOp("==");
				}
				this["char"] = $char;
				return hscript_Token.TOp("=");
			case 63:
				return hscript_Token.TQuestion;
			case 91:
				return hscript_Token.TBkOpen;
			case 93:
				return hscript_Token.TBkClose;
			case 123:
				return hscript_Token.TBrOpen;
			case 125:
				return hscript_Token.TBrClose;
			default:
				if(this.ops[$char]) {
					var op = String.fromCharCode($char);
					var prev = -1;
					while(true) {
						$char = this.readChar();
						if(!this.ops[$char] || prev == 61) {
							if(HxOverrides.cca(op,0) == 47) {
								return this.tokenComment(op,$char);
							}
							this["char"] = $char;
							return hscript_Token.TOp(op);
						}
						prev = $char;
						op += String.fromCharCode($char);
					}
				}
				if(this.idents[$char]) {
					var id = String.fromCharCode($char);
					while(true) {
						$char = this.readChar();
						if(!this.idents[$char]) {
							this["char"] = $char;
							return hscript_Token.TId(id);
						}
						id += String.fromCharCode($char);
					}
				}
				this.invalidChar($char);
			}
			$char = this.readChar();
		}
	}
	,tokenComment: function(op,$char) {
		var c = HxOverrides.cca(op,1);
		var s = this.input;
		if(c == 47) {
			try {
				while($char != 13 && $char != 10) $char = s.readByte();
				this["char"] = $char;
			} catch( e ) {
			}
			return this.token();
		}
		if(c == 42) {
			var old = this.line;
			if(op == "/**/") {
				this["char"] = $char;
				return this.token();
			}
			try {
				while(true) {
					while($char != 42) {
						if($char == 10) {
							this.line++;
						}
						$char = s.readByte();
					}
					$char = s.readByte();
					if($char == 47) {
						break;
					}
				}
			} catch( e1 ) {
				this.line = old;
				throw new js__$Boot_HaxeError(hscript_Error.EUnterminatedComment);
			}
			return this.token();
		}
		this["char"] = $char;
		return hscript_Token.TOp(op);
	}
	,constString: function(c) {
		switch(c[1]) {
		case 0:
			var v = c[2];
			if(v == null) {
				return "null";
			} else {
				return "" + v;
			}
			break;
		case 1:
			var f = c[2];
			if(f == null) {
				return "null";
			} else {
				return "" + f;
			}
			break;
		case 2:
			var s = c[2];
			return s;
		}
	}
	,tokenString: function(t) {
		switch(t[1]) {
		case 0:
			return "<eof>";
		case 1:
			var c = t[2];
			return this.constString(c);
		case 2:
			var s = t[2];
			return s;
		case 3:
			var s1 = t[2];
			return s1;
		case 4:
			return "(";
		case 5:
			return ")";
		case 6:
			return "{";
		case 7:
			return "}";
		case 8:
			return ".";
		case 9:
			return ",";
		case 10:
			return ";";
		case 11:
			return "[";
		case 12:
			return "]";
		case 13:
			return "?";
		case 14:
			return ":";
		}
	}
	,__class__: hscript_Parser
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		return null;
	}
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null ? 0 : byteOffset;
	this.length = byteLength == null ? buffer.byteLength - this.offset : byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.byteLength = this.length;
	this.byteOffset = this.offset;
	this.buffer = this.buf;
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,byteLength: null
	,byteOffset: null
	,buffer: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian ? a : b,littleEndian ? b : a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0 ? value + 128 & 255 : value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0 ? value + 65536 : value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = Math.random() * 1000000 | 0;
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.audio.remove(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.font.remove(key1);
				}
			}
			var keys2 = this.image.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.image.remove(key2);
				}
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_app_Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
lime_app_Event_$Void_$Void.__name__ = ["lime","app","Event_Void_Void"];
lime_app_Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Void_$Void
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) {
		type = "BINARY";
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.exists(symbolName,type);
	}
	return false;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	lime_Assets.initialize();
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.font;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.font;
		if(__map_reserved[id] != null) {
			return _this1.getReserved(id);
		} else {
			return _this1.h[id];
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) {
					var _this2 = lime_Assets.cache.font;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,font);
					} else {
						_this2.h[id] = font;
					}
				}
				return font;
			} else {
				haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 234, className : "lime.Assets", methodName : "getFont"});
			}
		} else {
			haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 240, className : "lime.Assets", methodName : "getFont"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 246, className : "lime.Assets", methodName : "getFont"});
	}
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	lime_Assets.initialize();
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.image;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.image;
		var image = __map_reserved[id] != null ? _this1.getReserved(id) : _this1.h[id];
		if(lime_Assets.isValidImage(image)) {
			return image;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) {
					var _this2 = lime_Assets.cache.image;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,image1);
					} else {
						_this2.h[id] = image1;
					}
				}
				return image1;
			} else {
				haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 304, className : "lime.Assets", methodName : "getImage"});
			}
		} else {
			haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 310, className : "lime.Assets", methodName : "getImage"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 316, className : "lime.Assets", methodName : "getImage"});
	}
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_Assets.libraries;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) {
			return library.getPath(symbolName);
		} else {
			haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 364, className : "lime.Assets", methodName : "getPath"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 370, className : "lime.Assets", methodName : "getPath"});
	}
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) {
				return library.getText(symbolName);
			} else {
				haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 407, className : "lime.Assets", methodName : "getText"});
			}
		} else {
			haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 413, className : "lime.Assets", methodName : "getText"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 419, className : "lime.Assets", methodName : "getText"});
	}
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var _this = lime_Assets.libraries;
	var library = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(library.hasNext()) {
		var library1 = library.next();
		var libraryItems = library1.list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_Assets.registerLibrary = function(name,library) {
	var _this = lime_Assets.libraries;
	if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
		var _this1 = lime_Assets.libraries;
		if((__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]) == library) {
			return;
		} else {
			lime_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_Assets.library_onChange);
	}
	var _this2 = lime_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var _this = lime_Assets.libraries;
	var library = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_Assets.library_onChange);
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onChange = function() {
	lime_Assets.cache.clear();
	lime_Assets.onChange.dispatch();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			
			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}
			
			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};
			
			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};
			
			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.renderers[0] != null) {
				this.parent.renderers[0].onRender.dispatch();
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.windows[0].onKeyDown.canceled) {
					event.preventDefault();
				}
			} else {
				this.parent.windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.windows[0].onKeyUp.canceled) {
					event.preventDefault();
				}
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var _g = event.type;
			switch(_g) {
			case "beforeunload":
				this.parent.windows[0].onClose.dispatch();
				break;
			case "blur":
				this.parent.windows[0].onFocusOut.dispatch();
				this.parent.windows[0].onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.windows[0].onFocusIn.dispatch();
				this.parent.windows[0].onActivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) {
					this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width,this.parent.windows[0].__height);
				}
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) {
			this.framePeriod = -1;
		} else if(value > 0) {
			this.framePeriod = 1000 / value;
		} else {
			this.framePeriod = 1000;
		}
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			data = devices[i];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(i)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = i;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) {
					var i1 = _g3++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) {
					var i2 = _g31++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[i] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(i);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(i);
					}
				}
			}
			cache = this.gameDeviceCache.h[i];
			joystick = lime_ui_Joystick.devices.h[i];
			gamepad = lime_ui_Gamepad.devices.h[i];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i3 = _g32++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i4 = _g33++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(i);
				lime_ui_Gamepad.__disconnect(i);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				var tmp;
				switch(value[1]) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				$window.backend.element.style.cursor = tmp;
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		var _g = this.parent.context;
		if(_g[1] == 0) {
			this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
			this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				webgl = WebGLDebugUtils.makeDebugContext(webgl);
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,handleEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) {
		this.element = parent.config.element;
	}
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.textInput = null;
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,currentTouches: null
	,enableTextEvents: null
	,parent: null
	,primaryTouch: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) {
			this.canvas = this.element;
		} else {
			this.canvas = window.document.createElement("canvas");
		}
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) {
					this.element.appendChild(this.canvas);
				}
			} else {
				this.element.appendChild(this.div);
			}
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) {
			haxe_Timer.delay(function() {
				lime__$backend_html5_HTML5Window.textInput.focus();
			},20);
		}
	}
	,handleGamepadEvent: function(event) {
		var _g = event.type;
		switch(_g) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				break;
			case "mouseenter":
				this.parent.onEnter.dispatch();
				break;
			case "mouseleave":
				this.parent.onLeave.dispatch();
				break;
			case "mousemove":
				this.parent.onMouseMove.dispatch(x,y);
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				break;
			default:
			}
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var scaleX = this.element.clientWidth / this.setWidth;
				var scaleY = this.element.clientHeight / this.setHeight;
				var targetRatio = Math.min(scaleX,scaleY);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			var _g2 = event.type;
			switch(_g2) {
			case "touchend":
				var touch = this.currentTouches.get(data.identifier);
				if(touch != null) {
					var cacheX = touch.x;
					var cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch);
					if(touch == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch1 = this.currentTouches.get(data.identifier);
				if(touch1 != null) {
					var cacheX1 = touch1.x;
					var cacheY1 = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX1;
					touch1.dy = touch1.y - cacheY1;
					touch1.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseMove.dispatch(x,y);
					}
				}
				break;
			case "touchstart":
				var touch2 = this.unusedTouchesPool.pop();
				if(touch2 == null) {
					touch2 = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.id = data.identifier;
					touch2.dx = 0;
					touch2.dy = 0;
					touch2.pressure = data.force;
					touch2.device = this.parent.id;
				}
				this.currentTouches.set(data.identifier,touch2);
				lime_ui_Touch.onStart.dispatch(touch2);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch2;
				}
				if(touch2 == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
				break;
			default:
			}
		}
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onJoystickAxisMove: null
	,onJoystickButtonDown: null
	,onJoystickButtonUp: null
	,onJoystickConnect: null
	,onJoystickDisconnect: null
	,onJoystickHatMove: null
	,onJoystickTrackballMove: null
	,onKeyDown: null
	,onKeyUp: null
	,onModuleExit: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onPreloadComplete: null
	,onPreloadProgress: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onTextEdit: null
	,onTextInput: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowCreate: null
	,onWindowDeactivate: null
	,onWindowDropFile: null
	,onWindowEnter: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowLeave: null
	,onWindowMove: null
	,onWindowMinimize: null
	,onWindowResize: null
	,onWindowRestore: null
	,render: null
	,update: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app_Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
		haxe_Log.trace("onGamepadConnect (module)",{ fileName : "Module.hx", lineNumber : 64, className : "lime.app.Module", methodName : "onGamepadConnect"});
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onExit.add($bind(this,this.onModuleExit));
	this.onUpdate.add($bind(this,this.update));
	lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
	lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
	lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
	lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
	lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		this.modules.push(module);
		if(this.windows.length > 0) {
			var _g = 0;
			var _g1 = this.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				module.onWindowCreate($window);
			}
			if(this.preloader == null || this.preloader.complete) {
				module.onPreloadComplete();
			}
		}
	}
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		var tmp = function() {
			f(a1);
		};
		renderer.onRender.add(tmp);
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		var tmp1 = function() {
			f1(a11);
		};
		renderer.onContextLost.add(tmp1);
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		var tmp2 = function(a2) {
			f2(a12,a2);
		};
		renderer.onContextRestored.add(tmp2);
		this.renderers.push(renderer);
	}
	,createWindow: function(window) {
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		var tmp = function() {
			f(a1);
		};
		window.onActivate.add(tmp);
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		var tmp1 = function() {
			f1(a11);
		};
		window.onClose.add(tmp1);
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		var tmp2 = function() {
			f2(a12);
		};
		window.onCreate.add(tmp2);
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		var tmp3 = function() {
			f3(a13);
		};
		window.onDeactivate.add(tmp3);
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		var tmp4 = function(a2) {
			f4(a14,a2);
		};
		window.onDropFile.add(tmp4);
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		var tmp5 = function() {
			f5(a15);
		};
		window.onEnter.add(tmp5);
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		var tmp6 = function() {
			f6(a16);
		};
		window.onFocusIn.add(tmp6);
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		var tmp7 = function() {
			f7(a17);
		};
		window.onFocusOut.add(tmp7);
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		var tmp8 = function() {
			f8(a18);
		};
		window.onFullscreen.add(tmp8);
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		var tmp9 = function(a21,a3) {
			f9(a19,a21,a3);
		};
		window.onKeyDown.add(tmp9);
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		var tmp10 = function(a22,a31) {
			f10(a110,a22,a31);
		};
		window.onKeyUp.add(tmp10);
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		var tmp11 = function() {
			f11(a111);
		};
		window.onLeave.add(tmp11);
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		var tmp12 = function() {
			f12(a112);
		};
		window.onMinimize.add(tmp12);
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		var tmp13 = function(x,y,a23) {
			f13(a113,x,y,a23);
		};
		window.onMouseDown.add(tmp13);
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		var tmp14 = function(x1,y1) {
			f14(a114,x1,y1);
		};
		window.onMouseMove.add(tmp14);
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		var tmp15 = function(x2,y2) {
			f15(a115,x2,y2);
		};
		window.onMouseMoveRelative.add(tmp15);
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		var tmp16 = function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		};
		window.onMouseUp.add(tmp16);
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		var tmp17 = function(a25,a32) {
			f17(a117,a25,a32);
		};
		window.onMouseWheel.add(tmp17);
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		var tmp18 = function(x4,y4) {
			f18(a118,x4,y4);
		};
		window.onMove.add(tmp18);
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		var tmp19 = function(a26,a33) {
			f19(a119,a26,a33);
		};
		window.onResize.add(tmp19);
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		var tmp20 = function() {
			f20(a120);
		};
		window.onRestore.add(tmp20);
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		var tmp21 = function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		};
		window.onTextEdit.add(tmp21);
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		var tmp22 = function(a28) {
			f22(a122,a28);
		};
		window.onTextInput.add(tmp22);
		if(window.renderer == null) {
			var renderer = new lime_graphics_Renderer(window);
			this.addRenderer(renderer);
		}
		window.create(this);
		this.windows.push(window);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickAxisMove(joystick,axis,value);
		}
	}
	,onJoystickButtonDown: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonDown(joystick,button);
		}
	}
	,onJoystickButtonUp: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonUp(joystick,button);
		}
	}
	,onJoystickConnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickConnect(joystick);
		}
	}
	,onJoystickDisconnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickDisconnect(joystick);
		}
	}
	,onJoystickHatMove: function(joystick,hat,position) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickHatMove(joystick,hat,position);
		}
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickTrackballMove(joystick,trackball,value);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(window,keyCode,modifier);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(window,keyCode,modifier);
		}
	}
	,onModuleExit: function(code) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onModuleExit(code);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(window,x,y,button);
		}
	}
	,onMouseMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(window,x,y);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(window,x,y);
		}
	}
	,onMouseUp: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(window,x,y,button);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(window,deltaX,deltaY);
		}
	}
	,onPreloadComplete: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadComplete();
		}
	}
	,onPreloadProgress: function(loaded,total) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadProgress(loaded,total);
		}
	}
	,onRenderContextLost: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost(renderer);
		}
	}
	,onRenderContextRestored: function(renderer,context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(renderer,context);
		}
	}
	,onTextEdit: function(window,text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(window,text,start,length);
		}
	}
	,onTextInput: function(window,text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(window,text);
		}
	}
	,onTouchEnd: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(touch);
		}
	}
	,onTouchMove: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(touch);
		}
	}
	,onTouchStart: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(touch);
		}
	}
	,onWindowActivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate(window);
		}
	}
	,onWindowClose: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose(window);
		}
		this.removeWindow(window);
	}
	,onWindowCreate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowCreate(window);
		}
	}
	,onWindowDeactivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate(window);
		}
	}
	,onWindowDropFile: function(window,file) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDropFile(window,file);
		}
	}
	,onWindowEnter: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter(window);
		}
	}
	,onWindowFocusIn: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn(window);
		}
	}
	,onWindowFocusOut: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut(window);
		}
	}
	,onWindowFullscreen: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen(window);
		}
	}
	,onWindowLeave: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave(window);
		}
	}
	,onWindowMinimize: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize(window);
		}
	}
	,onWindowMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(window,x,y);
		}
	}
	,onWindowResize: function(window,width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(window,width,height);
		}
	}
	,onWindowRestore: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore(window);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(this.windows[0] == window) {
				this.window = null;
			}
		}
	}
	,render: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.preloader != null) {
			this.preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.preloader = preloader;
		if(preloader.complete) {
			this.onPreloadComplete();
		} else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		gamepad.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		gamepad.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		gamepad.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		var tmp3 = function() {
			f3(a13);
		};
		gamepad.onDisconnect.add(tmp3);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		var tmp = function(a2,a3) {
			f(a1,a2,a3);
		};
		joystick.onAxisMove.add(tmp);
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		var tmp1 = function(a21) {
			f1(a11,a21);
		};
		joystick.onButtonDown.add(tmp1);
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		var tmp2 = function(a22) {
			f2(a12,a22);
		};
		joystick.onButtonUp.add(tmp2);
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		var tmp3 = function() {
			f3(a13);
		};
		joystick.onDisconnect.add(tmp3);
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		var tmp4 = function(a23,a31) {
			f4(a14,a23,a31);
		};
		joystick.onHatMove.add(tmp4);
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		var tmp5 = function(a24,a32) {
			f5(a15,a24,a32);
		};
		joystick.onTrackballMove.add(tmp5);
	}
	,__class__: lime_app_Application
});
var lime_app_Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
lime_app_Event_$Dynamic_$Void.__name__ = ["lime","app","Event_Dynamic_Void"];
lime_app_Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Dynamic_$Void
};
var lime_app_Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
lime_app_Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","Event_Float_Float_Int_Void"];
lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Int_$Void
};
var lime_app_Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
lime_app_Event_$Float_$Float_$Void.__name__ = ["lime","app","Event_Float_Float_Void"];
lime_app_Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Void
};
var lime_app_Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
lime_app_Event_$Int_$Float_$Void.__name__ = ["lime","app","Event_Int_Float_Void"];
lime_app_Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Int_$Float_$Void
};
var lime_app_Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
lime_app_Event_$Int_$Int_$Void.__name__ = ["lime","app","Event_Int_Int_Void"];
lime_app_Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Int_$Int_$Void
};
var lime_app_Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
lime_app_Event_$Int_$Void.__name__ = ["lime","app","Event_Int_Void"];
lime_app_Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Int_$Void
};
var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app_Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
lime_app_Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","Event_String_Int_Int_Void"];
lime_app_Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__listeners: null
	,__class__: lime_app_Event_$String_$Int_$Int_$Void
};
var lime_app_Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
lime_app_Event_$String_$Void.__name__ = ["lime","app","Event_String_Void"];
lime_app_Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$String_$Void
};
var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","Event_lime_graphics_RenderContext_Void"];
lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadAxis_Float_Void"];
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadButton_Void"];
lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app_Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","Event_lime_ui_Gamepad_Void"];
lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
};
var lime_app_Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","Event_lime_ui_Joystick_Void"];
lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Joystick_$Void
};
var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app_Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","Event_lime_ui_Touch_Void"];
lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Touch_$Void
};
var lime_app_Future = function(work) {
	if(work != null) {
		if(lime_app_Future.__threadPool == null) {
			lime_app_Future.__threadPool = new lime_system_ThreadPool();
			lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
			lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
			lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
		}
		var promise = new lime_app_Promise();
		promise.future = this;
		lime_app_Future.__threadPool.queue({ promise : promise, work : work});
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.__threadPool = null;
lime_app_Future.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app_Future.__threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app_Future.__threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app_Future.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app_Future.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
lime_app_Future.prototype = {
	value: null
	,__completed: null
	,__completeListeners: null
	,__errored: null
	,__errorListeners: null
	,__errorMessage: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.__completed) {
				listener(this.value);
			} else if(!this.__errored) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,__class__: lime_app_Future
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
	this.onProgress = new lime_app_Event_$Int_$Int_$Void();
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,loaded: null
	,total: null
	,load: function(urls,types) {
		var url = null;
		var cacheVersion = lime_Assets.cache.version;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "BINARY":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader);
					this.total++;
				}
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			case "IMAGE":
				if(!lime_app_Preloader.images.exists(url)) {
					var image = new Image();
					lime_app_Preloader.images.set(url,image);
					image.onload = $bind(this,this.image_onLoad);
					image.src = url + "?" + cacheVersion;
					this.total++;
				}
				break;
			case "TEXT":
				if(!lime_app_Preloader.loaders.exists(url)) {
					var loader1 = new lime_net_HTTPRequest();
					lime_app_Preloader.loaders.set(url,loader1);
					this.total++;
				}
				break;
			default:
			}
		}
		var url1 = lime_app_Preloader.loaders.keys();
		while(url1.hasNext()) {
			var url2 = url1.next();
			var _this = lime_app_Preloader.loaders;
			var loader2 = __map_reserved[url2] != null ? _this.getReserved(url2) : _this.h[url2];
			var future = loader2.load(url2 + "?" + cacheVersion);
			future.onComplete($bind(this,this.loader_onComplete));
		}
		if(this.total == 0) {
			this.start();
		}
	}
	,loadFont: function(font) {
		var _gthis = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) {
			window.document.fonts.load("1em '" + font + "'").then(function(_) {
				_gthis.loaded++;
				_gthis.onProgress.dispatch(_gthis.loaded,_gthis.total);
				if(_gthis.loaded == _gthis.total) {
					_gthis.start();
				}
			});
		} else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_gthis.loaded++;
					if(interval != null) {
						window.clearInterval(interval);
					}
					node.parentNode.removeChild(node);
					node = null;
					_gthis.onProgress.dispatch(_gthis.loaded,_gthis.total);
					if(_gthis.loaded == _gthis.total) {
						_gthis.start();
					}
					return true;
				}
				return false;
			};
			if(!checkFont()) {
				interval = window.setInterval(checkFont,50);
			}
		}
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,loader_onComplete: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,complete: function(data) {
		if(!this.future.__errored) {
			this.future.__completed = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,error: function(msg) {
		if(!this.future.__completed) {
			this.future.__errored = true;
			this.future.__errorMessage = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress) {
		if(!this.future.__errored && !this.future.__completed) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress);
				}
			}
		}
		return this;
	}
	,__class__: lime_app_Promise
};
var lime_audio_ALAudioContext = function() { };
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
var lime_audio_ALCAudioContext = function() { };
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
var lime_audio_AudioBuffer = function() { };
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.__empty_constructs__ = [];
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
			} catch( e ) {
				lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
			}
		} else {
			lime_audio_AudioManager.context = context;
		}
	}
};
var lime_audio_AudioSource = function() { };
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	__class__: lime_audio_AudioSource
};
var lime_audio_FlashAudioContext = function() { };
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
var lime_audio_HTML5AudioContext = function() {
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	__class__: lime_audio_HTML5AudioContext
};
var lime_graphics_ConsoleRenderContext = function() { };
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	__class__: lime_graphics_ConsoleRenderContext
};
var lime_graphics_FlashRenderContext = function() { };
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			var tmp;
			switch(_g[1]) {
			case 1:case 2:
				tmp = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				tmp = lime_graphics_ImageType.FLASH;
				break;
			default:
				tmp = lime_graphics_ImageType.DATA;
			}
			this.type = tmp;
		} else {
			this.type = lime_graphics_ImageType.DATA;
		}
	} else {
		this.type = type;
	}
	if(buffer == null) {
		if(width > 0 && height > 0) {
			var _g1 = this.type;
			switch(_g1[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.__base64Encoder = null;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	var _g = bytes.length % 3;
	switch(_g) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes.b[0] == 255) {
		return bytes.b[1] == 216;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
		var b = bytes.b[4];
		if(b == 55 || b == 57) {
			return bytes.b[5] == 97;
		} else {
			return false;
		}
	}
	return false;
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,type: null
	,width: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this,true);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var rgba = 0;
				rgba = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var bgra = 0;
					bgra = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var rgba2 = 0;
					rgba2 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var rgba = 0;
				rgba = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var bgra = 0;
					bgra = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var rgba2 = 0;
					rgba2 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					var rgba3 = rgba2;
					return rgba3;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		var _g = this.type;
		switch(_g[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var argb = 0;
				argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var argb2 = 0;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var argb3 = 0;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >> 24 & 255 & 255) << 16 | (rgba2 >> 16 & 255 & 255) << 8 | rgba2 >> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var argb4 = 0;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >> 8 & 255 & 255) << 16 | (bgra1 >> 16 & 255 & 255) << 8 | bgra1 >> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var argb5 = 0;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >> 24 & 255 & 255) << 16 | (rgba3 >> 16 & 255 & 255) << 8 | rgba3 >> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		image.crossOrigin = "Anonymous";
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {get_rect:"get_rect",set_transparent:"set_transparent",get_transparent:"get_transparent",get_src:"get_src"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var view = this.data;
			var this2;
			if(view != null) {
				this2 = new Uint8Array(view);
			} else {
				this2 = null;
			}
			var copy = this2;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy1 = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy1);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.__empty_constructs__ = [lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.GREEN,lime_graphics_ImageChannel.BLUE,lime_graphics_ImageChannel.ALPHA];
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.__empty_constructs__ = [lime_graphics_ImageType.CANVAS,lime_graphics_ImageType.DATA,lime_graphics_ImageType.FLASH,lime_graphics_ImageType.CUSTOM];
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
lime_graphics_RenderContext.__empty_constructs__ = [lime_graphics_RenderContext.NONE];
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event_$Void_$Void();
	this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app_Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.__empty_constructs__ = [lime_graphics_RendererType.OPENGL,lime_graphics_RendererType.CANVAS,lime_graphics_RendererType.DOM,lime_graphics_RendererType.FLASH,lime_graphics_RendererType.CAIRO,lime_graphics_RendererType.CONSOLE,lime_graphics_RendererType.CUSTOM];
var lime_graphics_cairo_Cairo = function() { };
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.prototype = {
	get_currentPoint: function() {
		return null;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {get_hasCurrentPoint:"get_hasCurrentPoint",get_currentPoint:"get_currentPoint"}
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.context = null;
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage,false);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcImageData = null;
		image.buffer.data = null;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			offset = row + x * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				++_g3;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) {
							sourcePixel = 0;
						}
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					++_g31;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						var value = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
						destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						var value1 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						var value2 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
						var value3 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value3 & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					++_g32;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							alphaPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						var value4 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
						destPixel = (value4 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						var value5 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value5 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						var value6 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value6 & 255) << 8 | destPixel & 255 & 255;
						var value7 = lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)];
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value7 & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		row = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			var offset = row + x * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
		return argb;
	case 2:
		var bgra = 0;
		bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
		return argb;
	case 2:
		var bgra = 0;
		bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var length = rect.width * rect.height | 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		var y = _g1++;
		position = dataView.offset + dataView.stride * y;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(sourceFormat) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var argb1 = 0;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var bgra1 = 0;
				bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var premultiplied = image.buffer.premultiplied;
	switch(image.buffer.format) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			source = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	var value = source & 255;
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | value & 255;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 0:
		data1[offset1] = pixel >> 24 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >> 24 & 255;
		data1[offset1 + 2] = pixel >> 16 & 255;
		data1[offset1 + 3] = pixel >> 8 & 255;
		break;
	case 2:
		data1[offset1] = pixel >> 8 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(image.buffer.format) {
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var rgba1 = 0;
		rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var rgba2 = 0;
		rgba2 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var rgba3 = 0;
		rgba3 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var rgba4 = 0;
		rgba4 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var rgba5 = 0;
		rgba5 = (bgra2 >> 8 & 255 & 255) << 24 | (bgra2 >> 16 & 255 & 255) << 16 | (bgra2 >> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1;
			var tmp2;
			tmp1 = pixelMask >> 24 & 255;
			tmp2 = _threshold >> 24 & 255;
			if(tmp1 != tmp2) {
				if(tmp1 > tmp2) {
					value = 1;
				} else {
					value = -1;
				}
			} else {
				tmp1 = pixelMask >> 16 & 255;
				tmp2 = _threshold >> 16 & 255;
				if(tmp1 != tmp2) {
					if(tmp1 > tmp2) {
						value = 1;
					} else {
						value = -1;
					}
				} else {
					tmp1 = pixelMask >> 8 & 255;
					tmp2 = _threshold >> 8 & 255;
					if(tmp1 != tmp2) {
						if(tmp1 > tmp2) {
							value = 1;
						} else {
							value = -1;
						}
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						if(tmp1 != tmp2) {
							if(tmp1 > tmp2) {
								value = 1;
							} else {
								value = -1;
							}
						} else {
							value = 0;
						}
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				if(value != 0) {
					test = value == -1;
				} else {
					test = true;
				}
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				if(value != 0) {
					test = value == 1;
				} else {
					test = true;
				}
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = _color >> 24 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >> 24 & 255;
					destData[destPosition + 2] = _color >> 16 & 255;
					destData[destPosition + 3] = _color >> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >> 8 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = srcPixel >> 24 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >> 24 & 255;
					destData[destPosition + 2] = srcPixel >> 16 & 255;
					destData[destPosition + 3] = srcPixel >> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >> 8 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
	}
	return hits;
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,image: null
	,offset: null
	,rect: null
	,stride: null
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	var this2 = new Uint8Array(256);
	var table = this2;
	var multiplier = this1[18];
	var offset = this1[19] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	var this2 = new Uint8Array(256);
	var table = this2;
	var multiplier = this1[12];
	var offset = this1[14] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	var this2 = new Uint8Array(256);
	var table = this2;
	var multiplier = this1[6];
	var offset = this1[9] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	var this2 = new Uint8Array(256);
	var table = this2;
	var multiplier = this1[0];
	var offset = this1[4] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__class__: lime_math_Matrix3
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,__class__: lime_math_Rectangle
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.prototype = {
	x: null
	,y: null
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,__class__: lime_math_Vector2
};
var lime_math_Vector4 = function() { };
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
var lime_net_HTTPRequest = function() {
	this.promise = new lime_app_Promise();
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.prototype = {
	bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,promise: null
	,load: function(url) {
		var _gthis = this;
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		var request = new XMLHttpRequest();
		request.addEventListener("progress",$bind(this,this.request_onProgress),false);
		request.onreadystatechange = function() {
			if(request.readyState != 4) {
				return;
			}
			if(request.status != null && request.status >= 200 && request.status <= 400) {
				_gthis.bytes = lime_utils_Bytes.ofData(request.response);
				_gthis.promise.complete(_gthis.bytes);
			} else {
				_gthis.promise.error(request.status);
			}
		};
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.send("");
		return this.promise.future;
	}
	,request_onProgress: function(event) {
		this.promise.progress(event.loaded / event.total);
	}
	,__class__: lime_net_HTTPRequest
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return null;
};
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") {
		htmlElement = window.document.getElementById(js_Boot.__cast(element , String));
	} else if(element == null) {
		htmlElement = window.document.createElement("div");
	} else {
		htmlElement = element;
	}
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) {
			color = Std.parseInt(background);
		} else {
			color = Std.parseInt("0x" + background);
		}
	}
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,__class__: lime_ui_Gamepad
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$Int_$Void();
	this.onButtonDown = new lime_app_Event_$Int_$Void();
	this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,__class__: lime_ui_Joystick
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {get_shiftKey:"get_shiftKey",get_metaKey:"get_metaKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_cursor:"set_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.__empty_constructs__ = [lime_ui_MouseCursor.ARROW,lime_ui_MouseCursor.CROSSHAIR,lime_ui_MouseCursor.DEFAULT,lime_ui_MouseCursor.MOVE,lime_ui_MouseCursor.POINTER,lime_ui_MouseCursor.RESIZE_NESW,lime_ui_MouseCursor.RESIZE_NS,lime_ui_MouseCursor.RESIZE_NWSE,lime_ui_MouseCursor.RESIZE_WE,lime_ui_MouseCursor.TEXT,lime_ui_MouseCursor.WAIT,lime_ui_MouseCursor.WAIT_ARROW,lime_ui_MouseCursor.CUSTOM];
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app_Event_$String_$Void();
	this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app_Event_$Void_$Void();
	this.onResize = new lime_app_Event_$Int_$Int_$Void();
	this.onMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app_Event_$Void_$Void();
	this.onLeave = new lime_app_Event_$Void_$Void();
	this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app_Event_$Void_$Void();
	this.onFocusOut = new lime_app_Event_$Void_$Void();
	this.onFocusIn = new lime_app_Event_$Void_$Void();
	this.onEnter = new lime_app_Event_$Void_$Void();
	this.onDropFile = new lime_app_Event_$String_$Void();
	this.onDeactivate = new lime_app_Event_$Void_$Void();
	this.onCreate = new lime_app_Event_$Void_$Void();
	this.onClose = new lime_app_Event_$Void_$Void();
	this.onActivate = new lime_app_Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) {
			this.__width = config.width;
		}
		if(Object.prototype.hasOwnProperty.call(config,"height")) {
			this.__height = config.height;
		}
		if(Object.prototype.hasOwnProperty.call(config,"x")) {
			this.__x = config.x;
		}
		if(Object.prototype.hasOwnProperty.call(config,"y")) {
			this.__y = config.y;
		}
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) {
			this.__fullscreen = config.fullscreen;
		}
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) {
			this.__borderless = config.borderless;
		}
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) {
			this.__resizable = config.resizable;
		}
		if(Object.prototype.hasOwnProperty.call(config,"title")) {
			this.__title = config.title;
		}
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) {
			this.renderer.create();
		}
	}
	,resize: function(width,height) {
		this.__width = width;
		this.__height = height;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_width:"set_width",set_height:"set_height",set_fullscreen:"set_fullscreen"}
};
var lime_utils_Bytes = function(length,bytesData) {
	haxe_io_Bytes.call(this,bytesData);
};
$hxClasses["lime.utils.Bytes"] = lime_utils_Bytes;
lime_utils_Bytes.__name__ = ["lime","utils","Bytes"];
lime_utils_Bytes.alloc = function(length) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.__super__ = haxe_io_Bytes;
lime_utils_Bytes.prototype = $extend(haxe_io_Bytes.prototype,{
	__class__: lime_utils_Bytes
});
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	get_enabled: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,setBitmapData: null
	,setFont: null
	,__class__: openfl_IAssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,getBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,getSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.getReserved(id);
		} else {
			return _this.h[id];
		}
	}
	,hasBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bitmapData);
		} else {
			_this.h[id] = bitmapData;
		}
	}
	,setFont: function(id,font) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,__class__: openfl_AssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) {
		lime_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	}
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		return openfl_Assets.cache.getFont(id);
	}
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var path = lime_Assets.getPath(id);
	if(path != null) {
		return new openfl_media_Sound(new openfl_net_URLRequest(path));
	}
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	if(bitmapData != null) {
		return bitmapData.image != null;
	} else {
		return false;
	}
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_Assets.list(type);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	enabled: null
	,__currentFrame: null
	,__currentLabels: null
	,__totalFrames: null
	,__class__: openfl_display_MovieClip
});
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.application = null;
openfl_Lib.embed = $hx_exports["openfl"]["embed"] = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) {
		target = "_blank";
	}
	window.open(request.url,target);
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,renderSession: null
	,render: function(stage) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	this.types = [];
	this.b = [];
	this.i = [];
	this.f = [];
	this.o = [];
	this.ff = [];
	this.ii = [];
	this.ts = [];
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,ts: null
	,append: function(other) {
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				this.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				break;
			case 1:
				var c1 = data.readBeginFill();
				this.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				this.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				this.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				this.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				this.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				this.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 7:
				var c7 = data.readDrawPath();
				this.drawPath(openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands(c7),openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c7),openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding(c7));
				break;
			case 8:
				var c8 = data.readDrawRect();
				this.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c8));
				break;
			case 9:
				var c9 = data.readDrawRoundRect();
				this.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c9));
				break;
			case 10:
				var c10 = data.readDrawTiles();
				this.drawTiles(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c10));
				break;
			case 11:
				var c11 = data.readDrawTriangles();
				this.drawTriangles(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c11),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c11),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c11),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c11));
				break;
			case 12:
				data.readEndFill();
				this.endFill();
				break;
			case 13:
				var c12 = data.readLineBitmapStyle();
				this.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c12),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c12),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c12),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c12));
				break;
			case 14:
				var c13 = data.readLineGradientStyle();
				this.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c13));
				break;
			case 15:
				var c14 = data.readLineStyle();
				this.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c14));
				break;
			case 16:
				var c15 = data.readLineTo();
				this.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c15),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c15));
				break;
			case 17:
				var c16 = data.readMoveTo();
				this.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c16),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c16));
				break;
			case 18:
				var c17 = data.readOverrideMatrix();
				this.overrideMatrix(openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix(c17));
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types.splice(0,this.types.length);
		this.b.splice(0,this.b.length);
		this.i.splice(0,this.i.length);
		this.f.splice(0,this.f.length);
		this.o.splice(0,this.o.length);
		this.ff.splice(0,this.ff.length);
		this.ii.splice(0,this.ii.length);
		this.ts.splice(0,this.ts.length);
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,drawCircle: function(x,y,radius) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawPath: function(commands,data,winding) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_PATH);
		this.o.push(commands);
		this.o.push(data);
		this.o.push(winding);
	}
	,drawRect: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TILES);
		this.ts.push(sheet);
		this.ff.push(tileData);
		this.b.push(smooth);
		this.i.push(flags);
		this.o.push(shader);
		this.i.push(count);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,overrideMatrix: function(matrix) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		var _g = this.prev;
		switch(_g[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.oPos += 3;
			break;
		case 8:
			this.fPos += 4;
			break;
		case 9:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.tsPos += 1;
			this.ffPos += 1;
			this.bPos += 1;
			this.iPos += 2;
			this.oPos += 1;
			break;
		case 11:
			this.oPos += 4;
			break;
		case 12:
			break;
		case 13:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 14:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 15:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new(this);
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new(this);
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new(this);
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new(this);
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new(this);
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new(this);
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new(this);
	}
	,readDrawPath: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
		return openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new(this);
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new(this);
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new(this);
	}
	,readDrawTiles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
		return openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new(this);
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new(this);
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new(this);
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new(this);
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new(this);
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new(this);
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new(this);
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new(this);
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new(this);
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,tileSheet: function(index) {
		return this.buffer.ts[this.tsPos + index];
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](5);
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1["float"](2);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawPathView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawPathView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__properties__ = {get_winding:"get_winding",get_data:"get_data",get_commands:"get_commands"}
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding = function(this1) {
	return this1.obj(2);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTilesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTilesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__properties__ = {get_count:"get_count",get_shader:"get_shader",get_flags:"get_flags",get_smooth:"get_smooth",get_tileData:"get_tileData",get_sheet:"get_sheet"}
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet = function(this1) {
	return this1.tileSheet(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count = function(this1) {
	return this1["int"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.obj(3);
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_PATH","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH = ["DRAW_PATH",7];
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",9];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",11];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",12];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",15];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",16];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",17];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",18];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",19];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.__empty_constructs__ = [openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL,openfl__$internal_renderer_DrawCommandType.BEGIN_FILL,openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL,openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO,openfl__$internal_renderer_DrawCommandType.CURVE_TO,openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE,openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE,openfl__$internal_renderer_DrawCommandType.DRAW_PATH,openfl__$internal_renderer_DrawCommandType.DRAW_RECT,openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT,openfl__$internal_renderer_DrawCommandType.DRAW_TILES,openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES,openfl__$internal_renderer_DrawCommandType.END_FILL,openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE,openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE,openfl__$internal_renderer_DrawCommandType.LINE_STYLE,openfl__$internal_renderer_DrawCommandType.LINE_TO,openfl__$internal_renderer_DrawCommandType.MOVE_TO,openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX,openfl__$internal_renderer_DrawCommandType.UNKNOWN];
var openfl__$internal_renderer_RenderSession = function() {
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	cairo: null
	,context: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,maskManager: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		current = new lime_math_Vector2(cx,cy);
	} else {
		current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2);
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2);
				openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				break;
			case 8:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4);
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4);
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4);
				openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4);
				break;
			case 9:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 16:
				var c6 = data.readLineTo();
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 17:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		mask.__getWorldTransform();
		mask.__renderCairoMask(this.renderSession);
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popRect: function() {
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,render: function(stage) {
		stage.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type) {
	case 0:
		var matrix1 = matrix != null ? matrix : new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	case 1:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill();
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c = data.readBeginBitmapFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c1 = data.readBeginGradientFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
				} else {
					var c2 = data.readBeginFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
				}
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 8:
				var c7 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 9:
				var c8 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 12:
				data.readEndFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 13:
				var c9 = data.readLineBitmapStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c9));
				break;
			case 14:
				var c10 = data.readLineGradientStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10));
				break;
			case 15:
				var c11 = data.readLineStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11),1,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11));
				break;
			case 16:
				var c12 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				break;
			case 17:
				var c13 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				break;
			default:
				data.skip(type);
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
			return true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			return true;
		}
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data[t - 1];
		if(max < tmp) {
			max = tmp;
		}
	}
	var this1 = new openfl_VectorData();
	var this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	var result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		var x = uvt.data[t1 - 1] / max;
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var length = result.data.length + 10;
				var this3 = new Array(length);
				var data = this3;
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = x;
		}
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 0:
			var c = data.readBeginBitmapFill();
			var tmp = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(tmp,true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c) != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c).clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c1 = data.readBeginFill();
			if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) < 0.005) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			} else {
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) == 1) {
					var tmp1 = StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + tmp1;
				} else {
					var r = (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16711680) >>> 16;
					var g = (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 65280) >>> 8;
					var b = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 255;
					var tmp2 = "rgba(" + r + ", " + g + ", " + b + ", " + openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = tmp2 + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c2 = data.readBeginGradientFill();
			var tmp3 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2);
			var tmp4 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2);
			var tmp5 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2);
			var tmp6 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2);
			var tmp7 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2);
			var tmp8 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2);
			var tmp9 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2);
			var tmp10 = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(tmp3,tmp4,tmp5,tmp6,tmp7,tmp8,tmp9,tmp10);
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 3:
			var c3 = data.readCubicCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3) - offsetY);
			break;
		case 4:
			var c4 = data.readCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4) - offsetY);
			break;
		case 5:
			var c5 = data.readDrawCircle();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),0,Math.PI * 2,true);
			break;
		case 6:
			var c6 = data.readDrawEllipse();
			var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6);
			var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6);
			var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6);
			var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6);
			x -= offsetX;
			y -= offsetY;
			var ox = width / 2 * .5522848;
			var oy = height / 2 * .5522848;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 8:
			var c7 = data.readDrawRect();
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7)));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7)));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7);
					sl = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7);
					sb = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7);
					sr = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7);
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
					}
				}
			}
			if(!optimizationUsed) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
			}
			break;
		case 9:
			var c8 = data.readDrawRoundRect();
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
			break;
		case 13:
			var c9 = data.readLineBitmapStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			var tmp11 = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9);
			var tmp12 = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(tmp11,tmp12);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 14:
			var c10 = data.readLineGradientStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			var tmp13 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10);
			var tmp14 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10);
			var tmp15 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10);
			var tmp16 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10);
			var tmp17 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10);
			var tmp18 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10);
			var tmp19 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10);
			var tmp20 = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(tmp13,tmp14,tmp15,tmp16,tmp17,tmp18,tmp19,tmp20);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 15:
			var c11 = data.readLineStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) == null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			} else {
				var tmp21 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) > 0 ? openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) : 1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = tmp21;
				var tmp22 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11) == null ? "round" : openfl_display__$JointStyle_JointStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = tmp22;
				var tmp23;
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11) == null) {
					tmp23 = "round";
				} else {
					var _g2 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11);
					if(_g2 == 0) {
						tmp23 = "butt";
					} else {
						tmp23 = openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11)).toLowerCase();
					}
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = tmp23;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11) == 1) {
					var tmp24 = StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16777215,6);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + tmp24;
				} else {
					var r1 = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16711680) >>> 16;
					var g1 = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 65280) >>> 8;
					var b1 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 255;
					var tmp25 = "rgba(" + r1 + ", " + g1 + ", " + b1 + ", " + openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11);
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = tmp25 + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 16:
			var c12 = data.readLineTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12);
			positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12);
			break;
		case 17:
			var c13 = data.readMoveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			closeGap = true;
			startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			break;
		default:
			data.skip(type);
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	var directRender = false;
	if(graphics.__dirty || directRender) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(directRender) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
				openfl__$internal_renderer_canvas_CanvasGraphics.bounds.setTo(0,0,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width);
			} else {
				if(graphics.__canvas == null) {
					graphics.__canvas = window.document.createElement("canvas");
					graphics.__context = graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
				graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
				graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c = data.readBeginBitmapFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c1 = data.readBeginGradientFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
						} else {
							var c2 = data.readBeginFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
						}
						break;
					case 3:
						var c3 = data.readCubicCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						break;
					case 4:
						var c4 = data.readCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						break;
					case 5:
						var c5 = data.readDrawCircle();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						break;
					case 6:
						var c6 = data.readDrawEllipse();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						break;
					case 8:
						var c7 = data.readDrawRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						break;
					case 9:
						var c8 = data.readDrawRoundRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						break;
					case 10:
						var c9 = data.readDrawTiles();
						var useScale = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 1) > 0;
						var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
						var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
						var useRotation = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 2) > 0;
						var useTransform = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 16) > 0;
						var useRGB = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 4) > 0;
						var useAlpha = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 8) > 0;
						var useRect = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 32) > 0;
						var useOrigin = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 64) > 0;
						var useBlendAdd = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) {
							if(useOrigin) {
								numValues = 8;
							} else {
								numValues = 6;
							}
						}
						if(useScale) {
							scaleIndex = numValues;
							++numValues;
						}
						if(useRotation) {
							rotationIndex = numValues;
							++numValues;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							++numValues;
						}
						var totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9).length;
						if(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9) >= 0 && totalCount > openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9)) {
							totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9);
						}
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__bitmap.__sync();
						surface = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__bitmap.image.get_src();
						if(useBlendAdd) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						}
						while(index < totalCount) {
							var tileID = !useRect ? openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 2] | 0 : -1;
							if(!useRect && tileID != previousTileID) {
								rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__tileRects[tileID];
								center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__rectTile;
								rect.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 2],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 3],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 4],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 5]);
								center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__point;
								if(useOrigin) {
									center.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 6],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 7]);
								} else {
									center.setTo(0,0);
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index] - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 1] - offsetY);
								if(useRotation) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + rotationIndex]);
								}
								var scale = 1.0;
								if(useScale) {
									scale = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + scaleIndex];
								}
								if(useTransform) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex + 1],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex + 2],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex + 3],0,0);
								}
								if(useAlpha) {
									var tmp = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9);
									openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = tmp[index + alphaIndex];
								}
								openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth(c9);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						}
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c10 = data.readDrawTriangles();
						var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c10);
						var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c10);
						var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c10);
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) {
							throw "__break__";
						}
						if(!colorFill) {
							if(uvt == null) {
								var this1 = new openfl_VectorData();
								var this2 = new Array(0);
								this1.data = this2;
								this1.length = 0;
								this1.fixed = false;
								uvt = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									var x = v.data[i * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var length = uvt.data.length + 10;
											var this3 = new Array(length);
											var data1 = this3;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
											uvt.data = data1;
										}
										uvt.data[uvt.length - 1] = x;
									}
									var x1 = v.data[i * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var length1 = uvt.data.length + 10;
											var this4 = new Array(length1);
											var data2 = this4;
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
											uvt.data = data2;
										}
										uvt.data[uvt.length - 1] = x1;
									}
								}
							}
							var skipT = uvt.length != v.length;
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,skipT);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
							} else {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
							}
						}
						var i1 = 0;
						var l = ind.length;
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x11;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a_ = i1;
							b_ = i1 + 1;
							c_ = i1 + 2;
							iax = ind.data[a_] * 2;
							iay = ind.data[a_] * 2 + 1;
							ibx = ind.data[b_] * 2;
							iby = ind.data[b_] * 2 + 1;
							icx = ind.data[c_] * 2;
							icy = ind.data[c_] * 2 + 1;
							x11 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							var _g21 = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c10);
							switch(_g21) {
							case 0:
								if((x2 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0) {
									i1 += 3;
									continue;
								}
								break;
							case 2:
								if(!((x2 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								}
								i1 += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x11) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x11) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i1 += 3;
						}
						break;
					case 12:
						data.readEndFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 13:
						var c11 = data.readLineBitmapStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c11));
						break;
					case 14:
						var c12 = data.readLineGradientStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c12));
						break;
					case 15:
						var c13 = data.readLineStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c13));
						break;
					case 16:
						var c14 = data.readLineTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c14));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c14));
						break;
					case 17:
						var c15 = data.readMoveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c15),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c15));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c15),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c15));
						break;
					default:
						data.skip(type);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2,true);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 9:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 16:
				var c6 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6));
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 17:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7));
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getWorldTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) {
			this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		}
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_opengl_utils_PingPongTexture = function() {
	this.__swapped = false;
};
$hxClasses["openfl._internal.renderer.opengl.utils.PingPongTexture"] = openfl__$internal_renderer_opengl_utils_PingPongTexture;
openfl__$internal_renderer_opengl_utils_PingPongTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","PingPongTexture"];
openfl__$internal_renderer_opengl_utils_PingPongTexture.prototype = {
	__swapped: null
	,__texture0: null
	,__texture1: null
	,destroy: function() {
		if(this.__texture0 != null) {
			this.__texture0.destroy();
			this.__texture0 = null;
		}
		if(this.__texture1 != null) {
			this.__texture1.destroy();
			this.__texture1 = null;
		}
		this.__swapped = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_PingPongTexture
};
var openfl__$internal_renderer_opengl_utils_RenderTexture = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.RenderTexture"] = openfl__$internal_renderer_opengl_utils_RenderTexture;
openfl__$internal_renderer_opengl_utils_RenderTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","RenderTexture"];
openfl__$internal_renderer_opengl_utils_RenderTexture.prototype = {
	gl: null
	,frameBuffer: null
	,texture: null
	,destroy: function() {
		if(this.frameBuffer != null) {
			this.gl.deleteFramebuffer(this.frameBuffer);
		}
		if(this.texture != null) {
			this.gl.deleteTexture(this.texture);
		}
		this.frameBuffer = null;
		this.texture = null;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_RenderTexture
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = [];
	this.lineBreaks = [];
	this.lineDescents = [];
	this.lineLeadings = [];
	this.lineHeights = [];
	this.lineWidths = [];
	this.layoutGroups = [];
	this.textFormatRanges = [];
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.__canvas = null;
openfl__$internal_text_TextEngine.__context = null;
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font = format.italic ? "italic " : "normal ";
	font += "normal ";
	font += format.bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	var _g1 = format.font;
	var font1;
	switch(_g1) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		font1 = "'" + format.font + "'";
	}
	font += "" + font1;
	return font;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,displayAsPassword: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__hasFocus: null
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLineMeasurements: function() {
		this.lineAscents.splice(0,this.lineAscents.length);
		this.lineDescents.splice(0,this.lineDescents.length);
		this.lineLeadings.splice(0,this.lineLeadings.length);
		this.lineHeights.splice(0,this.lineHeights.length);
		this.lineWidths.splice(0,this.lineWidths.length);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.splice(0,this.layoutGroups.length);
		var rangeIndex = -1;
		var formatRange = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.text.indexOf("\n");
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(-1 < _gthis.textFormatRanges.length - 1) {
			rangeIndex = 0;
			formatRange = _gthis.textFormatRanges[0];
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) {
				spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
		lineFormat = formatRange.format;
		var wrap;
		while(textIndex < this.text.length) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances = [];
			var _g1 = textIndex;
			var _g = breakIndex;
			while(_g1 < _g) {
				var i = _g1++;
				advances.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(i)).width);
			}
			layoutGroup.advances = advances;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances1 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances1.length) {
				var advance = advances1[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				offsetY += heightValue;
				++lineIndex;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.text.indexOf("\n",textIndex);
			++lineIndex;
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.length - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges[rangeIndex];
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) {
						spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				lineFormat = formatRange.format;
			}
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1) {
			layoutGroup = null;
			wrap = false;
			while(true) {
				if(spaceIndex == -1) {
					spaceIndex = formatRange.end;
				}
				var text1 = this.text;
				var advances2 = [];
				var _g11 = textIndex;
				var _g3 = spaceIndex;
				while(_g11 < _g3) {
					var i1 = _g11++;
					advances2.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(i1)).width);
				}
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances2.length) {
					var advance1 = advances2[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
					}
				}
				if(wrap) {
					offsetY += heightValue;
					var i2 = this.layoutGroups.length - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups[i2];
						if(i2 > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i2;
					}
					++lineIndex;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups[this.layoutGroups.length - offsetCount].offsetX;
						var _g12 = this.layoutGroups.length - offsetCount;
						var _g5 = this.layoutGroups.length;
						while(_g12 < _g5) {
							var i3 = _g12++;
							layoutGroup = this.layoutGroups[i3];
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances2;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != 2) {
							layoutGroup.endIndex = spaceIndex;
						}
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == 2) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances2;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances2);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _gthis.textFormatRanges.length - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges[rangeIndex];
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) {
							spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
						}
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) {
					break;
				}
			}
		} else {
			if(textIndex >= formatRange.end) {
				break;
			}
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
			var text2 = this.text;
			var endIndex = formatRange.end;
			var advances3 = [];
			var _g13 = textIndex;
			while(_g13 < endIndex) {
				var i4 = _g13++;
				advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(i4)).width);
			}
			layoutGroup.advances = advances3;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances4 = layoutGroup.advances;
			var width2 = 0.0;
			var _g6 = 0;
			while(_g6 < advances4.length) {
				var advance2 = advances4[_g6];
				++_g6;
				width2 += advance2;
			}
			layoutGroup.width = width2;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetX += layoutGroup.width;
			textIndex = formatRange.end;
			if(rangeIndex < _gthis.textFormatRanges.length - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges[rangeIndex];
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) {
					spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.length;
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups[i];
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				var _g2 = group.format.align;
				switch(_g2) {
				case 0:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						offsetX = Math.round((this.width - 4 - this.lineWidths[lineIndex]) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g21 = this.layoutGroups.length;
						while(_g3 < _g21) {
							var j = _g3++;
							if(this.layoutGroups[j].lineIndex == lineIndex) {
								++lineLength;
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups[i + lineLength - 1];
							if(group.endIndex < this.text.length && this.text.charAt(group.endIndex) != "\n") {
								offsetX = (this.width - 4 - this.lineWidths[lineIndex]) / (lineLength - 1);
								var _g31 = 1;
								var _g22 = lineLength;
								while(_g31 < _g22) {
									var j1 = _g31++;
									this.layoutGroups[i + j1].offsetX += offsetX * j1;
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						offsetX = Math.round(this.width - 4 - this.lineWidths[lineIndex]);
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.length == 0) {
			this.lineAscents.splice(0,this.lineAscents.length);
			this.lineBreaks.splice(0,this.lineBreaks.length);
			this.lineDescents.splice(0,this.lineDescents.length);
			this.lineLeadings.splice(0,this.lineLeadings.length);
			this.lineHeights.splice(0,this.lineHeights.length);
			this.lineWidths.splice(0,this.lineWidths.length);
			this.layoutGroups.splice(0,this.layoutGroups.length);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	advances: null
	,ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) {
		openfl_Lib.application = this;
	}
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					var windowConfig = _g1[0];
					var $window = new openfl_display_Window(windowConfig);
					this.createWindow($window);
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) {
				this.onPreloadComplete();
			}
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getWorldTransform();
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) {
			return false;
		}
		this.__getWorldTransform();
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0 ? -_this1.ty : 1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				if(this.__mask != null) {
					renderSession.maskManager.pushMask(this.__mask);
				}
				var transform = this.__renderTransform;
				this.get_scrollRect();
				if(renderSession.roundPixels) {
					var matrix = transform.__toMatrix3();
					matrix.tx = Math.round(matrix.tx);
					matrix.ty = Math.round(matrix.ty);
				}
				var surface = this.bitmapData.getSurface();
				if(surface != null) {
					if(this.smoothing) {
						1;
					} else {
						3;
					}
				}
				if(this.__mask != null) {
					renderSession.maskManager.popMask();
				}
			}
		}
	}
	,__renderCairoMask: function(renderSession) {
		this.get_width();
		this.get_height();
	}
	,__renderCanvas: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var context = renderSession.context;
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				if(this.__mask != null) {
					renderSession.maskManager.pushMask(this.__mask);
				}
				this.bitmapData.__sync();
				context.globalAlpha = this.__worldAlpha;
				var transform = this.__renderTransform;
				var scrollRect = this.get_scrollRect();
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(!this.smoothing) {
					context.mozImageSmoothingEnabled = false;
					context.msImageSmoothingEnabled = false;
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(this.bitmapData.image.get_src(),0,0);
				} else {
					context.drawImage(this.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!this.smoothing) {
					context.mozImageSmoothingEnabled = true;
					context.msImageSmoothingEnabled = true;
					context.imageSmoothingEnabled = true;
				}
				if(this.__mask != null) {
					renderSession.maskManager.popMask();
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__updateMask: function(maskGraphics) {
		if(this.bitmapData == null) {
			return;
		}
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) {
			maskGraphics.__bounds = new openfl_geom_Rectangle();
		}
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.height * this.get_scaleY();
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.width * this.get_scaleX();
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl_display_TextureUvs.prototype = {
	x0: null
	,x1: null
	,x2: null
	,x3: null
	,y0: null
	,y1: null
	,y2: null
	,y3: null
	,__class__: openfl_display_TextureUvs
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_FrameLabel = function() { };
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_FrameLabel
});
var openfl_display_Graphics = function() {
	this.__dirty = true;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__hardware: null
	,__bounds: null
	,__commands: null
	,__dirty: null
	,__positionX: null
	,__positionY: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__owner: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		this.__hardware = false;
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		if(count == null) {
			count = -1;
		}
		if(flags == null) {
			flags = 0;
		}
		if(smooth == null) {
			smooth = false;
		}
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useTransform = (flags & 16) > 0;
		var useColorTransform = (flags & 128) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var rect = openfl_geom_Rectangle.__temp;
		var matrix = openfl_geom_Matrix.__temp;
		var numValues = 3;
		var totalCount = count;
		if(count < 0) {
			totalCount = tileData.length;
		}
		if(useTransform || useScale || useRotation || useRGB || useAlpha || useColorTransform) {
			var scaleIndex = 0;
			var rotationIndex = 0;
			var transformIndex = 0;
			if(useRect) {
				if(useOrigin) {
					numValues = 8;
				} else {
					numValues = 6;
				}
			}
			if(useScale) {
				scaleIndex = numValues;
				++numValues;
			}
			if(useRotation) {
				rotationIndex = numValues;
				++numValues;
			}
			if(useTransform) {
				transformIndex = numValues;
				numValues += 4;
			}
			if(useRGB) {
				numValues += 3;
			}
			if(useAlpha) {
				++numValues;
			}
			if(useColorTransform) {
				numValues += 4;
			}
			var index = 0;
			var cacheID = -1;
			var x;
			var y;
			var id;
			var scale;
			var rotation;
			var tileWidth;
			var tileHeight;
			var originX;
			var originY;
			var tile = null;
			var tilePoint = null;
			while(index < totalCount) {
				x = tileData[index];
				y = tileData[index + 1];
				if(!useRect) {
					id = tileData[index + 2] | 0;
				} else {
					id = -1;
				}
				scale = 1.0;
				rotation = 0.0;
				if(useScale) {
					scale = tileData[index + scaleIndex];
				}
				if(useRotation) {
					rotation = tileData[index + rotationIndex];
				}
				if(id < 0) {
					tile = null;
				} else if(!useRect && cacheID != id) {
					cacheID = id;
					tile = sheet.__tileRects[id];
					tilePoint = sheet.__centerPoints[id];
				} else if(useRect) {
					tile = sheet.__rectTile;
					tile.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
					tilePoint = sheet.__point;
					if(useOrigin) {
						tilePoint.setTo(tileData[index + 6] / tile.width,tileData[index + 7] / tile.height);
					} else {
						tilePoint.setTo(0,0);
					}
				}
				if(tile != null) {
					if(useTransform) {
						rect.setTo(0,0,tile.width,tile.height);
						matrix.setTo(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
						originX = tilePoint.x * scale;
						originY = tilePoint.y * scale;
						matrix.translate(x - (originX * matrix.a + originY * matrix.c + matrix.tx),y - (originX * matrix.b + originY * matrix.d + matrix.ty));
						rect.__transform(rect,matrix);
						this.__inflateBounds(rect.x,rect.y);
						this.__inflateBounds(rect.get_right(),rect.get_bottom());
					} else {
						tileWidth = tile.width * scale;
						tileHeight = tile.height * scale;
						x -= tilePoint.x * tileWidth;
						y -= tilePoint.y * tileHeight;
						if(rotation != 0) {
							rect.setTo(0,0,tileWidth,tileHeight);
							matrix.identity();
							matrix.rotate(rotation);
							matrix.translate(x,y);
							rect.__transform(rect,matrix);
							this.__inflateBounds(rect.x,rect.y);
							this.__inflateBounds(rect.get_right(),rect.get_bottom());
						} else {
							this.__inflateBounds(x,y);
							this.__inflateBounds(x + tileWidth,y + tileHeight);
						}
					}
				}
				index += numValues;
			}
		} else {
			var x1;
			var y1;
			var id1;
			var tile1;
			var centerPoint;
			var originX1;
			var originY1;
			var rect1 = openfl_geom_Rectangle.__temp;
			var index1 = 0;
			while(index1 < totalCount) {
				x1 = tileData[index1++];
				y1 = tileData[index1++];
				if(!useRect) {
					id1 = tileData[index1++] | 0;
				} else {
					id1 = -1;
				}
				originX1 = 0.0;
				originY1 = 0.0;
				if(useRect) {
					rect1.setTo(tileData[index1++],tileData[index1++],tileData[index1++],tileData[index1++]);
					if(useOrigin) {
						originX1 = tileData[index1++];
						originY1 = tileData[index1++];
					}
					this.__inflateBounds(x1 - originX1,y1 - originY1);
					this.__inflateBounds(x1 - originX1 + rect1.width,y1 - originY1 + rect1.height);
				} else {
					tile1 = sheet.__tileRects[id1];
					if(tile1 != null) {
						centerPoint = sheet.__centerPoints[id1];
						originX1 = centerPoint.x * tile1.width;
						originY1 = centerPoint.y * tile1.height;
						this.__inflateBounds(x1 - originX1,y1 - originY1);
						this.__inflateBounds(x1 - originX1 + tile1.width,y1 - originY1 + tile1.height);
					}
				}
			}
		}
		this.__commands.drawTiles(sheet,tileData,smooth,flags,shader,count);
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		var vlen = vertices.length / 2 | 0;
		if(culling == null) {
			culling = 1;
		}
		if(indices == null) {
			if(vlen % 3 != 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			var this1 = new openfl_VectorData();
			var this2 = new Array(0);
			this1.data = this2;
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g1 = 0;
			var _g = vlen;
			while(_g1 < _g) {
				var i = _g1++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var length = indices.data.length + 10;
						var this3 = new Array(length);
						var data = this3;
						haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g11 = 0;
		var _g2 = vlen;
		while(_g11 < _g2) {
			var i1 = _g11++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) {
				maxX = tmpx;
			}
			if(maxY < tmpy) {
				maxY = tmpy;
			}
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0 ? -matrix.ty : 1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__updateCachedBitmap = true;
				_this.__updateFilters = _this.get_filters() != null && _this.get_filters().length > 0;
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display_Loader = function() { };
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	__class__: openfl_display_Loader
});
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) {
			(js_Boot.__cast(display , NMEPreloader)).onInit();
		}
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			var _g2 = types[i];
			switch(_g2) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) {
					this.total++;
				}
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g3 = 0;
		while(_g3 < sounds.length) {
			var soundName = sounds[_g3];
			++_g3;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener("complete",$bind(this,this.sound_onComplete));
			sound1.addEventListener("ioError",$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener("complete",$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			(js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
		}
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener("complete",$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shader = function() { };
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else {
		this.set_color(color);
	}
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = window.__width * window.__scale | 0;
	this.stageHeight = window.__height * window.__scale | 0;
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1 = new openfl_VectorData();
	var this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var length = this3.data.length + 10;
			var this4 = new Array(length);
			var data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	if(openfl_Lib.current.stage == null) {
		this.stage.addChild(openfl_Lib.current);
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__deltaTime: null
	,__dirty: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__invalidated: null
	,__lastClickTime: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOutStack: null
	,__mouseX: null
	,__mouseY: null
	,__renderer: null
	,__rendering: null
	,__stack: null
	,__transparent: null
	,globalToLocal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			var event = new openfl_events_Event("deactivate");
			this.__broadcast(event,true);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else {
			this.__broadcast(event,true);
		}
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		var event = new openfl_events_Event("activate");
		this.__broadcast(event,true);
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(window.renderer != null) {
			var _g = window.renderer.context;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				var context = _g[2];
				this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,context);
				break;
			case 2:
				break;
			case 4:
				break;
			case 5:
				break;
			default:
			}
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		var event = new openfl_events_Event("deactivate");
		this.__broadcast(event,true);
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		var event = new openfl_events_FocusEvent("focusIn",true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		var event = new openfl_events_FocusEvent("focusOut",true,false,null,false,0);
		this.__broadcast(event,true);
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(this.__displayState == 2) {
			this.__displayState = 1;
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(this.__displayState != 2 && !window.__fullscreen) {
			this.__displayState = 2;
		}
		this.stageWidth = width * window.__scale | 0;
		this.stageHeight = height * window.__scale | 0;
		if(this.__renderer != null) {
			this.__renderer.resize(this.stageWidth,this.stageHeight);
		}
		var event = new openfl_events_Event("resize");
		this.__broadcast(event,false);
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) {
			return;
		}
		if(this.application != null && this.application.windows.length > 0) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event("enterFrame"),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event("render"),true);
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null) {
			var _g = renderer.context;
			if(_g[1] == 4) {
				var cairo = _g[2];
				(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
				this.__renderer.renderSession.cairo = cairo;
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			mouse = parent.globalToLocal(mouse);
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				var i = _g1++;
				stack[i].__broadcast(event,false);
				if(event.__isCanceled) {
					return;
				}
			}
			event.eventPhase = 2;
			event.target.__broadcast(event,false);
			if(event.__isCanceled) {
				return;
			}
			if(event.bubbles) {
				event.eventPhase = 3;
				var i1 = length - 2;
				while(i1 >= 0) {
					stack[i1].__broadcast(event,false);
					if(event.__isCanceled) {
						return;
					}
					--i1;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier));
			var event = new openfl_events_KeyboardEvent(type,true,false,charCode,keyCode1,keyLocation,this.__macKeyboard ? lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier) : lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
			if(event.__isCanceled) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.get_tabEnabled()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft == target) {
				clickType = "click";
			}
			this.__mouseDownLeft = null;
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this ? targetPoint : target.globalToLocal(targetPoint),target),stack);
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this ? targetPoint : target.globalToLocal(targetPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target == this ? targetPoint : target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) {
			lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		}
		var event;
		var localPoint;
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				localPoint = target2.globalToLocal(targetPoint);
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,localPoint,target2);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__mouseOutStack.indexOf(target3) == -1) {
				if(target3.hasEventListener("mouseOver")) {
					localPoint = target3.globalToLocal(targetPoint);
					event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,localPoint,target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("mouseOut")) {
					this.__mouseOutStack.push(target3);
				}
			}
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
		}
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true,this)) {
			stack = [this];
		}
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		var delta = deltaY | 0;
		this.__fireEvent(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target == this ? targetPoint : target.globalToLocal(targetPoint),target,delta),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(touch.x * this.stageWidth,touch.y * this.stageHeight);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		if(this.__hitTest(this.__mouseX,this.__mouseY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) {
				target = this;
			}
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,set_color: function(value) {
		var r = (value & 16711680) >>> 16;
		var g = (value & 65280) >>> 8;
		var b = value & 255;
		this.__colorSplit = [r / 255,g / 255,b / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
					this.stageWidth = this.window.__width * this.window.__scale | 0;
					this.stageHeight = this.window.__height * this.window.__scale | 0;
					this.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
				this.stageWidth = this.window.__width * this.window.__scale | 0;
				this.stageHeight = this.window.__height * this.window.__scale | 0;
				this.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				this.__stack = [];
				oldFocus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
		}
		return this.__focus;
	}
	,set_frameRate: function(value) {
		if(this.application != null) {
			return this.application.backend.setFrameRate(value);
		}
		return value;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_Stage3D
});
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background") ? this.config.background : 16777215);
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,__class__: openfl_events_MouseEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,__class__: openfl_events_TouchEvent
});
var openfl_filters_BitmapFilter = function() { };
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.__expandBounds = function(filters,rect,matrix) {
	var r = openfl_geom_Rectangle.__temp;
	r.setEmpty();
	var _g = 0;
	while(_g < filters.length) ++_g;
	r.__transform(r,matrix);
	rect.__expand(r.x,r.y,r.width,r.height);
};
var openfl_geom_Matrix3D = function() { };
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.prototype = {
	__class__: openfl_geom_Matrix3D
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__updateCachedBitmap = true;
				_this.__updateFilters = _this.get_filters() != null && _this.get_filters().length > 0;
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__colorTransform;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function() { };
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	artist: null
	,songName: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,id3: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,__soundID: null
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		var key = this.__soundID;
		var _this = openfl_media_Sound.__registeredSounds;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			var key1 = this.__soundID;
			var _this1 = openfl_media_Sound.__registeredSounds;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,true);
			} else {
				_this1.h[key1] = true;
			}
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform(1,0);
		}
		var pan = sndTransform.pan;
		if(pan == 0) {
			pan = -0.0000001;
		}
		var instance = loops > 1 ? createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,pan) : createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,pan);
		return new openfl_media_SoundChannel(instance);
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		return 0;
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__source: null
	,__soundInstance: null
	,stop: function() {
		if(!this.__isValid) {
			return;
		}
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) {
			return new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) {
			return value;
		}
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function() { };
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,__class__: openfl_media_SoundTransform
};
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.__sharedObjects = null;
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	if(localPath == null) {
		localPath = window.location.href;
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		openfl_Lib.application.onExit.add(openfl_net_SharedObject.application_onExit);
	}
	var id = localPath + "/" + name;
	var _this = openfl_net_SharedObject.__sharedObjects;
	if(!(__map_reserved[id] != null ? _this.existsReserved(id) : _this.h.hasOwnProperty(id))) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( e ) {
		}
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( e1 ) {
			}
		}
		var _this1 = openfl_net_SharedObject.__sharedObjects;
		if(__map_reserved[id] != null) {
			_this1.setReserved(id,sharedObject);
		} else {
			_this1.h[id] = sharedObject;
		}
	}
	var _this2 = openfl_net_SharedObject.__sharedObjects;
	if(__map_reserved[id] != null) {
		return _this2.getReserved(id);
	} else {
		return _this2.h[id];
	}
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var _this = openfl_net_SharedObject.__sharedObjects;
	var sharedObject = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(sharedObject.hasNext()) {
		var sharedObject1 = sharedObject.next();
		sharedObject1.flush();
	}
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( e ) {
		}
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			return 1;
		}
		return 0;
	}
	,__class__: openfl_net_SharedObject
});
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) {
		this.url = inURL;
	}
	this.requestHeaders = [];
	this.method = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString(1);
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,method: null
	,requestHeaders: null
	,url: null
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function() { };
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
var openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$ = {};
$hxClasses["openfl.net._URLRequestMethod.URLRequestMethod_Impl_"] = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.__name__ = ["openfl","net","_URLRequestMethod","URLRequestMethod_Impl_"];
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "DELETE";
	case 1:
		return "GET";
	case 2:
		return "HEAD";
	case 3:
		return "OPTIONS";
	case 4:
		return "POST";
	case 5:
		return "PUT";
	default:
		return null;
	}
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_totalMemory:"get_totalMemory"}
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,__axis: null
	,__button: null
	,__controls: null
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
var openfl_ui_Multitouch = function() { };
$hxClasses["openfl.ui.Multitouch"] = openfl_ui_Multitouch;
openfl_ui_Multitouch.__name__ = ["openfl","ui","Multitouch"];
openfl_ui_Multitouch.maxTouchPoints = null;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = null;
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.__length;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var states_AboutState = function(MaxSize) {
	flixel_FlxState.call(this,MaxSize);
};
$hxClasses["states.AboutState"] = states_AboutState;
states_AboutState.__name__ = ["states","AboutState"];
states_AboutState.__super__ = flixel_FlxState;
states_AboutState.prototype = $extend(flixel_FlxState.prototype,{
	_starfield: null
	,rosie: null
	,returnButton: null
	,sprites: null
	,font: null
	,textFont: null
	,map: null
	,tilemap: null
	,create: function() {
		flixel_FlxState.prototype.create.call(this);
		this.map = new flixel_addons_editors_tiled_TiledMap("assets/credits.tmx");
		var spriteSet = this.map.getTileSet("Sprites");
		var tileSet = this.map.getTileSet("Overworld");
		this.sprites = flixel_graphics_frames_FlxAtlasFrames.fromTexturePackerJson("assets/gfx.png","assets/gfx.json");
		this.font = flixel_graphics_frames_FlxBitmapFont.fromMonospace(this.sprites.framesHash.get("block-font.png")," !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",states_AboutState.BLOCK_FONT_SIZE,null,states_AboutState.BLOCK_FONT_SPACING);
		this.textFont = flixel_graphics_frames_FlxBitmapFont.fromMonospace(this.sprites.framesHash.get("text-font.png")," !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~" + "⌚⇦",states_AboutState.TEXT_FONT_SIZE,null,states_AboutState.TEXT_FONT_SPACING);
		var ground = this.map.getLayer("Ground");
		this.tilemap = new flixel_tile_FlxTilemap().loadMapFromArray(ground.get_tileArray(),ground.width,ground.height,"assets/" + tileSet.imageSource,tileSet.tileWidth,tileSet.tileHeight,null,3);
		this.tilemap.useScaleHack = false;
		this.tilemap.set_moves(false);
		this.tilemap.set_immovable(true);
		this.tilemap.set_solid(false);
		var gui = this.map.getLayer("GUI");
		var _g = 0;
		var _g1 = gui.objects;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var _g2 = object.name;
			switch(_g2) {
			case "Return Button":
				var source = spriteSet.getImageSourceByGid(object.gid).source;
				var index = source.lastIndexOf("/");
				var frameName = HxOverrides.substr(source,index + 1,null);
				var __obj_init_tmp = new flixel_ui_FlxBitmapTextButton(null,null,object.properties.keys.get("text"),function() {
					if(flixel_FlxG.sound.music != null) {
						var _this = flixel_FlxG.sound.music;
						_this.cleanup(_this.autoDestroy,true);
					}
					var nextState = new states_MenuState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				});
				__obj_init_tmp.set_x(object.x);
				__obj_init_tmp.set_y(object.y - object.height);
				__obj_init_tmp.set_frames(this.sprites);
				__obj_init_tmp.set_frame(this.sprites.framesHash.get(frameName));
				__obj_init_tmp.set_immovable(true);
				__obj_init_tmp.set_solid(false);
				this.returnButton = __obj_init_tmp;
				this.returnButton.label.set_font(this.textFont);
				this.returnButton.label.set_letterSpacing(-3);
				this.returnButton.label.set_alignment("center");
				this.returnButton.label.set_color(-1);
				this.returnButton.label.set_autoSize(false);
				this.returnButton.label.set_fieldWidth(object.width);
				var normalAnim = this.returnButton.animation._animations.get("normal");
				normalAnim.frames = [this.sprites.getIndexByName(frameName)];
				var pressedAnim = this.returnButton.animation._animations.get("pressed");
				pressedAnim.frames = [this.sprites.getIndexByName("button-01.png")];
				var highlightAnim = this.returnButton.animation._animations.get("highlight");
				highlightAnim.frames = [this.sprites.getIndexByName("button-02.png")];
				var Y = this.returnButton.label.get_height();
				var point = flixel_math_FlxPoint._pool.get().set(0,Y);
				point._inPool = false;
				point._weak = true;
				this.returnButton.labelAlphas = [1.0,1.0,1.0];
				var Y1 = this.returnButton.label.get_height() + 2;
				var point1 = flixel_math_FlxPoint._pool.get().set(0,Y1);
				point1._inPool = false;
				point1._weak = true;
				this.returnButton.labelOffsets = [point,point,point1];
				this.returnButton.updateHitbox();
				break;
			case "Rosie":
				var __obj_init_tmp1 = new flixel_FlxSprite(object.x,object.y - object.height);
				__obj_init_tmp1.set_frames(this.sprites);
				__obj_init_tmp1.set_frame(this.sprites.framesHash.get(entities_Rosie.IDLE_FRAMES[0]));
				__obj_init_tmp1.set_pixelPerfectRender(true);
				__obj_init_tmp1.pixelPerfectPosition = false;
				__obj_init_tmp1.set_moves(false);
				__obj_init_tmp1.set_immovable(true);
				__obj_init_tmp1.set_solid(false);
				__obj_init_tmp1.set_flipX((object.gid & -2147483648) > 0);
				this.rosie = __obj_init_tmp1;
				this.rosie.animation.addByNames("idle",entities_Rosie.IDLE_FRAMES,6,true);
				this.rosie.animation.play("idle");
				var _this1 = this.rosie;
				_this1.set_width(_this1.frameWidth);
				_this1.set_height(_this1.frameHeight);
				this.rosie.updateHitbox();
				break;
			}
		}
		var credits = new flixel_group_FlxTypedSpriteGroup();
		var creditsLayer = this.map.getLayer("Credits");
		var _g3 = 0;
		var _g11 = creditsLayer.objects;
		while(_g3 < _g11.length) {
			var object1 = [_g11[_g3]];
			++_g3;
			var _g21 = object1[0].type;
			switch(_g21) {
			case "Image":
				var __obj_init_tmp2 = new flixel_FlxSprite(object1[0].x,object1[0].y,"assets/images/" + object1[0].properties.keys.get("image"));
				__obj_init_tmp2.pixelPerfectPosition = false;
				__obj_init_tmp2.set_pixelPerfectRender(false);
				__obj_init_tmp2.set_immovable(true);
				__obj_init_tmp2.set_solid(false);
				credits.add(__obj_init_tmp2);
				break;
			case "Text":
				var textColor = [object1[0].properties.keys.get("textColor") == null ? -1 : flixel_util__$FlxColor_FlxColor_$Impl_$.fromString(object1[0].properties.keys.get("textColor"))];
				var __obj_init_tmp3 = new flixel_text_FlxBitmapText(this.textFont);
				__obj_init_tmp3.set_x(object1[0].x);
				__obj_init_tmp3.set_y(object1[0].y);
				__obj_init_tmp3.set_autoSize(false);
				__obj_init_tmp3.set_width(object1[0].width);
				__obj_init_tmp3.set_fieldWidth(object1[0].width);
				__obj_init_tmp3.set_text(object1[0].properties.keys.get("text"));
				__obj_init_tmp3.set_alignment("center");
				__obj_init_tmp3.pixelPerfectPosition = false;
				__obj_init_tmp3.set_pixelPerfectRender(false);
				__obj_init_tmp3.set_letterSpacing(Std.parseInt(object1[0].properties.keys.get("letterSpacing")));
				__obj_init_tmp3.set_useTextColor(object1[0].properties.keys.get("textColor") != null);
				__obj_init_tmp3.set_textColor(textColor[0]);
				__obj_init_tmp3.set_immovable(true);
				__obj_init_tmp3.set_solid(false);
				if(object1[0].properties.keys.get("url") != null) {
					__obj_init_tmp3.set_useTextColor(true);
					flixel_input_mouse_FlxMouseEventManager.add(__obj_init_tmp3,(function(object2) {
						return function(t) {
							var URL = object2[0].properties.keys.get("url");
							var prefix = "";
							if(!new EReg("^https?://","").match(URL)) {
								prefix = "http://";
							}
							openfl_Lib.getURL(new openfl_net_URLRequest(prefix + URL),"_blank");
						};
					})(object1),null,(function() {
						return function(t1) {
							t1.set_textColor(-16776961);
						};
					})(),(function(textColor1) {
						return function(t2) {
							t2.set_textColor(textColor1[0]);
						};
					})(textColor),true,true,false);
				}
				credits.add(__obj_init_tmp3);
				break;
			case "Title":
				var __obj_init_tmp4 = new flixel_text_FlxBitmapText(this.font);
				__obj_init_tmp4.set_x(object1[0].x);
				__obj_init_tmp4.set_y(object1[0].y);
				__obj_init_tmp4.set_autoSize(false);
				__obj_init_tmp4.set_width(object1[0].width);
				__obj_init_tmp4.set_fieldWidth(object1[0].width);
				__obj_init_tmp4.set_text(object1[0].properties.keys.get("text"));
				__obj_init_tmp4.set_alignment("center");
				__obj_init_tmp4.pixelPerfectPosition = false;
				__obj_init_tmp4.set_pixelPerfectRender(false);
				__obj_init_tmp4.set_letterSpacing(Std.parseInt(object1[0].properties.keys.get("letterSpacing")));
				__obj_init_tmp4.set_solid(false);
				__obj_init_tmp4.set_immovable(true);
				credits.add(__obj_init_tmp4);
				break;
			}
		}
		var __obj_init_tmp5 = new flixel_addons_display_FlxStarField2D(0,0,flixel_FlxG.width,flixel_FlxG.height,Std.parseInt(this.map.properties.keys.get("numStars")));
		__obj_init_tmp5.bgColor = this.map.backgroundColor;
		__obj_init_tmp5.set_immovable(true);
		__obj_init_tmp5.set_solid(false);
		__obj_init_tmp5.set_moves(false);
		this._starfield = __obj_init_tmp5;
		var AnyObject = this._starfield;
		flixel_FlxG.game["debugger"].console.registeredObjects.set("starfield",AnyObject);
		flixel_system_debug_console_ConsoleUtil.registerObject("starfield",AnyObject);
		flixel_FlxG.game["debugger"].console.registeredObjects.set("credits",credits);
		flixel_system_debug_console_ConsoleUtil.registerObject("credits",credits);
		flixel_FlxG.game["debugger"].watch.add("# Pooled FlxPoints",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxPoint.get_pool(),"length"));
		flixel_FlxG.game["debugger"].watch.add("# Pooled FlxRects",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxRect.get_pool(),"length"));
		this.add(this._starfield);
		this.add(this.tilemap);
		this.add(this.rosie);
		this.add(this.returnButton);
		this.add(credits);
		flixel_tweens_FlxTween.linearMotion(credits,credits.x,credits.y,credits.x,credits.y - credits.get_height() - flixel_FlxG.height,parseFloat(creditsLayer.properties.keys.get("scrollSpeed")),creditsLayer.properties.keys.get("useDuration") == "true",{ startDelay : parseFloat(creditsLayer.properties.keys.get("startDelay")), type : 2, loopDelay : parseFloat(creditsLayer.properties.keys.get("loopDelay"))});
		flixel_FlxG.sound.playMusic("assets/music/game-over-loop.ogg");
	}
	,update: function(elapsed) {
		flixel_FlxState.prototype.update.call(this,elapsed);
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		this._starfield = null;
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxPoint.get_pool(),"length"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxRect.get_pool(),"length"));
	}
	,__class__: states_AboutState
});
var states_CommonState = function(MaxSize) {
	flixel_FlxState.call(this,MaxSize);
};
$hxClasses["states.CommonState"] = states_CommonState;
states_CommonState.__name__ = ["states","CommonState"];
states_CommonState.__super__ = flixel_FlxState;
states_CommonState.prototype = $extend(flixel_FlxState.prototype,{
	map: null
	,tilemap: null
	,bgImage: null
	,sprites: null
	,font: null
	,textFont: null
	,highScoreLabel: null
	,groundLayer: null
	,bgLayer: null
	,objectLayer: null
	,guiLayer: null
	,tileSet: null
	,spriteSet: null
	,create: function() {
		flixel_FlxState.prototype.create.call(this);
		this.sprites = flixel_graphics_frames_FlxAtlasFrames.fromTexturePackerJson("assets/gfx.png","assets/gfx.json");
		this.font = flixel_graphics_frames_FlxBitmapFont.fromMonospace(this.sprites.framesHash.get("block-font.png")," !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",states_CommonState.BLOCK_FONT_SIZE,null,states_CommonState.BLOCK_FONT_SPACING);
		this.textFont = flixel_graphics_frames_FlxBitmapFont.fromMonospace(this.sprites.framesHash.get("text-font.png")," !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~" + "⌚⇦",states_CommonState.TEXT_FONT_SIZE,null,states_CommonState.TEXT_FONT_SPACING);
		this.map = new flixel_addons_editors_tiled_TiledMap("assets/world.tmx");
		this.groundLayer = js_Boot.__cast(this.map.getLayer("Ground") , flixel_addons_editors_tiled_TiledTileLayer);
		this.bgLayer = js_Boot.__cast(this.map.getLayer("Background") , flixel_addons_editors_tiled_TiledImageLayer);
		this.objectLayer = js_Boot.__cast(this.map.getLayer("Objects") , flixel_addons_editors_tiled_TiledObjectLayer);
		this.guiLayer = js_Boot.__cast(this.map.getLayer("GUI") , flixel_addons_editors_tiled_TiledObjectLayer);
		this.tileSet = this.map.getTileSet("Overworld");
		this.spriteSet = this.map.getTileSet("Sprites");
		this.tilemap = new flixel_tile_FlxTilemap().loadMapFromArray(this.groundLayer.get_tileArray(),this.groundLayer.width,this.groundLayer.height,"assets/" + this.tileSet.imageSource,this.tileSet.tileWidth,this.tileSet.tileHeight,null,1,1,27);
		this.tilemap.set_immovable(true);
		this.tilemap.set_moves(false);
		this.tilemap.pixelPerfectPosition = false;
		this.tilemap.set_pixelPerfectRender(true);
		this.tilemap.useScaleHack = false;
		var __obj_init_tmp = new flixel_addons_display_FlxBackdrop("assets/" + this.bgLayer.imagePath,0,0,false,false);
		__obj_init_tmp.useScaleHack = false;
		__obj_init_tmp.set_solid(false);
		__obj_init_tmp.set_immovable(true);
		__obj_init_tmp.set_moves(false);
		this.bgImage = __obj_init_tmp;
		var highScore = 0;
		if(flixel_FlxG.save.data.highScore != null) {
			highScore = js_Boot.__cast(flixel_FlxG.save.data.highScore , Int);
		}
		var _g = 0;
		var _g1 = this.guiLayer.objects;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var _g2 = object.name;
			if(_g2 == "High Score Display") {
				var __obj_init_tmp1 = new flixel_text_FlxBitmapText(this.textFont);
				__obj_init_tmp1.set_x(object.x);
				__obj_init_tmp1.set_y(object.y);
				__obj_init_tmp1.set_alignment("left");
				__obj_init_tmp1.set_letterSpacing(Std.parseInt(object.properties.keys.get("letterSpacing")));
				__obj_init_tmp1.set_text("TOP " + highScore);
				__obj_init_tmp1.set_moves(false);
				__obj_init_tmp1.set_immovable(true);
				__obj_init_tmp1.set_solid(false);
				this.highScoreLabel = __obj_init_tmp1;
			}
		}
		this.add(this.bgImage);
		this.add(this.tilemap);
		this.add(this.highScoreLabel);
		flixel_FlxG.game["debugger"].watch.add("# Pooled FlxPoints",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxPoint.get_pool(),"length"));
		flixel_FlxG.game["debugger"].watch.add("# Pooled FlxRects",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxRect.get_pool(),"length"));
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxPoint.get_pool(),"length"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxRect.get_pool(),"length"));
	}
	,__class__: states_CommonState
});
var states_MenuState = function(MaxSize) {
	states_CommonState.call(this,MaxSize);
};
$hxClasses["states.MenuState"] = states_MenuState;
states_MenuState.__name__ = ["states","MenuState"];
states_MenuState.__super__ = states_CommonState;
states_MenuState.prototype = $extend(states_CommonState.prototype,{
	menuGuiLayer: null
	,_start: null
	,_about: null
	,_titleLetters: null
	,gate: null
	,gateLayer: null
	,create: function() {
		states_CommonState.prototype.create.call(this);
		this._titleLetters = new flixel_group_FlxTypedSpriteGroup("Rosie".length);
		this.menuGuiLayer = this.map.getLayer("MenuState GUI");
		this.gateLayer = this.map.getLayer("Gate");
		this.gate = new flixel_tile_FlxTilemap().loadMapFromArray(this.gateLayer.get_tileArray(),this.gateLayer.width,this.gateLayer.height,"assets/" + this.tileSet.imageSource,this.tileSet.tileWidth,this.tileSet.tileHeight,null,1);
		this.gate.useScaleHack = false;
		var _g = 0;
		var _g1 = this.menuGuiLayer.objects;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var _g2 = object.name;
			switch(_g2) {
			case "About Button":
				var source = this.spriteSet.getImageSourceByGid(object.gid).source;
				var index = source.lastIndexOf("/");
				var frameName = HxOverrides.substr(source,index + 1,null);
				var __obj_init_tmp = new flixel_ui_FlxBitmapTextButton(null,null,object.properties.keys.get("text"),function() {
					var nextState = new states_AboutState();
					if(flixel_FlxG.game._state.switchTo(nextState)) {
						flixel_FlxG.game._requestedState = nextState;
					}
				});
				__obj_init_tmp.set_x(object.x);
				__obj_init_tmp.set_y(object.y - object.height);
				__obj_init_tmp.set_frames(this.sprites);
				__obj_init_tmp.set_frame(this.sprites.framesHash.get(frameName));
				__obj_init_tmp.set_solid(false);
				__obj_init_tmp.set_immovable(true);
				this._about = __obj_init_tmp;
				this._about.label.set_font(this.textFont);
				this._about.label.set_letterSpacing(-3);
				this._about.label.set_alignment("center");
				this._about.label.set_color(-1);
				this._about.label.set_autoSize(false);
				this._about.label.set_fieldWidth(object.width);
				this._about.label.set_solid(false);
				this._about.label.set_immovable(true);
				var normalAnim = this._about.animation._animations.get("normal");
				normalAnim.frames = [this.sprites.getIndexByName(frameName)];
				var pressedAnim = this._about.animation._animations.get("pressed");
				pressedAnim.frames = [this.sprites.getIndexByName("button-01.png")];
				var highlightAnim = this._about.animation._animations.get("highlight");
				highlightAnim.frames = [this.sprites.getIndexByName("button-02.png")];
				var Y = this._about.label.get_height();
				var point = flixel_math_FlxPoint._pool.get().set(0,Y);
				point._inPool = false;
				point._weak = true;
				this._about.labelAlphas = [1.0,1.0,1.0];
				var Y1 = this._about.label.get_height() + 2;
				var point1 = flixel_math_FlxPoint._pool.get().set(0,Y1);
				point1._inPool = false;
				point1._weak = true;
				this._about.labelOffsets = [point,point,point1];
				this._about.updateHitbox();
				break;
			case "Play Button":
				var source1 = this.spriteSet.getImageSourceByGid(object.gid).source;
				var index1 = source1.lastIndexOf("/");
				var frameName1 = HxOverrides.substr(source1,index1 + 1,null);
				var __obj_init_tmp1 = new flixel_ui_FlxBitmapTextButton(null,null,object.properties.keys.get("text"),function() {
					var nextState1 = new states_PlayState();
					if(flixel_FlxG.game._state.switchTo(nextState1)) {
						flixel_FlxG.game._requestedState = nextState1;
					}
				});
				__obj_init_tmp1.set_x(object.x);
				__obj_init_tmp1.set_y(object.y - object.height);
				__obj_init_tmp1.set_frames(this.sprites);
				__obj_init_tmp1.set_frame(this.sprites.framesHash.get(frameName1));
				__obj_init_tmp1.set_solid(false);
				__obj_init_tmp1.set_immovable(true);
				this._start = __obj_init_tmp1;
				this._start.label.set_font(this.textFont);
				this._start.label.set_letterSpacing(-3);
				this._start.label.set_alignment("center");
				this._start.label.set_color(-1);
				this._start.label.set_autoSize(false);
				this._start.label.set_fieldWidth(object.width);
				this._start.label.set_solid(false);
				this._start.label.set_immovable(true);
				var normalAnim1 = this._start.animation._animations.get("normal");
				normalAnim1.frames = [this.sprites.getIndexByName(frameName1)];
				var pressedAnim1 = this._start.animation._animations.get("pressed");
				pressedAnim1.frames = [this.sprites.getIndexByName("button-01.png")];
				var highlightAnim1 = this._start.animation._animations.get("highlight");
				highlightAnim1.frames = [this.sprites.getIndexByName("button-02.png")];
				var Y2 = this._start.label.get_height();
				var point2 = flixel_math_FlxPoint._pool.get().set(0,Y2);
				point2._inPool = false;
				point2._weak = true;
				this._start.labelAlphas = [1.0,1.0,1.0];
				var Y3 = this._start.label.get_height() + 2;
				var point3 = flixel_math_FlxPoint._pool.get().set(0,Y3);
				point3._inPool = false;
				point3._weak = true;
				this._start.labelOffsets = [point2,point2,point3];
				this._start.updateHitbox();
				break;
			case "Title":
				this._titleLetters.setPosition(object.x,object.y);
				this._titleLetters.set_solid(false);
				this._titleLetters.set_immovable(true);
				var _g3 = 0;
				var _g21 = "Rosie".length;
				while(_g3 < _g21) {
					var i = _g3++;
					var text = new flixel_text_FlxBitmapText(this.font);
					text.set_text("Rosie".charAt(i));
					text.setPosition(16 * i,0);
					text.set_solid(false);
					text.set_immovable(true);
					var X = this._titleLetters.x + text.x;
					var Y4 = this._titleLetters.y + text.y;
					var point4 = flixel_math_FlxPoint._pool.get().set(X,Y4);
					point4._inPool = false;
					point4._weak = true;
					var X1 = this._titleLetters.x + text.x;
					var Y5 = this._titleLetters.y + text.y - 8;
					var point5 = flixel_math_FlxPoint._pool.get().set(X1,Y5);
					point5._inPool = false;
					point5._weak = true;
					var X2 = this._titleLetters.x + text.x;
					var Y6 = this._titleLetters.y + text.y + 8;
					var point6 = flixel_math_FlxPoint._pool.get().set(X2,Y6);
					point6._inPool = false;
					point6._weak = true;
					flixel_tweens_FlxTween.linearPath(text,[point4,point5,point4,point6,point4],0.75,true,{ startDelay : i * 0.1, loopDelay : 1, type : 2});
					this._titleLetters.add(text);
				}
				break;
			default:
			}
		}
		this.add(this.gate);
		this.add(this._start);
		this.add(this._about);
		this.add(this._titleLetters);
		var AnyObject = this._start;
		flixel_FlxG.game["debugger"].console.registeredObjects.set("playButton",AnyObject);
		flixel_system_debug_console_ConsoleUtil.registerObject("playButton",AnyObject);
	}
	,__class__: states_MenuState
});
var states_PlayState = function(MaxSize) {
	states_CommonState.call(this,MaxSize);
};
$hxClasses["states.PlayState"] = states_PlayState;
states_PlayState.__name__ = ["states","PlayState"];
states_PlayState.__super__ = states_CommonState;
states_PlayState.prototype = $extend(states_CommonState.prototype,{
	_blockGrid: null
	,_playGui: null
	,_hintGui: null
	,_gate: null
	,_gridSize: null
	,_gameOverText: null
	,_readyToLeaveState: null
	,_score: null
	,_time: null
	,_timeDisplay: null
	,_scoreDisplay: null
	,_timeChangeDisplay: null
	,_hints: null
	,_gravityIndicator: null
	,_gravityIndicatorCoordinates: null
	,_gravityPanel: null
	,_gravityPanelCoordinates: null
	,_rosie: null
	,_timeSinceLastGoodClick: null
	,OnGameStartAnimationStart: null
	,OnGameStart: null
	,OnGameStartAnimationFinish: null
	,OnGameOver: null
	,OnScore: null
	,OnGameOverAnimationFinish: null
	,round: null
	,gameRunning: null
	,create: function() {
		states_CommonState.prototype.create.call(this);
		this.OnGameOver = new flixel_util__$FlxSignal_FlxSignal0();
		this.OnScore = new flixel_util__$FlxSignal_FlxSignal1();
		this.OnGameStartAnimationStart = new flixel_util__$FlxSignal_FlxSignal0();
		this.OnGameOverAnimationFinish = new flixel_util__$FlxSignal_FlxSignal0();
		this.OnGameStart = new flixel_util__$FlxSignal_FlxSignal0();
		this.OnGameStartAnimationFinish = new flixel_util__$FlxSignal_FlxSignal0();
		this.OnGameOver.add(function() {
			haxe_Log.trace("OnGameOver",{ fileName : "PlayState.hx", lineNumber : 121, className : "states.PlayState", methodName : "create"});
		});
		this.OnScore.add(function(score) {
			haxe_Log.trace("OnScore(" + score + ")",{ fileName : "PlayState.hx", lineNumber : 122, className : "states.PlayState", methodName : "create"});
		});
		this.OnGameStartAnimationStart.add(function() {
			haxe_Log.trace("OnGameStartAnimationStart",{ fileName : "PlayState.hx", lineNumber : 123, className : "states.PlayState", methodName : "create"});
		});
		this.OnGameOverAnimationFinish.add(function() {
			haxe_Log.trace("OnGameOverAnimationFinish",{ fileName : "PlayState.hx", lineNumber : 124, className : "states.PlayState", methodName : "create"});
		});
		this.OnGameStart.add(function() {
			haxe_Log.trace("OnGameStart",{ fileName : "PlayState.hx", lineNumber : 125, className : "states.PlayState", methodName : "create"});
		});
		this.OnGameStartAnimationFinish.add(function() {
			haxe_Log.trace("OnGameStartAnimationFinish",{ fileName : "PlayState.hx", lineNumber : 126, className : "states.PlayState", methodName : "create"});
		});
		this._score = 0;
		this._time = 60;
		this._readyToLeaveState = false;
		this._playGui = this.map.getLayer("PlayState GUI");
		this._hintGui = this.map.getLayer("Hints");
		this._gravityIndicator = entities__$GravityIndicator_GravityIndicator_$Impl_$._new(0,0,this.sprites);
		var this1 = new Array(4);
		this._gravityIndicatorCoordinates = this1;
		var sprites = this.sprites;
		var this2;
		var __obj_init_tmp = new flixel_addons_display_FlxTiledSprite(null,0,0,true,true);
		__obj_init_tmp.set_x(0);
		__obj_init_tmp.set_y(0);
		this2 = __obj_init_tmp;
		this2.set_immovable(true);
		this2.set_solid(false);
		this2.set_moves(false);
		this2.loadFrame(sprites.framesHash.get("gravity-panel-00.png"));
		this._gravityPanel = this2;
		var this3 = new Array(4);
		this._gravityPanelCoordinates = this3;
		this._hints = new flixel_group_FlxTypedSpriteGroup();
		var _g = 0;
		var _g1 = this._hintGui.objects;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var _g2 = object.name;
			switch(_g2) {
			case "Hint Hand":
				var source = this.spriteSet.getImageSourceByGid(object.gid).source;
				var index = source.lastIndexOf("/");
				var __obj_init_tmp1 = new flixel_FlxSprite();
				__obj_init_tmp1.set_x(object.x);
				__obj_init_tmp1.set_y(object.y - object.height);
				__obj_init_tmp1.set_frames(this.sprites);
				var _this = this.sprites;
				var name = HxOverrides.substr(source,index + 1,null);
				__obj_init_tmp1.set_frame(_this.framesHash.get(name));
				__obj_init_tmp1.pixelPerfectPosition = false;
				__obj_init_tmp1.set_pixelPerfectRender(true);
				__obj_init_tmp1.set_solid(false);
				__obj_init_tmp1.set_immovable(true);
				var hand = __obj_init_tmp1;
				this._hints.add(hand);
				flixel_tweens_FlxTween.linearMotion(hand,hand.x,hand.y,hand.x,hand.y + 4,0.5,true,states_PlayState._handTweenOptions);
				break;
			case "Hint Text":
				var __obj_init_tmp2 = new flixel_text_FlxBitmapText(this.textFont);
				__obj_init_tmp2.set_x(object.x);
				__obj_init_tmp2.set_y(object.y);
				__obj_init_tmp2.pixelPerfectPosition = false;
				__obj_init_tmp2.set_pixelPerfectRender(true);
				__obj_init_tmp2.set_text(object.properties.keys.get("text"));
				__obj_init_tmp2.set_alignment("left");
				__obj_init_tmp2.set_width(object.width);
				__obj_init_tmp2.set_letterSpacing(Std.parseInt(object.properties.keys.get("letterSpacing")));
				__obj_init_tmp2.set_autoSize(object.properties.keys.get("autoSize") == "true");
				__obj_init_tmp2.set_solid(false);
				__obj_init_tmp2.set_moves(false);
				__obj_init_tmp2.set_immovable(true);
				var text = __obj_init_tmp2;
				this._hints.add(text);
				break;
			default:
				var source1 = this.spriteSet.getImageSourceByGid(object.gid).source;
				var index1 = source1.lastIndexOf("/");
				var tmp = this._hints;
				var __obj_init_tmp3 = new flixel_FlxSprite();
				__obj_init_tmp3.set_x(object.x);
				__obj_init_tmp3.set_y(object.y - object.height);
				__obj_init_tmp3.set_frames(this.sprites);
				var _this1 = this.sprites;
				var name1 = HxOverrides.substr(source1,index1 + 1,null);
				__obj_init_tmp3.set_frame(_this1.framesHash.get(name1));
				__obj_init_tmp3.set_moves(false);
				__obj_init_tmp3.set_immovable(true);
				__obj_init_tmp3.set_solid(false);
				tmp.add(__obj_init_tmp3);
			}
		}
		this.add(this._hints);
		var _g3 = 0;
		var _g11 = this.objectLayer.objects;
		while(_g3 < _g11.length) {
			var object1 = _g11[_g3];
			++_g3;
			var _g21 = object1.name;
			switch(_g21) {
			case "Gravity Indicator":
				var X = object1.x;
				var Y = object1.y;
				var point = flixel_math_FlxPoint._pool.get().set(X,Y);
				point._inPool = false;
				var coords = point;
				var gravity = object1.type;
				var direction;
				switch(gravity) {
				case "Down":
					direction = 0;
					break;
				case "Left":
					direction = 90;
					break;
				case "Right":
					direction = 270;
					break;
				case "Up":
					direction = 180;
					break;
				default:
					haxe_Log.trace("Warning: Invalid gravity direction " + gravity + " given",{ fileName : "GravityDirection.hx", lineNumber : 46, className : "entities._GravityDirection.GravityDirection_Impl_", methodName : "createByName"});
					direction = null;
				}
				var index2;
				switch(direction) {
				case 0:
					index2 = 0;
					break;
				case 90:
					index2 = 3;
					break;
				case 180:
					index2 = 2;
					break;
				case 270:
					index2 = 1;
					break;
				}
				this._gravityIndicatorCoordinates[index2] = coords;
				break;
			case "Gravity Panel":
				var X1 = object1.x;
				var Y1 = object1.y;
				var Width = object1.width;
				var Height = object1.height;
				var _this2 = flixel_math_FlxRect._pool.get();
				_this2.x = X1;
				_this2.y = Y1;
				_this2.width = Width;
				_this2.height = Height;
				var rect = _this2;
				rect._inPool = false;
				var coords1 = rect;
				var gravity1 = object1.type;
				var direction1;
				switch(gravity1) {
				case "Down":
					direction1 = 0;
					break;
				case "Left":
					direction1 = 90;
					break;
				case "Right":
					direction1 = 270;
					break;
				case "Up":
					direction1 = 180;
					break;
				default:
					haxe_Log.trace("Warning: Invalid gravity direction " + gravity1 + " given",{ fileName : "GravityDirection.hx", lineNumber : 46, className : "entities._GravityDirection.GravityDirection_Impl_", methodName : "createByName"});
					direction1 = null;
				}
				var index3;
				switch(direction1) {
				case 0:
					index3 = 0;
					break;
				case 90:
					index3 = 3;
					break;
				case 180:
					index3 = 2;
					break;
				case 270:
					index3 = 1;
					break;
				}
				this._gravityPanelCoordinates[index3] = coords1;
				break;
			case "Grid":
				this._gridSize = Std.parseInt(object1.properties.keys.get("size"));
				var __obj_init_tmp4 = new flixel_addons_display_FlxTiledSprite(this.sprites.parent,this._gridSize * this.tileSet.tileWidth,this._gridSize * this.tileSet.tileHeight,true,true);
				__obj_init_tmp4.set_x(object1.x);
				__obj_init_tmp4.set_y(object1.y);
				__obj_init_tmp4.set_pixelPerfectRender(true);
				__obj_init_tmp4.pixelPerfectPosition = false;
				__obj_init_tmp4.set_moves(false);
				__obj_init_tmp4.set_immovable(true);
				__obj_init_tmp4.set_solid(false);
				this._gate = __obj_init_tmp4;
				this._gate.loadFrame(this.sprites.framesHash.get("gate.png"));
				this._blockGrid = new entities_BlockGrid(object1.x,object1.y,this._gridSize,this.sprites);
				break;
			case "Rosie":
				var __obj_init_tmp5 = new entities_Rosie(object1.x,object1.y - object1.height,this.sprites,this.tilemap);
				__obj_init_tmp5.pixelPerfectPosition = false;
				__obj_init_tmp5.set_pixelPerfectRender(true);
				this._rosie = __obj_init_tmp5;
				break;
			default:
			}
		}
		var _g4 = 0;
		while(_g4 < 4) {
			var i = _g4++;
			if(true != (this._gravityIndicatorCoordinates[i] != null)) {
				throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("this._gravityIndicatorCoordinates.get(i) != null",{ fileName : "PlayState.hx", lineNumber : 250, className : "states.PlayState", methodName : "create"}));
			}
			if(true != (this._gravityPanelCoordinates[i] != null)) {
				throw new js__$Boot_HaxeError(new de_polygonal_ds_tools_AssertError("this._gravityPanelCoordinates.get(i) != null",{ fileName : "PlayState.hx", lineNumber : 251, className : "states.PlayState", methodName : "create"}));
			}
		}
		var _g5 = 0;
		var _g12 = this._playGui.objects;
		while(_g5 < _g12.length) {
			var object2 = _g12[_g5];
			++_g5;
			var _g22 = object2.name;
			switch(_g22) {
			case "Game Over":
				var __obj_init_tmp6 = new flixel_text_FlxBitmapText(this.font);
				__obj_init_tmp6.set_text(object2.properties.keys.get("text"));
				__obj_init_tmp6.set_x(object2.x);
				__obj_init_tmp6.set_y(object2.y);
				__obj_init_tmp6.set_alignment("center");
				__obj_init_tmp6.set_letterSpacing(Std.parseInt(object2.properties.keys.get("letterSpacing")));
				__obj_init_tmp6.set_moves(false);
				__obj_init_tmp6.set_immovable(true);
				__obj_init_tmp6.set_solid(false);
				this._gameOverText = __obj_init_tmp6;
				break;
			case "Score Display":
				var __obj_init_tmp7 = new flixel_text_FlxBitmapText(this.font);
				__obj_init_tmp7.set_text("0");
				__obj_init_tmp7.set_x(object2.x);
				__obj_init_tmp7.set_y(object2.y);
				__obj_init_tmp7.set_letterSpacing(Std.parseInt(object2.properties.keys.get("letterSpacing")));
				__obj_init_tmp7.set_autoSize(object2.properties.keys.get("autoSize") == "true");
				__obj_init_tmp7.set_alignment("right");
				__obj_init_tmp7.set_moves(false);
				__obj_init_tmp7.set_immovable(true);
				__obj_init_tmp7.set_solid(false);
				this._scoreDisplay = __obj_init_tmp7;
				break;
			case "Time Remaining":
				var __obj_init_tmp8 = new flixel_text_FlxBitmapText(this.textFont);
				__obj_init_tmp8.set_text(de_polygonal_Printf.format("⌚   %.1f",[Math.max(0,this._time)]));
				__obj_init_tmp8.set_x(object2.x);
				__obj_init_tmp8.set_y(object2.y);
				__obj_init_tmp8.set_alignment("right");
				__obj_init_tmp8.set_letterSpacing(Std.parseInt(object2.properties.keys.get("letterSpacing")));
				__obj_init_tmp8.set_moves(false);
				__obj_init_tmp8.set_immovable(true);
				__obj_init_tmp8.set_solid(false);
				this._timeDisplay = __obj_init_tmp8;
				var __obj_init_tmp9 = new flixel_text_FlxBitmapText(this.textFont);
				__obj_init_tmp9.set_x(this._timeDisplay.x);
				__obj_init_tmp9.set_y(this._timeDisplay.y);
				__obj_init_tmp9.set_alignment(this._timeDisplay.alignment);
				__obj_init_tmp9.set_letterSpacing(this._timeDisplay.letterSpacing);
				__obj_init_tmp9.set_moves(false);
				__obj_init_tmp9.set_immovable(true);
				__obj_init_tmp9.set_solid(false);
				this._timeChangeDisplay = __obj_init_tmp9;
				break;
			}
		}
		var _gthis = this;
		this.OnGameStartAnimationStart.addOnce(function() {
			var block = new flixel_group_FlxTypedGroupIterator(_gthis._blockGrid.group.members,null);
			while(block.hasNext()) {
				var block1 = block.next();
				flixel_input_mouse_FlxMouseEventManager.setObjectMouseEnabled(block1,false);
			}
			var _gameStartGate = null;
			_gameStartGate = new util_FlxAsyncIteratorLoop(new IntIterator(0,_gthis._gridSize),function(row) {
				var _g6 = _gthis._gate;
				_g6.set_height(_g6.get_height() - _gthis.tileSet.tileHeight);
				flixel_FlxG.sound.play("assets/sounds/gate-move.wav",null,false,null,false);
			},null,function() {
				_gthis.remove(_gameStartGate);
				_gthis.remove(_gthis._gate);
				_gthis._gate.kill();
				new flixel_util_FlxTimer().start(1,function(_) {
					_gthis.OnGameStartAnimationFinish.dispatch();
				});
			},8);
			_gthis.add(_gameStartGate);
			_gameStartGate.start();
		});
		this.OnGameStartAnimationFinish.addOnce(function() {
			_gthis._blockGrid.group.forEach(function(b) {
				flixel_input_mouse_FlxMouseEventManager.setObjectMouseEnabled(b,true);
			},false);
			_gthis.OnGameStart.dispatch();
		});
		this.OnGameStart.add(function() {
			_gthis.gameRunning = true;
			flixel_FlxG.sound.playMusic("assets/music/music.ogg",1,true);
		});
		this.OnScore.add($bind(this,this._increaseScore));
		this._blockGrid.OnSuccessfulClick.add($bind(this,this._getReadyToComputeScore));
		this._blockGrid.OnSuccessfulClick.add($bind(this,this._setRosieEmote));
		this._blockGrid.OnBadClick.add($bind(this,this._subtractTime));
		this._blockGrid.OnBadClick.add($bind(this,this._playNotAllowed));
		this._blockGrid.OnBadClick.add($bind(this,this._rosieEmoteBadClick));
		this._blockGrid.OnBeforeBlocksGenerated.add(function() {
			_gthis.round++;
			var _g7 = _gthis.round;
			var tmp1;
			switch(_g7) {
			case 1:case 2:
				tmp1 = 4;
				break;
			case 3:case 4:
				tmp1 = 5;
				break;
			default:
				tmp1 = 6;
			}
			_gthis._blockGrid.set_numColors(tmp1);
		});
		this._blockGrid.OnStopMoving.add(function() {
			var index4;
			switch(_gthis._blockGrid.gravity) {
			case 0:
				index4 = 0;
				break;
			case 90:
				index4 = 3;
				break;
			case 180:
				index4 = 2;
				break;
			case 270:
				index4 = 1;
				break;
			}
			var indicatorCoords = _gthis._gravityIndicatorCoordinates[index4];
			_gthis._gravityIndicator.setPosition(indicatorCoords.x,indicatorCoords.y);
			var _g8;
			switch(index4) {
			case 0:
				_g8 = 0;
				break;
			case 1:
				_g8 = 270;
				break;
			case 2:
				_g8 = 180;
				break;
			case 3:
				_g8 = 90;
				break;
			default:
				haxe_Log.trace("Warning: Invalid gravity index " + index4 + " given",{ fileName : "GravityDirection.hx", lineNumber : 59, className : "entities._GravityDirection.GravityDirection_Impl_", methodName : "createByIndex"});
				_g8 = null;
			}
			switch(_g8) {
			case 0:case 180:
				_gthis._gravityIndicator.animation.play("horizontal");
				break;
			case 90:case 270:
				_gthis._gravityIndicator.animation.play("vertical");
				break;
			}
			var _this3 = _gthis._gravityIndicator;
			_this3.set_width(_this3.frameWidth);
			_this3.set_height(_this3.frameHeight);
			var panelCoords = _gthis._gravityPanelCoordinates[index4];
			_gthis._gravityPanel.setPosition(panelCoords.x,panelCoords.y);
			_gthis._gravityPanel.setSize(panelCoords.width,panelCoords.height);
		});
		this._blockGrid.OnBlocksGenerated.add($bind(this,this._addBonusTime));
		this._blockGrid.OnBlocksGenerated.add(function(blocks) {
			flixel_FlxG.sound.play("assets/sounds/blocks-appear.wav",null,false,null,false);
			var _g9 = 0;
			while(_g9 < blocks.length) {
				var block2 = [blocks[_g9]];
				++_g9;
				block2[0].animation.finishCallback = (function(block3) {
					return function(_1) {
						flixel_input_mouse_FlxMouseEventManager.setObjectMouseEnabled(block3[0],true);
						block3[0].animation.finishCallback = null;
						var tmp2 = block3[0].frames.framesHash.get(block3[0].blockColor);
						block3[0].set_frame(tmp2);
					};
				})(block2);
				block2[0].animation.play("appear");
			}
		});
		this.OnGameOver.addOnce(function() {
			if(flixel_FlxG.sound.music != null) {
				var _this4 = flixel_FlxG.sound.music;
				_this4.cleanup(_this4.autoDestroy,true);
			}
			_gthis._gravityIndicator.set_exists(false);
			_gthis._gravityPanel.set_exists(false);
			var _this5 = _gthis._rosie.emote;
			var s = "doh";
			if(_this5.state != s) {
				_this5.animation.stop();
			}
			_this5.state = s;
			_this5.set_visible(_this5.state != "none");
			if(s != "none") {
				_this5.animation.play(_this5.state);
			}
			flixel_input_mouse_FlxMouseEventManager.removeAll();
			var _gameEndGate = new util_FlxAsyncIteratorLoop(new IntIterator(0,_gthis._gridSize - 1),function(row1) {
				var _g10 = _gthis._gate;
				_g10.set_height(_g10.get_height() + _gthis.tileSet.tileHeight);
				flixel_FlxG.sound.play("assets/sounds/gate-move.wav",null,false,null,false);
			},function() {
				flixel_FlxG.sound.play("assets/sounds/gate-move.wav",null,false,null,false);
				_gthis._gate.revive();
				_gthis.add(_gthis._gate);
			},function() {
				new flixel_util_FlxTimer().start(0.5,function(_2) {
					_gthis.OnGameOverAnimationFinish.dispatch();
				});
			},8);
			_gthis.add(_gameEndGate);
			_gameEndGate.start();
		});
		this.OnGameOverAnimationFinish.addOnce(function() {
			_gthis.add(_gthis._gameOverText);
			_gthis.remove(_gthis._blockGrid);
			_gthis.remove(_gthis._gravityIndicator);
			_gthis.remove(_gthis._gravityPanel);
			flixel_FlxG.sound.play("assets/music/game-over.ogg",null,false,null,null,function() {
				new flixel_util_FlxTimer().start(1,function(_3) {
					flixel_FlxG.sound.playMusic("assets/music/game-over-loop.ogg");
				});
			});
			var highScore = 0;
			if(flixel_FlxG.save.data.highScore != null) {
				highScore = js_Boot.__cast(flixel_FlxG.save.data.highScore , Int);
			}
			if(_gthis._score > highScore) {
				_gthis.highScoreLabel.set_text("TOP " + _gthis._score);
				flixel_FlxG.save.data.highScore = _gthis._score;
				flixel_FlxG.save.flush(null,function(success) {
					_gthis._readyToLeaveState = true;
					if(success) {
						haxe_Log.trace("Saved high score of " + _gthis._score,{ fileName : "PlayState.hx", lineNumber : 585, className : "states.PlayState", methodName : "_initCallbacks"});
					} else {
						haxe_Log.trace("Failed to save high score of " + _gthis._score,{ fileName : "PlayState.hx", lineNumber : 588, className : "states.PlayState", methodName : "_initCallbacks"});
					}
				});
				flixel_FlxG.sound.play("assets/sounds/high-score.wav");
			} else {
				_gthis._readyToLeaveState = true;
			}
		});
		var AnyObject = this._blockGrid;
		flixel_FlxG.game["debugger"].console.registeredObjects.set("blockGrid",AnyObject);
		flixel_system_debug_console_ConsoleUtil.registerObject("blockGrid",AnyObject);
		var AnyObject1 = this.tileSet;
		flixel_FlxG.game["debugger"].console.registeredObjects.set("tileSet",AnyObject1);
		flixel_system_debug_console_ConsoleUtil.registerObject("tileSet",AnyObject1);
		var AnyObject2 = this.sprites;
		flixel_FlxG.game["debugger"].console.registeredObjects.set("sprites",AnyObject2);
		flixel_system_debug_console_ConsoleUtil.registerObject("sprites",AnyObject2);
		var AnyObject3 = flixel_FlxG.log;
		flixel_FlxG.game["debugger"].console.registeredObjects.set("log",AnyObject3);
		flixel_system_debug_console_ConsoleUtil.registerObject("log",AnyObject3);
		var AnyObject4 = this._gate;
		flixel_FlxG.game["debugger"].console.registeredObjects.set("gate",AnyObject4);
		flixel_system_debug_console_ConsoleUtil.registerObject("gate",AnyObject4);
		var AnyObject5 = this._rosie;
		flixel_FlxG.game["debugger"].console.registeredObjects.set("rosie",AnyObject5);
		flixel_system_debug_console_ConsoleUtil.registerObject("rosie",AnyObject5);
		flixel_FlxG.game["debugger"].watch.add("Blocks Moving",flixel_system_debug_watch_WatchEntryData.FIELD(this._blockGrid,"_blocksMoving"));
		flixel_FlxG.watch.addExpression("blockGrid.countLiving()","# Blocks Alive");
		flixel_FlxG.watch.addExpression("blockGrid.countDead()","# Blocks Dead");
		flixel_FlxG.watch.addExpression("blockGrid.length","# Blocks");
		flixel_FlxG.game["debugger"].watch.add("# Colors",flixel_system_debug_watch_WatchEntryData.FIELD(this._blockGrid,"numColors"));
		flixel_FlxG.game["debugger"].watch.add("Round",flixel_system_debug_watch_WatchEntryData.FIELD(this,"round"));
		flixel_FlxG.game["debugger"].watch.add("Score",flixel_system_debug_watch_WatchEntryData.FIELD(this,"_score"));
		flixel_FlxG.game["debugger"].watch.add("Time",flixel_system_debug_watch_WatchEntryData.FIELD(this,"_time"));
		flixel_FlxG.game["debugger"].watch.add("Rosie's State Age",flixel_system_debug_watch_WatchEntryData.FIELD(this._rosie.fsm,"age"));
		flixel_FlxG.game["debugger"].watch.add("Time Since Last Good Click",flixel_system_debug_watch_WatchEntryData.FIELD(this,"_timeSinceLastGoodClick"));
		flixel_FlxG.game["debugger"].watch.add("# Pooled FlxPoints",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxPoint.get_pool(),"length"));
		flixel_FlxG.game["debugger"].watch.add("# Pooled FlxRects",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxRect.get_pool(),"length"));
		this.add(this._gravityPanel);
		this.add(this._gravityIndicator);
		this.add(this._blockGrid);
		this.add(this._rosie);
		this.add(this._gate);
		this.add(this._timeDisplay);
		this.add(this._timeChangeDisplay);
		this.add(this._scoreDisplay);
		this._timeSinceLastGoodClick = 0;
		this.round = 1;
		this.OnGameStartAnimationStart.dispatch();
	}
	,update: function(elapsed) {
		states_CommonState.prototype.update.call(this,elapsed);
		if(this._blockGrid.readyForInput && this.gameRunning) {
			this._time -= elapsed;
			this._timeSinceLastGoodClick += elapsed;
			this._timeDisplay.set_text(de_polygonal_Printf.format("⌚   %.1f",[Math.max(0,this._time)]));
			if(this._timeSinceLastGoodClick >= 10 && this._rosie.emote.state == "none" && flixel_FlxG.random["float"](0,100) < 1) {
				var _this = this._rosie.emote;
				var s = flixel_FlxG.random.getObject_entities_EmoteState(["bored","confused","huh"]);
				if(_this.state != s) {
					_this.animation.stop();
				}
				_this.state = s;
				_this.set_visible(_this.state != "none");
				if(s != "none") {
					_this.animation.play(_this.state);
				}
			}
			if(this._time <= 11 && Math.abs(this._time - Math.round(this._time)) < 0.000001) {
				flixel_FlxG.sound.play("assets/sounds/time-running-out.wav",null,false,null,false);
			}
		}
		if(this._time <= 0 && this.gameRunning) {
			this.gameRunning = false;
			this.OnGameOver.dispatch();
		} else if(!this.gameRunning && this._time <= 0) {
			if(this._readyToLeaveState && flixel_FlxG.mouse._leftButton.current == 2) {
				var nextState = new states_MenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			}
		}
	}
	,destroy: function() {
		states_CommonState.prototype.destroy.call(this);
		if(flixel_FlxG.sound.music != null) {
			var _this = flixel_FlxG.sound.music;
			_this.cleanup(_this.autoDestroy,true);
		}
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(this._blockGrid,"_blocksMoving"));
		flixel_FlxG.watch.removeExpression("blockGrid.countLiving()");
		flixel_FlxG.watch.removeExpression("blockGrid.countDead()");
		flixel_FlxG.watch.removeExpression("blockGrid.length");
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(this._blockGrid,"numColors"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(this,"round"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(this,"_score"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(this,"_time"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(this._rosie.fsm,"age"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(this,"_timeSinceLastGoodClick"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxPoint.get_pool(),"length"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxRect.get_pool(),"length"));
		var _g = 0;
		var _g1 = this._gravityPanelCoordinates;
		while(_g < _g1.length) {
			var rect = _g1[_g];
			++_g;
			(js_Boot.__cast(flixel_math_FlxRect.get_pool() , flixel_util_FlxPool_$flixel_$math_$FlxRect)).put(rect);
		}
		var _g2 = 0;
		var _g11 = this._gravityIndicatorCoordinates;
		while(_g2 < _g11.length) {
			var point = _g11[_g2];
			++_g2;
			(js_Boot.__cast(flixel_math_FlxPoint.get_pool() , flixel_util_FlxPool_$flixel_$math_$FlxPoint)).put(point);
		}
		this._blockGrid = null;
		this._playGui = null;
		this._gate = null;
		this._timeDisplay = null;
		this._scoreDisplay = null;
		this._timeChangeDisplay = null;
		this._hints = null;
		this._gravityIndicatorCoordinates = null;
		this._gravityPanel = null;
		this._gravityIndicator = null;
		this._gravityPanelCoordinates = null;
	}
	,_initCallbacks: function() {
		var _gthis = this;
		this.OnGameStartAnimationStart.addOnce(function() {
			var block = new flixel_group_FlxTypedGroupIterator(_gthis._blockGrid.group.members,null);
			while(block.hasNext()) {
				var block1 = block.next();
				flixel_input_mouse_FlxMouseEventManager.setObjectMouseEnabled(block1,false);
			}
			var _gameStartGate = null;
			_gameStartGate = new util_FlxAsyncIteratorLoop(new IntIterator(0,_gthis._gridSize),function(row) {
				var _g = _gthis._gate;
				_g.set_height(_g.get_height() - _gthis.tileSet.tileHeight);
				flixel_FlxG.sound.play("assets/sounds/gate-move.wav",null,false,null,false);
			},null,function() {
				_gthis.remove(_gameStartGate);
				_gthis.remove(_gthis._gate);
				_gthis._gate.kill();
				new flixel_util_FlxTimer().start(1,function(_) {
					_gthis.OnGameStartAnimationFinish.dispatch();
				});
			},8);
			_gthis.add(_gameStartGate);
			_gameStartGate.start();
		});
		this.OnGameStartAnimationFinish.addOnce(function() {
			_gthis._blockGrid.group.forEach(function(b) {
				flixel_input_mouse_FlxMouseEventManager.setObjectMouseEnabled(b,true);
			},false);
			_gthis.OnGameStart.dispatch();
		});
		this.OnGameStart.add(function() {
			_gthis.gameRunning = true;
			flixel_FlxG.sound.playMusic("assets/music/music.ogg",1,true);
		});
		this.OnScore.add($bind(this,this._increaseScore));
		this._blockGrid.OnSuccessfulClick.add($bind(this,this._getReadyToComputeScore));
		this._blockGrid.OnSuccessfulClick.add($bind(this,this._setRosieEmote));
		this._blockGrid.OnBadClick.add($bind(this,this._subtractTime));
		this._blockGrid.OnBadClick.add($bind(this,this._playNotAllowed));
		this._blockGrid.OnBadClick.add($bind(this,this._rosieEmoteBadClick));
		this._blockGrid.OnBeforeBlocksGenerated.add(function() {
			_gthis.round++;
			var _g1 = _gthis.round;
			var tmp;
			switch(_g1) {
			case 1:case 2:
				tmp = 4;
				break;
			case 3:case 4:
				tmp = 5;
				break;
			default:
				tmp = 6;
			}
			_gthis._blockGrid.set_numColors(tmp);
		});
		this._blockGrid.OnStopMoving.add(function() {
			var index;
			switch(_gthis._blockGrid.gravity) {
			case 0:
				index = 0;
				break;
			case 90:
				index = 3;
				break;
			case 180:
				index = 2;
				break;
			case 270:
				index = 1;
				break;
			}
			var indicatorCoords = _gthis._gravityIndicatorCoordinates[index];
			_gthis._gravityIndicator.setPosition(indicatorCoords.x,indicatorCoords.y);
			var _g2;
			switch(index) {
			case 0:
				_g2 = 0;
				break;
			case 1:
				_g2 = 270;
				break;
			case 2:
				_g2 = 180;
				break;
			case 3:
				_g2 = 90;
				break;
			default:
				haxe_Log.trace("Warning: Invalid gravity index " + index + " given",{ fileName : "GravityDirection.hx", lineNumber : 59, className : "entities._GravityDirection.GravityDirection_Impl_", methodName : "createByIndex"});
				_g2 = null;
			}
			switch(_g2) {
			case 0:case 180:
				_gthis._gravityIndicator.animation.play("horizontal");
				break;
			case 90:case 270:
				_gthis._gravityIndicator.animation.play("vertical");
				break;
			}
			var _this = _gthis._gravityIndicator;
			_this.set_width(_this.frameWidth);
			_this.set_height(_this.frameHeight);
			var panelCoords = _gthis._gravityPanelCoordinates[index];
			_gthis._gravityPanel.setPosition(panelCoords.x,panelCoords.y);
			_gthis._gravityPanel.setSize(panelCoords.width,panelCoords.height);
		});
		this._blockGrid.OnBlocksGenerated.add($bind(this,this._addBonusTime));
		this._blockGrid.OnBlocksGenerated.add(function(blocks) {
			flixel_FlxG.sound.play("assets/sounds/blocks-appear.wav",null,false,null,false);
			var _g3 = 0;
			while(_g3 < blocks.length) {
				var block2 = [blocks[_g3]];
				++_g3;
				block2[0].animation.finishCallback = (function(block3) {
					return function(_1) {
						flixel_input_mouse_FlxMouseEventManager.setObjectMouseEnabled(block3[0],true);
						block3[0].animation.finishCallback = null;
						var tmp1 = block3[0].frames.framesHash.get(block3[0].blockColor);
						block3[0].set_frame(tmp1);
					};
				})(block2);
				block2[0].animation.play("appear");
			}
		});
		this.OnGameOver.addOnce(function() {
			if(flixel_FlxG.sound.music != null) {
				var _this1 = flixel_FlxG.sound.music;
				_this1.cleanup(_this1.autoDestroy,true);
			}
			_gthis._gravityIndicator.set_exists(false);
			_gthis._gravityPanel.set_exists(false);
			var _this2 = _gthis._rosie.emote;
			var s = "doh";
			if(_this2.state != s) {
				_this2.animation.stop();
			}
			_this2.state = s;
			_this2.set_visible(_this2.state != "none");
			_this2.animation.play(_this2.state);
			flixel_input_mouse_FlxMouseEventManager.removeAll();
			var _gameEndGate = new util_FlxAsyncIteratorLoop(new IntIterator(0,_gthis._gridSize - 1),function(row1) {
				var _g4 = _gthis._gate;
				_g4.set_height(_g4.get_height() + _gthis.tileSet.tileHeight);
				flixel_FlxG.sound.play("assets/sounds/gate-move.wav",null,false,null,false);
			},function() {
				flixel_FlxG.sound.play("assets/sounds/gate-move.wav",null,false,null,false);
				_gthis._gate.revive();
				_gthis.add(_gthis._gate);
			},function() {
				new flixel_util_FlxTimer().start(0.5,function(_2) {
					_gthis.OnGameOverAnimationFinish.dispatch();
				});
			},8);
			_gthis.add(_gameEndGate);
			_gameEndGate.start();
		});
		this.OnGameOverAnimationFinish.addOnce(function() {
			_gthis.add(_gthis._gameOverText);
			_gthis.remove(_gthis._blockGrid);
			_gthis.remove(_gthis._gravityIndicator);
			_gthis.remove(_gthis._gravityPanel);
			flixel_FlxG.sound.play("assets/music/game-over.ogg",null,false,null,null,function() {
				new flixel_util_FlxTimer().start(1,function(_3) {
					flixel_FlxG.sound.playMusic("assets/music/game-over-loop.ogg");
				});
			});
			var highScore = 0;
			if(flixel_FlxG.save.data.highScore != null) {
				highScore = js_Boot.__cast(flixel_FlxG.save.data.highScore , Int);
			}
			if(_gthis._score > highScore) {
				_gthis.highScoreLabel.set_text("TOP " + _gthis._score);
				flixel_FlxG.save.data.highScore = _gthis._score;
				flixel_FlxG.save.flush(null,function(success) {
					_gthis._readyToLeaveState = true;
					if(success) {
						haxe_Log.trace("Saved high score of " + _gthis._score,{ fileName : "PlayState.hx", lineNumber : 585, className : "states.PlayState", methodName : "_initCallbacks"});
					} else {
						haxe_Log.trace("Failed to save high score of " + _gthis._score,{ fileName : "PlayState.hx", lineNumber : 588, className : "states.PlayState", methodName : "_initCallbacks"});
					}
				});
				flixel_FlxG.sound.play("assets/sounds/high-score.wav");
			} else {
				_gthis._readyToLeaveState = true;
			}
		});
	}
	,onFocusLost: function() {
		flixel_FlxG.camera.fill(-16777216,false);
	}
	,_getReadyToComputeScore: function(blocks) {
		this._timeSinceLastGoodClick = 0;
		flixel_FlxG.sound.play("assets/sounds/clear-blocks.wav",null,false,null,false);
		this.OnScore.dispatch((blocks.length - 2) * (blocks.length - 2));
	}
	,_setRosieEmote: function(blocks) {
		if(blocks.length == 3 && this._rosie.emote.state == "none" && flixel_FlxG.random["float"](0,100) < 60) {
			var _this = this._rosie.emote;
			var s = "neutral";
			if(_this.state != s) {
				_this.animation.stop();
			}
			_this.state = s;
			_this.set_visible(_this.state != "none");
			_this.animation.play(_this.state);
		} else if(blocks.length >= 10) {
			var _this1 = this._rosie.emote;
			var s1 = "very-happy";
			if(_this1.state != s1) {
				_this1.animation.stop();
			}
			_this1.state = s1;
			_this1.set_visible(_this1.state != "none");
			_this1.animation.play(_this1.state);
		} else if(blocks.length >= 7 && this._rosie.emote.state != "very-happy") {
			var _this2 = this._rosie.emote;
			var s2 = "happy";
			if(_this2.state != s2) {
				_this2.animation.stop();
			}
			_this2.state = s2;
			_this2.set_visible(_this2.state != "none");
			_this2.animation.play(_this2.state);
		}
	}
	,_increaseScore: function(score) {
		this._score += score;
		this._scoreDisplay.set_text(Std.string(this._score));
	}
	,_subtractTime: function(blocks) {
		this._time -= 1.0;
		this._timeChangeDisplay.set_color(-65536);
		this._timeChangeDisplay.set_text(de_polygonal_Printf.format("-%.1f",[1.0]));
		flixel_tweens_FlxTween.linearMotion(this._timeChangeDisplay,this._timeDisplay.x,this._timeDisplay.y,this._timeDisplay.x,this._timeDisplay.y + 8,0.5,true);
		var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
		color &= -16711681;
		color |= 16711680;
		color &= -65281;
		color |= 0;
		color &= -256;
		color |= 0;
		color &= 16777215;
		color |= 0;
		flixel_tweens_FlxTween.color(this._timeChangeDisplay,0.5,-65536,color,{ startDelay : 0.1});
	}
	,_playNotAllowed: function(_) {
		flixel_FlxG.sound.play("assets/sounds/not-allowed.wav",null,false,null,false);
	}
	,_rosieEmoteBadClick: function(_) {
		if(this._rosie.emote.state == "none" && flixel_FlxG.random["float"](0,100) < 30) {
			var _this = this._rosie.emote;
			var s = flixel_FlxG.random.getObject_entities_EmoteState(states_PlayState.BadClickEmotes,states_PlayState.BadClickEmoteWeights);
			if(_this.state != s) {
				_this.animation.stop();
			}
			_this.state = s;
			_this.set_visible(_this.state != "none");
			if(s != "none") {
				_this.animation.play(_this.state);
			}
		}
	}
	,_addBonusTime: function(blocks) {
		var blocksCreated = blocks.length;
		var bonus = blocksCreated * 0.05;
		this._time = Math.min(this._time + bonus,60);
		this._timeChangeDisplay.set_color(-16744448);
		this._timeChangeDisplay.set_text(de_polygonal_Printf.format("+%.1f",[bonus]));
		flixel_tweens_FlxTween.linearMotion(this._timeChangeDisplay,this._timeDisplay.x,this._timeDisplay.y,this._timeDisplay.x,this._timeDisplay.y - 8,0.5,true);
		var color = flixel_util__$FlxColor_FlxColor_$Impl_$._new();
		color &= -16711681;
		color |= 0;
		color &= -65281;
		color |= 65280;
		color &= -256;
		color |= 0;
		color &= 16777215;
		color |= 0;
		flixel_tweens_FlxTween.color(this._timeChangeDisplay,0.5,-16744448,color,{ startDelay : 0.1});
	}
	,__class__: states_PlayState
});
var states_SplashScreenState = function(MaxSize) {
	flixel_FlxState.call(this,MaxSize);
};
$hxClasses["states.SplashScreenState"] = states_SplashScreenState;
states_SplashScreenState.__name__ = ["states","SplashScreenState"];
states_SplashScreenState.__super__ = flixel_FlxState;
states_SplashScreenState.prototype = $extend(flixel_FlxState.prototype,{
	logo: null
	,rosie: null
	,animationDone: null
	,timer: null
	,OnAnimationDone: null
	,create: function() {
		var _gthis = this;
		flixel_FlxState.prototype.create.call(this);
		this.OnAnimationDone = new flixel_util__$FlxSignal_FlxSignal0();
		this.OnAnimationDone.add(function() {
			haxe_Log.trace("OnAnimationDone",{ fileName : "SplashScreenState.hx", lineNumber : 56, className : "states.SplashScreenState", methodName : "create"});
		});
		this.animationDone = false;
		this.set_bgColor(-16316665);
		var map = new flixel_addons_editors_tiled_TiledMap("assets/splash.tmx");
		var sprites = flixel_graphics_frames_FlxAtlasFrames.fromTexturePackerJson("assets/gfx.png","assets/gfx.json");
		var objects = map.getLayer("Splash Screen");
		var _g = 0;
		var _g1 = objects.objects;
		while(_g < _g1.length) {
			var object = _g1[_g];
			++_g;
			var _g2 = object.type;
			switch(_g2) {
			case "Logo":
				var __obj_init_tmp = new flixel_FlxSprite(object.x,object.y,"assets/images/" + object.properties.keys.get("image"));
				var Height = object.height;
				var _this = flixel_math_FlxRect._pool.get();
				_this.x = 0;
				_this.y = 0;
				_this.width = 0;
				_this.height = Height;
				_this._inPool = false;
				_this._weak = true;
				__obj_init_tmp.set_clipRect(_this);
				__obj_init_tmp.set_solid(false);
				__obj_init_tmp.set_immovable(true);
				this.logo = __obj_init_tmp;
				this.add(this.logo);
				break;
			case "Rosie":
				var __obj_init_tmp1 = new flixel_FlxSprite(object.x,object.y - object.height);
				__obj_init_tmp1.set_frames(sprites);
				__obj_init_tmp1.set_frame(sprites.framesHash.get(entities_Rosie.IDLE_FRAMES[0]));
				__obj_init_tmp1.set_solid(false);
				__obj_init_tmp1.set_immovable(true);
				this.rosie = __obj_init_tmp1;
				this.rosie.animation.addByNames("idle",entities_Rosie.IDLE_FRAMES,6,true);
				this.rosie.animation.addByNames("run",entities_Rosie.RUN_FRAMES,12,true);
				this.rosie.animation.play("run");
				var _this1 = this.rosie;
				_this1.set_width(_this1.frameWidth);
				_this1.set_height(_this1.frameHeight);
				this.rosie.updateHitbox();
				flixel_tweens_FlxTween.linearMotion(this.rosie,this.rosie.x,this.rosie.y,parseFloat(object.properties.keys.get("endX")),this.rosie.y,64,false,{ type : 1, onComplete : function(_) {
					_gthis.rosie.animation.play("idle");
					_gthis.OnAnimationDone.dispatch();
				}, onUpdate : function(_1) {
					if(_gthis.rosie.x >= _gthis.logo.x) {
						var rect = _gthis.logo.clipRect;
						rect.width = Math.min(_gthis.rosie.x - _gthis.logo.x,_gthis.logo.get_width());
						_gthis.logo.set_clipRect(rect);
					}
				}});
				this.add(this.rosie);
				break;
			}
		}
		this.OnAnimationDone.addOnce(function() {
			_gthis.animationDone = true;
			_gthis.timer = new flixel_util_FlxTimer();
			_gthis.timer.start(5,function(_2) {
				var nextState = new states_MenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			});
		});
		flixel_FlxG.game["debugger"].watch.add("# Pooled FlxPoints",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxPoint.get_pool(),"length"));
		flixel_FlxG.game["debugger"].watch.add("# Pooled FlxRects",flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxRect.get_pool(),"length"));
		var AnyObject = this.rosie;
		flixel_FlxG.game["debugger"].console.registeredObjects.set("rosie",AnyObject);
		flixel_system_debug_console_ConsoleUtil.registerObject("rosie",AnyObject);
	}
	,update: function(elapsed) {
		if(flixel_FlxG.mouse._leftButton.current == 2) {
			if(this.animationDone) {
				this.timer.cancel();
				var nextState = new states_MenuState();
				if(flixel_FlxG.game._state.switchTo(nextState)) {
					flixel_FlxG.game._requestedState = nextState;
				}
			} else {
				flixel_tweens_FlxTween.globalManager.clear();
				this.rosie.set_x(256);
				this.rosie.animation.play("idle");
				var rect = this.logo.clipRect;
				rect.width = this.logo.get_width();
				this.logo.set_clipRect(rect);
				this.OnAnimationDone.dispatch();
			}
		}
		flixel_FlxState.prototype.update.call(this,elapsed);
	}
	,destroy: function() {
		flixel_FlxState.prototype.destroy.call(this);
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxPoint.get_pool(),"length"));
		flixel_FlxG.game["debugger"].watch.remove(null,flixel_system_debug_watch_WatchEntryData.FIELD(flixel_math_FlxRect.get_pool(),"length"));
	}
	,__class__: states_SplashScreenState
});
var util_FlxAsyncIteratorLoop = function(It,Callback,OnStart,OnFinish,IterationsPerUpdate) {
	if(IterationsPerUpdate == null) {
		IterationsPerUpdate = 100;
	}
	flixel_FlxBasic.call(this);
	this._curIndex = 0;
	this._callback = Callback;
	this._iterationsPerUpdate = IterationsPerUpdate;
	this.state = util_State.NotStarted;
	this.set_visible(false);
	this._onStart = OnStart;
	this._onFinish = OnFinish;
	this._iterator = It;
};
$hxClasses["util.FlxAsyncIteratorLoop"] = util_FlxAsyncIteratorLoop;
util_FlxAsyncIteratorLoop.__name__ = ["util","FlxAsyncIteratorLoop"];
util_FlxAsyncIteratorLoop.__super__ = flixel_FlxBasic;
util_FlxAsyncIteratorLoop.prototype = $extend(flixel_FlxBasic.prototype,{
	state: null
	,_curIndex: null
	,_iterationsPerUpdate: null
	,_callback: null
	,_iterator: null
	,_onStart: null
	,_onFinish: null
	,start: function() {
		if(this.state == util_State.Done || this.state != util_State.NotStarted) {
			return;
		}
		this._curIndex = 0;
		this.state = util_State.Idle;
		if(this._onStart != null) {
			this._onStart();
		}
	}
	,update: function(elapsed) {
		if(this.state == util_State.NotStarted || this.state == util_State.Done) {
			return;
		}
		this._curIndex = (this._curIndex + 1) % this._iterationsPerUpdate;
		if(this._curIndex == 0) {
			this.state = util_State.Running;
			this._callback(this._iterator.next());
			this.state = util_State.Idle;
		}
		if(!this._iterator.hasNext()) {
			this.state = util_State.Done;
			if(this._onFinish != null) {
				this._onFinish();
			}
		}
		flixel_FlxBasic.prototype.update.call(this,elapsed);
	}
	,destroy: function() {
		this._callback = null;
		this._iterator = null;
		this._onStart = null;
		this._onFinish = null;
		flixel_FlxBasic.prototype.destroy.call(this);
	}
	,__class__: util_FlxAsyncIteratorLoop
});
var util_State = $hxClasses["util.State"] = { __ename__ : ["util","State"], __constructs__ : ["NotStarted","Idle","Running","Done"] };
util_State.NotStarted = ["NotStarted",0];
util_State.NotStarted.toString = $estr;
util_State.NotStarted.__enum__ = util_State;
util_State.Idle = ["Idle",1];
util_State.Idle.toString = $estr;
util_State.Idle.__enum__ = util_State;
util_State.Running = ["Running",2];
util_State.Running.toString = $estr;
util_State.Running.__enum__ = util_State;
util_State.Done = ["Done",3];
util_State.Done.toString = $estr;
util_State.Done.__enum__ = util_State;
util_State.__empty_constructs__ = [util_State.NotStarted,util_State.Idle,util_State.Running,util_State.Done];
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses["Math"] = Math;
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = ["String"];
$hxClasses["Array"] = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses["Int"] = { __name__ : ["Int"]};
var Dynamic = $hxClasses["Dynamic"] = { __name__ : ["Dynamic"]};
var Float = $hxClasses["Float"] = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses["Bool"] = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses["Class"] = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicStop", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQUlBQUFBbXp1QnhBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUJkSlJFRlVlTnBpL1AvL1B3TmV3RGlxZ3VvcUFBSU1BUHVuSU92R0dSTk9BQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMaximizeButton", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBQm1KTFIwUUEvd0QvQVArZ3ZhZVRBQUFBQ1hCSVdYTUFBQUIyQUFBQWRnRk9leVlJQUFBQUIzUkpUVVVIM2dNSkNSOFVCaGtEeVFBQUFFOUpSRUZVR05PdGtFRVN3REFJQW92Ly8vUDJvb2FhOUJaUFpvQXdxd0NlTlpMVUQ5ZkNIVzc2VFkyZmR3MklVOVVwZUhlVU5kMVlBRm5kTUFGUW1ndTV0eGFWM202VDV5bW9EL0gwT3ZrTFNBOUI4bis0Y2pvQUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUQ1SlJFRlVlTnBpK1AvLy96SWdqZ1JpQmtJWVJNQUFRVTNJaWdscXdxWVlweVo4aWpFME1mNEhheUVLTENmSlpJcmRURlJvRUJYT1JNY2dRSUFCQU1xdGZ6aUhGZ2JoQUFBQUFFbEZUa1N1UW1DQw"},{ name : "__ASSET__:bitmap_flixel_tile_GraphicAutoAlt", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUlBQUFBQUlDQU1BQUFBR0F3ZE1BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBd0JRVEZSRkFBQUFYbDVlQUFBQUF3TURCQVFFQlFVRkJnWUdCd2NIQ0FnSUNRa0pDZ29LQ3dzTERBd01EUTBORGc0T0R3OFBFQkFRRVJFUkVoSVNFeE1URkJRVUZSVVZGaFlXRnhjWEdCZ1lHUmtaR2hvYUd4c2JIQndjSFIwZEhoNGVIeDhmSUNBZ0lTRWhJaUlpSXlNakpDUWtKU1VsSmlZbUp5Y25LQ2dvS1NrcEtpb3FLeXNyTEN3c0xTMHRMaTR1THk4dk1EQXdNVEV4TWpJeU16TXpORFEwTlRVMU5qWTJOemMzT0RnNE9UazVPam82T3pzN1BEdzhQVDA5UGo0K1B6OC9RRUJBUVVGQlFrSkNRME5EUkVSRVJVVkZSa1pHUjBkSFNFaElTVWxKU2twS1MwdExURXhNVFUxTlRrNU9UMDlQVUZCUVVWRlJVbEpTVTFOVFZGUlVWVlZWVmxaV1YxZFhXRmhZV1ZsWldscGFXMXRiWEZ4Y1hWMWRYbDVlWDE5ZllHQmdZV0ZoWW1KaVkyTmpaR1JrWldWbFptWm1aMmRuYUdob2FXbHBhbXBxYTJ0cmJHeHNiVzF0Ym01dWIyOXZjSEJ3Y1hGeGNuSnljM056ZEhSMGRYVjFkbloyZDNkM2VIaDRlWGw1ZW5wNmUzdDdmSHg4ZlgxOWZuNStmMzkvZ0lDQWdZR0Jnb0tDZzRPRGhJU0VoWVdGaG9hR2g0ZUhpSWlJaVltSmlvcUtpNHVMakl5TWpZMk5qbzZPajQrUGtKQ1FrWkdSa3BLU2s1T1RsSlNVbFpXVmxwYVdsNWVYbUppWW1abVptcHFhbTV1Ym5KeWNuWjJkbnA2ZW41K2ZvS0Nnb2FHaG9xS2lvNk9qcEtTa3BhV2xwcWFtcDZlbnFLaW9xYW1wcXFxcXE2dXJyS3lzcmEydHJxNnVyNit2c0xDd3NiR3hzckt5czdPenRMUzB0YlcxdHJhMnQ3ZTN1TGk0dWJtNXVycTZ1N3U3dkx5OHZiMjl2cjYrdjcrL3dNREF3Y0hCd3NMQ3c4UER4TVRFeGNYRnhzYkd4OGZIeU1qSXljbkp5c3JLeTh2THpNek16YzNOenM3T3o4L1AwTkRRMGRIUjB0TFMwOVBUMU5UVTFkWFYxdGJXMTlmWDJOalkyZG5aMnRyYTI5dmIzTnpjM2QzZDN0N2UzOS9mNE9EZzRlSGg0dUxpNCtQajVPVGs1ZVhsNXVibTUrZm42T2pvNmVucDZ1cnE2K3ZyN096czdlM3Q3dTd1NysvdjhQRHc4Zkh4OHZMeTgvUHo5UFQwOWZYMTl2YjI5L2YzK1BqNCtmbjUrdnI2Ky92Ny9QejgvZjM5L3Y3Ky8vLy9Ra3FmSXdBQUFBTjBVazVULy84QTE4b05RUUFBQUhaSlJFRlVlTnJzVTBrU3dDQUlTeGovLzJUcFFSaGJOZHBiTC9VQ1lRa09Dd3dBZ0JBQU9NZ0ViTkt3OG0rTk4vN1pYMnF6MVFNRlBaU0loNHRLbWU5UFhKVy9OTFdYWFJPNzBQZVJIV3Qrdzhmdi8wREorWENhRGw5TWZGNWRIblpDdGNER1RGdldvRDdUYlVjcGIrd0NBQUQvL3dNQXl5QVNLMkFhNkV3QUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel_system_GraphicLogo", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUdRQUFBQmtDQVlBQUFCdzRwVlVBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFCTTFKUkVGVWVOcnMyOCtMRzJVWXdQSFhabTZDdVhrMGRFMFRzVCtTbVQxb2Q1Rmsrd3ZwbXRHYmlFaE9YbFZRTDE0Q25rdjNYRVFESG9SQ1llbXBiS21kcE10U3dVejIxUE1jUlBCU2dwQmxZVWQ0UEd5em1VMDJ1L01tNzQvbm1mZDk0ZmtIOHVHYk4rL2tIUVpkRDVSTXgydkRqbHRnUkJjczNjanZsUnJ0dmJJUE1vY3BBK2w2QUIxM0FGMnZCYjNsUEMwSXZ6VXMrUVBaR09wQkNNR29odEFMY2d5bTJzU0dNU3o1emIyeUg2bUV3QUV5aG9rd3dPaUV3QVdTaEhubTFsUkQ3QmNidGIyU3Y2c1RBaWZJR0NaUUFiTmZiTlNHNVVhQUFRSTNTQkptMjYySS8ycjZxSUlOZ2dhSTREUE0vdm5iQlJWbmlleURMQWhEQVlJbUNPY1pSdGRad2l5UUZEQVVJZWlEekRoY0RrdCtreUpFZGtCZXpSL0JsYWh6NjJaRUZTSlRJTHRCQmZKYmIwTitzd2pQcjkyMElCZ3cyTllTc0swbDhpZ3NTeGhaUUdGWnc2Q093cktJa1p4N1gzeGdRV1RPNXRQTHFURW9vcEFDYVQrOXhBVkJFWVdaZ0VFSmhabUNRUVdGbVlSQkFZV1pob0VkaFptSWdSbUZtWXFCRllWQnh3MU14UmpORDkrOGp3amttVnN6R1dNMG4vL280UUJoakRIb2VHMlRNVENoSElMMGx2T3YvaEkxRmdNSlNqVCtIN3BiL1ZvSHhzYnZGOUZnNkVZWmx2emoxMmtQNzlpcXcyZytlUWNkaGthVWFQcmFqTUlOSGpPR0RwU3BPc2FWZUpzV1F6bEtOUHR5Mlk1YmtMbkJVOEpRaFRLemp2RUc3N1VzeGpUSzM5VjF0WFVjZ1J6K0RJNHN4dkc1L1BPN3dsSE9yR084d1ZjL3RoaVNVVXIrTHQrTGp3S2VjMlVKUXpUS2ZySEI5MUlTYkxzVml5RUhaVmh1QlBPOUh0ejFOaXlHZUJUdU9pWTIrSUhGRUljeWR4Mko1MXhOaXlFT1plNDZKamI0M2RNZ0JoMFhLbzh2R0lmQmk3SndIV21lYzVtT3dZTWlwSTdFYzY2MnhUaDkzdnF0UFBPU3Q3QTZabTN3Rm9QdjVyM1FPaWFmYzFrTVBoVGhkU1RYeTA0MXNoaDhLRkxxR0sxTHplZEI3bUhGZnVncFVSNnRYNWRYeDlVMXFLMnVBVlErZlFFV0pjVTh1UTI1UC8rUkI3SmFoMkIxRGNDaXBNVjRDVTRZZzlPUGE5THFTSTVGU1lFUnh1RDA0a0JxSGNrcGZ2WEFBcHlHTVJxUmxaeFVoMFhod0JCZHlhdzZMRXBLREpHVm5GV0hSVW1KSWFxU05IVVlqWklXUTBRbFBIVVlpY0tMc1dnbHZIV1loUEphOENVL3hpS1Z6RnRIY3M1Ly8wczJNVHJmemdleFNDV0wxSkdjTis5OFp6RVdyVVJFSFZsRUVZWVJ4cERyeFp2SzY4Z1Npa2lNMGJBK0ZKVFhrUVVVR1JoT0dFTXVQR2hycVlNeWlpeU1WSlhJcklNaWlteU1NeXVSWFFjbEZCVVlwMWFpcW83a3ZQSFRaOFpqekt4RVpSMmplZS9EZitIMVg5ZU54aml4RWgxMVlFVFJoVEZWaVk0NnNLSG94RGlxUkhjZFdGQXdZQnlCNks1RE53b1dEQ2VNQVUwZHVsQXdZVGhoREtqcVVJMkNEZU1RQkNIR2FKWS8rVXZhblMrTUdPaEJaRjNFdzRwQkFrUTB5cm50dTJneHlJQ0lRam0zY3g4MUJpbVFSVkVvWUpBRG1SZUZDZ1pKRUY0VVNoaGtRZEtpVU1NZ0RYTFdSVHlLR09SQlpxRlF4Y2dFeUNRS1pZek1nSXhRcUdOa0JtU2xEdTJWYTFCZ2ZTamt3b08yQmRFMWRRaXVyc0gwL2RnK1ZKeGVIRmdRM1JBVHkrbkhOV293ak5oWFU3UmFoeWJ2TFg1S01DekxFSk1yMS91dm1Rc1BJZ3N5LzFmVFlLVU9MZEh2MjJPR1laZ2hsbTlBbmtsY0dHRVlRb3dOMlJESFZnL3lUaGkzY21FOHNDQW5uU1YwTFNRd0RNTlBXSzBReUdBWTlyT0V0cVhwMVAvL0FOd29yczhWOE1oV0FBQUFBRWxGVGtTdVFtQ0M"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicWatch", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFEY1NVUkJWSGphakpBaFM4TmhHTVIvZTFGWkdNSmd3U2FyVnNPS1dSSGJtcGo4Qkg0Q205L0JabDJ3R3NSZ0U5Um1GbHcwQ0NKWUxIZG44UDF2KzZ1SUIwOTU3cmk3NStrazRiOG9BTmdGZXhmN0d2c0ZlNHA5Z2oxb3FaTVFhVDlTSXQxSE9vNTBGdWs5MG1Xa2ZoS1N6TVRUU0xlUnVnMFI2VENTSXgwMHUxSUQxb0VIU3ZsWUNMMEJYb0ZodS9NWHNZYzlxamVzQWtkQXQzS3R6cHVSSGlPOVJicUtkRmR2T0krMDFOVG96RjVuYndEakd0c0hkb0JuWUp0U251Yk9peU90Uk9wRk9xM3VGeitkdjhOZUF5YkFNcVZzQVgrSWY4SG5BTlI0d3BRazlwRnhBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicInteractive", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQkhOQ1NWUUlDQWdJZkFoa2lBQUFBQWx3U0ZsekFBQUxFZ0FBQ3hJQjB0MSsvQUFBQUJ4MFJWaDBVMjltZEhkaGNtVUFRV1J2WW1VZ1JtbHlaWGR2Y210eklFTlROdWk4c293QUFBQndTVVJCVkJpVmpaR3hEWUF3REFSZnpNSTYyU0JTT3RaZ0tBWmdBYW9NUVU5SmRSUUprUXVjOE5MTHNuVitGeGFnanFQdEovbUtrdVphaXpxSkFiaXJvNWNjSlYyU1ZqTXJGNXpFQXpockRXL3liOURDeXdpMDhFNlJDelk0NTR4WitBUWJuRkxDTEN6ZWt3UnNneTgyUDZENlFrZUFUREtHQUFBQUFFbEZUa1N1UW1DQw"},{ name : "__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicMoverTool", data : ""},{ name : "__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicCursorCross", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQkhOQ1NWUUlDQWdJZkFoa2lBQUFBQWx3U0ZsekFBQUxFZ0FBQ3hJQjB0MSsvQUFBQUJaMFJWaDBRM0psWVhScGIyNGdWR2x0WlFBd05TOHlPUzh4TnJ0VlFGa0FBQUFjZEVWWWRGTnZablIzWVhKbEFFRmtiMkpsSUVacGNtVjNiM0pyY3lCRFV6Ym92TEtNQUFBQUxrbEVRVlFZbFdQOC8vOC9BeGJ3bjRHQmdSRmRrQW1iU2x4Z2tDaG1ZWUI0Qmh2QUVHZGh3T0pyaG1FVUdnQjN1Z2NXZXB2bWtRQUFBQUJKUlU1RXJrSmdnZz09"},{ name : "__ASSET__:file_flixel_system_VirtualInputData", data : "YmFzZSA9IDI2NiA0NiA4NCA4NAp0aHVtYiA9IDI2NiAxMzEgNTIgNTIKYSA9IDAgMCAxMzIgNDUKYiA9IDAgNDYgMTMyIDQ1CmMgPSAwIDkyIDEzMiA0NQpkb3duID0gMCAxMzggMTMyIDQ1CmxlZnQgPSAxMzMgMCAxMzIgNDUKcmlnaHQgPSAxMzMgNDYgMTMyIDQ1CnVwID0gMTMzIDkyIDEzMiA0NQp4ID0gMjY2IDAgMTMyIDQ1CnkgPSAxMzMgMTM4IDEzMiA0NQo"},{ name : "__ASSET__:bitmap_flixel_system_GraphicVirtualInput", data : ""},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicOpen", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUZSSlJFRlVlTnFVa0ZFT3dDQUlRd3UzM0FXNVpyY2xVNWxXM1Y0Q0lhUzhENHdrdnVKcGpxdTRxTEJrdmdkYmlPbkppSm14eFVjT3NVTnRYUkRpWUFpWElNU0JOTWV6QzJWMi9FRllacnordk9VVVlBQURCZWdXcGc5L1hBQUFBQUJKUlU1RXJrSmdnZz09"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQm1KTFIwUUFBQUFBQUFENVE3dC9BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUIzUkpUVVVIM2dRWkVqQTAzU0hjY2dBQUFFQkpSRUZVR05Oai9QLy9Qd01SSUpLQmdjR1g0Zi8vLy9odzVQLy8vNWY5aHdLaUZPRlNqRlVSdW1LOGlwQVZFMVJFdHNra3U1bXMwTUNyaVpHVUdBUUFzOU5wbXo4SWloRUFBQUFBU1VWT1JLNUNZSUk9"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRestart", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUU1SlJFRlVlTnBpK1AvLy96SWdaa0REV01WQXhIOHNDckdLb1N1R0tjUXFocXdZV1NGV01aaGlkSVZZeFJqQk9vZ0VURkI2T1JZNVRERnkzRXh5YUJBTVp4WXNib3ZDNG42d0dFQ0FBUUFHbVQrVFE1cWdGQUFBQUFCSlJVNUVya0pnZ2c9PQ"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicCloseButton", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFnQUFBQUlDQVlBQUFERUQ3NkxBQUFBQkhOQ1NWUUlDQWdJZkFoa2lBQUFBQWx3U0ZsekFBQUFkZ0FBQUhZQlRuc21DQUFBQUJsMFJWaDBVMjltZEhkaGNtVUFkM2QzTG1sdWEzTmpZWEJsTG05eVo1dnVQQm9BQUFCL1NVUkJWQmlWVFkweENzSlFFQVhIYnlTZXdNdWxUV2R2YTZPbGxXSnBDQ0syaWsxT1krY3RRc1lpcS9rREM4dnM3bHZVU3UzVXBVcFdPN1ZDM1RqU3FXVU1EK0dldisxdGlKZDZ5dm95ajl3NzhWQVhLb21SR2JCaW9nY0dBTlNrTm5GNVY0L1IzOVNFMm9hNHF2TjRkdzUzS1lBMzBBRDFQeGJXUUFGOHZwYVlyTldBYU5WMEFBQUFBRWxGVGtTdVFtQ0M"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQm1KTFIwUUFBQUFBQUFENVE3dC9BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUIzUkpUVVVIM2dRWkV4c2Fka1ZHNHdBQUFFRkpSRUZVR05PVnpjc0pBREFJQk5FdDFUSnl0UFBKS2VSbnhBd3NlSGlnOUJOUW1mRURBU3REUUdXWTRRdStjQWhQN013cytqaU94cDR5dk9ZWkxrRkFIVzZYWUMwODhkcWRBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicStats", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFBeFNVUkJWSGphWXZ6Ly96OERzWUNKZ1FSQWpPTC9VRXdkaytHbTBkVE5XQlZqdFpvK3ptQWtKUVlCQUFBQS8vOERBTDhIREFscWRHWVJBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicPause", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUI1SlJFRlVlTnBpL0E4RURLaUFFWW1OSXNmRVFBSVlWVHdJRlFNRUdBQ1JGUVVTVTBxVk1RQUFBQUJKUlU1RXJrSmdnZz09"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicLog", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFBa1NVUkJWSGphWXZ6Ly96OERzWUFGaVkxUEZ5TzZZc1pSa3dlSHlRQUFBQUQvL3dNQStmWUlMQWhqbnhZQUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUZCSlJFRlVlTnFNandFS0FDQUlBeFgyeWg3b055MmpRa3lwUWJUMGRFU3FTblllRXZoWE5zRE1ZblhlelZHNHdBME5OVlJaSGpLUEgyaDYvNWwxVzBPaXgzTlRFbDFDSjdxS0MvNExraTdBQUQ1WWZydllMZlJQQUFBQUFFbEZUa1N1UW1DQw"},{ name : "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoCorners", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQVlBQUFDcWFYSGVBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQlkxSlJFRlVlTnJrV3d1eW16Z1FsR1Q4d1g1Sk52ZS9UUTYwdFhrdi9tRkFDNjRaMG01TEFwejFPaENxcHJEQnh1NmVuaGtKUnRZWTg2MnhkV1A3eG40MDloM3NIem4yMGRpeHNaTlkwZGlsc2JLeENxd0c4MkQ4M3NDZVg3ZWJoWDFyRHZacVdXTUwyUzhiV3dtT1RXTnZZbDhhKzlyWVg3TC9MTWZiejJ3Yk8yZHljQ2tBQ3JtZ0FTQkZ3QzZ5Ui9BZVNJZ0Jad0lZT0pPQVJDandSZUQ2K1BrTS9sc054OVlDZWlmN055VmdMeGQ5QjYrMzlyZnN2NHNLV2dXY3lmczFlVDRGT3VUOVBnSVFXRWdKQzFCQklZNjhpT20xVVNVWlhIZWhCSnprd0VHQUtoSHZRc0M3a0hRU0FpNEF1b29BcjhuTEtlQkRWR0FEUkRnaTRnSktacy9uNHZWYzNxL1VrVXFBRjVBZllrakNoNUNqM2k4SFNOMzBBQjlDZ0Uwb0FVbXdRa0JKdVVpUHJ5RG1jM205RkNJNkFpcngvZzhnUU1Hci9BdncvcEQ0N2dPYzh2eFFFcFNJQ3ZhbFhKc1Y4Q2J4bndNcFZTYmVMWUVBQkw2WDh5ZUsrMGRCRHdYK0tCRTFPQWdKVUd4YklzQm5VTmEwREI3azlSRkszeGtraGpFK3hMc2h3SDRrZUQrQUNFM0VXc1cwVkI0QW0xWUFMWmMyZzlwK0lQQUhxdmxWSk5iTlNFOC9vZ0QrYm93SXZMWVR4eDBCMTE0STJJZ3RNZ0NxSHp4Q3lWUFpsMVRxbmdteTcxcVdsR1poYjZqOEZZUnRUOGt3eXdUb2lZQVhFZkQxTDRKOGxCZzdrSFF2d0d2NDc1Y0F4b09RMEJHQTRNODB6T1doN2JNOVBsUUZzWE0xNUlRU0JrWWhFbFlaZ01haGJxeld2d0o4MzIvYWdBbzhPSzZDb1R1VFVDTUJPTkJoNzc4YThKakU2R2wwV29FS0NzQjYwaktJRTV3TGxic3hZL2ZmZ1FoV0ErYXVNa0NDeVFMU0x3Zkd2Zm5OeVdBVmxLU0VRc2NCUlVUNmZpS2VUeW1ocGx6QUpGd0pLQlAxZnFvSzRMQ3RZYUtFSkRoSDRLc1pTRDgwTnFnREpGd3R3emNrbWFtSGdROGt3NHBJV0RqeS90UVZFQ01pUmtMbElqYzFwK2oxUGdKOElDRldMbkZuMTgvTSsxWGdIdWFOQXVvQk56dW1Gdis5WWVBQ1NXL29sSGVxT2VER2hpcGc2dU9BS0JFdVVmYm1zREVKRlpQZ1RQcWh4bHhJQ0QybTZ3Z1krOGhxVHZuQXU1bDZQVFl6dkZPRCt3T2tINW9YZE9kY1l2dzg1ZEdnSHhvT3pveDdiaitYSE5BZGMyYittMDlNazQyYmFlSWJzbGtsd1A0cFlFUHZYZVFEcVMvUGFsTUZoR3lPS3Jqck8zSXpCODBLdm51czdoTGVueklwc2NmbmQ2cDNpVENZaStkakpEZ2t3TTI4SW9SYTdib2NNR2NWaE1CamE1M3JYZ1NJbUVNSkRMWGNJdVlGZGxzdUlpVE1EZnhObDZrTGdIZG1Yb21RUTBCYlp6c0N0SWRXRDA1OVlHUURCSEJ2c2JiUVpZN0FZM3hNT1JuYW52aS9VVUJHS3BoVFNXVHBZM2Q1aTNuWm5sanBtNTU4WUNlWStFS0xMQlRyQ2dsWXc0bU13c0JNWkdnY0d2bTVsUGVOdE1sZDI4YUZpQlVSNEdES1hKdGhEWXV2bnV2SEZJREFPd1VnQVdzS0IrNFB0aWJjbWhxN0RXVk11TkY1N08yc01mY2wrbGFWNE5xaXE3VUhOd0owQXlmTzhnVnNqMC9kWDdPSlAydi9ZKzhPbWVveStDVTRkdzFxdjRaQUxuOCtGK05HNlJBQi9oYzkrOHg1UG51ZFBhOXJCWElOQVNWZ0srQnpjN3MyQ0lIR1dtZTVXenNXTGo0U0Zxd2VQd0kwMzlwRHI3UGtOMkJyVkVDN3RZc0plRjBncnI3Z0xqSm53azlmWGxYdWVLaTdCTkNxN3EzNTJTNi9WUVZzNVlzS0h0dmxhMkFZMXduZVBXSXkvOCtUSkp1WTZOaEF0a2ZRT3lLZ2E1ZlBoVFgwUGk0OHhEc29xV2JLWnl1aER6eU84VlgyQ253WEljRXBBVXZ5UEpaQWpDdGRXZnFLbmlMYjQza3VkUnNCck10b1B4RUpMVzZMWlhCbjd0Y0xlQ0lnSXhYRXdpRkZRbXdNMFZmelkwdHBPZXVyOTNQQjlFbE1sYUR5YnovVExTc3pKdDR5YitCSGxrUlFUQWtwRXZ6STBoa2I0ckxzMmZ0YklPQU5iQXRWNExwZVlHZCtManIwZ2RLSGlhVnZQZEV6OGtIb2xyYUwxSHYydmtxL1hVWGVyaUQvVEdxb2NQSDB5ZHl2dXViWXFzejlpbTFWZ251Z01neXArVFl5ekkxTmNIQm1pM01aWFIxL3hLVCtyd0FEQUFKQmFpQW1tNXh3QUFBQUFFbEZUa1N1UW1DQw"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicStep", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUVWSlJFRlVlTnBpK1AvLy96SWdqZ1JpQmdKNEdZaUFBVUthL2lNckpxUUpxMkpjbXZBcVJ0ZjBueEdzZzBqQVJJU2E1VUFjQldaUjZtYWlRb09vY0NZNkJnRUNEQUF3WUY0RDlrNTlxUUFBQUFCSlJVNUVya0pnZ2c9PQ"},{ name : "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUJnQUFBQWdDQVlBQUFBSVhyZzRBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQW1SSlJFRlVlTnEwbHM5ckUwRVV4Nzg3MllTZ0psVFNTaVdwVnZyRElxaEZVSUtnK0NlSUlncWVGRS9pVFJDOHBMUVhqeUwwNGc5Q29tWFRKSVcwT1ZVRU1UZEJSSWs1VzZXdGtLSlNiR25EcHNuNlprMlczVFFicytua3dkdVpuVm0rbjMwenczc2pCVUxCQ0lBcGRNbGMrL3orZDlScTVMbHVBT1JhTzhrZkR5ZW5XMGJ5YU9LZVl3RGpEMDNUZEFnSlJFUkhJTkVlYUpWS0ZZeEprQ1NKajAzWVJYTC85bVZib2Q2QmtIMEV1bWxTdlNjMEVnTnc1ZXAxakE2UENJY1lnQU0rUDU0OG5zYXh3VUdoRUdaKzJTaFZNSjlLNCtqQUVXRVFDMkM3cEVKakhpeWswd2dGZzBJZ3JIRmdhYm1vaTJkbWt6amMzNzlueUM3QW44MHQvRjdmMFBlQ1F3NzE5UmtRT29xUlBRTzRmVjBwNnUzdzBCQXl5U1FDZ1VESGtLYUE0czkxYkc2VjlQN3hrVkU5a29NOVBSMUJtTjNFVWkwS2JpZkd4akNuS1BEN2ZJNGh0b0RWNGkrbzVSM2ovZlRKVXdSSk9JYllBbmgrK3I2NlpoazdNejRPSlI2SDErdHRHOEphVFg3N3NZWkt0V29aQzU4OWg5U3JtYlloTFFHcXVxTXZWYU9kRDRjeEU0M0M0M2JEVkU4aWpnR05tMjIyU3hjdUl2Nzh4WDhoY2l2eFdTV0dmUDRUYmV4K0VtcitLVjhxdFZ3MlEyQ3U4YmFBVk9JbEZ1YlQvejZTWFdBdTF1N1J0MENhQXJJa25Na2t3UXVjTE11UW1PUTBReGlRWFlEWGkxa2thR2tZWTVEZExqNzBsdnhCaDhuVVl3SGtjbThRaXo0MUw4a2lMM1pVbzdjN3Jja0c0T09IOXlnVThuQVRzMWI4cytUWFNGd1ZVbkMrRkQ3VFh4czNpemtSNGtZRUx1c0o0ZUkzbTRuYkxZT1RWS0dRM3hEeDU1YUxWNjBmSTcvRDg1ekltMTA5Z21ma3QwU0wxMi9YdmRUZTdkYjEvYThBQXdDWlVNUU16UW9keXdBQUFBQkpSVTVFcmtKZ2dnPT0"},{ name : "__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMinimizeButton", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFvQUFBQUtDQVlBQUFDTk1zKzlBQUFBQm1KTFIwUUEvd0QvQVArZ3ZhZVRBQUFBQ1hCSVdYTUFBQUIyQUFBQWRnRk9leVlJQUFBQUIzUkpUVVVIM2dNSkNSMDFlRVp4RlFBQUFEOUpSRUZVR05OaitQLy8vMzhHQWdDdUJzWkExb1JOREM2QnJoQ1p6L1QvLzM4bWZOWVQ0elR5QUNPNjhZeU1qRmpGbUpBbHNacUVMRWRVOEJBYjRBQzRjRkxGc3d1SW53QUFBQUJKUlU1RXJrSmdnZz09"},{ name : "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoLight", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUVBQUFBQkFDQVlBQUFDcWFYSGVBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQnE1SlJFRlVlTnJVVzR0dTR6WVE1TktVYzNmcHQvYWYrcE01MjVLNFJRQ3gySnZiRi8xSTJ3Q0VaRWQyTk1QWnQwTGx6Ny9LQzMvb1NkL0RyN3JCOXNXZzZVN0E5Q295MmhjQXB3ZStpNFB2NC84Q0FSUzhSM2VBbE5ld3VBNC9RNCtTMEw0SU9EMWdDcFM0RC81cUFpeEFsSHd2SW9PVHBQQ0VtcDVHQUUwQ0orTzZqQk5rQjlSVFRLSTlDTndDR0wwWDdUd0xnS3lBWlllSUtUVTg2Z1ExSXNaN1ZRRS9TNEE4NzQ0S1h1b0RNdktPVm5XVWdJQ3NSUWNKRkpBeFJVeDdFSHlGY3dSY0EySTg4QU5rRjY5SlVRWTdEalEwaDVZQWI1RkFEdUFxRnNGNWhvQU93UHZ4K1E0cTZBYjR0Qis0eHdscTREWGdKK1cxWmc3c0VERFdMc0NpQ1hqK0ljd1ZXbkwzU1pFK0FwWkFjVlZGRmFSNGRqN0FzZ0MrSDUvWndROGcwRzRvd1EyUjdRNnZYNVhkSHlBYkFHOEtHZmdkMnU0UDRKczR4OWZqZm5ieG5YMDJTclNKM2RkMi9pU09UUnkxZFlMcjBRZDBBRDhBeTRYa2FVUjRvZkkzTWxvaXhkWGlPMG9ld1M2d21xSUdWSUFrUUlKZWp6WCszbVlrUldnS2x2Ui9lZDBtS2poTi9pY0Q5RmtjeitMMzQ5b0t6cENGbzBQZ0RmeUk1ZUZaMmUzeWlBL3draHEwOHdVQXY4SDVJb2lRU2tCUExuZitKcFpHZ0JWQ2krSVV6YWpRa3BWZURhUXZ3WDg3UUkvMVRmeE9tb1NtQUFSL0ZZUlI0RGhMMER0SU9VRnliSitVVUllN1AwQi9QNERMOVNaSWtHYkFRSUFFdjRqZEw0cGlNR21xQWp3Wi9RVFZDVklpSDdETW9BRUJBL0FuQ1QrTzQzZEJ6aG5zZWhBZzdmNFQvRThnQ3NIdlNzSlVJVzBtbzcvSVVSZ2tKd3lpL1dzRWZBSitQd2dZUzVyRzRoRHdDZjRDU2lsR2xyZ2JaS0FTckVZclo0b2hMZDNGMEhkV0NQaHhrUEN1S0dFUkpFb0h1QjdnaDBwSUFhOGxSaWVSTVZZbFd6VHJnMHd4cEJFaGZjRWlTSkFFSUFudmdvQXpSQUpwLzJkbDUyVitzRUtJYk1mN0o1RU00YkljSWJWRTFXZWx2bG9PZ0k0UUNaQ21nQXBZaGRldjRzWXQ4R05wOVlaSHdpOUtpRExCNGhSQUo4TVJuc0VSRG4vd0J4Q3dnTk5hUWZvTXdHVmtXSlQwR2plcVo3ckhUUWtSTldoalJabmdHWlNBSmpITW9JRUNic0lrQnZnQi9BMXlDU3Uxcm80RDU0d1BvQ0FaaWtwZ0xTcThLZUZ4Z0tuQ0I4aW9JTUZmSUwxdWlWTGJhNzJGWVRBVEZTaHdqTTFSeGpDUlJlejRKbXI5TTZUTkMrUU5sdXk5QnF4cEJqTzFnQlVleVZBRGtxRVJVK0hHUmlSb3prNlRrNm5TN0N5eUpZWVRzeDNpQW0xeEN0cG94ZWtZUlUzVnUwQVh1TW1aMlI4N0ZSZzcvVDJyMVYyVWZvRDNXYTk5bmhtcjNhMEE3WTk3N1d4TVQzZFk2MEV3SmtJYnRMMnNuUDllOEdZWUpLZU5aTzF3VDdTeE1HbTVpci9KSWd6dVVQL2Z4R2MyY2R3VVFsQTkzc3pBRElQUkdKcVYzbDBQMmxpeXJKV2xMWW5QVk1nRHJzcTZBUUdhU3Rnd3lSSjFoVnBDTWw3ZkhuY2VnVjlFL0Vid0MrUUJzZ3orT0k2WFl3MHlWa1VORmhIZUlOWE5BNnkrR2twdGQzYitDbVZ0aGZSMmhZS25ReW44QVNSY3dUUlFBWmFQaUtLYW1ncVQ0Z09zY1pVbCtjWG81bGdWWDRmTTd3T1dSOFNtQUk4YzVUOEthY2FPRjRNRWRxUXZuVnd6cXJvVkNDQWdZQld5bCtDUmdCV1VnSW9vR1FjWW1ZQVg0anFFdEhiY21CeVdrTkx4dllGUGtBckFqdEJGVVlFa3dsSUFubk1tQ2hSbnlvbzl0azNKNkc3S0VGVHVyblJ5NkJUeEd1bEFmOExTRklBT2taMlErRnRWT0JNR05UVnNrUGRYQXp6dVBqWkZPNWpCVGV5MGpBWVhKVS9ZamR6QWNvUnVGR0NuZHU0d2t4dm5ZMngxVlZTek83dGZ3UVIyVUFIbUJSZHh0SnhnRDU0eWNVM0E2NkdqS2V4S3I2REF6ck1DQ25jZkJ5TmFQbkZUdlArcWhNTTlDSU4zT1VFckJTYVIxR3lKTWZkTk5FS3QyV0EzU0pESHEyUDdtZDNIOUQ1VkRHbFBjZlNnNVl4Z21taDV6VXlIVjZXbXNNQjNweVpJSzhDZHBSdkFOeU5ibEFTY2xLNU9FVTdRZXo1Z0Qyb0JiL2VuTTBFdkg3Q2V5Y0dFYVFCcHg4MWxtcGRlaldFOUtUSlRLdk1qaVZCSlBKT3p3WmdMbldBTituajRqSkJHUkUvbS96elRGR21KM2ZjYURkM0lGYW80N2tyTHF6Z0U0UENUamVaSWxQV0Z1NS90Q211NUFRNGdHRVpaVlF3cHZhZkROQ2ZibmVKTEE1d3BnKzl1aVZId1hsZUlRSDlnTlRpTEUyVllxZTZpZmlGUE5IZW5HaUxraEVRQ1U4RHFyMExPRUQwMm55R2lPS0dPWnh1aldSTW9Tbmkwd2lRcFQyaVEwNGttQnp3N3RRZ0hOcDhpWW1ZeTVEMTBxRDJwVGNiTWdCTmtsNENFakpON3lmOExjS0tEck8yOE5ZTG53QXk4bHJ5MzAwODFnZG5Ka1VXSU5YVGxoQkl5NzAwUFJlNGx3RXFPTEFkcDNTQWxBSEJ5V0hNWCtHY29nQnhpSWpJeWl1STdydmt5QWlJMXpONGtUeWpqS2VDZlFVQlcyc1dwS1NJbitCTGd6eVlnVXNXak4vNi8rdS94NkticDN3QnEvZnd0d0FDRGVkRE1KazlyRWdBQUFBQkpSVTVFcmtKZ2dnPT0"},{ name : "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUF3QUFBQU1DQVlBQUFCV2RWem5BQUFBQkdkQlRVRUFBTEdPZlB0Umt3QUFBQ0JqU0ZKTkFBQ0hEd0FBakE4QUFQMVNBQUNCUUFBQWZYa0FBT21MQUFBODVRQUFHY3h6UElWM0FBQUtPV2xEUTFCUWFHOTBiM05vYjNBZ1NVTkRJSEJ5YjJacGJHVUFBRWpIblpaM1ZGVFhGb2ZQdlhkNm9jMHdBbEtHM3J2QUFOSjdrMTVGWVpnWllDZ0REak0wc1NHaUFoRkZSSm9pU0ZERWdORlFKRlpFc1JBVVZMQUhKQWdvTVJoRlZDeHZSdGFMcnF5ODkvTHkrK09zYisyejk3bjc3TDNQV2hjQWtxY3ZsNWNHU3dHUXloUHdnenljNlJHUlVYVHNBSUFCSG1DQUtRQk1Wa2E2WDdCN0NCREp5ODJGbmlGeUFsOEVBZkI2V0x3Q2NOUFFNNEJPQi8rZnBGbnBmSUhvbUFBUm03TTVHU3dSRjRnNEpVdVFMcmJQaXBnYWx5eG1HQ1ZtdmloQkVjdUpPV0dSRFQ3N0xMS2ptTm1wUExhSXhUbW5zMVBaWXU0VjhiWk1JVWZFaUsrSUN6TzVuQ3dSM3hLeFJvb3dsU3ZpTitMWVZBNHpBd0FVU1d3WGNGaUpJallSTVlrZkV1UWk0dVVBNEVnSlgzSGNWeXpnWkF2RWwzSkpTOC9oY3hNU0JYUWRsaTdkMU5xYVFmZmtaS1Z3QkFMREFDWXJtY2xuMDEzU1V0T1p2QndBRnUvOFdUTGkydEpGUmJZMHRiYTBORFF6TXYycVVQOTE4MjlLM050RmVobjR1V2NRcmYrTDdhLzgwaG9BWU15SmFyUHppeTJ1Q29ET0xRREkzZnRpMHpnQWdLU29ieDNYdjdvUFRUd3ZpUUpCdW8yeGNWWldsaEdYd3pJU0YvUVAvVStIdjZHdnZtY2tQdTZQOHRCZE9mRk1ZWXFBTHE0Ykt5MGxUY2luWjZReldSeTY0WitIK0I4SC9uVWVCa0djZUE2Znd4TkZoSW1tak10TEVMV2J4K1lLdUdrOE9wZjNuNXI0RDhQK3BNVzVGb25TK0JGUVk0eUExSFVxUUg3dEJ5Z0tFU0RSKzhWZC82TnZ2dmd3SUg1NTRTcVRpM1AvN3pmOVo4R2w0aVdEbS9BNXppVW9oTTRTOGpNWDk4VFBFcUFCQVVnQ0twQUh5a0FkNkFCRFlBYXNnQzF3Qkc3QUcvaURFQkFKVmdNV1NBU3BnQSt5UUI3WUJBcEJNZGdKOW9CcVVBY2FRVE5vQmNkQkp6Z0Z6b05MNEJxNEFXNkQrMkFVVElCbllCYThCZ3NRQkdFaE1rU0I1Q0VWU0JQU2g4d2dCbVFQdVVHK1VCQVVDY1ZDQ1JBUEVrSjUwR2FvR0NxRHFxRjZxQm42SGpvSm5ZZXVRSVBRWFdnTW1vWitoOTdCQ0V5Q3FiQVNyQVVid3d6WUNmYUJRK0JWY0FLOEJzNkZDK0FkY0NYY0FCK0ZPK0R6OERYNE5qd0tQNFBuRUlBUUVScWlpaGdpRE1RRjhVZWlrSGlFajZ4SGlwQUtwQUZwUmJxUlB1UW1Nb3JNSUc5UkdCUUZSVWNab214Um5xaFFGQXUxQnJVZVZZS3FSaDFHZGFCNlVUZFJZNmhaMUVjMEdhMkkxa2Zib0wzUUVlZ0VkQmE2RUYyQmJrSzNveStpYjZNbjBLOHhHQXdObzQyeHduaGlJakZKbUxXWUVzdytUQnZtSEdZUU00Nlp3Mkt4OGxoOXJCM1dIOHZFQ3JDRjJDcnNVZXhaN0JCMkF2c0dSOFNwNE14dzdyZ29IQStYajZ2QUhjR2R3UTNoSm5FTGVDbThKdDRHNzQ5bjQzUHdwZmhHZkRmK09uNEN2MENRSm1nVDdBZ2hoQ1RDSmtJbG9aVndrZkNBOEpKSUpLb1JyWW1CUkM1eEk3R1NlSXg0bVRoR2ZFdVNJZW1SWEVqUkpDRnBCK2tRNlJ6cEx1a2xtVXpXSWp1U284Z0M4ZzV5TS9rQytSSDVqUVJGd2tqQ1M0SXRzVUdpUnFKRFlraml1U1JlVWxQU1NYSzFaSzVraGVRSnlldVNNMUo0S1MwcEZ5bW0xSHFwR3FtVFVpTlNjOUlVYVZOcGYrbFU2UkxwSTlKWHBLZGtzREphTW00eWJKa0NtWU15RjJUR0tRaEZuZUpDWVZFMlV4b3BGeWtUVkF4Vm0rcEZUYUlXVTcrakRsQm5aV1ZrbDhtR3lXYkwxc2llbGgybElUUXRtaGN0aFZaS08wNGJwcjFib3JURWFRbG55ZllsclV1R2xzekxMWlZ6bE9QSUZjbTF5ZDJXZXlkUGwzZVRUNWJmSmQ4cC8xQUJwYUNuRUtpUXBiQmY0YUxDekZMcVV0dWxyS1ZGUzQ4dnZhY0lLK29wQmltdVZUeW8ySzg0cDZTczVLR1VybFNsZEVGcFJwbW03S2ljcEZ5dWZFWjVXb1dpWXEvQ1ZTbFhPYXZ5bEM1TGQ2S24wQ3ZwdmZSWlZVVlZUMVdoYXIzcWdPcUNtclphcUZxK1dwdmFRM1dDT2tNOVhyMWN2VWQ5VmtORncwOGpUNk5GNDU0bVhwT2htYWk1VjdOUGMxNUxXeXRjYTZ0V3A5YVV0cHkybDNhdWRvdjJBeDJ5am9QT0dwMEduVnU2R0YyR2JyTHVQdDBiZXJDZWhWNmlYbzNlZFgxWTMxS2ZxNzlQZjlBQWJXQnR3RE5vTUJneEpCazZHV1lhdGhpT0dkR01mSTN5alRxTm5odHJHRWNaN3pMdU0vNW9ZbUdTWXRKb2N0OVV4dFRiTk4rMDIvUjNNejB6bGxtTjJTMXpzcm03K1Fiekx2TVh5L1NYY1pidFgzYkhnbUxoWjdIVm9zZmlnNldWSmQreTFYTGFTc01xMXFyV2FvUkJaUVF3U2hpWHJkSFd6dFlickU5WnY3V3h0QkhZSExmNXpkYlFOdG4yaU8zVWN1M2xuT1dOeThmdDFPeVlkdlYyby9aMCsxajdBL2FqRHFvT1RJY0doOGVPNm81c3h5YkhTU2RkcHlTbm8wN1BuVTJjK2M3dHp2TXVOaTdyWE02NUlxNGVya1d1QTI0eWJxRnUxVzZQM05YY0U5eGIzR2M5TER6V2VwenpSSHY2ZU83eUhQRlM4bUo1Tlh2TmVsdDVyL1B1OVNINUJQdFUrenoyMWZQbCszYjd3WDdlZnJ2OUhxelFYTUZiMGVrUC9MMzhkL3MvRE5BT1dCUHdZeUFtTUNDd0p2QkprR2xRWGxCZk1DVTRKdmhJOE9zUTU1RFNrUHVoT3FIQzBKNHd5YkRvc09hdytYRFg4TEx3MFFqamlIVVIxeUlWSXJtUlhWSFlxTENvcHFpNWxXNHI5NnljaUxhSUxvd2VYcVc5S252VmxkVUtxMU5XbjQ2UmpHSEduSWhGeDRiSEhvbDl6L1JuTmpEbjRyemlhdU5tV1M2c3ZheG5iRWQyT1h1YVk4Y3A0MHpHMjhXWHhVOGwyQ1hzVHBoT2RFaXNTSnpodW5DcnVTK1NQSlBxa3VhVC9aTVBKWDlLQ1U5cFM4V2x4cWFlNU1ud2tubTlhY3BwMldtRDZmcnBoZW1qYTJ6VzdGa3p5L2ZoTjJWQUdhc3l1Z1JVMGM5VXYxQkh1RVU0bG1tZldaUDVKaXNzNjBTMmREWXZ1ejlITDJkN3ptU3VlKzYzYTFGcldXdDc4bFR6TnVXTnJYTmFWNzhlV2grM3ZtZUQrb2FDRFJNYlBUWWUza1RZbEx6cHAzeVQvTEw4VjV2RE4zY1hLQlZzTEJqZjRyR2xwVkNpa0Y4NHN0VjJhOTAyMURidXRvSHQ1dHVydG44c1loZGRMVFlwcmloK1g4SXF1ZnFONlRlVjMzemFFYjlqb05TeWRQOU96RTdlenVGZERyc09sMG1YNVphTjcvYmIzVkZPTHk4cWY3VW5acytWaW1VVmRYc0plNFY3Unl0OUs3dXFOS3AyVnIydlRxeStYZU5jMDFhcldMdTlkbjRmZTkvUWZzZjlyWFZLZGNWMTd3NXdEOXlwOTZqdmFOQnFxRGlJT1poNThFbGpXR1BmdDR4dm01c1Vtb3FiUGh6aUhSbzlISFM0dDltcXVmbUk0cEhTRnJoRjJESjlOUHJvamU5Y3YrdHFOV3l0YjZPMUZSOER4NFRIbm40ZisvM3djWi9qUFNjWUoxcC8wUHlodHAzU1h0UUJkZVIwekhZbWRvNTJSWFlObnZRKzJkTnQyOTMrbzlHUGgwNnBucW81TFh1NjlBemhUTUdaVDJkeno4NmRTejgzY3o3aC9IaFBUTS85Q3hFWGJ2VUc5ZzVjOUxsNCtaTDdwUXQ5VG4xbkw5dGRQblhGNXNySnE0eXJuZGNzcjNYMFcvUzMvMlR4VS91QTVVREhkYXZyWFRlc2IzUVBMaDg4TStRd2RQNm02ODFMdDd4dVhidTk0dmJnY09qd25aSG9rZEU3N0R0VGQxUHV2cmlYZVcvaC9zWUg2QWRGRDZVZVZqeFNmTlR3cys3UGJhT1dvNmZIWE1mNkh3Yy92ai9PR24vMlM4WXY3eWNLbnBDZlZFeXFURFpQbVUyZG1uYWZ2dkYwNWRPSlorblBGbVlLZjVYK3RmYTV6dk1mZm5QOHJYODJZbmJpQmYvRnA5OUxYc3EvUFBScTJhdWV1WUM1UjY5VFh5L01GNzJSZjNQNExlTnQzN3Z3ZDVNTFdlK3g3eXMvNkg3by91ano4Y0duMUUrZi9nVURtUFA4dXNUbzB3QUFBQWx3U0ZsekFBQUxFZ0FBQ3hJQjB0MSsvQUFBQUJwMFJWaDBVMjltZEhkaGNtVUFVR0ZwYm5RdVRrVlVJSFl6TGpVdU1UQXc5SEtoQUFBQkxFbEVRVlFvVTJQNGY5RG9QeEkrRG1RNy9qOWt4QUFDWDlYOVZJRjRHUkQvQStML0lNeUFwZ0drK2QvSEE0WTdqcnE1emdJcStBbFRpRlBENTRPRy94MTNxLzJYWHFuKy80S3RPOWhVWkF5eTRTck1sbzlBeFhaQXhRdzdsY0JZY3BYYS96TU9LSnErZ1RTNGdaenhBYWpZRWtreFRKUFlHclgvSjV6Y1lMYjBNL3cvWXNUdzdJREJPclBkcW5DVFlZcGh0TWhhdGYrSFhGMi9BSjBtQVE0TjQ0REhDN21XZXVEVXdMQlQ5VC9yNGFYUFdNNys1bVN3ZHZ5dkJzUy9USDFlLytkYzdveEZrOXAvNW1NYi93TVZnM0FPU01NQ0lQNFB3aVorei85enJIUkEwZ1JTdkFtbUdFUS9BbW40RGRNQTFoVHcrRC83S3R2L0RMczBnSXEzSUNzR3MwRWF3S1lqWTZPUXUyK1lqMnk0QlhVR2lpWjBEVitBR3R1QVdCQ29tQldJazRINEFiSkdBSlFUU2ZzMmF1VnlBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_tile_GraphicAuto", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUlBQUFBQUlDQU1BQUFBR0F3ZE1BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBd0JRVEZSRkFBQUFYbDVlQUFBQUF3TURCQVFFQlFVRkJnWUdCd2NIQ0FnSUNRa0pDZ29LQ3dzTERBd01EUTBORGc0T0R3OFBFQkFRRVJFUkVoSVNFeE1URkJRVUZSVVZGaFlXRnhjWEdCZ1lHUmtaR2hvYUd4c2JIQndjSFIwZEhoNGVIeDhmSUNBZ0lTRWhJaUlpSXlNakpDUWtKU1VsSmlZbUp5Y25LQ2dvS1NrcEtpb3FLeXNyTEN3c0xTMHRMaTR1THk4dk1EQXdNVEV4TWpJeU16TXpORFEwTlRVMU5qWTJOemMzT0RnNE9UazVPam82T3pzN1BEdzhQVDA5UGo0K1B6OC9RRUJBUVVGQlFrSkNRME5EUkVSRVJVVkZSa1pHUjBkSFNFaElTVWxKU2twS1MwdExURXhNVFUxTlRrNU9UMDlQVUZCUVVWRlJVbEpTVTFOVFZGUlVWVlZWVmxaV1YxZFhXRmhZV1ZsWldscGFXMXRiWEZ4Y1hWMWRYbDVlWDE5ZllHQmdZV0ZoWW1KaVkyTmpaR1JrWldWbFptWm1aMmRuYUdob2FXbHBhbXBxYTJ0cmJHeHNiVzF0Ym01dWIyOXZjSEJ3Y1hGeGNuSnljM056ZEhSMGRYVjFkbloyZDNkM2VIaDRlWGw1ZW5wNmUzdDdmSHg4ZlgxOWZuNStmMzkvZ0lDQWdZR0Jnb0tDZzRPRGhJU0VoWVdGaG9hR2g0ZUhpSWlJaVltSmlvcUtpNHVMakl5TWpZMk5qbzZPajQrUGtKQ1FrWkdSa3BLU2s1T1RsSlNVbFpXVmxwYVdsNWVYbUppWW1abVptcHFhbTV1Ym5KeWNuWjJkbnA2ZW41K2ZvS0Nnb2FHaG9xS2lvNk9qcEtTa3BhV2xwcWFtcDZlbnFLaW9xYW1wcXFxcXE2dXJyS3lzcmEydHJxNnVyNit2c0xDd3NiR3hzckt5czdPenRMUzB0YlcxdHJhMnQ3ZTN1TGk0dWJtNXVycTZ1N3U3dkx5OHZiMjl2cjYrdjcrL3dNREF3Y0hCd3NMQ3c4UER4TVRFeGNYRnhzYkd4OGZIeU1qSXljbkp5c3JLeTh2THpNek16YzNOenM3T3o4L1AwTkRRMGRIUjB0TFMwOVBUMU5UVTFkWFYxdGJXMTlmWDJOalkyZG5aMnRyYTI5dmIzTnpjM2QzZDN0N2UzOS9mNE9EZzRlSGg0dUxpNCtQajVPVGs1ZVhsNXVibTUrZm42T2pvNmVucDZ1cnE2K3ZyN096czdlM3Q3dTd1NysvdjhQRHc4Zkh4OHZMeTgvUHo5UFQwOWZYMTl2YjI5L2YzK1BqNCtmbjUrdnI2Ky92Ny9QejgvZjM5L3Y3Ky8vLy9Ra3FmSXdBQUFBTjBVazVULy84QTE4b05RUUFBQUcxSlJFRlVlTnJzazdFU3dDQUlRMS84LzQ5MlVEeUJWdHk2MUNVWEVnVTVvQUZBUXdCaWNnYUhTc2ZaZlBCT2x5UUpTekM1bHJmUWpWb0MrVUNwYncvdlNNQ0RuczFQdnp6b2Z3SGZGMkJENWxCKzJONExTUFp3eWdKc3pRS0dkYXM2UUxwMjI0RU9BQUQvL3dNQTlQY0E4YU9wY3lVQUFBQUFTVVZPUks1Q1lJST0"},{ name : "__ASSET__:bitmap_flixel_system_debug_GraphicConsole", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBQUlHTklVazBBQUhvbEFBQ0Fnd0FBK2Y4QUFJRHBBQUIxTUFBQTZtQUFBRHFZQUFBWGI1SmZ4VVlBQUFCVVNVUkJWSGphdEpIUkNVQWhEQVBqRzhVVjNNbmhuTVZaWE9IOFVTaFBoSW9ZeUUrNXRJRUdRRjU5T3BDRm82UXFLVzFwd0RvRERTaS91WUFGbmk0amxEM3d2SUlOWEcxMmQ0NUFCZEt1V25qMmxENEFLVWJYUXNkOGx3a0FBQUFBU1VWT1JLNUNZSUk9"},{ name : "__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicEraserTool", data : ""},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRecordOff", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUdoSlJFRlVlTnBpK1AvL1B3TVUyd0J4SHhCZkFPS2ZVTG9QS2c1V0ExTVlBOFRYLzJNSDE2SHlEREFUY1NsRTFtRER4TURBRUFURUdnejRBVWcrQ0tUWWlZRTQ0TVFJOGd5UXdVYUU0bDhnazY4VGFmSjFrT0o5UkNyZVIxSm9rQnpPUk1jZ1FJQUJBUHdDK0RaNDFKa0NBQUFBQUVsRlRrU3VRbUND"},{ name : "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRecordOn", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUoxSlJFRlVlTnAwVWNrUkF5RU1zL0pJTFZ1RXE5ajMxcFNTdGdaKzFKSjhpSHlFQ2V1RUdZRVBHWVF0QXlKREhFbzg2RGVlVDZLNUgzRXhubS9Fd1VBbnhnU21iZkVqeUZZSnJNU0tUckxleU4vcGJtS1YvOWZHVzNkeGJTaFBoNDNGYnJEUHNQTHU5YW1yMkxGZUpxUC9USTRpcFJ2NUxFbGNQaER1YVczVDJiWkZKNzQxVzE0bEcxNzdMSmMrZjE3UEFzMkpyUk5FVHBCNEN6QUFFNHFQMnhEMkYyNEFBQUFBU1VWT1JLNUNZSUk9"},{ name : "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFzQUFBQUxDQVlBQUFDcHJIY21BQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQUU5SlJFRlVlTnEwa01zTkFDQUlRNnRic3FCcjF2Z25haFFQTnVrRlhna3BTS0phZUZhWVFWSGg1WWdWbEFiZjFJN1E1UVRnc0pmZTBlTkJYMkFwajR4V2RxWnV4QUwzUnRJZ0dLdERGR0FBNGg0Vk01NWl5QnNBQUFBQVNVVk9SSzVDWUlJPQ"}];
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.003921568627447);
}
var this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
if(window.createjs != null) {
	createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
}
openfl_ui_Multitouch.maxTouchPoints = 2;
openfl_ui_Multitouch.supportedGestures = null;
openfl_ui_Multitouch.supportsGestureEvents = false;
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
openfl_display_DisplayObject.__cacheAsBitmapMode = false;
openfl_text_Font.__registeredFonts = [];
StringTools.winMetaCharacters = [32,40,41,37,33,94,34,60,62,38,124,10,13,44,59];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
de_polygonal_Printf.DEFAULT_PRECISION = 6;
de_polygonal_Printf.DEFAULT_NUM_EXP_DIGITS = 2;
de_polygonal_Printf._initialized = false;
flixel_FlxBasic.activeCount = 0;
flixel_FlxBasic.visibleCount = 0;
flixel_math_FlxRect._pool = new flixel_util_FlxPool_$flixel_$math_$FlxRect(flixel_math_FlxRect);
flixel_FlxObject.defaultPixelPerfectPosition = false;
flixel_FlxObject.SEPARATE_BIAS = 4;
flixel_FlxObject.LEFT = 1;
flixel_FlxObject.RIGHT = 16;
flixel_FlxObject.UP = 256;
flixel_FlxObject.DOWN = 4096;
flixel_FlxObject.NONE = 0;
flixel_FlxObject.CEILING = 256;
flixel_FlxObject.FLOOR = 4096;
flixel_FlxObject.WALL = 17;
flixel_FlxObject.ANY = 4369;
flixel_FlxObject._firstSeparateFlxRect = (function($this) {
	var $r;
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	$r = _this;
	return $r;
}(this));
flixel_FlxObject._secondSeparateFlxRect = (function($this) {
	var $r;
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	$r = _this;
	return $r;
}(this));
js_Boot.__toStr = ({ }).toString;
entities_Block.BLOCK_APPEAR_FRAME_NAMES = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 13) {
			var i = _g1++;
			_g.push(de_polygonal_Printf.format("block-appear-%02d.png",[i]));
		}
	}
	$r = _g;
	return $r;
}(this));
entities_Block.BLOCK_VANISH_FRAME_NAMES = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 5) {
			var i = _g1++;
			_g.push(de_polygonal_Printf.format("block-vanish-%02d.png",[i]));
		}
	}
	$r = _g;
	return $r;
}(this));
entities__$BlockColor_BlockColor_$Impl_$.All = ["tile-red.png","tile-blue.png","tile-green.png","tile-yellow.png","tile-orange.png","tile-purple.png"];
entities_Rosie.RUN_SPEED = 32.0;
entities_Rosie.IDLE_FPS = 6;
entities_Rosie.RUN_FPS = 12;
entities_Rosie.IDLE_FRAMES = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 1;
		while(_g1 < 62) {
			var i = _g1++;
			_g.push(de_polygonal_Printf.format("cat/idle/rosie-idle-%02d.png",[i]));
		}
	}
	$r = _g;
	return $r;
}(this));
entities_Rosie.RUN_FRAMES = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 1;
		while(_g1 < 7) {
			var i = _g1++;
			_g.push(de_polygonal_Printf.format("cat/run/rosie-run-%02d.png",[i]));
		}
	}
	$r = _g;
	return $r;
}(this));
flixel_math_FlxPoint._pool = new flixel_util_FlxPool_$flixel_$math_$FlxPoint(flixel_math_FlxPoint);
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
flixel_FlxCamera.drawVertices = (function($this) {
	var $r;
	var this1 = new openfl_VectorData();
	var this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	$r = this1;
	return $r;
}(this));
flixel_FlxCamera.trianglesSprite = new openfl_display_Sprite();
flixel_FlxCamera.renderPoint = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
flixel_FlxCamera.renderRect = (function($this) {
	var $r;
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	$r = _this;
	return $r;
}(this));
flixel_system_FlxVersion.sha = "09d73504937c1aa28b4334bc80c487b8d9ac940a\n";
flixel_math_FlxRandom._arrayFloatHelper = null;
flixel_math_FlxRandom.MULTIPLIER = 48271.0;
flixel_math_FlxRandom.MODULUS = 2147483647;
flixel_FlxG.autoPause = true;
flixel_FlxG.fixedTimestep = true;
flixel_FlxG.timeScale = 1;
flixel_FlxG.worldDivisions = 6;
flixel_FlxG.VERSION = new flixel_system_FlxVersion(4,3,0);
flixel_FlxG.elapsed = 0;
flixel_FlxG.maxElapsed = 0.1;
flixel_FlxG.scaleMode = new flixel_system_scaleModes_RatioScaleMode();
flixel_FlxG.worldBounds = (function($this) {
	var $r;
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	$r = _this;
	return $r;
}(this));
flixel_FlxG.save = new flixel_util_FlxSave();
flixel_FlxG.random = new flixel_math_FlxRandom();
flixel_FlxG.swipes = [];
flixel_FlxG.html5 = new flixel_system_frontEnds_HTML5FrontEnd();
flixel_FlxG.inputs = new flixel_system_frontEnds_InputFrontEnd();
flixel_FlxG.console = new flixel_system_frontEnds_ConsoleFrontEnd();
flixel_FlxG.log = new flixel_system_frontEnds_LogFrontEnd();
flixel_FlxG.bitmapLog = new flixel_system_frontEnds_BitmapLogFrontEnd();
flixel_FlxG.watch = new flixel_system_frontEnds_WatchFrontEnd();
flixel_FlxG["debugger"] = new flixel_system_frontEnds_DebuggerFrontEnd();
flixel_FlxG.bitmap = new flixel_system_frontEnds_BitmapFrontEnd();
flixel_FlxG.cameras = new flixel_system_frontEnds_CameraFrontEnd();
flixel_FlxG.initialWidth = 0;
flixel_FlxG.initialHeight = 0;
flixel_FlxG.initialZoom = 0;
flixel_FlxG.signals = new flixel_system_frontEnds_SignalFrontEnd();
flixel_addons_editors_tiled_TiledObject.FLIPPED_VERTICALLY_FLAG = 1073741824;
flixel_addons_editors_tiled_TiledObject.FLIPPED_HORIZONTALLY_FLAG = -2147483648;
flixel_addons_editors_tiled_TiledObject.RECTANGLE = 0;
flixel_addons_editors_tiled_TiledObject.ELLIPSE = 1;
flixel_addons_editors_tiled_TiledObject.POLYGON = 2;
flixel_addons_editors_tiled_TiledObject.POLYLINE = 3;
flixel_addons_editors_tiled_TiledObject.TILE = 4;
flixel_addons_editors_tiled_TiledTile.FLIPPED_HORIZONTAL = -2147483648;
flixel_addons_editors_tiled_TiledTile.FLIPPED_VERTICAL = 1073741824;
flixel_addons_editors_tiled_TiledTile.FLIPPED_DIAGONAL = 536870912;
flixel_addons_editors_tiled_TiledTile.ROTATE_0 = 0;
flixel_addons_editors_tiled_TiledTile.ROTATE_90 = 1;
flixel_addons_editors_tiled_TiledTile.ROTATE_270 = 2;
flixel_addons_editors_tiled_TiledTileLayer.BASE64_CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
flixel_animation_FlxPrerotatedAnimation.PREROTATED = "prerotated_animation";
flixel_effects_FlxFlicker._pool = new flixel_util_FlxPool_$flixel_$effects_$FlxFlicker(flixel_effects_FlxFlicker);
flixel_effects_FlxFlicker._boundObjects = new haxe_ds_ObjectMap();
flixel_graphics_FlxGraphic.defaultPersist = false;
flixel_graphics_atlas_FlxAtlas.point = new openfl_geom_Point();
flixel_graphics_atlas_FlxAtlas.matrix = new openfl_geom_Matrix();
flixel_graphics_atlas_FlxAtlas.defaultMinSize = new flixel_math_FlxPoint(128,128);
flixel_graphics_atlas_FlxAtlas.defaultMaxSize = new flixel_math_FlxPoint(1024,1024);
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
flixel_graphics_frames_FlxBitmapFont.SPACE_CODE = 32;
flixel_graphics_frames_FlxBitmapFont.TAB_CODE = 9;
flixel_graphics_frames_FlxBitmapFont.NEW_LINE_CODE = 10;
flixel_graphics_frames_FlxBitmapFont.DEFAULT_FONT_KEY = "DEFAULT_FONT_KEY";
flixel_graphics_frames_FlxBitmapFont.DEFAULT_FONT_DATA = " 36000000000000000000!26101010001000\"46101010100000000000000000#66010100111110010100111110010100000000$56001000111011000001101110000100%66100100000100001000010000010010000000&66011000100000011010100100011010000000'26101000000000(36010100100100010000)36100010010010100000*46000010100100101000000000+46000001001110010000000000,36000000000000010100-46000000001110000000000000.26000000001000/66000010000100001000010000100000000000056011001001010010100100110000000156011000010000100001000010000000256111000001001100100001111000000356111000001001100000101110000000456100101001010010011100001000000556111101000011100000101110000000656011001000011100100100110000000756111000001000010001100001000000856011001001001100100100110000000956011001001010010011100001000000:26001000100000;26001000101000<46001001001000010000100000=46000011100000111000000000>46100001000010010010000000?56111000001001100000000100000000@66011100100010101110101010011100000000A56011001001010010111101001000000B56111001001011100100101110000000C56011001001010000100100110000000D56111001001010010100101110000000E56111101000011000100001111000000F56111101000010000110001000000000G56011001000010110100100111000000H56100101001011110100101001000000I26101010101000J56000100001000010100100110000000K56100101001010010111001001000000L46100010001000100011100000M66100010100010110110101010100010000000N56100101001011010101101001000000O56011001001010010100100110000000P56111001001010010111001000000000Q56011001001010010100100110000010R56111001001010010111001001000000S56011101000001100000101110000000T46111001000100010001000000U56100101001010010100100110000000V56100101001010010101000100000000W66100010100010101010110110100010000000X56100101001001100100101001000000Y56100101001010010011100001001100Z56111100001001100100001111000000[36110100100100110000}46110001000010010011000000]36110010010010110000^46010010100000000000000000_46000000000000000011110000'26101000000000a56000000111010010100100111000000b56100001110010010100101110000000c46000001101000100001100000d56000100111010010100100111000000e56000000110010110110000110000000f46011010001000110010000000g5700000011001001010010011100001001100h56100001110010010100101001000000i26100010101000j37010000010010010010100k56100001001010010111001001000000l26101010101000m66000000111100101010101010101010000000n56000001110010010100101001000000o56000000110010010100100110000000p5700000111001001010010111001000010000q5700000011101001010010011100001000010r46000010101100100010000000s56000000111011000001101110000000t46100011001000100001100000u56000001001010010100100111000000v56000001001010010101000100000000w66000000101010101010101010011110000000x56000001001010010011001001000000y5700000100101001010010011100001001100z56000001111000100010001111000000{46011001001000010001100000|26101010101000}46110001000010010011000000~56010101010000000000000000000000\\46111010101010101011100000";
flixel_graphics_frames_FlxBitmapFont.DEFAULT_CHARS = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
flixel_graphics_frames_FlxBitmapFont.point = new openfl_geom_Point();
flixel_graphics_frames_FlxBitmapFont.flashRect = new openfl_geom_Rectangle();
flixel_graphics_tile_FlxDrawTrianglesItem.point = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
flixel_graphics_tile_FlxDrawTrianglesItem.rect = (function($this) {
	var $r;
	var _this = flixel_math_FlxRect._pool.get();
	_this.x = 0;
	_this.y = 0;
	_this.width = 0;
	_this.height = 0;
	_this._inPool = false;
	$r = _this;
	return $r;
}(this));
flixel_graphics_tile_FlxTilesheet._DRAWCALLS = 0;
flixel_input_FlxPointer._cachedPoint = new flixel_math_FlxPoint();
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.fromStringMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["ANY"] != null) {
		_g.setReserved("ANY",-2);
	} else {
		_g.h["ANY"] = -2;
	}
	if(__map_reserved["A"] != null) {
		_g.setReserved("A",0);
	} else {
		_g.h["A"] = 0;
	}
	if(__map_reserved["B"] != null) {
		_g.setReserved("B",1);
	} else {
		_g.h["B"] = 1;
	}
	if(__map_reserved["X"] != null) {
		_g.setReserved("X",2);
	} else {
		_g.h["X"] = 2;
	}
	if(__map_reserved["Y"] != null) {
		_g.setReserved("Y",3);
	} else {
		_g.h["Y"] = 3;
	}
	if(__map_reserved["LEFT_SHOULDER"] != null) {
		_g.setReserved("LEFT_SHOULDER",4);
	} else {
		_g.h["LEFT_SHOULDER"] = 4;
	}
	if(__map_reserved["RIGHT_SHOULDER"] != null) {
		_g.setReserved("RIGHT_SHOULDER",5);
	} else {
		_g.h["RIGHT_SHOULDER"] = 5;
	}
	if(__map_reserved["BACK"] != null) {
		_g.setReserved("BACK",6);
	} else {
		_g.h["BACK"] = 6;
	}
	if(__map_reserved["START"] != null) {
		_g.setReserved("START",7);
	} else {
		_g.h["START"] = 7;
	}
	if(__map_reserved["LEFT_STICK_CLICK"] != null) {
		_g.setReserved("LEFT_STICK_CLICK",8);
	} else {
		_g.h["LEFT_STICK_CLICK"] = 8;
	}
	if(__map_reserved["RIGHT_STICK_CLICK"] != null) {
		_g.setReserved("RIGHT_STICK_CLICK",9);
	} else {
		_g.h["RIGHT_STICK_CLICK"] = 9;
	}
	if(__map_reserved["GUIDE"] != null) {
		_g.setReserved("GUIDE",10);
	} else {
		_g.h["GUIDE"] = 10;
	}
	if(__map_reserved["DPAD_UP"] != null) {
		_g.setReserved("DPAD_UP",11);
	} else {
		_g.h["DPAD_UP"] = 11;
	}
	if(__map_reserved["DPAD_DOWN"] != null) {
		_g.setReserved("DPAD_DOWN",12);
	} else {
		_g.h["DPAD_DOWN"] = 12;
	}
	if(__map_reserved["DPAD_LEFT"] != null) {
		_g.setReserved("DPAD_LEFT",13);
	} else {
		_g.h["DPAD_LEFT"] = 13;
	}
	if(__map_reserved["DPAD_RIGHT"] != null) {
		_g.setReserved("DPAD_RIGHT",14);
	} else {
		_g.h["DPAD_RIGHT"] = 14;
	}
	if(__map_reserved["LEFT_TRIGGER_BUTTON"] != null) {
		_g.setReserved("LEFT_TRIGGER_BUTTON",15);
	} else {
		_g.h["LEFT_TRIGGER_BUTTON"] = 15;
	}
	if(__map_reserved["RIGHT_TRIGGER_BUTTON"] != null) {
		_g.setReserved("RIGHT_TRIGGER_BUTTON",16);
	} else {
		_g.h["RIGHT_TRIGGER_BUTTON"] = 16;
	}
	if(__map_reserved["LEFT_TRIGGER"] != null) {
		_g.setReserved("LEFT_TRIGGER",17);
	} else {
		_g.h["LEFT_TRIGGER"] = 17;
	}
	if(__map_reserved["RIGHT_TRIGGER"] != null) {
		_g.setReserved("RIGHT_TRIGGER",18);
	} else {
		_g.h["RIGHT_TRIGGER"] = 18;
	}
	if(__map_reserved["LEFT_ANALOG_STICK"] != null) {
		_g.setReserved("LEFT_ANALOG_STICK",19);
	} else {
		_g.h["LEFT_ANALOG_STICK"] = 19;
	}
	if(__map_reserved["RIGHT_ANALOG_STICK"] != null) {
		_g.setReserved("RIGHT_ANALOG_STICK",20);
	} else {
		_g.h["RIGHT_ANALOG_STICK"] = 20;
	}
	if(__map_reserved["DPAD"] != null) {
		_g.setReserved("DPAD",21);
	} else {
		_g.h["DPAD"] = 21;
	}
	if(__map_reserved["TILT_PITCH"] != null) {
		_g.setReserved("TILT_PITCH",26);
	} else {
		_g.h["TILT_PITCH"] = 26;
	}
	if(__map_reserved["TILT_ROLL"] != null) {
		_g.setReserved("TILT_ROLL",27);
	} else {
		_g.h["TILT_ROLL"] = 27;
	}
	if(__map_reserved["POINTER_X"] != null) {
		_g.setReserved("POINTER_X",28);
	} else {
		_g.h["POINTER_X"] = 28;
	}
	if(__map_reserved["POINTER_Y"] != null) {
		_g.setReserved("POINTER_Y",29);
	} else {
		_g.h["POINTER_Y"] = 29;
	}
	if(__map_reserved["EXTRA_0"] != null) {
		_g.setReserved("EXTRA_0",30);
	} else {
		_g.h["EXTRA_0"] = 30;
	}
	if(__map_reserved["EXTRA_1"] != null) {
		_g.setReserved("EXTRA_1",31);
	} else {
		_g.h["EXTRA_1"] = 31;
	}
	if(__map_reserved["EXTRA_2"] != null) {
		_g.setReserved("EXTRA_2",32);
	} else {
		_g.h["EXTRA_2"] = 32;
	}
	if(__map_reserved["EXTRA_3"] != null) {
		_g.setReserved("EXTRA_3",33);
	} else {
		_g.h["EXTRA_3"] = 33;
	}
	if(__map_reserved["LEFT_STICK_DIGITAL_UP"] != null) {
		_g.setReserved("LEFT_STICK_DIGITAL_UP",34);
	} else {
		_g.h["LEFT_STICK_DIGITAL_UP"] = 34;
	}
	if(__map_reserved["LEFT_STICK_DIGITAL_RIGHT"] != null) {
		_g.setReserved("LEFT_STICK_DIGITAL_RIGHT",35);
	} else {
		_g.h["LEFT_STICK_DIGITAL_RIGHT"] = 35;
	}
	if(__map_reserved["LEFT_STICK_DIGITAL_DOWN"] != null) {
		_g.setReserved("LEFT_STICK_DIGITAL_DOWN",36);
	} else {
		_g.h["LEFT_STICK_DIGITAL_DOWN"] = 36;
	}
	if(__map_reserved["LEFT_STICK_DIGITAL_LEFT"] != null) {
		_g.setReserved("LEFT_STICK_DIGITAL_LEFT",37);
	} else {
		_g.h["LEFT_STICK_DIGITAL_LEFT"] = 37;
	}
	if(__map_reserved["RIGHT_STICK_DIGITAL_UP"] != null) {
		_g.setReserved("RIGHT_STICK_DIGITAL_UP",38);
	} else {
		_g.h["RIGHT_STICK_DIGITAL_UP"] = 38;
	}
	if(__map_reserved["RIGHT_STICK_DIGITAL_RIGHT"] != null) {
		_g.setReserved("RIGHT_STICK_DIGITAL_RIGHT",39);
	} else {
		_g.h["RIGHT_STICK_DIGITAL_RIGHT"] = 39;
	}
	if(__map_reserved["RIGHT_STICK_DIGITAL_DOWN"] != null) {
		_g.setReserved("RIGHT_STICK_DIGITAL_DOWN",40);
	} else {
		_g.h["RIGHT_STICK_DIGITAL_DOWN"] = 40;
	}
	if(__map_reserved["RIGHT_STICK_DIGITAL_LEFT"] != null) {
		_g.setReserved("RIGHT_STICK_DIGITAL_LEFT",41);
	} else {
		_g.h["RIGHT_STICK_DIGITAL_LEFT"] = 41;
	}
	$r = _g;
	return $r;
}(this));
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.toStringMap = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[-2] = "ANY";
	_g.h[0] = "A";
	_g.h[1] = "B";
	_g.h[2] = "X";
	_g.h[3] = "Y";
	_g.h[4] = "LEFT_SHOULDER";
	_g.h[5] = "RIGHT_SHOULDER";
	_g.h[6] = "BACK";
	_g.h[7] = "START";
	_g.h[8] = "LEFT_STICK_CLICK";
	_g.h[9] = "RIGHT_STICK_CLICK";
	_g.h[10] = "GUIDE";
	_g.h[11] = "DPAD_UP";
	_g.h[12] = "DPAD_DOWN";
	_g.h[13] = "DPAD_LEFT";
	_g.h[14] = "DPAD_RIGHT";
	_g.h[15] = "LEFT_TRIGGER_BUTTON";
	_g.h[16] = "RIGHT_TRIGGER_BUTTON";
	_g.h[17] = "LEFT_TRIGGER";
	_g.h[18] = "RIGHT_TRIGGER";
	_g.h[19] = "LEFT_ANALOG_STICK";
	_g.h[20] = "RIGHT_ANALOG_STICK";
	_g.h[21] = "DPAD";
	_g.h[26] = "TILT_PITCH";
	_g.h[27] = "TILT_ROLL";
	_g.h[28] = "POINTER_X";
	_g.h[29] = "POINTER_Y";
	_g.h[30] = "EXTRA_0";
	_g.h[31] = "EXTRA_1";
	_g.h[32] = "EXTRA_2";
	_g.h[33] = "EXTRA_3";
	_g.h[34] = "LEFT_STICK_DIGITAL_UP";
	_g.h[35] = "LEFT_STICK_DIGITAL_RIGHT";
	_g.h[36] = "LEFT_STICK_DIGITAL_DOWN";
	_g.h[37] = "LEFT_STICK_DIGITAL_LEFT";
	_g.h[38] = "RIGHT_STICK_DIGITAL_UP";
	_g.h[39] = "RIGHT_STICK_DIGITAL_RIGHT";
	_g.h[40] = "RIGHT_STICK_DIGITAL_DOWN";
	_g.h[41] = "RIGHT_STICK_DIGITAL_LEFT";
	$r = _g;
	return $r;
}(this));
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.ANY = -2;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.NONE = -1;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.A = 0;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.B = 1;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.X = 2;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.Y = 3;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.LEFT_SHOULDER = 4;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.RIGHT_SHOULDER = 5;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.BACK = 6;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.START = 7;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.LEFT_STICK_CLICK = 8;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.RIGHT_STICK_CLICK = 9;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.GUIDE = 10;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.DPAD_UP = 11;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.DPAD_DOWN = 12;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.DPAD_LEFT = 13;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.DPAD_RIGHT = 14;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.LEFT_TRIGGER_BUTTON = 15;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.RIGHT_TRIGGER_BUTTON = 16;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.LEFT_TRIGGER = 17;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.RIGHT_TRIGGER = 18;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.LEFT_ANALOG_STICK = 19;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.RIGHT_ANALOG_STICK = 20;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.DPAD = 21;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.TILT_PITCH = 26;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.TILT_ROLL = 27;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.POINTER_X = 28;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.POINTER_Y = 29;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.EXTRA_0 = 30;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.EXTRA_1 = 31;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.EXTRA_2 = 32;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.EXTRA_3 = 33;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.LEFT_STICK_DIGITAL_UP = 34;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.LEFT_STICK_DIGITAL_RIGHT = 35;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.LEFT_STICK_DIGITAL_DOWN = 36;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.LEFT_STICK_DIGITAL_LEFT = 37;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.RIGHT_STICK_DIGITAL_UP = 38;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.RIGHT_STICK_DIGITAL_RIGHT = 39;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.RIGHT_STICK_DIGITAL_DOWN = 40;
flixel_input_gamepad__$FlxGamepadInputID_FlxGamepadInputID_$Impl_$.RIGHT_STICK_DIGITAL_LEFT = 41;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
flixel_input_gamepad_FlxGamepadManager._gameInput = new openfl_ui_GameInput();
flixel_input_gamepad_id_LogitechID.ONE = 0;
flixel_input_gamepad_id_LogitechID.TWO = 1;
flixel_input_gamepad_id_LogitechID.THREE = 2;
flixel_input_gamepad_id_LogitechID.FOUR = 3;
flixel_input_gamepad_id_LogitechID.FIVE = 4;
flixel_input_gamepad_id_LogitechID.SIX = 5;
flixel_input_gamepad_id_LogitechID.SEVEN = 6;
flixel_input_gamepad_id_LogitechID.EIGHT = 7;
flixel_input_gamepad_id_LogitechID.NINE = 8;
flixel_input_gamepad_id_LogitechID.TEN = 9;
flixel_input_gamepad_id_LogitechID.LEFT_STICK_CLICK = 10;
flixel_input_gamepad_id_LogitechID.RIGHT_STICK_CLICK = 11;
flixel_input_gamepad_id_LogitechID.DPAD_UP = 16;
flixel_input_gamepad_id_LogitechID.DPAD_DOWN = 17;
flixel_input_gamepad_id_LogitechID.DPAD_LEFT = 18;
flixel_input_gamepad_id_LogitechID.DPAD_RIGHT = 19;
flixel_input_gamepad_id_LogitechID.LOGITECH = -5;
flixel_input_gamepad_id_LogitechID.LEFT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 24, down : 25, left : 26, right : 27});
flixel_input_gamepad_id_LogitechID.RIGHT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(2,3,{ up : 28, down : 29, left : 30, right : 31});
flixel_input_gamepad_id_MFiID.A = 6;
flixel_input_gamepad_id_MFiID.B = 7;
flixel_input_gamepad_id_MFiID.X = 8;
flixel_input_gamepad_id_MFiID.Y = 9;
flixel_input_gamepad_id_MFiID.LB = 15;
flixel_input_gamepad_id_MFiID.RB = 16;
flixel_input_gamepad_id_MFiID.BACK = 10;
flixel_input_gamepad_id_MFiID.START = 12;
flixel_input_gamepad_id_MFiID.LEFT_STICK_CLICK = 13;
flixel_input_gamepad_id_MFiID.RIGHT_STICK_CLICK = 14;
flixel_input_gamepad_id_MFiID.GUIDE = 11;
flixel_input_gamepad_id_MFiID.DPAD_UP = 17;
flixel_input_gamepad_id_MFiID.DPAD_DOWN = 18;
flixel_input_gamepad_id_MFiID.DPAD_LEFT = 19;
flixel_input_gamepad_id_MFiID.DPAD_RIGHT = 20;
flixel_input_gamepad_id_MFiID.LEFT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 21, down : 22, left : 23, right : 24});
flixel_input_gamepad_id_MFiID.RIGHT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(2,3,{ up : 25, down : 26, left : 27, right : 28});
flixel_input_gamepad_id_MFiID.LEFT_TRIGGER = 4;
flixel_input_gamepad_id_MFiID.RIGHT_TRIGGER = 5;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_ONE = 8;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_TWO = 9;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_A = 10;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_B = 11;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_MINUS = 12;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_PLUS = 13;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_HOME = 19;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_Z = 14;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_C = 15;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_DPAD_UP = 4;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_DPAD_DOWN = 5;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_DPAD_LEFT = 6;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_DPAD_RIGHT = 7;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_MINUS = 12;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_PLUS = 13;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_HOME = 19;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_A = 10;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_B = 11;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_ONE = 8;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_TWO = 9;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_Y = 8;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_X = 9;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_B = 10;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_A = 11;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_L = 12;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_R = 13;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_ZL = 14;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_ZR = 15;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_SELECT = 16;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_START = 17;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_HOME = 19;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_ONE = -1;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_TWO = -1;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_DPAD_UP = 4;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_DPAD_DOWN = 5;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_DPAD_LEFT = 6;
flixel_input_gamepad_id_MayflashWiiRemoteID.CLASSIC_DPAD_RIGHT = 7;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_POINTER_X = 2;
flixel_input_gamepad_id_MayflashWiiRemoteID.NUNCHUK_POINTER_Y = 3;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_DPAD = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 22, down : 23, left : 24, right : 25, threshold : 0.5, mode : flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL});
flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 26, down : 27, left : 28, right : 29});
flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(2,3,{ up : 26, down : 27, left : 28, right : 29});
flixel_input_gamepad_id_MayflashWiiRemoteID.LEFT_TRIGGER_FAKE = 4;
flixel_input_gamepad_id_MayflashWiiRemoteID.RIGHT_TRIGGER_FAKE = 5;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_DPAD_UP = 22;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_DPAD_DOWN = 23;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_DPAD_LEFT = 24;
flixel_input_gamepad_id_MayflashWiiRemoteID.REMOTE_DPAD_RIGHT = 25;
flixel_input_gamepad_id_OUYAID.O = 0;
flixel_input_gamepad_id_OUYAID.U = 3;
flixel_input_gamepad_id_OUYAID.Y = 4;
flixel_input_gamepad_id_OUYAID.A = 1;
flixel_input_gamepad_id_OUYAID.LB = 6;
flixel_input_gamepad_id_OUYAID.RB = 7;
flixel_input_gamepad_id_OUYAID.LEFT_STICK_CLICK = 10;
flixel_input_gamepad_id_OUYAID.RIGHT_STICK_CLICK = 11;
flixel_input_gamepad_id_OUYAID.HOME = 2;
flixel_input_gamepad_id_OUYAID.LEFT_TRIGGER = 8;
flixel_input_gamepad_id_OUYAID.RIGHT_TRIGGER = 9;
flixel_input_gamepad_id_OUYAID.DPAD_LEFT = 13;
flixel_input_gamepad_id_OUYAID.DPAD_RIGHT = 14;
flixel_input_gamepad_id_OUYAID.DPAD_DOWN = 15;
flixel_input_gamepad_id_OUYAID.DPAD_UP = 16;
flixel_input_gamepad_id_OUYAID.LEFT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 23, down : 24, left : 25, right : 26});
flixel_input_gamepad_id_OUYAID.RIGHT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(11,14,{ up : 27, down : 28, left : 29, right : 30});
flixel_input_gamepad_id_OUYAID.LEFT_TRIGGER_ANALOG = 17;
flixel_input_gamepad_id_OUYAID.RIGHT_TRIGGER_ANALOG = 18;
flixel_input_gamepad_id_PS4ID.X = 6;
flixel_input_gamepad_id_PS4ID.CIRCLE = 7;
flixel_input_gamepad_id_PS4ID.SQUARE = 8;
flixel_input_gamepad_id_PS4ID.TRIANGLE = 9;
flixel_input_gamepad_id_PS4ID.SHARE = 10;
flixel_input_gamepad_id_PS4ID.PS = 11;
flixel_input_gamepad_id_PS4ID.OPTIONS = 12;
flixel_input_gamepad_id_PS4ID.LEFT_STICK_CLICK = 13;
flixel_input_gamepad_id_PS4ID.RIGHT_STICK_CLICK = 14;
flixel_input_gamepad_id_PS4ID.L1 = 15;
flixel_input_gamepad_id_PS4ID.R1 = 16;
flixel_input_gamepad_id_PS4ID.TOUCHPAD_CLICK = 21;
flixel_input_gamepad_id_PS4ID.LEFT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 22, down : 23, left : 24, right : 25});
flixel_input_gamepad_id_PS4ID.RIGHT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(2,3,{ up : 26, down : 27, left : 28, right : 29});
flixel_input_gamepad_id_PS4ID.L2 = 4;
flixel_input_gamepad_id_PS4ID.R2 = 5;
flixel_input_gamepad_id_PS4ID.DPAD_UP = 17;
flixel_input_gamepad_id_PS4ID.DPAD_DOWN = 18;
flixel_input_gamepad_id_PS4ID.DPAD_LEFT = 19;
flixel_input_gamepad_id_PS4ID.DPAD_RIGHT = 20;
flixel_input_gamepad_id_PSVitaID.X = 6;
flixel_input_gamepad_id_PSVitaID.CIRCLE = 7;
flixel_input_gamepad_id_PSVitaID.SQUARE = 8;
flixel_input_gamepad_id_PSVitaID.TRIANGLE = 9;
flixel_input_gamepad_id_PSVitaID.SELECT = 10;
flixel_input_gamepad_id_PSVitaID.START = 12;
flixel_input_gamepad_id_PSVitaID.L = 15;
flixel_input_gamepad_id_PSVitaID.R = 16;
flixel_input_gamepad_id_PSVitaID.DPAD_UP = 17;
flixel_input_gamepad_id_PSVitaID.DPAD_DOWN = 18;
flixel_input_gamepad_id_PSVitaID.DPAD_LEFT = 19;
flixel_input_gamepad_id_PSVitaID.DPAD_RIGHT = 20;
flixel_input_gamepad_id_PSVitaID.LEFT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 21, down : 22, left : 23, right : 24});
flixel_input_gamepad_id_PSVitaID.RIGHT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(2,3,{ up : 21, down : 22, left : 23, right : 24});
flixel_input_gamepad_id_WiiRemoteID.REMOTE_ONE = 9;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_TWO = 10;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_A = 11;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_B = 12;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_PLUS = 13;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_MINUS = 14;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_HOME = 15;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_A = 9;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_B = 10;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_C = 11;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_Z = 12;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_ONE = 13;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_TWO = 14;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_PLUS = 15;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_MINUS = 16;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_HOME = 17;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_DPAD_UP = 5;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_DPAD_DOWN = 6;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_DPAD_LEFT = 7;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_DPAD_RIGHT = 8;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_A = 9;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_B = 10;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_Y = 11;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_X = 12;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_L = 13;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_R = 14;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_ZL = 15;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_ZR = 16;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_START = 17;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_SELECT = 18;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_HOME = 19;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_ONE = 20;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_TWO = 21;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_DPAD_UP = 5;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_DPAD_DOWN = 6;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_DPAD_LEFT = 7;
flixel_input_gamepad_id_WiiRemoteID.CLASSIC_DPAD_RIGHT = 8;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_TILT_PITCH = 2;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_TILT_ROLL = 3;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_TILT_PITCH = 3;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_TILT_ROLL = 2;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_NULL_AXIS = 4;
flixel_input_gamepad_id_WiiRemoteID.NUNCHUK_NULL_AXIS = 4;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_DPAD = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 22, down : 23, left : 24, right : 25, threshold : 0.5, mode : flixel_input_gamepad_FlxAnalogToDigitalMode.ONLY_DIGITAL});
flixel_input_gamepad_id_WiiRemoteID.LEFT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 28, down : 29, left : 30, right : 31});
flixel_input_gamepad_id_WiiRemoteID.RIGHT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(2,3,{ up : 32, down : 33, left : 34, right : 35});
flixel_input_gamepad_id_WiiRemoteID.LEFT_TRIGGER_FAKE = 4;
flixel_input_gamepad_id_WiiRemoteID.RIGHT_TRIGGER_FAKE = 5;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_DPAD_UP = 22;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_DPAD_DOWN = 23;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_DPAD_LEFT = 24;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_DPAD_RIGHT = 25;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_DPAD_X = 26;
flixel_input_gamepad_id_WiiRemoteID.REMOTE_DPAD_Y = 27;
flixel_input_gamepad_id_XInputID.A = 6;
flixel_input_gamepad_id_XInputID.B = 7;
flixel_input_gamepad_id_XInputID.X = 8;
flixel_input_gamepad_id_XInputID.Y = 9;
flixel_input_gamepad_id_XInputID.BACK = 10;
flixel_input_gamepad_id_XInputID.GUIDE = -1;
flixel_input_gamepad_id_XInputID.START = 12;
flixel_input_gamepad_id_XInputID.LEFT_STICK_CLICK = 13;
flixel_input_gamepad_id_XInputID.RIGHT_STICK_CLICK = 14;
flixel_input_gamepad_id_XInputID.LB = 15;
flixel_input_gamepad_id_XInputID.RB = 16;
flixel_input_gamepad_id_XInputID.DPAD_UP = 17;
flixel_input_gamepad_id_XInputID.DPAD_DOWN = 18;
flixel_input_gamepad_id_XInputID.DPAD_LEFT = 19;
flixel_input_gamepad_id_XInputID.DPAD_RIGHT = 20;
flixel_input_gamepad_id_XInputID.LEFT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(0,1,{ up : 21, down : 22, left : 23, right : 24});
flixel_input_gamepad_id_XInputID.RIGHT_ANALOG_STICK = new flixel_input_gamepad_FlxGamepadAnalogStick(2,3,{ up : 25, down : 26, left : 27, right : 28});
flixel_input_gamepad_id_XInputID.LEFT_TRIGGER = 4;
flixel_input_gamepad_id_XInputID.RIGHT_TRIGGER = 5;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.fromStringMap = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["ANY"] != null) {
		_g.setReserved("ANY",-2);
	} else {
		_g.h["ANY"] = -2;
	}
	if(__map_reserved["A"] != null) {
		_g.setReserved("A",65);
	} else {
		_g.h["A"] = 65;
	}
	if(__map_reserved["B"] != null) {
		_g.setReserved("B",66);
	} else {
		_g.h["B"] = 66;
	}
	if(__map_reserved["C"] != null) {
		_g.setReserved("C",67);
	} else {
		_g.h["C"] = 67;
	}
	if(__map_reserved["D"] != null) {
		_g.setReserved("D",68);
	} else {
		_g.h["D"] = 68;
	}
	if(__map_reserved["E"] != null) {
		_g.setReserved("E",69);
	} else {
		_g.h["E"] = 69;
	}
	if(__map_reserved["F"] != null) {
		_g.setReserved("F",70);
	} else {
		_g.h["F"] = 70;
	}
	if(__map_reserved["G"] != null) {
		_g.setReserved("G",71);
	} else {
		_g.h["G"] = 71;
	}
	if(__map_reserved["H"] != null) {
		_g.setReserved("H",72);
	} else {
		_g.h["H"] = 72;
	}
	if(__map_reserved["I"] != null) {
		_g.setReserved("I",73);
	} else {
		_g.h["I"] = 73;
	}
	if(__map_reserved["J"] != null) {
		_g.setReserved("J",74);
	} else {
		_g.h["J"] = 74;
	}
	if(__map_reserved["K"] != null) {
		_g.setReserved("K",75);
	} else {
		_g.h["K"] = 75;
	}
	if(__map_reserved["L"] != null) {
		_g.setReserved("L",76);
	} else {
		_g.h["L"] = 76;
	}
	if(__map_reserved["M"] != null) {
		_g.setReserved("M",77);
	} else {
		_g.h["M"] = 77;
	}
	if(__map_reserved["N"] != null) {
		_g.setReserved("N",78);
	} else {
		_g.h["N"] = 78;
	}
	if(__map_reserved["O"] != null) {
		_g.setReserved("O",79);
	} else {
		_g.h["O"] = 79;
	}
	if(__map_reserved["P"] != null) {
		_g.setReserved("P",80);
	} else {
		_g.h["P"] = 80;
	}
	if(__map_reserved["Q"] != null) {
		_g.setReserved("Q",81);
	} else {
		_g.h["Q"] = 81;
	}
	if(__map_reserved["R"] != null) {
		_g.setReserved("R",82);
	} else {
		_g.h["R"] = 82;
	}
	if(__map_reserved["S"] != null) {
		_g.setReserved("S",83);
	} else {
		_g.h["S"] = 83;
	}
	if(__map_reserved["T"] != null) {
		_g.setReserved("T",84);
	} else {
		_g.h["T"] = 84;
	}
	if(__map_reserved["U"] != null) {
		_g.setReserved("U",85);
	} else {
		_g.h["U"] = 85;
	}
	if(__map_reserved["V"] != null) {
		_g.setReserved("V",86);
	} else {
		_g.h["V"] = 86;
	}
	if(__map_reserved["W"] != null) {
		_g.setReserved("W",87);
	} else {
		_g.h["W"] = 87;
	}
	if(__map_reserved["X"] != null) {
		_g.setReserved("X",88);
	} else {
		_g.h["X"] = 88;
	}
	if(__map_reserved["Y"] != null) {
		_g.setReserved("Y",89);
	} else {
		_g.h["Y"] = 89;
	}
	if(__map_reserved["Z"] != null) {
		_g.setReserved("Z",90);
	} else {
		_g.h["Z"] = 90;
	}
	if(__map_reserved["ZERO"] != null) {
		_g.setReserved("ZERO",48);
	} else {
		_g.h["ZERO"] = 48;
	}
	if(__map_reserved["ONE"] != null) {
		_g.setReserved("ONE",49);
	} else {
		_g.h["ONE"] = 49;
	}
	if(__map_reserved["TWO"] != null) {
		_g.setReserved("TWO",50);
	} else {
		_g.h["TWO"] = 50;
	}
	if(__map_reserved["THREE"] != null) {
		_g.setReserved("THREE",51);
	} else {
		_g.h["THREE"] = 51;
	}
	if(__map_reserved["FOUR"] != null) {
		_g.setReserved("FOUR",52);
	} else {
		_g.h["FOUR"] = 52;
	}
	if(__map_reserved["FIVE"] != null) {
		_g.setReserved("FIVE",53);
	} else {
		_g.h["FIVE"] = 53;
	}
	if(__map_reserved["SIX"] != null) {
		_g.setReserved("SIX",54);
	} else {
		_g.h["SIX"] = 54;
	}
	if(__map_reserved["SEVEN"] != null) {
		_g.setReserved("SEVEN",55);
	} else {
		_g.h["SEVEN"] = 55;
	}
	if(__map_reserved["EIGHT"] != null) {
		_g.setReserved("EIGHT",56);
	} else {
		_g.h["EIGHT"] = 56;
	}
	if(__map_reserved["NINE"] != null) {
		_g.setReserved("NINE",57);
	} else {
		_g.h["NINE"] = 57;
	}
	if(__map_reserved["PAGEUP"] != null) {
		_g.setReserved("PAGEUP",33);
	} else {
		_g.h["PAGEUP"] = 33;
	}
	if(__map_reserved["PAGEDOWN"] != null) {
		_g.setReserved("PAGEDOWN",34);
	} else {
		_g.h["PAGEDOWN"] = 34;
	}
	if(__map_reserved["HOME"] != null) {
		_g.setReserved("HOME",36);
	} else {
		_g.h["HOME"] = 36;
	}
	if(__map_reserved["END"] != null) {
		_g.setReserved("END",35);
	} else {
		_g.h["END"] = 35;
	}
	if(__map_reserved["INSERT"] != null) {
		_g.setReserved("INSERT",45);
	} else {
		_g.h["INSERT"] = 45;
	}
	if(__map_reserved["ESCAPE"] != null) {
		_g.setReserved("ESCAPE",27);
	} else {
		_g.h["ESCAPE"] = 27;
	}
	if(__map_reserved["MINUS"] != null) {
		_g.setReserved("MINUS",189);
	} else {
		_g.h["MINUS"] = 189;
	}
	if(__map_reserved["PLUS"] != null) {
		_g.setReserved("PLUS",187);
	} else {
		_g.h["PLUS"] = 187;
	}
	if(__map_reserved["DELETE"] != null) {
		_g.setReserved("DELETE",46);
	} else {
		_g.h["DELETE"] = 46;
	}
	if(__map_reserved["BACKSPACE"] != null) {
		_g.setReserved("BACKSPACE",8);
	} else {
		_g.h["BACKSPACE"] = 8;
	}
	if(__map_reserved["LBRACKET"] != null) {
		_g.setReserved("LBRACKET",219);
	} else {
		_g.h["LBRACKET"] = 219;
	}
	if(__map_reserved["RBRACKET"] != null) {
		_g.setReserved("RBRACKET",221);
	} else {
		_g.h["RBRACKET"] = 221;
	}
	if(__map_reserved["BACKSLASH"] != null) {
		_g.setReserved("BACKSLASH",220);
	} else {
		_g.h["BACKSLASH"] = 220;
	}
	if(__map_reserved["CAPSLOCK"] != null) {
		_g.setReserved("CAPSLOCK",20);
	} else {
		_g.h["CAPSLOCK"] = 20;
	}
	if(__map_reserved["SEMICOLON"] != null) {
		_g.setReserved("SEMICOLON",186);
	} else {
		_g.h["SEMICOLON"] = 186;
	}
	if(__map_reserved["QUOTE"] != null) {
		_g.setReserved("QUOTE",222);
	} else {
		_g.h["QUOTE"] = 222;
	}
	if(__map_reserved["ENTER"] != null) {
		_g.setReserved("ENTER",13);
	} else {
		_g.h["ENTER"] = 13;
	}
	if(__map_reserved["SHIFT"] != null) {
		_g.setReserved("SHIFT",16);
	} else {
		_g.h["SHIFT"] = 16;
	}
	if(__map_reserved["COMMA"] != null) {
		_g.setReserved("COMMA",188);
	} else {
		_g.h["COMMA"] = 188;
	}
	if(__map_reserved["PERIOD"] != null) {
		_g.setReserved("PERIOD",190);
	} else {
		_g.h["PERIOD"] = 190;
	}
	if(__map_reserved["SLASH"] != null) {
		_g.setReserved("SLASH",191);
	} else {
		_g.h["SLASH"] = 191;
	}
	if(__map_reserved["GRAVEACCENT"] != null) {
		_g.setReserved("GRAVEACCENT",192);
	} else {
		_g.h["GRAVEACCENT"] = 192;
	}
	if(__map_reserved["CONTROL"] != null) {
		_g.setReserved("CONTROL",17);
	} else {
		_g.h["CONTROL"] = 17;
	}
	if(__map_reserved["ALT"] != null) {
		_g.setReserved("ALT",18);
	} else {
		_g.h["ALT"] = 18;
	}
	if(__map_reserved["SPACE"] != null) {
		_g.setReserved("SPACE",32);
	} else {
		_g.h["SPACE"] = 32;
	}
	if(__map_reserved["UP"] != null) {
		_g.setReserved("UP",38);
	} else {
		_g.h["UP"] = 38;
	}
	if(__map_reserved["DOWN"] != null) {
		_g.setReserved("DOWN",40);
	} else {
		_g.h["DOWN"] = 40;
	}
	if(__map_reserved["LEFT"] != null) {
		_g.setReserved("LEFT",37);
	} else {
		_g.h["LEFT"] = 37;
	}
	if(__map_reserved["RIGHT"] != null) {
		_g.setReserved("RIGHT",39);
	} else {
		_g.h["RIGHT"] = 39;
	}
	if(__map_reserved["TAB"] != null) {
		_g.setReserved("TAB",9);
	} else {
		_g.h["TAB"] = 9;
	}
	if(__map_reserved["PRINTSCREEN"] != null) {
		_g.setReserved("PRINTSCREEN",301);
	} else {
		_g.h["PRINTSCREEN"] = 301;
	}
	if(__map_reserved["F1"] != null) {
		_g.setReserved("F1",112);
	} else {
		_g.h["F1"] = 112;
	}
	if(__map_reserved["F2"] != null) {
		_g.setReserved("F2",113);
	} else {
		_g.h["F2"] = 113;
	}
	if(__map_reserved["F3"] != null) {
		_g.setReserved("F3",114);
	} else {
		_g.h["F3"] = 114;
	}
	if(__map_reserved["F4"] != null) {
		_g.setReserved("F4",115);
	} else {
		_g.h["F4"] = 115;
	}
	if(__map_reserved["F5"] != null) {
		_g.setReserved("F5",116);
	} else {
		_g.h["F5"] = 116;
	}
	if(__map_reserved["F6"] != null) {
		_g.setReserved("F6",117);
	} else {
		_g.h["F6"] = 117;
	}
	if(__map_reserved["F7"] != null) {
		_g.setReserved("F7",118);
	} else {
		_g.h["F7"] = 118;
	}
	if(__map_reserved["F8"] != null) {
		_g.setReserved("F8",119);
	} else {
		_g.h["F8"] = 119;
	}
	if(__map_reserved["F9"] != null) {
		_g.setReserved("F9",120);
	} else {
		_g.h["F9"] = 120;
	}
	if(__map_reserved["F10"] != null) {
		_g.setReserved("F10",121);
	} else {
		_g.h["F10"] = 121;
	}
	if(__map_reserved["F11"] != null) {
		_g.setReserved("F11",122);
	} else {
		_g.h["F11"] = 122;
	}
	if(__map_reserved["F12"] != null) {
		_g.setReserved("F12",123);
	} else {
		_g.h["F12"] = 123;
	}
	if(__map_reserved["NUMPADZERO"] != null) {
		_g.setReserved("NUMPADZERO",96);
	} else {
		_g.h["NUMPADZERO"] = 96;
	}
	if(__map_reserved["NUMPADONE"] != null) {
		_g.setReserved("NUMPADONE",97);
	} else {
		_g.h["NUMPADONE"] = 97;
	}
	if(__map_reserved["NUMPADTWO"] != null) {
		_g.setReserved("NUMPADTWO",98);
	} else {
		_g.h["NUMPADTWO"] = 98;
	}
	if(__map_reserved["NUMPADTHREE"] != null) {
		_g.setReserved("NUMPADTHREE",99);
	} else {
		_g.h["NUMPADTHREE"] = 99;
	}
	if(__map_reserved["NUMPADFOUR"] != null) {
		_g.setReserved("NUMPADFOUR",100);
	} else {
		_g.h["NUMPADFOUR"] = 100;
	}
	if(__map_reserved["NUMPADFIVE"] != null) {
		_g.setReserved("NUMPADFIVE",101);
	} else {
		_g.h["NUMPADFIVE"] = 101;
	}
	if(__map_reserved["NUMPADSIX"] != null) {
		_g.setReserved("NUMPADSIX",102);
	} else {
		_g.h["NUMPADSIX"] = 102;
	}
	if(__map_reserved["NUMPADSEVEN"] != null) {
		_g.setReserved("NUMPADSEVEN",103);
	} else {
		_g.h["NUMPADSEVEN"] = 103;
	}
	if(__map_reserved["NUMPADEIGHT"] != null) {
		_g.setReserved("NUMPADEIGHT",104);
	} else {
		_g.h["NUMPADEIGHT"] = 104;
	}
	if(__map_reserved["NUMPADNINE"] != null) {
		_g.setReserved("NUMPADNINE",105);
	} else {
		_g.h["NUMPADNINE"] = 105;
	}
	if(__map_reserved["NUMPADMINUS"] != null) {
		_g.setReserved("NUMPADMINUS",109);
	} else {
		_g.h["NUMPADMINUS"] = 109;
	}
	if(__map_reserved["NUMPADPLUS"] != null) {
		_g.setReserved("NUMPADPLUS",107);
	} else {
		_g.h["NUMPADPLUS"] = 107;
	}
	if(__map_reserved["NUMPADPERIOD"] != null) {
		_g.setReserved("NUMPADPERIOD",110);
	} else {
		_g.h["NUMPADPERIOD"] = 110;
	}
	if(__map_reserved["NUMPADMULTIPLY"] != null) {
		_g.setReserved("NUMPADMULTIPLY",106);
	} else {
		_g.h["NUMPADMULTIPLY"] = 106;
	}
	$r = _g;
	return $r;
}(this));
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.toStringMap = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[-2] = "ANY";
	_g.h[65] = "A";
	_g.h[66] = "B";
	_g.h[67] = "C";
	_g.h[68] = "D";
	_g.h[69] = "E";
	_g.h[70] = "F";
	_g.h[71] = "G";
	_g.h[72] = "H";
	_g.h[73] = "I";
	_g.h[74] = "J";
	_g.h[75] = "K";
	_g.h[76] = "L";
	_g.h[77] = "M";
	_g.h[78] = "N";
	_g.h[79] = "O";
	_g.h[80] = "P";
	_g.h[81] = "Q";
	_g.h[82] = "R";
	_g.h[83] = "S";
	_g.h[84] = "T";
	_g.h[85] = "U";
	_g.h[86] = "V";
	_g.h[87] = "W";
	_g.h[88] = "X";
	_g.h[89] = "Y";
	_g.h[90] = "Z";
	_g.h[48] = "ZERO";
	_g.h[49] = "ONE";
	_g.h[50] = "TWO";
	_g.h[51] = "THREE";
	_g.h[52] = "FOUR";
	_g.h[53] = "FIVE";
	_g.h[54] = "SIX";
	_g.h[55] = "SEVEN";
	_g.h[56] = "EIGHT";
	_g.h[57] = "NINE";
	_g.h[33] = "PAGEUP";
	_g.h[34] = "PAGEDOWN";
	_g.h[36] = "HOME";
	_g.h[35] = "END";
	_g.h[45] = "INSERT";
	_g.h[27] = "ESCAPE";
	_g.h[189] = "MINUS";
	_g.h[187] = "PLUS";
	_g.h[46] = "DELETE";
	_g.h[8] = "BACKSPACE";
	_g.h[219] = "LBRACKET";
	_g.h[221] = "RBRACKET";
	_g.h[220] = "BACKSLASH";
	_g.h[20] = "CAPSLOCK";
	_g.h[186] = "SEMICOLON";
	_g.h[222] = "QUOTE";
	_g.h[13] = "ENTER";
	_g.h[16] = "SHIFT";
	_g.h[188] = "COMMA";
	_g.h[190] = "PERIOD";
	_g.h[191] = "SLASH";
	_g.h[192] = "GRAVEACCENT";
	_g.h[17] = "CONTROL";
	_g.h[18] = "ALT";
	_g.h[32] = "SPACE";
	_g.h[38] = "UP";
	_g.h[40] = "DOWN";
	_g.h[37] = "LEFT";
	_g.h[39] = "RIGHT";
	_g.h[9] = "TAB";
	_g.h[301] = "PRINTSCREEN";
	_g.h[112] = "F1";
	_g.h[113] = "F2";
	_g.h[114] = "F3";
	_g.h[115] = "F4";
	_g.h[116] = "F5";
	_g.h[117] = "F6";
	_g.h[118] = "F7";
	_g.h[119] = "F8";
	_g.h[120] = "F9";
	_g.h[121] = "F10";
	_g.h[122] = "F11";
	_g.h[123] = "F12";
	_g.h[96] = "NUMPADZERO";
	_g.h[97] = "NUMPADONE";
	_g.h[98] = "NUMPADTWO";
	_g.h[99] = "NUMPADTHREE";
	_g.h[100] = "NUMPADFOUR";
	_g.h[101] = "NUMPADFIVE";
	_g.h[102] = "NUMPADSIX";
	_g.h[103] = "NUMPADSEVEN";
	_g.h[104] = "NUMPADEIGHT";
	_g.h[105] = "NUMPADNINE";
	_g.h[109] = "NUMPADMINUS";
	_g.h[107] = "NUMPADPLUS";
	_g.h[110] = "NUMPADPERIOD";
	_g.h[106] = "NUMPADMULTIPLY";
	$r = _g;
	return $r;
}(this));
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.ANY = -2;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NONE = -1;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.A = 65;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.B = 66;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.C = 67;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.D = 68;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.E = 69;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F = 70;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.G = 71;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.H = 72;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.I = 73;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.J = 74;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.K = 75;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.L = 76;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.M = 77;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.N = 78;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.O = 79;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.P = 80;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.Q = 81;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.R = 82;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.S = 83;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.T = 84;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.U = 85;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.V = 86;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.W = 87;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.X = 88;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.Y = 89;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.Z = 90;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.ZERO = 48;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.ONE = 49;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.TWO = 50;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.THREE = 51;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.FOUR = 52;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.FIVE = 53;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.SIX = 54;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.SEVEN = 55;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.EIGHT = 56;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NINE = 57;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.PAGEUP = 33;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.PAGEDOWN = 34;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.HOME = 36;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.END = 35;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.INSERT = 45;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.ESCAPE = 27;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.MINUS = 189;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.PLUS = 187;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.DELETE = 46;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.BACKSPACE = 8;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.LBRACKET = 219;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.RBRACKET = 221;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.BACKSLASH = 220;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.CAPSLOCK = 20;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.SEMICOLON = 186;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.QUOTE = 222;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.ENTER = 13;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.SHIFT = 16;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.COMMA = 188;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.PERIOD = 190;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.SLASH = 191;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.GRAVEACCENT = 192;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.CONTROL = 17;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.ALT = 18;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.SPACE = 32;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.UP = 38;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.DOWN = 40;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.LEFT = 37;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.RIGHT = 39;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.TAB = 9;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.PRINTSCREEN = 301;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F1 = 112;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F2 = 113;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F3 = 114;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F4 = 115;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F5 = 116;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F6 = 117;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F7 = 118;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F8 = 119;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F9 = 120;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F10 = 121;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F11 = 122;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.F12 = 123;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADZERO = 96;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADONE = 97;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADTWO = 98;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADTHREE = 99;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADFOUR = 100;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADFIVE = 101;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADSIX = 102;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADSEVEN = 103;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADEIGHT = 104;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADNINE = 105;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADMINUS = 109;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADPLUS = 107;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADPERIOD = 110;
flixel_input_keyboard__$FlxKey_FlxKey_$Impl_$.NUMPADMULTIPLY = 106;
openfl_display_BitmapData.__isGLES = null;
flixel_input_mouse__$FlxMouse_GraphicCursor.resourceType = "image/png";
flixel_input_mouse__$FlxMouse_GraphicCursor.resourceName = "__ASSET__:bitmap_flixel_input_mouse__FlxMouse_GraphicCursor";
flixel_input_mouse_FlxMouseEventManager._registeredObjects = [];
flixel_input_mouse_FlxMouseEventManager._mouseOverObjects = [];
flixel_input_mouse_FlxMouseEventManager._point = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
flixel_input_touch_FlxTouchManager.maxTouchPoints = 0;
flixel_math_FlxMath.MIN_VALUE_FLOAT = 0.0000000000000001;
flixel_math_FlxMath.MAX_VALUE_FLOAT = 1.79e+308;
flixel_math_FlxMath.MIN_VALUE_INT = -2147483647;
flixel_math_FlxMath.MAX_VALUE_INT = 2147483647;
flixel_math_FlxMath.SQUARE_ROOT_OF_TWO = 1.41421356237;
flixel_math_FlxMath.EPSILON = 0.0000001;
flixel_math_FlxVector.EPSILON = 0.0000001;
flixel_math_FlxVector.EPSILON_SQUARED = 9.99999999999999841e-15;
flixel_math_FlxVector._pool = new flixel_util_FlxPool_$flixel_$math_$FlxVector(flixel_math_FlxVector);
flixel_math_FlxVector._vector1 = new flixel_math_FlxVector();
flixel_math_FlxVector._vector2 = new flixel_math_FlxVector();
flixel_math_FlxVector._vector3 = new flixel_math_FlxVector();
flixel_system_GraphicLogo.resourceType = "image/png";
flixel_system_GraphicLogo.resourceName = "__ASSET__:bitmap_flixel_system_GraphicLogo";
flixel_system_GraphicVirtualInput.resourceType = "image/png";
flixel_system_GraphicVirtualInput.resourceName = "__ASSET__:bitmap_flixel_system_GraphicVirtualInput";
flixel_system_VirtualInputData.resourceName = "__ASSET__:file_flixel_system_VirtualInputData";
flixel_system_FlxAssets.FONT_DEFAULT = "Nokia Cellphone FC Small";
flixel_system_FlxAssets.FONT_DEBUGGER = "Monsterrat";
flixel_system_FlxBasePreloader.LOCAL = "localhost";
flixel_system_FlxLinkedList._NUM_CACHED_FLX_LIST = 0;
flixel_system__$FlxPreloader_GraphicLogoLight.resourceType = "image/png";
flixel_system__$FlxPreloader_GraphicLogoLight.resourceName = "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoLight";
flixel_system__$FlxPreloader_GraphicLogoCorners.resourceType = "image/png";
flixel_system__$FlxPreloader_GraphicLogoCorners.resourceName = "__ASSET__:bitmap_flixel_system__FlxPreloader_GraphicLogoCorners";
flixel_system_FlxQuadTree.A_LIST = 0;
flixel_system_FlxQuadTree.B_LIST = 1;
flixel_system_FlxQuadTree._NUM_CACHED_QUAD_TREES = 0;
flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceType = "image/png";
flixel_system_debug__$FlxDebugger_GraphicFlixel.resourceName = "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicFlixel";
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceType = "image/png";
flixel_system_debug__$FlxDebugger_GraphicDrawDebug.resourceName = "__ASSET__:bitmap_flixel_system_debug__FlxDebugger_GraphicDrawDebug";
flixel_system_debug_GraphicLog.resourceType = "image/png";
flixel_system_debug_GraphicLog.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicLog";
flixel_system_debug_GraphicStats.resourceType = "image/png";
flixel_system_debug_GraphicStats.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicStats";
flixel_system_debug_GraphicWatch.resourceType = "image/png";
flixel_system_debug_GraphicWatch.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicWatch";
flixel_system_debug_GraphicBitmapLog.resourceType = "image/png";
flixel_system_debug_GraphicBitmapLog.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicBitmapLog";
flixel_system_debug_GraphicConsole.resourceType = "image/png";
flixel_system_debug_GraphicConsole.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicConsole";
flixel_system_debug_GraphicArrowLeft.resourceType = "image/png";
flixel_system_debug_GraphicArrowLeft.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicArrowLeft";
flixel_system_debug_GraphicArrowRight.resourceType = "image/png";
flixel_system_debug_GraphicArrowRight.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicArrowRight";
flixel_system_debug_GraphicCloseButton.resourceType = "image/png";
flixel_system_debug_GraphicCloseButton.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicCloseButton";
flixel_system_debug_GraphicInteractive.resourceType = "image/png";
flixel_system_debug_GraphicInteractive.resourceName = "__ASSET__:bitmap_flixel_system_debug_GraphicInteractive";
flixel_system_debug_FlxDebugger.GUTTER = 2;
flixel_system_debug_FlxDebugger.TOP_HEIGHT = 20;
flixel_system_debug_Tooltip._tooltips = [];
flixel_system_debug_TooltipOverlay.BG_COLOR = -12961222;
flixel_system_debug_TooltipOverlay.TEXT_ALPHA = 0.8;
flixel_system_debug_TooltipOverlay.MARGIN_X = 10;
flixel_system_debug_TooltipOverlay.MARGIN_Y = 10;
flixel_system_debug__$VCR_GraphicOpen.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicOpen.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicOpen";
flixel_system_debug__$VCR_GraphicPause.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicPause.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicPause";
flixel_system_debug__$VCR_GraphicRecordOff.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicRecordOff.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRecordOff";
flixel_system_debug__$VCR_GraphicRecordOn.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicRecordOn.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRecordOn";
flixel_system_debug__$VCR_GraphicRestart.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicRestart.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicRestart";
flixel_system_debug__$VCR_GraphicStep.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicStep.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicStep";
flixel_system_debug__$VCR_GraphicStop.resourceType = "image/png";
flixel_system_debug__$VCR_GraphicStop.resourceName = "__ASSET__:bitmap_flixel_system_debug__VCR_GraphicStop";
flixel_system_debug__$Window_GraphicWindowHandle.resourceType = "image/png";
flixel_system_debug__$Window_GraphicWindowHandle.resourceName = "__ASSET__:bitmap_flixel_system_debug__Window_GraphicWindowHandle";
flixel_system_debug_Window.BG_COLOR = -580952225;
flixel_system_debug_Window.HEADER_COLOR = -1157627904;
flixel_system_debug_Window.HEADER_ALPHA = 0.8;
flixel_system_debug_Window.HEADER_HEIGHT = 15;
flixel_system_debug_Window.WINDOW_AMOUNT = 0;
flixel_system_debug_completion_CompletionListEntry.WIDTH = 150;
flixel_system_debug_completion_CompletionListEntry.HEIGHT = 20;
flixel_system_debug_completion_CompletionListEntry.COLOR_NORMAL = -10526881;
flixel_system_debug_completion_CompletionListEntry.COLOR_HIGHLIGHT = -9605779;
flixel_system_debug_completion_CompletionListEntry.GUTTER = 4;
flixel_system_debug_completion_CompletionListScrollBar.BG_COLOR = -12303292;
flixel_system_debug_completion_CompletionListScrollBar.HANDLE_COLOR = -14540254;
flixel_system_debug_console_Console.DEFAULT_TEXT = "(Click here / press [Tab] to enter command. Type 'help' for help.)";
flixel_system_debug_console_ConsoleHistory.MAX_LENGTH = 50;
flixel_system_debug_interaction_tools_GraphicEraserTool.resourceType = "image/png";
flixel_system_debug_interaction_tools_GraphicEraserTool.resourceName = "__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicEraserTool";
flixel_system_debug_interaction_tools_GraphicMoverTool.resourceType = "image/png";
flixel_system_debug_interaction_tools_GraphicMoverTool.resourceName = "__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicMoverTool";
flixel_system_debug_interaction_tools_GraphicCursorCross.resourceType = "image/png";
flixel_system_debug_interaction_tools_GraphicCursorCross.resourceName = "__ASSET__:bitmap_flixel_system_debug_interaction_tools_GraphicCursorCross";
flixel_system_debug_log_Log.MAX_LOG_LINES = 200;
flixel_system_debug_log_Log.LINE_BREAK = "\n";
flixel_system_debug_log_LogStyle.NORMAL = new flixel_system_debug_log_LogStyle();
flixel_system_debug_log_LogStyle.WARNING = new flixel_system_debug_log_LogStyle("[WARNING] ","D9F85C",12,false,false,false,"flixel/sounds/beep",true);
flixel_system_debug_log_LogStyle.ERROR = new flixel_system_debug_log_LogStyle("[ERROR] ","FF8888",12,false,false,false,"flixel/sounds/beep",true);
flixel_system_debug_log_LogStyle.NOTICE = new flixel_system_debug_log_LogStyle("[NOTICE] ","5CF878",12,false);
flixel_system_debug_log_LogStyle.CONSOLE = new flixel_system_debug_log_LogStyle("&#62; ","5A96FA",12,false);
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceType = "image/png";
flixel_system_debug_stats__$Stats_GraphicMinimizeButton.resourceName = "__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMinimizeButton";
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceType = "image/png";
flixel_system_debug_stats__$Stats_GraphicMaximizeButton.resourceName = "__ASSET__:bitmap_flixel_system_debug_stats__Stats_GraphicMaximizeButton";
flixel_system_debug_stats_Stats.UPDATE_DELAY = 250;
flixel_system_debug_stats_Stats.INITIAL_WIDTH = 160;
flixel_system_debug_stats_Stats.MIN_HEIGHT = 0;
flixel_system_debug_stats_Stats.FPS_COLOR = -6881536;
flixel_system_debug_stats_Stats.MEMORY_COLOR = -16737025;
flixel_system_debug_stats_Stats.DRAW_TIME_COLOR = -5898236;
flixel_system_debug_stats_Stats.UPDATE_TIME_COLOR = -2305024;
flixel_system_debug_stats_Stats.LABEL_COLOR = -1426063361;
flixel_system_debug_stats_Stats.TEXT_SIZE = 11;
flixel_system_debug_stats_Stats.DECIMALS = 1;
flixel_system_debug_stats_StatsGraph.AXIS_COLOR = 16777215;
flixel_system_debug_stats_StatsGraph.AXIS_ALPHA = 0.5;
flixel_system_debug_stats_StatsGraph.HISTORY_MAX = 30;
flixel_system_debug_watch_Watch.LINE_HEIGHT = 15;
flixel_system_debug_watch_Tracker.objectsBeingTracked = [];
flixel_system_debug_watch_Tracker._numTrackerWindows = 0;
flixel_system_debug_watch_WatchEntry.GUTTER = 4;
flixel_system_debug_watch_WatchEntry.TEXT_HEIGHT = 20;
flixel_system_debug_watch_WatchEntry.MAX_NAME_WIDTH = 125;
flixel_text_FlxText.VERTICAL_GUTTER = 4;
flixel_text__$FlxText_FlxTextAlign_$Impl_$.LEFT = "left";
flixel_text__$FlxText_FlxTextAlign_$Impl_$.CENTER = "center";
flixel_text__$FlxText_FlxTextAlign_$Impl_$.RIGHT = "right";
flixel_text__$FlxText_FlxTextAlign_$Impl_$.JUSTIFY = "justify";
flixel_tile_GraphicAuto.resourceType = "image/png";
flixel_tile_GraphicAuto.resourceName = "__ASSET__:bitmap_flixel_tile_GraphicAuto";
flixel_tile_GraphicAutoAlt.resourceType = "image/png";
flixel_tile_GraphicAutoAlt.resourceName = "__ASSET__:bitmap_flixel_tile_GraphicAutoAlt";
flixel_tile_FlxTilemap._helperBuffer = Type.createEmptyInstance(flixel_tile_FlxTilemapBuffer);
flixel_tweens_FlxEase.PI2 = Math.PI / 2;
flixel_tweens_FlxEase.EL = 2 * Math.PI / .45;
flixel_tweens_FlxEase.B1 = 0.363636363636363646;
flixel_tweens_FlxEase.B2 = 0.727272727272727293;
flixel_tweens_FlxEase.B3 = 0.545454545454545414;
flixel_tweens_FlxEase.B4 = 0.909090909090909061;
flixel_tweens_FlxEase.B5 = 0.818181818181818232;
flixel_tweens_FlxEase.B6 = 0.954545454545454586;
flixel_tweens_FlxEase.ELASTIC_AMPLITUDE = 1;
flixel_tweens_FlxEase.ELASTIC_PERIOD = 0.4;
flixel_tweens_FlxTween.PERSIST = 1;
flixel_tweens_FlxTween.LOOPING = 2;
flixel_tweens_FlxTween.PINGPONG = 4;
flixel_tweens_FlxTween.ONESHOT = 8;
flixel_tweens_FlxTween.BACKWARD = 16;
flixel_ui_FlxButton.NORMAL = 0;
flixel_ui_FlxButton.HIGHLIGHT = 1;
flixel_ui_FlxButton.PRESSED = 2;
flixel_util_FlxBitmapDataPool.maxLength = 8;
flixel_util_FlxBitmapDataPool.$length = 0;
flixel_util_FlxBitmapDataPool._head = null;
flixel_util_FlxBitmapDataPool._tail = null;
flixel_util_FlxBitmapDataPool._rect = new openfl_geom_Rectangle();
flixel_util_FlxBitmapDataUtil.matrix = new flixel_math_FlxMatrix();
flixel_util_FlxCollision.pointA = new flixel_math_FlxVector();
flixel_util_FlxCollision.pointB = new flixel_math_FlxVector();
flixel_util_FlxCollision.centerA = new flixel_math_FlxVector();
flixel_util_FlxCollision.centerB = new flixel_math_FlxVector();
flixel_util_FlxCollision.matrixA = new flixel_math_FlxMatrix();
flixel_util_FlxCollision.matrixB = new flixel_math_FlxMatrix();
flixel_util_FlxCollision.testMatrix = new flixel_math_FlxMatrix();
flixel_util_FlxCollision.boundsA = new flixel_math_FlxRect();
flixel_util_FlxCollision.boundsB = new flixel_math_FlxRect();
flixel_util_FlxCollision.intersect = new flixel_math_FlxRect();
flixel_util_FlxCollision.flashRect = new openfl_geom_Rectangle();
flixel_util__$FlxColor_FlxColor_$Impl_$.TRANSPARENT = 0;
flixel_util__$FlxColor_FlxColor_$Impl_$.WHITE = -1;
flixel_util__$FlxColor_FlxColor_$Impl_$.GRAY = -8355712;
flixel_util__$FlxColor_FlxColor_$Impl_$.BLACK = -16777216;
flixel_util__$FlxColor_FlxColor_$Impl_$.GREEN = -16744448;
flixel_util__$FlxColor_FlxColor_$Impl_$.LIME = -16711936;
flixel_util__$FlxColor_FlxColor_$Impl_$.YELLOW = -256;
flixel_util__$FlxColor_FlxColor_$Impl_$.ORANGE = -23296;
flixel_util__$FlxColor_FlxColor_$Impl_$.RED = -65536;
flixel_util__$FlxColor_FlxColor_$Impl_$.PURPLE = -8388480;
flixel_util__$FlxColor_FlxColor_$Impl_$.BLUE = -16776961;
flixel_util__$FlxColor_FlxColor_$Impl_$.BROWN = -7650029;
flixel_util__$FlxColor_FlxColor_$Impl_$.PINK = -16181;
flixel_util__$FlxColor_FlxColor_$Impl_$.MAGENTA = -65281;
flixel_util__$FlxColor_FlxColor_$Impl_$.CYAN = -16711681;
flixel_util__$FlxColor_FlxColor_$Impl_$.colorLookup = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["TRANSPARENT"] != null) {
		_g.setReserved("TRANSPARENT",0);
	} else {
		_g.h["TRANSPARENT"] = 0;
	}
	if(__map_reserved["WHITE"] != null) {
		_g.setReserved("WHITE",-1);
	} else {
		_g.h["WHITE"] = -1;
	}
	if(__map_reserved["GRAY"] != null) {
		_g.setReserved("GRAY",-8355712);
	} else {
		_g.h["GRAY"] = -8355712;
	}
	if(__map_reserved["BLACK"] != null) {
		_g.setReserved("BLACK",-16777216);
	} else {
		_g.h["BLACK"] = -16777216;
	}
	if(__map_reserved["GREEN"] != null) {
		_g.setReserved("GREEN",-16744448);
	} else {
		_g.h["GREEN"] = -16744448;
	}
	if(__map_reserved["LIME"] != null) {
		_g.setReserved("LIME",-16711936);
	} else {
		_g.h["LIME"] = -16711936;
	}
	if(__map_reserved["YELLOW"] != null) {
		_g.setReserved("YELLOW",-256);
	} else {
		_g.h["YELLOW"] = -256;
	}
	if(__map_reserved["ORANGE"] != null) {
		_g.setReserved("ORANGE",-23296);
	} else {
		_g.h["ORANGE"] = -23296;
	}
	if(__map_reserved["RED"] != null) {
		_g.setReserved("RED",-65536);
	} else {
		_g.h["RED"] = -65536;
	}
	if(__map_reserved["PURPLE"] != null) {
		_g.setReserved("PURPLE",-8388480);
	} else {
		_g.h["PURPLE"] = -8388480;
	}
	if(__map_reserved["BLUE"] != null) {
		_g.setReserved("BLUE",-16776961);
	} else {
		_g.h["BLUE"] = -16776961;
	}
	if(__map_reserved["BROWN"] != null) {
		_g.setReserved("BROWN",-7650029);
	} else {
		_g.h["BROWN"] = -7650029;
	}
	if(__map_reserved["PINK"] != null) {
		_g.setReserved("PINK",-16181);
	} else {
		_g.h["PINK"] = -16181;
	}
	if(__map_reserved["MAGENTA"] != null) {
		_g.setReserved("MAGENTA",-65281);
	} else {
		_g.h["MAGENTA"] = -65281;
	}
	if(__map_reserved["CYAN"] != null) {
		_g.setReserved("CYAN",-16711681);
	} else {
		_g.h["CYAN"] = -16711681;
	}
	$r = _g;
	return $r;
}(this));
flixel_util__$FlxColor_FlxColor_$Impl_$.COLOR_REGEX = new EReg("^(0x|#)(([A-F0-9]{2}){3,4})$","i");
flixel_util_FlxPath.FORWARD = 0;
flixel_util_FlxPath.BACKWARD = 1;
flixel_util_FlxPath.LOOP_FORWARD = 16;
flixel_util_FlxPath.LOOP_BACKWARD = 256;
flixel_util_FlxPath.YOYO = 4096;
flixel_util_FlxPath.HORIZONTAL_ONLY = 65536;
flixel_util_FlxPath.VERTICAL_ONLY = 1048576;
flixel_util_FlxPath._point = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
flixel_util_FlxSort.ASCENDING = -1;
flixel_util_FlxSort.DESCENDING = 1;
flixel_util_FlxSpriteUtil.flashGfxSprite = new openfl_display_Sprite();
flixel_util_FlxSpriteUtil.flashGfx = flixel_util_FlxSpriteUtil.flashGfxSprite.get_graphics();
flixel_util_LabelValuePair._pool = new flixel_util_FlxPool_$flixel_$util_$LabelValuePair(flixel_util_LabelValuePair);
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Serializer.BASE64_CODES = null;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = new haxe__$Int64__$_$_$Int64(0,0);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.onChange = new lime_app_Event_$Void_$Void();
lime_Assets.initialized = false;
lime__$backend_html5_HTML5Window.windowID = 0;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_Lib.current = new openfl_display_MovieClip();
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
states_AboutState.BLOCK_FONT_SIZE = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(16,32);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
states_AboutState.BLOCK_FONT_SPACING = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(2,0);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
states_AboutState.TEXT_FONT_SIZE = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(10,9);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
states_AboutState.TEXT_FONT_SPACING = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
states_AboutState.NUM_STARS = 100;
states_CommonState.BLOCK_FONT_SIZE = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(16,32);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
states_CommonState.BLOCK_FONT_SPACING = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(2,0);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
states_CommonState.TEXT_FONT_SIZE = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(10,9);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
states_CommonState.TEXT_FONT_SPACING = (function($this) {
	var $r;
	var point = flixel_math_FlxPoint._pool.get().set(0,0);
	point._inPool = false;
	$r = point;
	return $r;
}(this));
states_PlayState._handTweenOptions = { type : 4, ease : flixel_tweens_FlxEase.quadOut};
states_PlayState.BadClickEmotes = ["sad","confused","angry"];
states_PlayState.BadClickEmoteWeights = [3.0,2.0,1.0];
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=Rosie.js.map